<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>特性介绍 | MySQL 测试框架 MTR 系列教程（二）：进阶篇</title>
      <link href="/2023/05/01/mysql-mtr-02-advanced/"/>
      <url>/2023/05/01/mysql-mtr-02-advanced/</url>
      
        <content type="html"><![CDATA[<p><strong>作者：卢文双 资深数据库内核研发</strong></p><p><strong>序言：</strong></p><p>以前对 MySQL 测试框架 MTR 的使用，主要集中于 SQL 正确性验证。近期由于工作需要，深入了解了 MTR 的方方面面，发现 MTR 的能力不仅限于此，还支持单元测试、压力测试、代码覆盖率测试、内存错误检测、线程竞争与死锁等功能，因此，本着分享的精神，将其总结成一个系列。</p><p>主要内容如下：</p><ul><li>入门篇：工作机制、编译安装、参数、指令示例、推荐用法、添加 case、常见问题、异常调试</li><li>进阶篇：高阶用法，包括单元测试、压力测试、代码覆盖率测试、内存错误检测、线程竞争与死锁</li><li>源码篇：分析 MTR 的源码</li><li>语法篇：单元测试、压力测试、mysqltest 语法、异常调试</li></ul><p>由于个人水平有限，所述难免有错误之处，望雅正。</p><p><strong>本文是第二篇进阶篇</strong>。</p><span id="more"></span><blockquote><p><strong>本文首发于 2023-05-01 21:03:44</strong></p></blockquote><hr><p>MTR 系列基于 MySQL 8.0.29 版本（编译情况也在 8.0.32 版本验证过），且主要在 Ubuntu 22.04 X86_64 验证（部分指令也在 Ubuntu 20.04 X86_64、Ubuntu 22.04 ARM64、MacOS M1 做了验证），如有例外，会特别说明。</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上一篇文章《MySQL 测试框架 MTR 系列教程（一）：入门篇》介绍了 mtr 的原理、目录结构、参数及常见用法，侧重于<strong>最常见的 SQL 正确性验证</strong>，但 mtr 能做更多的事情，比如 <strong>内存错误、线程竞争、代码覆盖率、压力测试等</strong>，本文主要介绍这些内容，涉及的相关工具如下：</p><ul><li>valgrind ：用于内存调试、内存泄漏检测以及性能分析。</li><li>Sanitizier ：谷歌发起的开源工具集。<ul><li>ASAN/AddressSanitizier ：检查内存地址相关问题，包括内存泄漏、释放后使用、重复释放、堆溢出、栈溢出等等问题。</li><li>LSAN/LeakSanitizer ：检查内存泄漏问题。它是集成在 Address Sanitizer 中的一个相对独立的工具，它工作在检查过程的最后阶段。</li><li>MSAN/MemorySanitizer ： 检查使用未初始化内存的问题。</li><li>TSAN/ThreadSanitizer ： 检查线程数据竞争和死锁问题。</li><li>UBSAN/UndefinedBehaviorSanitizer ： 检测未定义行为（使用空指针、有符号整数溢出等）。</li></ul></li><li>gcov ： 代码覆盖率测试。</li><li>gprof ： 性能分析工具。</li><li>单元测试</li><li>压力测试</li></ul><p>本文将逐一介绍对各个工具的支持情况。</p><p><strong>补充：</strong></p><p>MariaDB 已经很好的支持了以上工具集：</p><p><a href="https://mariadb.com/kb/en/compile-and-using-mariadb-with-sanitizers-asan-ubsan-tsan-msan/" title="Compile and Using MariaDB with Sanitizers (ASAN, UBSAN, TSAN, MSAN) - MariaDB Knowledge Base">Compile and Using MariaDB with Sanitizers (ASAN, UBSAN, TSAN, MSAN) - MariaDB Knowledge Base</a></p><p><a href="https://mariadb.com/kb/en/compiling-mariadb-for-debugging/" title="Compiling MariaDB for Debugging - MariaDB Knowledge Base">Compiling MariaDB for Debugging - MariaDB Knowledge Base</a> （支持 valgrind）</p><h1 id="MySQL-编译选项"><a href="#MySQL-编译选项" class="headerlink" title="MySQL 编译选项"></a>MySQL 编译选项</h1><p>首先说明一下与本文相关的 MySQL 编译选项：</p><ul><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_cmake_build_type" title="-DCMAKE_BUILD_TYPE=type">-DCMAKE_BUILD_TYPE=type</a></p><p>The type of build to produce:</p><ul><li><code>RelWithDebInfo</code>: <strong>default value</strong>。<strong>Enable optimizations and generate debugging information</strong>. This is the default MySQL build type.</li><li><code>Release</code>: Enable optimizations but omit debugging information to reduce the build size. <strong>This build type was added in MySQL 8.0.13</strong> (MySQL 5.7 is not supported).</li><li><code>Debug</code>: Disable optimizations and generate debugging information. This build type is also used if the <a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_debug" title="WITH_DEBUG">WITH_DEBUG</a> option is enabled. That is, <a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_debug" title="-DWITH_DEBUG=1">-DWITH_DEBUG=1</a> has the same effect as <a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_cmake_build_type" title="-DCMAKE_BUILD_TYPE=Debug">-DCMAKE_BUILD_TYPE=Debug</a>.</li></ul></li></ul><ul><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_debug" title="-DWITH_DEBUG=bool">-DWITH_DEBUG=bool</a></p><p>Whether to include debugging support. <strong>The default is<code>OFF</code></strong>.</p></li><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_asan" title="-DWITH_ASAN=bool">-DWITH_ASAN=bool</a></p><p>Whether to enable the AddressSanitizer, for compilers that support it. <strong>The default is off</strong>.</p></li><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_asan_scope" title="-DWITH_ASAN_SCOPE=bool">-DWITH_ASAN_SCOPE=bool</a></p><p>Whether to enable the AddressSanitizer <code>-fsanitize-address-use-after-scope</code> Clang flag for <strong>use-after-scope</strong> detection. <strong>The default is off</strong>. To use this option, <code>-DWITH_ASAN</code> must also be enabled.</p></li><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_lsan" title="-DWITH_LSAN=bool">-DWITH_LSAN=bool</a></p><p>Whether to run LeakSanitizer, without AddressSanitizer. <strong>The default is<code>OFF</code></strong>.</p><p>This option was added in MySQL 8.0.16.</p></li><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_msan" title="-DWITH_MSAN=bool">-DWITH_MSAN=bool</a></p><p>Whether to enable MemorySanitizer, for compilers that support it. <strong>The default is off</strong>.</p><p>For this option to have an effect if enabled, all libraries linked to MySQL must also have been compiled with the option enabled.</p></li><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_tsan" title="-DWITH_TSAN=bool">-DWITH_TSAN=bool</a></p><p>Whether to enable the ThreadSanitizer, for compilers that support it. <strong>The default is off</strong>.</p></li><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_ubsan" title="-DWITH_UBSAN=bool">-DWITH_UBSAN=bool</a></p><p>Whether to enable the Undefined Behavior Sanitizer, for compilers that support it. <strong>The default is off</strong>.</p></li><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_unit_tests" title="-DWITH_UNIT_TESTS={ON|OFF}">-DWITH_UNIT_TESTS={ON|OFF}</a></p><p>If enabled, compile MySQL with unit tests. <strong>The default is ON</strong> unless the server is not being compiled.</p></li><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_valgrind" title="-DWITH_VALGRIND=bool">-DWITH_VALGRIND=bool</a></p><p>Whether to compile in the Valgrind header files, which exposes the Valgrind API to MySQL code. <strong>The default is<code>OFF</code></strong>.</p><p>To generate a Valgrind-aware debug build, <a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_valgrind" title="-DWITH_VALGRIND=1">-DWITH_VALGRIND=1</a> normally is combined with <a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_debug" title="-DWITH_DEBUG=1">-DWITH_DEBUG=1</a>. See <a href="https://dev.mysql.com/doc/internals/en/debug-configurations.html" title="Building Debug Configurations">Building Debug Configurations</a>.</p></li><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_enable_gcov" title="-DENABLE_GCOV=bool">-DENABLE_GCOV=bool</a></p><p>Whether to include <code>gcov</code> support (<strong>Linux only</strong>).</p></li><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_enable_gprof" title="-DENABLE_GPROF=bool">-DENABLE_GPROF=bool</a></p><p>Whether to enable <code>gprof</code> (<strong>optimized Linux builds only</strong>). <strong>The default is<code>OFF</code></strong>.</p></li><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_test_trace_plugin" title="-DWITH_TEST_TRACE_PLUGIN=bool">-DWITH_TEST_TRACE_PLUGIN=bool</a></p><p>Whether to build the test protocol trace client plugin (see <a href="https://dev.mysql.com/doc/extending-mysql/8.0/en/test-protocol-trace-plugin.html" title="Using the Test Protocol Trace Plugin">Using the Test Protocol Trace Plugin</a>). <strong>By default, this option is disabled</strong>. Enabling this option has no effect unless the <a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_client_protocol_tracing" title="WITH_CLIENT_PROTOCOL_TRACING">WITH_CLIENT_PROTOCOL_TRACING</a> option is enabled. If MySQL is configured with both options enabled, the <code>libmysqlclient</code> client library is built with the test protocol trace plugin built in, and all the standard MySQL clients load the plugin. However, even when the test plugin is enabled, it has no effect by default. Control over the plugin is afforded using environment variables; see <a href="https://dev.mysql.com/doc/extending-mysql/8.0/en/test-protocol-trace-plugin.html" title="Using the Test Protocol Trace Plugin">Using the Test Protocol Trace Plugin</a>.</p><p><strong>Note</strong></p><p>Do <em>not</em> enable the <a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_test_trace_plugin" title="WITH_TEST_TRACE_PLUGIN">WITH_TEST_TRACE_PLUGIN</a> option if you want to use your own protocol trace plugins because only one such plugin can be loaded at a time and an error occurs for attempts to load a second one. If you have already built MySQL with the test protocol trace plugin enabled to see how it works, you must rebuild MySQL without it before you can use your own plugins.</p><p>For information about writing trace plugins, see <a href="https://dev.mysql.com/doc/extending-mysql/8.0/en/writing-protocol-trace-plugins.html" title="Writing Protocol Trace Plugins">Writing Protocol Trace Plugins</a>.</p></li><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_client_protocol_tracing" title="-DWITH_CLIENT_PROTOCOL_TRACING=bool">-DWITH_CLIENT_PROTOCOL_TRACING=bool</a></p><p>Whether to build the client-side protocol tracing framework into the client library. <strong>By default, this option is enabled</strong>.</p><p>For information about writing protocol trace client plugins, see <a href="https://dev.mysql.com/doc/extending-mysql/8.0/en/writing-protocol-trace-plugins.html" title="Writing Protocol Trace Plugins">Writing Protocol Trace Plugins</a>.</p><p>See also the <a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_test_trace_plugin" title="WITH_TEST_TRACE_PLUGIN">WITH_TEST_TRACE_PLUGIN</a> option.</p></li><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_keyring_test" title="-DWITH_KEYRING_TEST=bool">-DWITH_KEYRING_TEST=bool</a></p><p>Whether to build the test program that accompanies the <code>keyring_file</code> plugin. <strong>The default is<code>OFF</code></strong>. Test file source code is located in the <code>plugin/keyring/keyring-test</code> directory.</p></li><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_ndb_test" title="-DWITH_NDB_TEST={ON|OFF}">-DWITH_NDB_TEST={ON|OFF}</a></p><p>If enabled, include a set of NDB API test programs. <strong>The default is OFF</strong>.</p></li></ul><p>详见：<a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html" title="MySQL :: MySQL 8.0 Reference Manual :: 2.8.7 MySQL Source-Configuration Options">MySQL :: MySQL 8.0 Reference Manual :: 2.8.7 MySQL Source-Configuration Options</a></p><hr><p>以下是各组件或测试类型的详细介绍。</p><h1 id="valgrind"><a href="#valgrind" class="headerlink" title="valgrind"></a>valgrind</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>valgrind 是一个工具集，主要集成了：</p><ul><li>memcheck ：内存错误检测器。</li><li>cachegrind ：缓存和分支预测分析器。</li><li>callgrind ：可生成缓存分析器的调用图。</li><li>helgrind ：线程错误检测器。</li><li>DRD ：也是线程错误检测器。</li><li>massif ：堆分析器，它可以帮助程序使用更少的内存。</li><li>DHAT ：一种不同类型的堆分析器。使用它可以了解块寿命，块利用率和布局效率低下的问题。</li></ul><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><p>mtr 提供的 valgrind 选项如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Options <span class="keyword">for</span> valgrind</span><br><span class="line"></span><br><span class="line">  callgrind             Instruct valgrind to use callgrind.</span><br><span class="line">  helgrind              Instruct valgrind to use helgrind.</span><br><span class="line">  valgrind              Run the <span class="string">&quot;mysqltest&quot;</span> and <span class="string">&quot;mysqld&quot;</span> executables using</span><br><span class="line">                        valgrind with default options.</span><br><span class="line">  valgrind-all          Synonym <span class="keyword">for</span> --valgrind.</span><br><span class="line">  valgrind-clients      Run clients started by .<span class="built_in">test</span> files with valgrind.</span><br><span class="line">  valgrind-mysqld       Run the <span class="string">&quot;mysqld&quot;</span> executable with valgrind.</span><br><span class="line">  valgrind-mysqltest    Run the <span class="string">&quot;mysqltest&quot;</span> and <span class="string">&quot;mysql_client_test&quot;</span> executable</span><br><span class="line">                        with valgrind.</span><br><span class="line">  valgrind-option=ARGS  Option to give valgrind, replaces default option(s), can</span><br><span class="line">                        be specified more <span class="keyword">then</span> once.</span><br><span class="line">  valgrind-options=ARGS Deprecated, use --valgrind-option.</span><br><span class="line">  valgrind-path=&lt;EXE&gt;   Path to the valgrind executable.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>从代码看：</strong></p><ol><li> <strong>支持的工具不仅限于 callgrind、helgrind，还支持 memcheck、massif</strong> 。</li><li> 只有启用<code>--valgrind</code> 或 <code>--valgrind-mysqltest</code> 选项，才会用到 <code>mysql_client_test</code> 。</li></ol><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p><strong>编译选项</strong>： <code>-DWITH_DEBUG=1 -DWITH_VALGRIND=1</code>&#x20;</p><p><strong>使用建议</strong>：</p><p>1、推荐指令可参考 <code>mysql-test/collections/</code> 目录下的文件 <code>default.daily-valgrind</code>、<code>default.push-valgrind</code>、<code>default.weekly-valgrind</code> 。</p><p>2、据我实测，<strong>如需测试 valgrind 所有功能，需在原有指令基础上添加<code>--valgrind</code>选项</strong>。比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官方 collections 中的示例指令：</span></span><br><span class="line">perl mysql-test-run.pl --timer  --force --skip-rpl --comment=all_default_valgrind --vardir=var-all_default_valgrind --skip-ndb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 --valgrind</span></span><br><span class="line">perl mysql-test-run.pl --timer  --force --skip-rpl --comment=all_default_valgrind --vardir=var-all_default_valgrind --skip-ndb --valgrind</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3、在同时启用 ASAN 和 valgrind 的情况下，并在运行 mtr 时添加<code>--valgrind</code>选项，mtr 会因 valgrind memcheck 与 asan 冲突而 crash，因此，valgrind 与 asan 不建议同时启用</strong>。</p><h1 id="Sanitizier"><a href="#Sanitizier" class="headerlink" title="Sanitizier"></a>Sanitizier</h1><p><a href="https://github.com/google/sanitizers" title="Sanitizers">Sanitizers</a> 是谷歌发起的开源工具集，已经成为静态和动态代码分析的利器，可以检查<strong>内存错误、未初始化的读取、线程安全和未定义的行为等</strong>相关的问题。</p><p><strong>优点</strong>：与同类型分析工具相比，Sanitizers 带来的性能损失通常要小得多，而且往往提供的信息更详细。</p><p><strong>缺点</strong>：代码（可能还有工具链的一部分）需要使用附加的标志重新编译。</p><p><a href="https://github.com/google/sanitizers" title="Sanitizers">Sanitizers</a> 包括如下组件：</p><ul><li><p><strong>AddressSanitizer/ASAN</strong></p><p>检查内存地址相关问题，包括内存泄漏、释放后使用、重复释放、堆溢出、栈溢出等问题。</p><p>通过<strong>编译插桩(CTI)</strong> ，能够发现此堆/栈/全局变量读写溢出，内存泄露等问题，并将信息直接打印到日志中。</p><p><strong>ASAN 是一个快速的内存错误检测工具。它非常快，只拖慢程序两倍左右（比起 Valgrind 快多了）</strong>。</p><p>它包括一个编译器 instrumentation 模块和一个提供<code>malloc()/free()</code> 替代项的运行时库。</p></li><li><p><strong>LeakSanitizer/LSAN</strong></p><p>检查内存泄漏问题。它是<strong>集成在 Address Sanitizer 中</strong>的一个相对独立的工具，它工作在检查过程的最后阶段。</p></li><li><p><strong>UndefinedBehaviorSanitizer/UBSAN</strong></p><p>检测未定义行为（使用空指针、有符号整数溢出等）。</p></li><li><p><strong>ThreadSanitizer/TSAN</strong></p><p>检查线程数据竞争和死锁问题。</p></li><li><p><strong>MemorySanitizer/MSAN</strong></p><p>检查使用未初始化内存问题。</p></li><li><p><strong>内核 Sanitizer</strong>包括<strong>KASAN</strong>和<strong>KMSAN</strong></p></li></ul><p>Sanitizers 项目本是 LLVM 项目的一部分，但 GNU 也将该系列工具加入到了自家的 GCC 编译器中（clang 当然也支持）。 &#x20;</p><ul><li>GCC 4.8 版本开始支持 <strong>Address Sanitizer</strong>和 <strong>Thread Sanitizer</strong>。</li><li>GCC 4.9 版本开始支持 <strong>Leak Sanitizer</strong> 和 <strong>UndefinedBehaviorSanitizer</strong>。</li></ul><h2 id="ASAN"><a href="#ASAN" class="headerlink" title="ASAN"></a>ASAN</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>ASAN/AddressSanitizer 能检测很多种内存错误，主要包含如下类别：</p><ul><li><strong>Out-of-bounds accesses to heap, stack and globals</strong></li><li><strong>Use-after-free</strong></li><li><strong>Use-after-return</strong> (clang flag <code>-fsanitize-address-use-after-return=(never|runtime|always)</code> default: <code>runtime</code>)<ul><li>Enable with: <code>ASAN_OPTIONS=detect_stack_use_after_return=1</code> (already enabled on Linux).</li><li>Disable with: <code>ASAN_OPTIONS=detect_stack_use_after_return=0</code>.</li></ul></li><li><strong>Use-after-scope</strong> (clang flag <code>-fsanitize-address-use-after-scope</code>)</li><li><strong>Double-free, invalid free</strong></li><li><strong>Memory leaks</strong> (experimental)</li></ul><p>更详细的示例 case：参考 <a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/asan-error-examples?view=msvc-170" title="https://learn.microsoft.com/zh-cn/cpp/sanitizers/asan-error-examples?view=msvc-170">https://learn.microsoft.com/zh-cn/cpp/sanitizers/asan-error-examples?view=msvc-170</a></p><ul><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-alloc-dealloc-mismatch?view=msvc-170" title="alloc-dealloc-mismatch">alloc-dealloc-mismatch</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-allocation-size-too-big?view=msvc-170" title="allocation-size-too-big">allocation-size-too-big</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-calloc-overflow?view=msvc-170" title="calloc-overflow">calloc-overflow</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-container-overflow?view=msvc-170" title="container-overflow">container-overflow</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-double-free?view=msvc-170" title="double-free">double-free</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-dynamic-stack-buffer-overflow?view=msvc-170" title="dynamic-stack-buffer-overflow">dynamic-stack-buffer-overflow</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-global-buffer-overflow?view=msvc-170" title="global-buffer-overflow">global-buffer-overflow</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-heap-buffer-overflow?view=msvc-170" title="heap-buffer-overflow">heap-buffer-overflow</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-heap-use-after-free?view=msvc-170" title="heap-use-after-free">heap-use-after-free</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-invalid-allocation-alignment?view=msvc-170" title="invalid-allocation-alignment">invalid-allocation-alignment</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-memcpy-param-overlap?view=msvc-170" title="memcpy-param-overlap">memcpy-param-overlap</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-new-delete-type-mismatch?view=msvc-170" title="new-delete-type-mismatch">new-delete-type-mismatch</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-stack-buffer-overflow?view=msvc-170" title="stack-buffer-overflow">stack-buffer-overflow</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-stack-buffer-underflow?view=msvc-170" title="stack-buffer-underflow">stack-buffer-underflow</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-stack-use-after-return?view=msvc-170" title="stack-use-after-return">stack-use-after-return</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-stack-use-after-scope?view=msvc-170" title="stack-use-after-scope">stack-use-after-scope</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-strncat-param-overlap?view=msvc-170" title="strncat-param-overlap">strncat-param-overlap</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-use-after-poison?view=msvc-170" title="use-after-poison">use-after-poison</a></li></ul><p><strong>性能影响</strong>：使用 ASAN 后，性能会降低 2 倍。</p><h3 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h3><p><strong>安装</strong>：有一个单独的动态库<code>libasan6.so</code>，会随 gcc 安装。</p><p><strong>编译选项</strong>：<code>-DWITH_DEBUG=1 -DWITH_ASAN=1</code>，可选择启用<code>-DWITH_ASAN_SCOPE=1</code></p><p><strong>验证版本</strong>：8.0.29</p><p><strong>MTR 选项</strong>：<code>--sanitize</code></p><p><strong>使用建议</strong>：</p><p><strong>1、ASAN 功能强大，相较于 valgrind，对性能影响小很多，建议作为主要的内存检测工具</strong>。</p><p>2、由于 mtr 需要用到<code>/usr/bin/perl</code>，因此，有可能出现 perl 自身某些函数的内存泄漏问题被 Leak Sanitizer 检测到，导致 mtr 测试失败，此时，将问题函数添加到<code>lsan.supp</code>文件即可解决。比如 Ubuntu 22.04 perl v5.34.0 会遇到内存泄漏，同样的，Ubuntu 20.04 perl v5.30.0 就无该问题。</p><h4 id="mysql-test-asan-supp-示例"><a href="#mysql-test-asan-supp-示例" class="headerlink" title="mysql-test/asan.supp 示例"></a>mysql-test/asan.supp 示例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">interceptor_via_fun:NameOfCFunctionToSuppress</span><br><span class="line">interceptor_via_fun:-[ClassName objCMethodToSuppress:]</span><br><span class="line">interceptor_via_lib:NameOfTheLibraryToSuppress</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">interceptor_via_fun:Perl_safesyscalloc</span><br><span class="line">interceptor_via_fun:Perl_safesysmalloc</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考：</p><ul><li><a href="https://clang.llvm.org/docs/AddressSanitizer.html#id10" title="asan文档">asan 文档</a></li><li><a href="https://github.com/gcc-mirror/gcc/blob/master/libsanitizer/asan/asan_suppressions.cpp" title="gcc/asan_suppressions.cpp at master · gcc-mirror/gcc · GitHub">gcc/asan_suppressions.cpp at master · gcc-mirror/gcc · GitHub</a></li></ul><h4 id="mysql-test-lsan-supp-示例"><a href="#mysql-test-lsan-supp-示例" class="headerlink" title="mysql-test/lsan.supp 示例"></a>mysql-test/lsan.supp 示例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># LSAN suppressions for gcc/clang</span></span><br><span class="line">leak:Perl_safesyscalloc</span><br><span class="line">leak:Perl_safesysmalloc</span><br><span class="line">leak:Perl_safesysrealloc</span><br><span class="line">leak:Perl_savesharedpv</span><br><span class="line">leak:Perl_Slab_Alloc</span><br><span class="line">leak:Perl_newUNOP_AUX</span><br><span class="line">leak:Perl_newSTATEOP</span><br><span class="line">leak:Perl_pmruntime</span><br><span class="line">leak:/usr/bin/perl</span><br><span class="line">leak:/lib64/libperl.so.*</span><br><span class="line">leak:/bin/bash</span><br><span class="line">leak:/usr/bin/zip</span><br><span class="line"><span class="comment"># OpenLDAP bug 9081</span></span><br><span class="line"><span class="comment"># Fixed in 2.4.49, we build with 2.4.48</span></span><br><span class="line">leak:ldap_initialize</span><br><span class="line"></span><br><span class="line"><span class="comment"># sasl_client_init will load all available plugins with _sasl_load_plugins().</span></span><br><span class="line"><span class="comment"># It seems some of the SASL plugin have leaks.</span></span><br><span class="line"><span class="comment"># Both LSAN and Valgrind report leaks.</span></span><br><span class="line">leak:sasl_client_add_plugin</span><br></pre></td></tr></table></figure><p>该内容来源于源码文件，可见官方知晓 Perl 高版本的内存泄漏问题，以此方式来忽略。</p><h3 id="指令示例"><a href="#指令示例" class="headerlink" title="指令示例"></a>指令示例</h3><p>在<code>Ubuntu 22.04 X86_64</code> 运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">perl mysql-test-run.pl --timer --max-test-fail=0 --force --parallel=1 --vardir=var-rpl --suite=rpl --sanitize</span><br><span class="line">perl mysql-test-run.pl --timer --max-test-fail=0 --force --parallel=1 --max-test-fail=0 --vardir=var-binlog --suite=binlog --sanitize</span><br></pre></td></tr></table></figure><h2 id="LSAN"><a href="#LSAN" class="headerlink" title="LSAN"></a>LSAN</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p>LSAN/LeakSanitizer 用于内存泄漏检测。</p><p><strong>性能影响</strong>：使用 LSAN 后，除了执行的最后阶段会有一个内存泄漏检测之外，几乎没有性能开销。</p><h3 id="使用方法-2"><a href="#使用方法-2" class="headerlink" title="使用方法"></a>使用方法</h3><p><strong>安装</strong>：有一个单独的动态库<code>liblsan0.so</code>，会随 gcc 安装。</p><p><strong>编译选项</strong>：<code>-DWITH_DEBUG=1 -DWITH_LSAN=1</code>&#x20;</p><p><strong>验证版本</strong>：8.0.29</p><p><strong>MTR 选项</strong>：<code>--sanitize</code>&#x20;</p><p><strong>使用建议</strong>：</p><ol><li> 由于 ASAN 集成了 LSAN，因此，只有不使用 ASAN、仅使用 LSAN 的情况下才需要设置该选项。</li><li> <code>lsan.supp</code> 格式见 「ASAN」小节。</li></ol><h3 id="指令示例-1"><a href="#指令示例-1" class="headerlink" title="指令示例"></a>指令示例</h3><p>只要编译时启用 ASAN 或 LSAN，在运行时添加<code>--sanitize</code> 选项即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl mysql-test-run.pl --timer --max-test-fail=0 --force --parallel=1 --max-test-fail=0 --vardir=var-binlog --suite=binlog --sanitize</span><br></pre></td></tr></table></figure><h2 id="UBSAN"><a href="#UBSAN" class="headerlink" title="UBSAN"></a>UBSAN</h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><p>UBSAN/UndefinedBehaviorSanitizer 是针对未定义行为的检测器，速度很快。</p><p>UBSAN 需要在编译时修改程序，以捕获程序执行期间的各种未定义行为。比如：</p><ul><li>数组下标越界：Array subscript out of bounds, where the bounds can be statically determined</li><li>位移位超过数据类型边界：Bitwise shifts that are out of bounds for their data type</li><li>解除对未对齐指针或空指针的关联：Dereferencing misaligned or null pointers</li><li>有符号整数溢出：Signed integer overflow</li><li>浮点数类型转换导致的溢出：Conversion to, from, or between floating-point types which would overflow the destination</li></ul><p>更多行为详见 ：</p><p><a href="https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html#ubsan-checks" title="UndefinedBehaviorSanitizer — Clang 17.0.0git documentation (llvm.org)">UndefinedBehaviorSanitizer — Clang 17.0.0git documentation (llvm.org)</a></p><p><strong>性能影响</strong>：UBSAN 的运行时成本很小，对地址空间布局或 ABI 没有影响。</p><h3 id="使用方法-3"><a href="#使用方法-3" class="headerlink" title="使用方法"></a>使用方法</h3><p><strong>安装</strong>：有一个单独的动态库<code>libubsan1.so</code>，会随 gcc 安装。</p><p><strong>编译选项</strong>：<code>-DWITH_DEBUG=1 -DWITH_UBSAN=1</code>&#x20;</p><p><strong>验证版本</strong>：8.0.29</p><p><strong>MTR 选项</strong>：<code>--sanitize</code></p><p><strong>使用建议</strong>：</p><ol><li> <strong>与 ASAN、TSAN、gcov、gprof 都兼容，可一起启用</strong>。</li><li> 若想要某些 case 跳过 UBSAN 的检查，可引用<code>include/not_ubsan.inc</code>。目前只有如下 case 会跳过 UBSAN：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">./t/innodb_tmp_table_heap_to_disk.test</span><br><span class="line">./t/ssl-big.test</span><br><span class="line">./t/count_distinct3.test</span><br><span class="line">./t/multi_update2.test</span><br><span class="line">./t/ds_mrr-big.test</span><br><span class="line"></span><br><span class="line">./suite/gis/t/gis_not_ubsan.test</span><br><span class="line">./suite/binlog_gtid/t/binlog_warning_same_server_id.test</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="指令示例-2"><a href="#指令示例-2" class="headerlink" title="指令示例"></a>指令示例</h3><p>只要编译时启用 UBSAN，在运行时添加<code>--sanitize</code> 选项即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl mysql-test-run.pl --timer --max-test-fail=0 --force --parallel=1 --max-test-fail=0 --vardir=var-binlog --suite=binlog --sanitize</span><br></pre></td></tr></table></figure><h2 id="TSAN"><a href="#TSAN" class="headerlink" title="TSAN"></a>TSAN</h2><h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3><p>TSAN/ThreadSanitizer 是用于检测数据竞争和线程死锁的工具。</p><p><strong>性能影响</strong>：引入 TSAN 后，会降低 5-15 倍性能，同时，内存占用率会提升 5-10 倍。</p><h3 id="使用方法-4"><a href="#使用方法-4" class="headerlink" title="使用方法"></a>使用方法</h3><p><strong>安装</strong>：有一个单独的动态库<code>libtsan0.so</code>，会随 gcc 安装。</p><p><strong>编译选项</strong>：<code>-DWITH_DEBUG=1 -DWITH_TSAN=1</code>&#x20;</p><p><strong>验证版本</strong>：8.0.29、8.0.32</p><p><strong>MTR 选项</strong>：<code>--sanitize</code></p><p><strong>使用建议</strong>：</p><p>1、<strong>TSAN 与 ASAN 不兼容</strong>（一起使用 cmake 会报错<code>&quot;No mysys timer support detected&quot;</code>），但<strong>TSAN 与 UBSAN、VALGRIND 兼容</strong>。</p><p>2、<strong>对 TSAN 的支持是实验性的，尚不成熟，不建议使用</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">-- Performing Test HAVE_SANITIZE_SCOPE</span><br><span class="line">-- Performing Test HAVE_SANITIZE_SCOPE - Success</span><br><span class="line">CMake Warning at CMakeLists.txt:1101 (MESSAGE):</span><br><span class="line">  Thread sanitizer support is currently experimental.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- Performing Test C_LD_LLD_RESULT</span><br><span class="line">-- Performing Test C_LD_LLD_RESULT - Failed</span><br><span class="line">-- Performing Test CXX_LD_LLD_RESULT</span><br><span class="line">-- Performing Test CXX_LD_LLD_RESULT - Failed</span><br><span class="line">-- Performing Test C_LD_GOLD_RESULT</span><br><span class="line">-- Performing Test C_LD_GOLD_RESULT - Failed</span><br><span class="line">-- Performing Test CXX_LD_GOLD_RESULT</span><br><span class="line">-- Performing Test CXX_LD_GOLD_RESULT - Failed</span><br><span class="line">-- Local boost dir /data/work/mysql/boost_1_77_0</span><br><span class="line">-- Found /data/work/mysql/boost_1_77_0/boost/version.hpp</span><br><span class="line">-- BOOST_VERSION_NUMBER is <span class="comment">#define BOOST_VERSION 107700</span></span><br><span class="line">-- BOOST_INCLUDE_DIR /data/work/mysql/boost_1_77_0</span><br><span class="line">-- Looking <span class="keyword">for</span> pthread.h</span><br><span class="line">-- Looking <span class="keyword">for</span> pthread.h - not found</span><br><span class="line">-- Could NOT find Threads (missing: Threads_FOUND)</span><br><span class="line">......</span><br><span class="line">-- Looking <span class="keyword">for</span> timer_create <span class="comment"># 由于 timer_create/timer_settime 函数确实存在，尝试调整过 cmake，后续会报一系列错误，该问题不太好调。</span></span><br><span class="line">-- Looking <span class="keyword">for</span> timer_create - not found</span><br><span class="line">-- Looking <span class="keyword">for</span> timer_settime</span><br><span class="line">-- Looking <span class="keyword">for</span> timer_settime - not found</span><br><span class="line">-- Looking <span class="keyword">for</span> kqueue</span><br><span class="line">-- Looking <span class="keyword">for</span> kqueue - not found</span><br><span class="line">-- Performing Test HAVE_SETNS</span><br><span class="line">-- Performing Test HAVE_SETNS - Failed</span><br><span class="line">-- Looking <span class="keyword">for</span> EVFILT_TIMER</span><br><span class="line">-- Looking <span class="keyword">for</span> EVFILT_TIMER - not found</span><br><span class="line">CMake Error at configure.cmake:334 (MESSAGE):</span><br><span class="line">  No mysys timer support detected!</span><br><span class="line">Call Stack (most recent call first):</span><br><span class="line">  CMakeLists.txt:1487 (INCLUDE)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、如果某些数据竞争或死锁情况是符合预期的，可以通过 <code>mysql-test/tsan.supp</code> 跳过。</p><h4 id="mysql-test-tsan-supp-示例"><a href="#mysql-test-tsan-supp-示例" class="headerlink" title="mysql-test/tsan.supp 示例"></a>mysql-test/tsan.supp 示例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Blacklist for Thread Sanitizer.</span></span><br><span class="line"><span class="comment"># Thread Sanitizer can be enabled with -DWITH_TSAN=1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Suppression syntax is documented here:</span></span><br><span class="line"><span class="comment"># https://github.com/google/sanitizers/wiki/ThreadSanitizerSuppressions</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">race:innobase</span><br><span class="line"></span><br><span class="line">race:client/dump/</span><br><span class="line">deadlock:client/dump/</span><br><span class="line"></span><br><span class="line">race:perfschema</span><br><span class="line"></span><br><span class="line">race:plugin_vars_free_values</span><br><span class="line">race:log_builtins_filter_run</span><br><span class="line">race:MY_LOCALE_ERRMSGS::destroy</span><br><span class="line">race:get_one_variable_ext</span><br><span class="line">race:mysql_set_character_set_with_default_collation</span><br><span class="line"></span><br><span class="line">race:ngs::Scheduler_dynamic::wait_if_idle_then_delete_worker</span><br><span class="line">race:ngs::Socket_events::break_loop</span><br><span class="line"></span><br><span class="line">deadlock:find_sys_var_ex</span><br><span class="line">deadlock:Persisted_variables_cache::lock</span><br><span class="line"></span><br><span class="line">signal:my_print_stacktrace</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="指令示例-3"><a href="#指令示例-3" class="headerlink" title="指令示例"></a>指令示例</h3><p>只要编译时启用 TSAN，在运行时添加<code>--sanitize</code> 选项即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl mysql-test-run.pl --timer --max-test-fail=0 --force --parallel=1 --max-test-fail=0 --vardir=var-binlog --suite=binlog --sanitize</span><br></pre></td></tr></table></figure><h3 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a><strong>存在问题</strong></h3><p>测试时，在 install database 阶段，线程之间就会有大量 data race，报错示例如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错信息位于 mysql-test/var-main-tsan/log/bootstrap.log</span></span><br><span class="line">==================</span><br><span class="line">WARNING: ThreadSanitizer: data <span class="built_in">race</span> (pid=<span class="number">65314</span>)</span><br><span class="line">  Read of size <span class="number">4</span> at <span class="number">0x555ae20c13b0</span> by thread T4:</span><br><span class="line">    #<span class="number">0</span> fil_validate_skip /data/work/mysql/mysql-server/storage/innobase/fil/fil0fil.cc:<span class="number">1953</span> (mysqld+<span class="number">0x541018e</span>)</span><br><span class="line">    #<span class="number">1</span> <span class="built_in">fil_aio_wait</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>) /data/work/mysql/mysql-server/storage/innobase/fil/fil0fil.cc:<span class="number">8234</span> (mysqld+<span class="number">0x54109ca</span>)</span><br><span class="line">    #<span class="number">2</span> io_handler_thread /data/work/mysql/mysql-server/storage/innobase/srv/srv0start.cc:<span class="number">279</span> (mysqld+<span class="number">0x5143b04</span>)</span><br><span class="line">    ......</span><br><span class="line">    #<span class="number">12</span> std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, <span class="built_in"><span class="keyword">void</span></span> (*)(<span class="keyword">unsigned</span> <span class="keyword">long</span>), <span class="keyword">unsigned</span> <span class="keyword">long</span>&gt; &gt; &gt;::_M_run() /usr/include/c++/<span class="number">11</span>/bits/std_thread.h:<span class="number">211</span> (mysqld+<span class="number">0x5159b59</span>)</span><br><span class="line">    #<span class="number">13</span> &lt;null&gt; &lt;null&gt; (libstdc++.so<span class="number">.6</span>+<span class="number">0xdc2b2</span>)</span><br><span class="line"></span><br><span class="line">  Previous write of size <span class="number">4</span> at <span class="number">0x555ae20c13b0</span> by thread T3:</span><br><span class="line">    #<span class="number">0</span> fil_validate_skip /data/work/mysql/mysql-server/storage/innobase/fil/fil0fil.cc:<span class="number">1953</span> (mysqld+<span class="number">0x54101a7</span>)</span><br><span class="line">    #<span class="number">1</span> <span class="built_in">fil_aio_wait</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>) /data/work/mysql/mysql-server/storage/innobase/fil/fil0fil.cc:<span class="number">8234</span> (mysqld+<span class="number">0x54109ca</span>)</span><br><span class="line">    #<span class="number">2</span> io_handler_thread /data/work/mysql/mysql-server/storage/innobase/srv/srv0start.cc:<span class="number">279</span> (mysqld+<span class="number">0x5143b04</span>)</span><br><span class="line">    ......</span><br><span class="line">    #<span class="number">12</span> std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, <span class="built_in"><span class="keyword">void</span></span> (*)(<span class="keyword">unsigned</span> <span class="keyword">long</span>), <span class="keyword">unsigned</span> <span class="keyword">long</span>&gt; &gt; &gt;::_M_run() /usr/include/c++/<span class="number">11</span>/bits/std_thread.h:<span class="number">211</span> (mysqld+<span class="number">0x5159b59</span>)</span><br><span class="line">    #<span class="number">13</span> &lt;null&gt; &lt;null&gt; (libstdc++.so<span class="number">.6</span>+<span class="number">0xdc2b2</span>)</span><br><span class="line"></span><br><span class="line">  Location is global <span class="string">&#x27;fil_validate_skip()::fil_validate_count&#x27;</span> of size <span class="number">4</span> at <span class="number">0x555ae20c13b0</span> (mysqld+<span class="number">0x000007a5c3b0</span>)</span><br><span class="line"></span><br><span class="line">  Thread <span class="built_in">T4</span> (tid=<span class="number">65320</span>, running) created by thread T1 at:</span><br><span class="line">    #<span class="number">0</span> pthread_create ../../../../src/libsanitizer/tsan/tsan_interceptors_posix.cpp:<span class="number">969</span> (libtsan.so<span class="number">.0</span>+<span class="number">0x605b8</span>)</span><br><span class="line">    #<span class="number">1</span> std::thread::_M_start_thread(std::unique_ptr&lt;std::thread::_State, std::default_delete&lt;std::thread::_State&gt; &gt;, <span class="built_in"><span class="keyword">void</span></span> (*)()) &lt;null&gt; (libstdc++.so<span class="number">.6</span>+<span class="number">0xdc388</span>)</span><br><span class="line">    ......</span><br><span class="line">    #<span class="number">8</span> handle_bootstrap /data/work/mysql/mysql-server/sql/bootstrap.cc:<span class="number">327</span> (mysqld+<span class="number">0x387778f</span>)</span><br><span class="line">    #<span class="number">9</span> pfs_spawn_thread /data/work/mysql/mysql-server/storage/perfschema/pfs.cc:<span class="number">2942</span> (mysqld+<span class="number">0x56751fb</span>)</span><br><span class="line"></span><br><span class="line">  Thread <span class="built_in">T3</span> (tid=<span class="number">65319</span>, running) created by thread T1 at:</span><br><span class="line">    #<span class="number">0</span> pthread_create ../../../../src/libsanitizer/tsan/tsan_interceptors_posix.cpp:<span class="number">969</span> (libtsan.so<span class="number">.0</span>+<span class="number">0x605b8</span>)</span><br><span class="line">    #<span class="number">1</span> std::thread::_M_start_thread(std::unique_ptr&lt;std::thread::_State, std::default_delete&lt;std::thread::_State&gt; &gt;, <span class="built_in"><span class="keyword">void</span></span> (*)()) &lt;null&gt; (libstdc++.so<span class="number">.6</span>+<span class="number">0xdc388</span>)</span><br><span class="line">    ......</span><br><span class="line">    #<span class="number">8</span> handle_bootstrap /data/work/mysql/mysql-server/sql/bootstrap.cc:<span class="number">327</span> (mysqld+<span class="number">0x387778f</span>)</span><br><span class="line">    #<span class="number">9</span> pfs_spawn_thread /data/work/mysql/mysql-server/storage/perfschema/pfs.cc:<span class="number">2942</span> (mysqld+<span class="number">0x56751fb</span>)</span><br><span class="line"></span><br><span class="line">SUMMARY: ThreadSanitizer: data race /data/work/mysql/mysql-server/storage/innobase/fil/fil0fil.cc:<span class="number">1953</span> in fil_validate_skip</span><br><span class="line">==================</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>install database 阶段，类似的报错有 200 多个。虽然可以通过<code>tsan.supp</code> 文件跳过，但毕竟报错涉及较多函数，若全部跳过，可能会影响对正常情况下数据竞争的判断。因此，<strong>个人暂不建议使用</strong>。</p><h2 id="MSAN"><a href="#MSAN" class="headerlink" title="MSAN"></a>MSAN</h2><h3 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h3><p>MSAN/MemorySanitizer 用于检测对未初始化内存的读取（uninitialized reads）问题。</p><p><strong>性能影响</strong>：引入 MSAN 后，性能会降低 3 倍。</p><h3 id="使用方法-5"><a href="#使用方法-5" class="headerlink" title="使用方法"></a>使用方法</h3><p><strong>编译选项</strong>：<code>-DWITH_DEBUG=1 -DWITH_MSAN=1</code>&#x20;</p><p>验证版本：8.0.29</p><p><strong>MTR 选项</strong>：<code>--sanitize</code></p><p><strong>使用建议</strong>：</p><ol><li> 对 MSAN 的支持是实验性的，尚不成熟，且与 ASAN 不兼容，考虑到 ASAN 的强大，因此，<strong>建议使用 ASAN，不建议使用 MSAN</strong>。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CMake Warning at CMakeLists.txt:1080 (MESSAGE):</span><br><span class="line">  Memory sanitizer support is currently experimental.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CMake Error at CMakeLists.txt:1107 (MESSAGE):</span><br><span class="line">  Cannot use AddressSanitizer and MemorySanitizer together</span><br></pre></td></tr></table></figure><h3 id="指令示例-4"><a href="#指令示例-4" class="headerlink" title="指令示例"></a>指令示例</h3><p>只要编译时启用 MSAN，在运行时添加<code>--sanitize</code> 选项即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl mysql-test-run.pl --timer --max-test-fail=0 --force --parallel=1 --max-test-fail=0 --vardir=var-binlog --suite=binlog --sanitize</span><br></pre></td></tr></table></figure><h1 id="代码覆盖率测试"><a href="#代码覆盖率测试" class="headerlink" title="代码覆盖率测试"></a>代码覆盖率测试</h1><h2 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h2><p>gcov 用于分析代码覆盖率，gprof 用于分析 gcov 生成的统计数据，二者一般一起使用。</p><p><strong>gprof 只支持 linux 操作系统，不支持 MacOS</strong>。</p><p>官方手册：</p><p><a href="https://gcc.gnu.org/onlinedocs/gcc/Gcov.html" title="Gcov (Using the GNU Compiler Collection (GCC))">Gcov (Using the GNU Compiler Collection (GCC))</a></p><p><a href="https://www.man7.org/linux/man-pages/man1/gprof.1.html" title="gprof(1) - Linux manual page (man7.org)">gprof(1) - Linux manual page (man7.org)</a></p><p><a href="https://zhuanlan.zhihu.com/p/385842627" title="超级方便的Linux自带性能分析工具！gprof介绍、安装、使用及实践 - 知乎 (zhihu.com)">超级方便的 Linux 自带性能分析工具！gprof 介绍、安装、使用及实践 - 知乎 (zhihu.com)</a></p><h2 id="使用方法-6"><a href="#使用方法-6" class="headerlink" title="使用方法"></a>使用方法</h2><p>编译选项：<code>-DWITH_DEBUG=1 -DENABLE_GCOV=1 -DENABLE_GPROF=1</code></p><p><strong>使用建议</strong>：</p><ol><li> 与 ASAN、UBSAN 兼容，建议与 ASAN、UBSAN 同时启用（未验证与 valgrind、MSAN、TSAN 的兼容性）。</li><li>不能在<code>make install</code>的安装目录测试，必须在 <strong>执行编译的源码目录</strong>测试。<ol><li> <code>源码根目录/build-debug/mysql-test/mysql-test-run.pl </code>（本人的编译目录是 build-debug）只是封装了一层对 <code>源码根目录/mysql-test/mysql-test-run.pl</code> 的调用：</li></ol></li></ol><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[apps@node6 mysql-test]$ pwd</span><br><span class="line">/home/apps/mtr/mysql-oracle/mysql-<span class="number">8.0</span>.<span class="number">26</span>/build-debug/mysql-test</span><br><span class="line"></span><br><span class="line">[apps@node6 mysql-test]$ cat mysql-test-run.pl</span><br><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"><span class="comment"># Call mtr in out-of-source build</span></span><br><span class="line">$ENV<span class="string">&#123;MTR_BINDIR&#125;</span> = <span class="string">&#x27;/home/apps/mtr/mysql-oracle/mysql-8.0.26/build-debug&#x27;</span>;</span><br><span class="line"><span class="keyword">chdir</span>(<span class="string">&#x27;/home/apps/mtr/mysql-oracle/mysql-8.0.26/mysql-test&#x27;</span>);</span><br><span class="line"><span class="keyword">exit</span>(<span class="keyword">system</span>($^X, <span class="string">&#x27;/home/apps/mtr/mysql-oracle/mysql-8.0.26/mysql-test/mysql-test-run.pl&#x27;</span>, @ARGV) &gt;&gt; <span class="number">8</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：</p><ol><li> gcov、gprof 运行需要较大内存，尤其是开启<code>-big-test</code>的情况下。</li><li> 官方 <code>collections/</code> 中没有 gcov 的推荐用法。</li><li> <code>mysql-test/README.gcov</code> 文件的最后修改日期是 2006 年，已过时，没有参考价值。</li></ol><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>直接在安装目录（<code>make install</code>）执行测试，报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wslu@ubuntu:/data/work/mysql/mysql80-install.bak_asan_ubsan_gcov_gprof/mysql-test$ ./mtr --gcov</span><br><span class="line">Logging: ./mtr  --gcov</span><br><span class="line"></span><br><span class="line">MySQL Version 8.0.29</span><br><span class="line">mysql-test-run: *** ERROR: Coverage <span class="built_in">test</span> needs the <span class="built_in">source</span> - please use <span class="built_in">source</span> dist</span><br></pre></td></tr></table></figure><p>在<strong>执行编译的目录</strong>（比如 <code>console-build-debug/mysql-test</code>） 执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">wslu@ubuntu:/data/work/mysql/mysql-server/console-build-debug/mysql-test$ ./mtr --gcov -big-test</span><br><span class="line">Logging: /data/work/mysql/mysql-server/mysql-test/mysql-test-run.pl  --gcov -big-test</span><br><span class="line">MySQL Version 8.0.29</span><br><span class="line">Checking supported features</span><br><span class="line"> - Binaries are debug compiled</span><br><span class="line">Purging gcov information from <span class="string">&#x27;/data/work/mysql/mysql-server&#x27;</span>...</span><br><span class="line">Using suite(s): auth_sec,binlog,binlog_gtid,binlog_nogtid,<span class="built_in">clone</span>,collations,component_keyring_file,connection_control,encryption,federated,funcs_2,gcol,gis,information_schema,innodb,innodb_fts,innodb_gis,innodb_undo,innodb_zip,interactive_utilities,json,main,opt_trace,parts,perfschema,query_rewrite_plugins,rpl,rpl_gtid,rpl_nogtid,secondary_engine,service_status_var_registration,service_sys_var_registration,service_udf_registration,sys_vars,sysschema,test_service_sql_api,test_services,x</span><br><span class="line">Collecting tests</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> binlog</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> binlog_gtid</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> binlog_nogtid</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> rpl</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> rpl_gtid</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> rpl_nogtid</span><br><span class="line">Checking leftover processes</span><br><span class="line">Removing old var directory</span><br><span class="line">Creating var directory <span class="string">&#x27;/data/work/mysql/mysql-server/console-build-debug/mysql-test/var&#x27;</span></span><br><span class="line">Installing system database</span><br><span class="line">Using parallel: 1</span><br><span class="line"></span><br><span class="line">==============================================================================</span><br><span class="line">                  TEST NAME                       RESULT  TIME (ms) COMMENT</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">[  0%] binlog_gtid.binlog_xa_select_gtid_executed_explicitly_crash  [ disabled ]   Bug<span class="comment">#28588717 Fails both on FreeBSD and other platforms</span></span><br><span class="line">[  0%] binlog_nogtid.binlog_gtid_next_xa         [ disabled ]   BUG<span class="comment">#33650776 Failure of XA COMMIT of prepared txn, can result in txn rollback</span></span><br><span class="line">[  0%] sys_vars.innodb_log_writer_threads_basic  [ disabled ]   Bug<span class="comment">#32129814 SYS_VARS.INNODB_LOG_WRITER_THREADS_BASIC TIMES OUT SPORADICALLY ON PB2</span></span><br><span class="line">[  0%] sysschema.v_wait_classes_global_by_avg_latency  [ disabled ]   BUG<span class="comment">#21550054 Test fails too often.</span></span><br><span class="line">[  0%] binlog_gtid.binlog_gtid_mix_ok_packet_all_gtids <span class="string">&#x27;mix&#x27;</span>  [ pass ]    770</span><br><span class="line">[  0%] binlog_gtid.binlog_gtid_mix_response_packet <span class="string">&#x27;mix&#x27;</span>  [ pass ]   6474</span><br><span class="line">[  0%] binlog_gtid.binlog_xa_trx_gtid_response_packet <span class="string">&#x27;mix&#x27;</span>  [ pass ]    683</span><br><span class="line">......</span><br><span class="line">[  0%] binlog_gtid.binlog_gtid_errors <span class="string">&#x27;mix&#x27;</span>      [ pass ]   1583</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>如果想执行测试后分析 <code>gmon.out</code> ，则可添加 <code>-gprof</code> 参数（仅支持 linux）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wslu@ubuntu:/data/work/mysql/mysql-server/console-build-debug/mysql-test$ ./mtr --gcov -gprof -big-test</span><br></pre></td></tr></table></figure><p>那么，在 gcov 执行完成后，<strong>mtr 就会自动调用 gprof 解析<code>gmon.out</code>文件</strong>。</p><h2 id="存在问题-1"><a href="#存在问题-1" class="headerlink" title="存在问题"></a>存在问题</h2><p><strong>但在 CentOS 7.6（云服务器 4C8G SSD）实测时遇到问题——gprof 解析 gmon.out 时特别耗时，虽然该进程 CPU 占用率 100%，看起来还在运行，但并无任何输出。</strong></p><p>比如，在编译的源码目录中执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  mysql-test git:(heads/mysql-8.0.26) ✗ ps -axf | grep mysql</span><br><span class="line">30604 ?        SN     0:00  \_ perl mysql-test-run.pl --parallel=4 --timer --debug-server --force --testcase-timeout=180 --suite-timeout=1800 --comment=all-default-debug --vardir=var-all-default --skip-combinations --unit-tests-report --no-skip --exclude-platform=windows --skip-ndb --max-test-fail=0 --suite=rpl -gcov -gprof</span><br><span class="line">30611 ?        SN     0:30      \_ /usr/bin/perl /home/wslu/work/mysql/mysql-server/mysql-test/mysql-test-run.pl --parallel=4 --timer --debug-server --force --testcase-timeout=180 --suite-timeout=1800 --comment=all-default-debug --vardir=var-all-default --skip-combinations --unit-tests-report --no-skip --exclude-platform=windows --skip-ndb --max-test-fail=0 --suite=rpl -gcov -gprof</span><br><span class="line">32759 ?        SN     0:44          \_ /usr/bin/perl /home/wslu/work/mysql/mysql-server/mysql-test/mysql-test-run.pl --parallel=4 --timer --debug-server --force --testcase-timeout=180 --suite-timeout=1800 --comment=all-default-debug --vardir=var-all-default --skip-combinations --unit-tests-report --no-skip --exclude-platform=windows --skip-ndb --max-test-fail=0 --suite=rpl -gcov -gprof</span><br><span class="line"> 2829 ?        SN     0:00          |   \_ sh -c gprof /home/wslu/work/mysql/mysql-server/build-debug/runtime_output_directory/mysqld /home/wslu/work/mysql/mysql-server/mysql-test/var-all-default/3/mysqld.6/data/gmon.out 2 &gt; /home/wslu/work/mysql/mysql-server/mysql-test/var-all-default/3/mysqld.6/data/gprof.err &gt; /home/wslu/work/mysql/mysql-server/mysql-test/var-all-default/3/mysqld.6/data/gprof.msg</span><br><span class="line"> 2830 ?        RN     7:07          |       \_ gprof /home/wslu/work/mysql/mysql-server/build-debug/runtime_output_directory/mysqld /home/wslu/work/mysql/mysql-server/mysql-test/var-all-default/3/mysqld.6/data/gmon.out 2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>gmon.out 文件只有 61MB，但 gprof 在解析<code> gmon.out</code> 时，长达 23 小时无任何输出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  mysql-test git:(heads/mysql-8.0.26) ✗ ls /home/wslu/work/mysql/mysql-server/mysql-test/var-all-default/3/mysqld.6/data/gmon.out -lh</span><br><span class="line">-rw-r--r-- 1 wslu wslu 61M Mar 27 20:21 /home/wslu/work/mysql/mysql-server/mysql-test/var-all-default/3/mysqld.6/data/gmon.out</span><br><span class="line">➜  mysql-test git:(heads/mysql-8.0.26) ✗ ll /home/wslu/work/mysql/mysql-server/mysql-test/var-all-default/3/mysqld.6/data/gprof.err</span><br><span class="line">-rw-r--r-- 1 wslu wslu 0 Mar 28 09:23 /home/wslu/work/mysql/mysql-server/mysql-test/var-all-default/3/mysqld.6/data/gprof.err</span><br><span class="line">➜  mysql-test git:(heads/mysql-8.0.26) ✗ ll  /home/wslu/work/mysql/mysql-server/mysql-test/var-all-default/3/mysqld.6/data/gprof.msg</span><br><span class="line">-rw-r--r-- 1 wslu wslu 0 Mar 28 09:23 /home/wslu/work/mysql/mysql-server/mysql-test/var-all-default/3/mysqld.6/data/gprof.msg</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><h2 id="简介-7"><a href="#简介-7" class="headerlink" title="简介"></a>简介</h2><p>MySQL 使用 <a href="https://testanything.org/" title="TAP">TAP</a>（Test Anything Protocol） 和 <a href="https://google.github.io/googletest/" title="Google Test Framework">Google Test Framework</a> 来实现单元测试。</p><h3 id="MyTAP"><a href="#MyTAP" class="headerlink" title="MyTAP"></a>MyTAP</h3><p>TAP 是 Perl 与测试模块之间所使用的简单的基于文本的接口，主要用于开发 Perl 和 PHP 模块。示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">TAP version 13</span><br><span class="line">ok 1 - testNewArrayIsEmpty(ArrayTest)</span><br><span class="line">ok 2 - testArrayContainsAnElement(ArrayTest)</span><br><span class="line">not ok 3 - Failure: testFailure(FailureErrorTest)</span><br><span class="line">  ---</span><br><span class="line">  message: <span class="string">&#x27;Failed asserting that &lt;integer:2&gt; matches expected value &lt;integer:1&gt;.&#x27;</span></span><br><span class="line">  severity: fail</span><br><span class="line">  data:</span><br><span class="line">    got: 2</span><br><span class="line">    expected: 1</span><br><span class="line">  ...</span><br><span class="line">not ok 4 - Error: testError(FailureErrorTest)</span><br><span class="line">1..4</span><br></pre></td></tr></table></figure><p>为了实现 C/C++ 的单元测试，MySQL 开发了一个用于生成 TAP 文本的库<code>libmytap.a</code>，源码路径位于<code>unittest/mytap/</code>。</p><h3 id="Google-Test-Framework"><a href="#Google-Test-Framework" class="headerlink" title="Google Test Framework"></a>Google Test Framework</h3><p>Google Test Framework，与 MyTAP 类似，也是一个单元测试框架，但提供了更丰富的功能：</p><ul><li>A rich set of predicates</li><li>User-defined predicates and assertions</li><li>Automatic test registration</li><li>Nice error reporting when a predicate fails (with line number, expected and actual values, and additional comments)</li><li>Test fixtures, and setup/teardown logic</li><li>Death tests</li><li>Disabled tests</li><li>Test filtering and shuffling</li></ul><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ul><li><a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_UNIT_TESTS.html" title="MySQL: Creating and Executing Unit Tests">MySQL: Creating and Executing Unit Tests</a><ul><li><a href="https://testanything.org/" title="Home - Test Anything Protocol">Home - Test Anything Protocol</a></li><li><a href="https://google.github.io/googletest/" title="GoogleTest User’s Guide | GoogleTest">GoogleTest User’s Guide | GoogleTest</a></li></ul></li></ul><h2 id="使用方法-7"><a href="#使用方法-7" class="headerlink" title="使用方法"></a>使用方法</h2><p><strong>编译选项</strong>：<code>-DWITH_DEBUG=1 -DWITH_UNIT_TESTS=&#123;ON|OFF&#125;</code>，默认是 <code>ON</code> 。</p><p><strong>执行路径</strong>：必须在编译的源码目录中执行。</p><p><strong>使用方法</strong>：</p><ol><li> 编译后，在<strong>执行编译（cmake）的目录</strong>执行 <code>make test</code>或<code>make test-unit</code> 指令，虽然按手册描述两个指令都能实现单元测试效果，但实测<code>make test-unit</code>会输出更详细的信息，因此，<strong>建议使用<code>make test-unit</code></strong> 。</li><li> 编译后，在<code>编译目录/mysql-test</code> 中执行 mtr 指令时，添加<code>--unit-tests-report</code> 选项。</li></ol><p><strong>注意事项</strong>：</p><p>若启用了 ASAN：</p><ol><li> 直接在编译目录执行<code>make test-unit</code>，可能会因 ASAN 检测到单元测试代码有内存错误（<code>RUN_ALL_TESTS()</code>的子函数）而导致 case 失败。</li><li>通过 mtr 指令来运行单元测试时，也可能会遇到 ASAN 检测到内存错误或内存泄漏，即使按如下方式修改 <code>.supp</code> 文件，也无法跳过：<ol><li> 若是 AddressSanitizer 范畴中的错误，比如下表中的 heap-buffer-overflow，在<code>asan.supp</code> 文件添加 <code>interceptor_via_fun:RUN_ALL_TESTS</code> ，无法跳过该错误。</li><li> 同理，如果是 ASAN 中的<code>LeakSanitizer</code>检测到内存泄漏，在<code>lsan.supp</code> 文件添加 <code>leak:RUN_ALL_TESTS</code>，无法跳过该错误。</li></ol></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">==<span class="number">228225</span>==ERROR: AddressSanitizer: heap-buffer-overflow on address <span class="number">0x620000098e90</span> at pc <span class="number">0x5570c34c26fb</span> bp <span class="number">0x7ffe1d0d0590</span> sp <span class="number">0x7ffe1d0d0580</span></span><br><span class="line">READ of size <span class="number">2</span> at <span class="number">0x620000098e90</span> thread T0</span><br><span class="line">    #<span class="number">0</span> <span class="number">0x5570c34c26fa</span> in modify_all_zh_pages /data/work/mysql/mysql-server/strings/ctype-uca.cc:<span class="number">4178</span></span><br><span class="line">    #<span class="number">1</span> <span class="number">0x5570c34c4d89</span> in init_weight_level /data/work/mysql/mysql-server/strings/ctype-uca.cc:<span class="number">4287</span></span><br><span class="line">    ......</span><br><span class="line">    #<span class="number">16</span> <span class="number">0x5570c36724b8</span> in testing::UnitTest::<span class="built_in">Run</span>() /data/work/mysql/mysql-server/extra/googletest/googletest-release<span class="number">-1.11</span><span class="number">.0</span>/googletest[表情]c/gtest.cc:<span class="number">5438</span></span><br><span class="line">    #<span class="number">17</span> <span class="number">0x5570c3285445</span> in <span class="built_in">RUN_ALL_TESTS</span>() /data/work/mysql/mysql-server/extra/googletest/googletest-release<span class="number">-1.11</span><span class="number">.0</span>/googletest/include/gtest/gtest.h:<span class="number">2490</span></span><br><span class="line">    #<span class="number">18</span> <span class="number">0x5570c3284f94</span> in main /data/work/mysql/mysql-server/unittest/gunit/gunit_test_main.cc:<span class="number">150</span></span><br><span class="line">    #<span class="number">19</span> <span class="number">0x7f680a423d8f</span> in __libc_start_call_main ../sysdeps/nptl[表情]bc_start_call_main.h:<span class="number">58</span></span><br><span class="line">    #<span class="number">20</span> <span class="number">0x7f680a423e3f</span> in __libc_start_main_impl ..[表情]u[表情]bc-start.c:<span class="number">392</span></span><br><span class="line">    #<span class="number">21</span> <span class="number">0x5570c2682f34</span> in _start (/data/work/mysql/mysql-server/console-build-debug/runtime_output_directory/merge_small_tests-t+<span class="number">0x26a9f34</span>)</span><br></pre></td></tr></table></figure><p>综上，<strong>运行单元测试时，不建议同时启用 ASAN</strong>。</p><h2 id="指令示例-5"><a href="#指令示例-5" class="headerlink" title="指令示例"></a>指令示例</h2><h3 id="make-test-示例"><a href="#make-test-示例" class="headerlink" title="make test 示例"></a><strong>make test 示例</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">➜  console-build-debug git:(my_learn_8.0.29) ✗ make <span class="built_in">test</span></span><br><span class="line">Running tests...</span><br><span class="line">Test project /Users/wslu/work/mysql/mysql-server-8.0/console-build-debug</span><br><span class="line">        Start   1: hp_test1</span><br><span class="line">  1/223 Test   <span class="comment">#1: hp_test1 ...................................................   Passed    0.49 sec</span></span><br><span class="line">        Start   2: hp_test2</span><br><span class="line">  2/223 Test   <span class="comment">#2: hp_test2 ...................................................   Passed    0.74 sec</span></span><br><span class="line">        Start   3: pfs_instr_class</span><br><span class="line">  3/223 Test   <span class="comment">#3: pfs_instr_class ............................................   Passed    0.54 sec</span></span><br><span class="line"> ......</span><br><span class="line">        Start 206: routertest_component_rest_metadata_cache</span><br><span class="line"> 206/223 Test <span class="comment">#206: routertest_component_rest_metadata_cache ...................***Failed   13.37 sec</span></span><br><span class="line">        Start 207: routertest_component_rest_mock_server</span><br><span class="line"> 207/223 Test <span class="comment">#207: routertest_component_rest_mock_server ......................   Passed   23.60 sec</span></span><br><span class="line">        Start 208: routertest_component_rest_router</span><br><span class="line"> 208/223 Test <span class="comment">#208: routertest_component_rest_router ...........................   Passed    3.87 sec</span></span><br><span class="line">        Start 209: routertest_component_rest_routing</span><br><span class="line"> 209/223 Test <span class="comment">#209: routertest_component_rest_routing ..........................***Failed  145.64 sec</span></span><br><span class="line">        Start 210: routertest_component_rest_connection_pool</span><br><span class="line"> 210/223 Test <span class="comment">#210: routertest_component_rest_connection_pool ..................   Passed    5.71 sec</span></span><br><span class="line">        Start 211: routertest_component_router_configuration_errors</span><br><span class="line"> 211/223 Test <span class="comment">#211: routertest_component_router_configuration_errors ...........   Passed    5.15 sec</span></span><br><span class="line">        Start 212: routertest_component_routing</span><br><span class="line"> 212/223 Test <span class="comment">#212: routertest_component_routing ...............................***Failed   39.04 sec</span></span><br><span class="line">        Start 213: routertest_component_routing_connection</span><br><span class="line"> 213/223 Test <span class="comment">#213: routertest_component_routing_connection ....................***Failed  117.32 sec</span></span><br><span class="line">        Start 214: routertest_component_routing_strategy</span><br><span class="line"> 214/223 Test <span class="comment">#214: routertest_component_routing_strategy ......................   Passed   83.88 sec</span></span><br><span class="line">        Start 215: routertest_component_sd_notify</span><br><span class="line"> 215/223 Test <span class="comment">#215: routertest_component_sd_notify .............................   Passed   22.63 sec</span></span><br><span class="line">        Start 216: routertest_component_shutdown</span><br><span class="line"> 216/223 Test <span class="comment">#216: routertest_component_shutdown ..............................   Passed    4.86 sec</span></span><br><span class="line">        Start 217: routertest_component_state_file</span><br><span class="line"> 217/223 Test <span class="comment">#217: routertest_component_state_file ............................   Passed   22.92 sec</span></span><br><span class="line">        Start 218: routertest_component_user_option</span><br><span class="line"> 218/223 Test <span class="comment">#218: routertest_component_user_option ...........................   Passed    0.74 sec</span></span><br><span class="line">        Start 219: routertest_component_metadata_http_auth_backend</span><br><span class="line"> 219/223 Test <span class="comment">#219: routertest_component_metadata_http_auth_backend ............***Failed   76.95 sec</span></span><br><span class="line">        Start 220: routertest_component_socket_close</span><br><span class="line"> 220/223 Test <span class="comment">#220: routertest_component_socket_close ..........................   Passed  162.52 sec</span></span><br><span class="line">        Start 221: routertest_component_routing_splicer</span><br><span class="line"> 221/223 Test <span class="comment">#221: routertest_component_routing_splicer .......................   Passed  287.30 sec</span></span><br><span class="line">        Start 222: routertest_component_mock_server</span><br><span class="line"> 222/223 Test <span class="comment">#222: routertest_component_mock_server ...........................   Passed   20.44 sec</span></span><br><span class="line">        Start 223: routertest_integration_routing_reuse</span><br><span class="line"> 223/223 Test <span class="comment">#223: routertest_integration_routing_reuse .......................   Passed  440.36 sec</span></span><br><span class="line"></span><br><span class="line">97% tests passed, 6 tests failed out of 223</span><br><span class="line"></span><br><span class="line">Total Test time (real) = 2940.80 sec</span><br><span class="line"></span><br><span class="line">The following tests FAILED:</span><br><span class="line">   14 - merge_small_tests (Failed)</span><br><span class="line">  206 - routertest_component_rest_metadata_cache (Failed)</span><br><span class="line">  209 - routertest_component_rest_routing (Failed)</span><br><span class="line">  212 - routertest_component_routing (Failed)</span><br><span class="line">  213 - routertest_component_routing_connection (Failed)</span><br><span class="line">  219 - routertest_component_metadata_http_auth_backend (Failed)</span><br><span class="line">Errors <span class="keyword">while</span> running CTest</span><br><span class="line">Output from these tests are <span class="keyword">in</span>: /Users/wslu/work/mysql/mysql-server-8.0/console-build-debug/Testing/Temporary/LastTest.log</span><br><span class="line">Use <span class="string">&quot;--rerun-failed --output-on-failure&quot;</span> to re-run the failed cases verbosely.</span><br><span class="line">make: *** [<span class="built_in">test</span>] Error 8</span><br></pre></td></tr></table></figure><h3 id="make-test-unit-示例"><a href="#make-test-unit-示例" class="headerlink" title="make test-unit 示例"></a><strong>make test-unit 示例</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">wslu@ubuntu:/data/work/mysql/mysql-server/console-build-debug$ head -n 100 /tmp/maketestunit.out</span><br><span class="line">Test project /data/work/mysql/mysql-server/console-build-debug</span><br><span class="line">        Start  14: merge_small_tests</span><br><span class="line">        Start  15: merge_large_tests</span><br><span class="line">  1/223 Test  <span class="comment">#14: merge_small_tests ..........................................***Failed   70.09 sec</span></span><br><span class="line">[==========] Running 2386 tests from 132 <span class="built_in">test</span> suites.</span><br><span class="line">[----------] Global <span class="built_in">test</span> environment set-up.</span><br><span class="line">[----------] 5 tests from BoundsCheckedArrayDeathTest</span><br><span class="line">[ RUN      ] BoundsCheckedArrayDeathTest.BoundsCheckRead</span><br><span class="line">[       OK ] BoundsCheckedArrayDeathTest.BoundsCheckRead (616 ms)</span><br><span class="line">[ RUN      ] BoundsCheckedArrayDeathTest.BoundsCheckAssign</span><br><span class="line">[       OK ] BoundsCheckedArrayDeathTest.BoundsCheckAssign (329 ms)</span><br><span class="line">[ RUN      ] BoundsCheckedArrayDeathTest.BoundsCheckPopFront</span><br><span class="line">[       OK ] BoundsCheckedArrayDeathTest.BoundsCheckPopFront (276 ms)</span><br><span class="line">[ RUN      ] BoundsCheckedArrayDeathTest.BoundsCheckResize</span><br><span class="line">[       OK ] BoundsCheckedArrayDeathTest.BoundsCheckResize (277 ms)</span><br><span class="line">[ RUN      ] BoundsCheckedArrayDeathTest.BoundsCheckResizeAssign</span><br><span class="line">[       OK ] BoundsCheckedArrayDeathTest.BoundsCheckResizeAssign (290 ms)</span><br><span class="line">[----------] 5 tests from BoundsCheckedArrayDeathTest (1794 ms total)</span><br><span class="line"></span><br><span class="line">[----------] 1 <span class="built_in">test</span> from DebugDeathTest</span><br><span class="line">[ RUN      ] DebugDeathTest.Suicide</span><br><span class="line">[       OK ] DebugDeathTest.Suicide (178 ms)</span><br><span class="line">[----------] 1 <span class="built_in">test</span> from DebugDeathTest (178 ms total)</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">216/223 Test   <span class="comment">#1: hp_test1 ...................................................   Passed    0.96 sec</span></span><br><span class="line">        Start  12: pfs_misc</span><br><span class="line">217/223 Test  <span class="comment">#10: pfs_noop ...................................................   Passed    0.76 sec</span></span><br><span class="line">        Start  83: basic</span><br><span class="line">218/223 Test  <span class="comment">#83: basic ......................................................   Passed    0.12 sec</span></span><br><span class="line">        Start  79: skip</span><br><span class="line">219/223 Test  <span class="comment">#79: skip .......................................................   Passed    0.07 sec</span></span><br><span class="line">        Start  80: todo</span><br><span class="line">220/223 Test  <span class="comment">#12: pfs_misc ...................................................   Passed    0.91 sec</span></span><br><span class="line">        Start  81: skip_all</span><br><span class="line">221/223 Test  <span class="comment">#80: todo .......................................................   Passed    0.06 sec</span></span><br><span class="line">        Start  82: no_plan</span><br><span class="line">222/223 Test  <span class="comment">#81: skip_all ...................................................   Passed    0.07 sec</span></span><br><span class="line">223/223 Test  <span class="comment">#82: no_plan ....................................................   Passed    0.03 sec</span></span><br><span class="line"></span><br><span class="line">94% tests passed, 14 tests failed out of 223</span><br><span class="line"></span><br><span class="line">Total Test time (real) = 4334.59 sec</span><br><span class="line"></span><br><span class="line">The following tests FAILED:</span><br><span class="line">   14 - merge_small_tests (Failed)</span><br><span class="line">   15 - merge_large_tests (Failed)</span><br><span class="line">   56 - gcs_xcom_xcom_cache (Subprocess killed)</span><br><span class="line">   57 - gcs_xcom_control_interface (Failed)</span><br><span class="line">   65 - merge_temptable_tests-t (Failed)</span><br><span class="line">  187 - routertest_component_bootstrap (Subprocess aborted)</span><br><span class="line">  189 - routertest_component_bootstrap_clusterset (Subprocess aborted)</span><br><span class="line">  191 - routertest_component_bootstrap_tls_endpoint (Subprocess aborted)</span><br><span class="line">  192 - routertest_component_clusterset (Subprocess aborted)</span><br><span class="line">  197 - routertest_component_gr_notifications (Failed)</span><br><span class="line">  205 - routertest_component_rest_api_enable (Subprocess aborted)</span><br><span class="line">  213 - routertest_component_routing_connection (Subprocess aborted)</span><br><span class="line">  221 - routertest_component_routing_splicer (Timeout)</span><br><span class="line">  223 - routertest_integration_routing_reuse (Failed)</span><br><span class="line">Errors <span class="keyword">while</span> running CTest</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="通过-mtr-执行单元测试"><a href="#通过-mtr-执行单元测试" class="headerlink" title="通过 mtr 执行单元测试"></a>通过 mtr 执行单元测试</h3><p>在<code>编译目录/mysql-test</code> 执行如下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl mysql-test-run.pl --timer --max-test-fail=0 --force --parallel=1 --max-test-fail=0 --vardir=var-binlog --suite=binlog --unit-tests-report</span><br></pre></td></tr></table></figure><p>mtr 会首先运行 binlog suite 的所有 case，之后才会运行单元测试。</p><h1 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h1><h2 id="简介-8"><a href="#简介-8" class="headerlink" title="简介"></a>简介</h2><p>涉及压力测试的有两部分：</p><h3 id="压力测试-suites-x20"><a href="#压力测试-suites-x20" class="headerlink" title="压力测试 suites&#x20;"></a>压力测试 suites&#x20;</h3><p>只有两个：</p><ul><li>stress</li><li>innodb_stress&#x20;</li></ul><p>如需要添加新 case，参考对应 suite 已有 case 照猫画虎即可，后续文章会详解介绍语法。</p><h3 id="mysql-stress-test-pl-x20"><a href="#mysql-stress-test-pl-x20" class="headerlink" title="mysql-stress-test.pl&#x20;"></a>mysql-stress-test.pl&#x20;</h3><p>被 <code>mysql-test-run.pl</code> 调用，参数是<code>--stress</code>。</p><p>使用说明位于<code>mysql-test/README.stress</code>文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">The stress script is designed to perform testing of the MySQL server <span class="keyword">in</span></span><br><span class="line">a multi-threaded environment.</span><br><span class="line"></span><br><span class="line">All functionality regarding stress testing is implemented <span class="keyword">in</span> the</span><br><span class="line">mysql-stress-test.pl script.</span><br><span class="line"></span><br><span class="line">The stress script allows:</span><br><span class="line"></span><br><span class="line"> - To stress <span class="built_in">test</span> the mysqltest binary <span class="built_in">test</span> engine.</span><br><span class="line"> - To stress <span class="built_in">test</span> the regular <span class="built_in">test</span> suite and any additional <span class="built_in">test</span> suites</span><br><span class="line">   (such as mysql-test-extra-5.0).</span><br><span class="line"> - To specify files with lists of tests both <span class="keyword">for</span> initialization of</span><br><span class="line">   stress db and <span class="keyword">for</span> further testing itself.</span><br><span class="line"> - To define the number of threads to be concurrently used <span class="keyword">in</span> testing.</span><br><span class="line"> - To define limitations <span class="keyword">for</span> the <span class="built_in">test</span> run. such as the number of tests or</span><br><span class="line">   loops <span class="keyword">for</span> execution or duration of testing, delay between <span class="built_in">test</span></span><br><span class="line">   executions, and so forth.</span><br><span class="line"> - To get a readable <span class="built_in">log</span> file that can be used <span class="keyword">for</span> identification of</span><br><span class="line">   errors that occur during testing.</span><br><span class="line"></span><br><span class="line">There are two ways to run the mysql-stress-test.pl script:</span><br><span class="line"></span><br><span class="line"> - For most cases, it is enough to use the options below <span class="keyword">for</span> starting</span><br><span class="line">   the stress <span class="built_in">test</span> from the mysql-test-run wrapper. In this <span class="keyword">case</span>, the</span><br><span class="line">   server is run automatically, all preparation steps are performed,</span><br><span class="line">   and after that the stress <span class="built_in">test</span> is started.</span><br><span class="line"></span><br><span class="line"> - In advanced <span class="keyword">case</span>, you can run the mysql-stress-test.pl script directly.</span><br><span class="line">   But this requires that you perform some preparation steps and to specify</span><br><span class="line">   a bunch of options as well, so this invocation method may be a bit</span><br><span class="line">   complicated.</span><br></pre></td></tr></table></figure><p>可见，有两种用法：</p><ul><li><p>大部分情况下，通过 <code>mysql-test-run.pl --stress=[option1,option2,...]</code> 运行即可，该脚本实现了准备阶段、压力测试阶段所需的工作。</p></li><li><p>更高级的用法是直接执行<code>mysql-stress-test.pl</code> 脚本，这就需要自行实现准备阶段、测试阶段所需的工作。主要包括：</p><ul><li><p><code> --stress-init-file[=path]</code></p><p><strong>file_name</strong> is the location of the file that contains the list of tests to be run once to initialize the database for the testing. If missing, the default file is <strong>stress_init.txt</strong> in the test suite directory.</p></li><li><p><code>--stress-tests-file[=file_name]</code></p><p>Use this option to run the stress tests. <strong>file_name</strong> is the location of the file that contains the list of tests. If <strong>file_name</strong> is omitted, the default file is <strong>stress-test.txt</strong> in the stress suite directory. (See <strong><code>--stress-suite-basedir</code></strong>).</p></li></ul></li></ul><p>其他参数见手册 <a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_MYSQL_STRESS_TEST_PL.html" title="MySQL: mysql-stress-test.pl — Server Stress Test Program">MySQL: mysql-stress-test.pl — Server Stress Test Program</a></p><h2 id="指令示例-6"><a href="#指令示例-6" class="headerlink" title="指令示例"></a>指令示例</h2><h3 id="单独运行压力测试-suites"><a href="#单独运行压力测试-suites" class="headerlink" title="单独运行压力测试 suites"></a>单独运行压力测试 suites</h3><p>没找到手册说明，据我理解，只要未主动关闭单元测试标记（<code>-DWITH_UNIT_TESTS=&#123;ON|OFF&#125;</code>选项，默认是开启的），就肯定会编译生成 stress suite。</p><p>在 Ubuntu 22.04 X86_64 执行测试，成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">wslu@ubuntu:/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test$ perl mysql-test-run.pl --force --timer    --comment=stress --vardir=var-stress  --suite=stress --no-skip --max-test-fail=30</span><br><span class="line">Logging: mysql-test-run.pl  --force --timer --comment=stress --vardir=var-stress --suite=stress --no-skip --max-test-fail=30</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MySQL Version 8.0.29</span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># stress</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line">Checking supported features</span><br><span class="line"> - Binaries are debug compiled</span><br><span class="line">Using suite(s): stress</span><br><span class="line">Collecting tests</span><br><span class="line">Removing old var directory</span><br><span class="line">Creating var directory <span class="string">&#x27;/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-stress&#x27;</span></span><br><span class="line">Installing system database</span><br><span class="line">Using parallel: 1</span><br><span class="line"></span><br><span class="line">==============================================================================</span><br><span class="line">                  TEST NAME                       RESULT  TIME (ms) COMMENT</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[ 16%] stress.ddl_myisam                         [ pass ]  88171</span><br><span class="line">[ 33%] stress.ddl_archive                        [ pass ]  11868</span><br><span class="line">[ 50%] stress.ddl_csv                            [ pass ]   8007</span><br><span class="line">[ 66%] stress.ddl_innodb                         [ pass ]  163638</span><br><span class="line">[ 83%] stress.ddl_memory                         [ pass ]  84721</span><br><span class="line">[100%] shutdown_report                           [ pass ]</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">The servers were restarted 1 <span class="built_in">times</span></span><br><span class="line">The servers were reinitialized 0 <span class="built_in">times</span></span><br><span class="line">Spent 356.405 of 423 seconds executing testcases</span><br><span class="line"></span><br><span class="line">Completed: All 6 tests were successful.</span><br></pre></td></tr></table></figure><h3 id="mysql-stress-test-pl-使用示例"><a href="#mysql-stress-test-pl-使用示例" class="headerlink" title="mysql-stress-test.pl 使用示例"></a>mysql-stress-test.pl 使用示例</h3><p>指令示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">perl mysql-stress-test.pl</span><br><span class="line">--stress-suite-basedir=/opt/qa/mysql-test-extra-5.0/mysql-test</span><br><span class="line">--stress-basedir=/opt/qa/<span class="built_in">test</span></span><br><span class="line">--server-logs-dir=/opt/qa/logs</span><br><span class="line">--test-count=20</span><br><span class="line">--stress-tests-file=innodb-tests.txt</span><br><span class="line">--stress-init-file=innodb-init.txt</span><br><span class="line">--threads=5</span><br><span class="line">--suite=funcs_1</span><br><span class="line">--mysqltest=/opt/mysql/mysql-5.0/client/mysqltest</span><br><span class="line">--server-user=root</span><br><span class="line">--server-database=<span class="built_in">test</span></span><br><span class="line">--cleanup</span><br></pre></td></tr></table></figure><h2 id="官方推荐的压力测试用法"><a href="#官方推荐的压力测试用法" class="headerlink" title="官方推荐的压力测试用法"></a>官方推荐的压力测试用法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### 提交代码时执行</span></span><br><span class="line">perl mysql-test-run.pl --force --timer    --comment=stress --vardir=var-stress  --suite=stress --no-skip --max-test-fail=30</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 每天执行</span></span><br><span class="line">perl mysql-test-run.pl --force --timer --big-test   --comment=stress --vardir=var-stress  --suite=stress --no-skip</span><br><span class="line"></span><br><span class="line"><span class="comment">##### 每周执行 basic</span></span><br><span class="line"><span class="comment"># 相较于提交代码时执行的测试指令，多了 --debug-server 选项</span></span><br><span class="line">perl mysql-test-run.pl --debug-server --force --timer --comment=stress --vardir=var-stress  --suite=stress --no-skip</span><br><span class="line"><span class="comment"># 相较于上一条多了 --big-test</span></span><br><span class="line">perl mysql-test-run.pl --debug-server --force --timer --big-test    --comment=stress --vardir=var-stress  --suite=stress --no-skip</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 每天执行 valgrind</span></span><br><span class="line">perl mysql-test-run.pl --force --timer    --comment=stress --vardir=var-stress  --suite=stress</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 每周执行 valgrind</span></span><br><span class="line"><span class="comment"># 指定了 --big-test</span></span><br><span class="line">perl mysql-test-run.pl --force --timer --big-test --testcase-timeout=60 --debug-server  --comment=stress-debug-big --vardir=var-stress-debug-big  --suite=stress</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他</span></span><br><span class="line">perl mysql-test-run.pl --force --timer    --comment=stress --vardir=var-stress  --suite=stress --no-skip --max-test-fail=30</span><br><span class="line">perl mysql-test-run.pl --force --timer    --comment=innodb-stress --vardir=var-innodb-stress  --suite=innodb_stress --no-skip --max-test-fail=30</span><br></pre></td></tr></table></figure><p>注意：<code>mysql-test/README.stress</code> 文件的最后修改日期是 2006 年，已过时，没有参考价值。</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><h2 id="mtr-执行路径"><a href="#mtr-执行路径" class="headerlink" title="mtr 执行路径"></a><strong>mtr 执行路径</strong></h2><ul><li><strong>代码覆盖率、单元测试只能在<code>编译的源码目录/mysql-test</code>执行</strong>。</li><li><strong>其他测试在<code>编译的源码目录/mysql-test</code>和 <code>安装目录/mysql-test</code>都可以执行</strong>。</li><li><strong>如无特殊需求，更建议在安装目录执行 mtr 测试</strong>（目录结构更清晰）。</li></ul><h2 id="测试结果及兼容性"><a href="#测试结果及兼容性" class="headerlink" title="测试结果及兼容性"></a><strong>测试结果及</strong>兼容性</h2><table><thead><tr><th><strong>名称</strong></th><th><strong>对其支持是否是实验性的</strong></th><th><strong>编译兼容性（同时启用可编译成功，则为兼容）</strong></th><th><strong>mtr 测试结果</strong></th><th><strong>结论</strong></th></tr></thead><tbody><tr><td>ASAN</td><td>否</td><td>与 UBSAN 、Valgrind 兼容。</td><td>若与 Valgrind 同时启用（mtr 指定 <code>--valgrind</code>等选项），执行 mtr 测试时，会导致很多 case 因 valgrind memcheck 报错而失败。比如 <code>binlog_gtid.binlog_gtid_mix_ok_packet_all_gtids</code></td><td><strong>ASAN 与 Valgrind 不可同时启用，但可与 UBSAN 同时启用。</strong></td></tr><tr><td>LSAN</td><td>否</td><td>已集成到 ASAN，未测试。</td><td></td><td>已集成到 ASAN，无需单独启用。</td></tr><tr><td>UBSAN</td><td>否</td><td>与 ASAN、valgrind、TSAN 都兼容。</td><td></td><td><strong>建议与 ASAN 同时启用</strong>。</td></tr><tr><td>MSAN</td><td>是</td><td>与 ASAN 不兼容，若同时启用，编译会报错。&#xA;单独启用 MSAN，cmake 失败，报错。</td><td></td><td>MySQL 对其的支持是实验性的，暂不建议使用。</td></tr><tr><td>TSAN</td><td>是</td><td>与 ASAN 不兼容，若同时启用，编译会报错。&#xA;与 UBSAN、Valgrind 兼容。</td><td>即使只启用 TSAN，在运行 mtr 时，install database 阶段依然有大片的 data race。</td><td>MySQL 对其的支持是实验性的，暂不建议使用。</td></tr><tr><td>valgrind</td><td>否</td><td>与 ASAN 、UBSAN 、TSAN 兼容。</td><td>单独启用 valgrind，mtr 可正常执行<strong>完全体 valgrind 测试（mtr 指定<code>--valgrind</code>选项）</strong>，memcheck 未报错。&#xA;与 ASAN 同时启用时，若执行完全体 valgrind 测试，mtr 会因 valgrind memcheck 与 asan 冲突而 crash <strong>。</strong></td><td><strong>若要使用，不建议与 ASAN 同时启用。</strong></td></tr><tr><td>gcov/gprof</td><td>否</td><td>与 ASAN、UBSAN 兼容。&#xA;gprof 只支持 linux，不支持 MacOS/Windows。</td><td>需要在 <strong>执行 cmake 的源码目录</strong> 测试。</td><td><strong>建议与 ASAN、UBSAN 一起启用。</strong></td></tr><tr><td>单元测试</td><td>否</td><td>只要是 DEBUG 版本，就会默认启用。&#xA;与 ASAN、UBSAN 兼容，其他组件未验证，理论上也应该兼容。</td><td>需要在 <strong>执行 cmake 的源码目录</strong> 测试，运行<code>make test-unit</code>指令或<code>./mtr --unit-tests-report</code>。&#xA;ASAN 会检测到部分测试 case 自身存在内存泄漏，导致当前 case 失败。</td><td>做单元测试时建议启用 ASAN/UBSAN/LSAN。</td></tr><tr><td>压力测试</td><td>否</td><td>只要编译，就会产生 <code>stress</code>、<code>innodb_stress</code> 两个 suite 。&#xA;<code>mysql-stress-test.pl</code> 需要自定义 初始化和运行的 SQL 语句，不建议使用。</td><td>测试成功。</td><td>正常运行 mtr 全量 suite 或单独运行 <code>stress</code>、<code>innodb_stress </code>suites。</td></tr></tbody></table><p><strong>注意事项：</strong></p><ol><li> 由于 mtr case 特别多，运行全部 case 时间过长，因此，该表中所说「正常执行」是执行一部分 suites（而不是全部）未报错。</li><li> <strong>从执行时长来看，如需在 hyper 运行官方推荐 collections ，至少要开启 32 并发</strong>。</li><li> <strong>对于单元测试、代码覆盖率测试、内存错误检测，建议在 X86_64 平台运行，某些选项对 ARM 平台不兼容（编译失败）</strong>。</li><li> <strong>部分 perl 版本有内存泄漏，会被 ASAN 检测出来，导致 mtr 测试终止</strong>。目前验证 Ubuntu 22.04 所用的 perl 5.34.0 存在内存泄漏，而 Ubuntu 20.04 所用的 perl 5.30.0 不存在内存泄漏。</li><li> 由于我主要是在虚拟机进行验证的，而 mtr 运行太过耗时，因此，本文章节涉及的 mtr 指令，大部分并未完整运行（进度小于 10%）。</li></ol><h2 id="推荐用法"><a href="#推荐用法" class="headerlink" title="推荐用法"></a>推荐用法</h2><blockquote><p>本部分是个人根据官方 collections ，结合实际情况给出的建议，仅供参考。</p></blockquote><p>在代码开发阶段，统一使用 debug 版本（编译选项<code>-DWITH_DEBUG=1</code>）提前发现问题：</p><ul><li>push 代码到 dev 分支时，可参考 <code>default.push</code> 中的指令集。</li><li>merge 代码到 main 分支时，可参考 <code>mysql-trunk-stage.push</code> （与 <code>mysql-8.0-stage.push</code> 完全相同，是<code>default.push</code>的超集）中的指令集。</li></ul><p>内核在发布 alpha 版本前，也要用 debug 版本来验证稳定性：</p><ul><li><strong>单元测试</strong>：<ul><li>编译选项：<code>-DWITH_DEBUG=1 -DWITH_UNIT_TESTS=&#123;ON|OFF&#125;</code>，默认是 ON 。</li><li>执行路径：<strong>只能在编译后的源码目录执行</strong>。</li><li>使用方法：<ul><li>执行 <code>make test</code>或<code>make test-unit</code> 指令，虽然按手册描述两个指令都能实现单元测试效果，但实测<code>make test-unit</code>会输出更详细的信息，因此，<strong>建议使用<code>make test-unit</code></strong> 。</li><li>执行 mtr 指令时添加 <code>--unit-tests-report</code> 选项也有同样效果。</li></ul></li><li>注意事项：在执行单元测试时，不建议启用 ASAN。</li></ul></li><li><strong>内存错误检测</strong>：<ul><li>工具选择：由于 valgrind 运行很慢，建议使用 ASAN + UBSAN 来测试。</li><li>编译选项：<code>-DWITH_DEBUG=1 -DWITH_ASAN=1 -DUBSAN=1</code>，可选择启用<code>-DWITH_ASAN_SCOPE=1</code></li><li>建议指令：官方并未提供推荐指令集，建议在 <code>default.daily</code> 的指令基础上，添加 <code>--sanitize</code> 选项。</li><li>指令示例：<code>perl mysql-test-run.pl --timer --max-test-fail=0 --force --comment=var-rpl --vardir=var-rpl --suite=rpl --sanitize</code></li></ul></li><li><strong>代码覆盖率测试</strong>：<ul><li>编译选项：<code>-DWITH_DEBUG=1 -DENABLE_GCOV=1 -DENABLE_GPROF=1</code></li><li>特殊要求：必须在<code>编译的源码目录</code>执行测试。</li><li>指令示例：<code>./mtr --gcov --gprof -big-test --force --max-test-fail=0 --comment=gcov-gprof --vardir=var-gcov-gprof --no-skip</code> &#x20;<ul><li>在 gcov 执行成功后，会将代码覆盖率相关信息写到<code>gmon.out</code>，之后，mtr 会自动调用 gprof 解析该文件 。</li></ul></li></ul></li><li><strong>压力测试</strong>：虽然 mtr 整合了<code>mysql-stress-test.pl</code> 脚本，但使用该脚本需要自行编写 stress-init、stress-test 文件，因此，<strong>建议直接测试 stress、innodb_stress 这两个 suites</strong> 。<ul><li><code>perl mysql-test-run.pl --force --timer --big-test --comment=stress --vardir=var-stress --suite=stress,innodb_stress --no-skip</code></li></ul></li><li><strong>线程竞争</strong>：参考<code>mysql-test/collections/mysql-trunk-tsan.push</code> 。<ul><li>编译选项：<code>-DWITH_DEBUG=1 -DWITH_TSAN=1</code></li><li>指令示例：<code>perl mysql-test-run.pl --timer --debug-server --force  --comment=main-tsan --vardir=var-main-tsan --suite=main</code><ul><li><strong>在 install database 阶段会检测出大面积线程竞争，因此，当前版本无法使用</strong>。</li></ul></li><li>注意事项：TSAN/ThreadSanitizer 运行速度很慢，因此，只建议运行 main suite 。</li></ul></li></ul><p>如果需要验证 release 版本稳定性（适用于 QA、研发），可参考 <code>default.daily</code> 中的指令集。</p><ul><li>该指令集覆盖了单元测试、压力测试等。</li></ul><h2 id="编译组合建议"><a href="#编译组合建议" class="headerlink" title="编译组合建议"></a><strong>编译组合建议</strong></h2><p>推荐：</p><ul><li>普通 debug 版，运行 SQL 兼容性测试 + 单元测试 + 压力测试（stress/innodb_stress suite）</li><li>内存错误 + 代码覆盖率测试：asan/ubsan + gcov/gprof<ul><li>当然 二者也可分开编译、测试。</li><li>ASAN 与 valgrind 不可同时启用，执行 mtr 时如果添加<code>--valgrind</code> 参数，asan 会与 memcheck 冲突导致 crash，测试终止。</li></ul></li></ul><p>可选：</p><ul><li>valgrind ： 主要用于检测内存问题，但运行速度很慢，更建议使用 ASAN。</li><li>编译选项：<code>-DWITH_VALGRIND=1</code></li></ul><p>持续跟踪后续版本改进情况：</p><ul><li>TSAN：MySQL 对其的支持尚不成熟。</li><li>MSAN：与 ASAN 功能重叠，且 MySQL 对其的支持尚不成熟。</li></ul><h1 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a><strong>参考链接：</strong></h1><p>llvm 工具集：</p><ul><li><a href="https://clang.llvm.org/docs/AddressSanitizer.html" title="AddressSanitizer — Clang 17.0.0git documentation (llvm.org)">AddressSanitizer — Clang 17.0.0git documentation (llvm.org)</a></li><li><a href="https://clang.llvm.org/docs/LeakSanitizer.html" title="LeakSanitizer — Clang 17.0.0git documentation (llvm.org)">LeakSanitizer — Clang 17.0.0git documentation (llvm.org)</a></li><li><a href="https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html" title="UndefinedBehaviorSanitizer — Clang 17.0.0git documentation (llvm.org)">UndefinedBehaviorSanitizer — Clang 17.0.0git documentation (llvm.org)</a></li><li><a href="https://clang.llvm.org/docs/ThreadSanitizer.html" title="ThreadSanitizer — Clang 17.0.0git documentation (llvm.org)">ThreadSanitizer — Clang 17.0.0git documentation (llvm.org)</a></li><li><a href="https://clang.llvm.org/docs/MemorySanitizer.html" title="MemorySanitizer — Clang 17.0.0git documentation (llvm.org)">MemorySanitizer — Clang 17.0.0git documentation (llvm.org)</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/asan?view=msvc-170" title="AddressSanitizer | Microsoft Learn">AddressSanitizer | Microsoft Learn</a></li><li><a href="https://github.com/google/sanitizers/wiki/AddressSanitizer" title="AddressSanitizer · google/sanitizers Wiki · GitHub">AddressSanitizer · google/sanitizers Wiki · GitHub</a></li></ul><p>linux kernel 工具集：</p><ul><li><a href="https://www.kernel.org/doc/html/latest/dev-tools/kasan.html" title="The Kernel Address Sanitizer (KASAN) — The Linux Kernel documentation">The Kernel Address Sanitizer (KASAN) — The Linux Kernel documentation</a></li><li><a href="https://www.kernel.org/doc/html/latest/dev-tools/kmsan.html" title="The Kernel Memory Sanitizer (KMSAN) — The Linux Kernel documentation">The Kernel Memory Sanitizer (KMSAN) — The Linux Kernel documentation</a></li></ul><p>MySQL：</p><ul><li><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html" title="MySQL :: MySQL 8.0 Reference Manual :: 2.8.7 MySQL Source-Configuration Options">MySQL :: MySQL 8.0 Reference Manual :: 2.8.7 MySQL Source-Configuration Options</a></li><li><a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_UNIT_TESTS.html" title="MySQL: Creating and Executing Unit Tests">MySQL: Creating and Executing Unit Tests</a><ul><li><a href="https://testanything.org/" title="Home - Test Anything Protocol">Home - Test Anything Protocol</a></li><li><a href="https://google.github.io/googletest/" title="GoogleTest User’s Guide | GoogleTest">GoogleTest User’s Guide | GoogleTest</a></li><li><a href="https://github.com/google/googletest" title="GitHub - google/googletest: GoogleTest - Google Testing and Mocking Framework">GitHub - google/googletest: GoogleTest - Google Testing and Mocking Framework</a></li></ul></li></ul><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 测试框架 </tag>
            
            <tag> MTR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特性介绍 | MySQL 测试框架 MTR 系列教程（一）：入门篇</title>
      <link href="/2023/03/18/mysql-mtr-01-introduction/"/>
      <url>/2023/03/18/mysql-mtr-01-introduction/</url>
      
        <content type="html"><![CDATA[<p><strong>作者：卢文双 资深数据库内核研发</strong></p><blockquote><p>去年年底通过微信公众号【数据库内核】设定了一个目标——2023 年要写一系列 特性介绍+内核解析 的文章（现阶段还是以 MySQL 为主）。<br>虽然关注者很少，但本着“说到就要做到”的原则，从这篇就开始了。</p></blockquote><p><strong>序言：</strong></p><p>以前对 MySQL 测试框架 MTR 的使用，主要集中于 SQL 正确性验证。近期由于工作需要，深入了解了 MTR 的方方面面，发现 MTR 的能力不仅限于此，还支持单元测试、压力测试、代码覆盖率测试、内存错误检测、线程竞争与死锁等功能，因此，本着分享的精神，将其总结成一个系列。</p><p>主要内容如下：</p><ul><li>入门篇：工作机制、编译安装、参数、指令示例、推荐用法、添加 case、常见问题、异常调试</li><li>进阶篇：高阶用法，包括单元测试、压力测试、代码覆盖率测试、内存错误检测、线程竞争与死锁</li><li>源码篇：分析 MTR 的源码</li><li>语法篇：单元测试、压力测试、mysqltest 语法、异常调试</li></ul><p>由于个人水平有限，所述难免有错误之处，望雅正。</p><p><strong>本文是第一篇入门篇</strong>。</p><span id="more"></span><blockquote><p><strong>本文首发于 2023-03-18 21:58:52</strong></p></blockquote><hr><p>本系列基于 MySQL 8.0.29 版本，且主要在 Ubuntu 22.04 X86_64 验证（部分指令也在 Ubuntu 20.04 X86_64、Ubuntu 22.04 ARM64、MacOS M1 做了验证），如有例外，会特别说明。</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在修改内核代码后，不仅需要测试新增功能，同时也要对原有功能做回归测试，以保证新加代码对原有功能没有影响，这就需要用到 MySQL 源码自带的测试框架 mtr。</p><p>MySQL 测试框架是一个以 MySQL 框架和内部引擎为测试对象的工具，主要执行脚本在安装路径（<code>make install</code>后的路径）下的<code>mysql-test</code>目录，基本覆盖了所有 MySQL 的特性和异常情况。</p><p><strong>MySQL 测试框架 mtr 主要包含如下几个组件：</strong></p><ul><li><a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_MYSQL_TEST_RUN_PL.html">mysql-test-run.pl</a> ：perl 脚本，简称 <strong>mtr</strong>，是 MySQL 最常用的测试工具，负责控制流程，包括启停、识别执行哪些用例、创建文件夹、收集结果等等，主要作用是验证 SQL 语句在各种场景下是否返回正确的结果。</li><li><a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_MYSQLTEST.html">mysqltest</a> ：C++二进制程序，负责执行测试用例，包括读文件、解析特定语法、执行用例。<ul><li>用例的特殊语法（比如，<code>--source</code>，<code>--replace_column</code>等）都在<code>command_names</code>和<code>enum_commands</code>两个枚举结构体中。</li></ul></li><li><a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_MYSQL_CLIENT_TEST.html">mysql_client_test</a> ：C++二进制程序，用于测试 MySQL 客户端 API（<a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_MYSQLTEST.html">mysqltest</a> 无法用于测试 API）。<ul><li>从代码看，只有启用<code>--valgrind</code> 或 <code>--valgrind-mysqltest</code> 选项，才会用到 <code>mysql_client_test</code> 。</li></ul></li><li><a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_MYSQL_STRESS_TEST_PL.html">mysql-stress-test.pl</a> ：perl 脚本，用于 MySQL Server 的压力测试。</li><li>支持 gcov/gprof 代码覆盖率测试工具。</li></ul><p>除此之外，还提供了单元测试工具（严格来说不属于 mtr ），以便为存储引擎和插件创建单独的单元测试程序。</p><p><strong>由于 MySQL 测试框架的入口是 <a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_MYSQL_TEST_RUN_PL.html">mysql-test-run.pl</a>（它会调用上述其他组件），因此，一般将 MySQL 测试框架简称为 mtr</strong>。</p><h1 id="mtr-工作原理"><a href="#mtr-工作原理" class="headerlink" title="mtr 工作原理"></a>mtr 工作原理</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>mtr 采用<code>t/r</code>模式（<code>t</code>目录中存储具体的测试 case，文件以<code>.test</code>结尾；<code>r</code>目录中存储了对应 case 的期望结果，文件以<code>.result</code>结尾），主要测试步骤是“通过执行一个 case，将该 case 的输出结果，与标准的输出结果（期望结果）作 diff”：</p><ul><li>如果完全一样，则说明该 case 通过；</li><li>反之，则说明该 case 失败。<ul><li>可能原因：case 本身写的有问题；MySQL 服务有问题。</li></ul></li></ul><p>如果<code>t</code>目录中的某个 case 在<code>r</code>目录中没有对应<code>.result</code>文件：</p><ul><li>那么，只要该 case 能正常执行完，mtr 就会判定该 case 通过；</li><li>反之，若执行过程中出现 mysql server crash 等异常问题，mtr 就会判定该 case 失败。</li></ul><p>上文说的 case 是指一系列的语句，包括 SQL 语句和一些必要的 mysqltest command。</p><p>所有 case 可分为三部分，分别为：</p><ul><li><strong>main</strong>：测试 case 位于 <code>mysql-test/t</code> 目录，期望结果（如果有的话）位于<code>mysql-test/r</code> 目录，二者中的文件是一一对应的，比如：<code>mysql-test/t/alter_debug.test</code> 、<code>mysql-test/r/alter_debug.result</code>。</li><li><strong>suite</strong> ：路径位于<code>mysql-test/suite</code> 目录，其中包含很多测试 case 的集合，每个集合都是一个单独的子目录（比如 <code>mysql-test/suite/binlog</code>），在子目录中又分别包含 r、t 两个目录。</li><li><strong>extra</strong> ：应该是对上述两种 case 的补充，位于<code>mysql-test/extra/</code> 目录，在 8.0.29 版本中只包含<code>binlog_tests</code>、<code>rpl_tests</code> 两个集合。</li></ul><h2 id="框架流程"><a href="#框架流程" class="headerlink" title="框架流程"></a>框架流程</h2><p><code>mysql-test-run.pl</code>框架运行流程如下：</p><p>1、<strong>初始化（Initialization）</strong>。</p><ul><li>确定用例执行范围，包括运行哪些 suite，skip 哪些用例，在本阶段根据<code>disabled.def</code>文件、<code>--skip-xxx</code>命令（比如<code>skip-rpl</code>）等确定执行用例。</li><li>同时，初始化数据库。后面运行用例启动数据库时，不需要每次初始化，只需从这里的目录中拷贝启动。</li></ul><p>2、<strong>运行用例（run test）</strong>。</p><p>主线程根据参数<code>--parallel</code>（默认是 1）启动一个或者多个<strong>用例执行线程（worker）</strong>，各线程有自己独立的 client port，data dir 等。</p><p>启动的 worker 与主线程之间是 server-client 模式，主线程是 server，worker 是 client。</p><ul><li>主线程与 worker 是一问一答模式，主线程向 worker 发送运行用例的文件路径、配置文件参数等各种参数信息，worker 向主线程返回运行结果，直到所有在 collection 中的用例都运行完毕，主线程 close 各 worker，进行收尾工作。</li><li>主线程先读取各 worker 返回值，对上一个用例进行收尾工作。之后，读取 collection 中的用例，通过本地 socket 发送到 worker 线程，worker 线程接收到主线程命令，运行本次用例测试的核心逻辑，主要包括 3 件事：<strong>启动 mysqld、启动并监控 mysqltest，处理执行结果</strong>。<ul><li><strong>启动 mysqld</strong>： <strong>根据参数启动一个或者多个 mysqld server 进程</strong>，大多数情况下会拷贝主线程初始化后的目录到 worker 的数据目录，作为新实例的启动目录，用 shell 命令启动数据库。</li><li><strong>启动并监控 mysqltest</strong>：用例在 mysqltest 中执行（<strong>会逐行扫描 <code>*.test</code> 文件中的 SQL 或指令并于 MySQL 中执行</strong>），worker 线程会监控 mysqltest 的运行状态，监测其是否运行超时或者运行结束。</li><li><strong>处理执行结果</strong>：mysqltest 执行结束会留下执行日志，框架根据执行日志判断执行是否通过，如果没通过是否需要重试等。</li></ul></li></ul><p>以 <code>rpl.rpl_multi_source_basic</code>（对应于文件 <code>mysql-test/suite/rpl/t/rpl_multi_source_basic.test</code>）测试 case 为例来说明执行过程，用例内容如下（开头注释部分为测试过程）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is the basic test required in for multisource replication</span></span><br><span class="line"><span class="comment"># The aim of this file is to test the basic usecases of msr.</span></span><br><span class="line"><span class="comment"># 0. Create two masters and a slave and setup a multisource replication</span></span><br><span class="line"><span class="comment">#    between them.</span></span><br><span class="line"><span class="comment"># 1. create a different databases on each master and test if they are replicated</span></span><br><span class="line"><span class="comment">#    to the slave.</span></span><br><span class="line"><span class="comment"># 2. create a different table on each master and test if they are replicated to</span></span><br><span class="line"><span class="comment">#    the to the slave.</span></span><br><span class="line"><span class="comment"># 3. Create a table with the same name on both masters and update non conflicting</span></span><br><span class="line"><span class="comment">#    data on that table. Test if the replication is done properly.</span></span><br><span class="line"><span class="comment"># 4. Check if updates happen on different master such that the resulting</span></span><br><span class="line"><span class="comment">#    data on slave is conflicting, check that one of the channels the slave</span></span><br><span class="line"><span class="comment">#    SQL thread is stopped.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note: Out of convention, server 2 is always made a slave for multisource testing.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Skip on group replication runs</span></span><br><span class="line">--<span class="built_in">source</span> include/not_group_replication_plugin.inc</span><br><span class="line"><span class="comment"># Test requires master-info-repository=TABLE, relay-log-info-repository=TABLE</span></span><br><span class="line">--<span class="built_in">source</span> include/have_slave_repository_type_table.inc</span><br><span class="line"></span><br><span class="line">--<span class="built_in">echo</span> <span class="comment">#</span></span><br><span class="line">--<span class="built_in">echo</span> <span class="comment"># set up masters server_1 and server_3 with server_2 being a slave.</span></span><br><span class="line">--<span class="built_in">echo</span> <span class="comment">#.</span></span><br><span class="line">--<span class="built_in">let</span> <span class="variable">$rpl_topology</span>= 1-&gt;2,3-&gt;2</span><br><span class="line">--<span class="built_in">let</span> <span class="variable">$rpl_multi_source</span>= 1</span><br><span class="line">--<span class="built_in">source</span> include/rpl_init.inc</span><br><span class="line"></span><br><span class="line">--<span class="built_in">echo</span> <span class="comment">#</span></span><br><span class="line">--<span class="built_in">echo</span> <span class="comment"># Test case 1: 1.a) create a database and table db1.t1 on server_1</span></span><br><span class="line">--<span class="built_in">echo</span> <span class="comment">#                   and insert values in the table.</span></span><br><span class="line">--<span class="built_in">let</span> <span class="variable">$rpl_connection_name</span>= server_1</span><br><span class="line">--<span class="built_in">source</span> include/rpl_connection.inc</span><br><span class="line">CREATE DATABASE db1;</span><br><span class="line">CREATE TABLE db1.t1 ( a int);</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>启动测试指令 <code>perl mysql-test-run.pl --do-test=rpl_multi_source</code> 后，会启动 3 个 mysqld 进程，其中 2 个 master 节点，1 个 slave 节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">➜  rpl ps -xf | grep mysql</span><br><span class="line">   6982 pts/2    S+     0:00      \_ perl mysql-test-run.pl rpl_multi_source_basic</span><br><span class="line">   7125 pts/2    S+     0:00          \_ perl mysql-test-run.pl rpl_multi_source_basic</span><br><span class="line">   7130 pts/2    S+     0:00              \_ /data/work/mysql/mysql80-install.bak_valgrind/bin//mysqltest_safe_process -- /data/work/mysql/mysql80-install.bak_valgrind/bin/mysqld --defaults-group-suffix=.1 --defaults-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/my.cnf --log-output=file --loose-debug-sync-timeout=600 --binlog-format=mixed --core-file</span><br><span class="line">   7131 pts/2    Sl     0:04              |   \_ /data/work/mysql/mysql80-install.bak_valgrind/bin/mysqld --defaults-group-suffix=.1 --defaults-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/my.cnf --log-output=file --loose-debug-sync-timeout=600 --binlog-format=mixed --core-file</span><br><span class="line">   7132 pts/2    S+     0:00              \_ /data/work/mysql/mysql80-install.bak_valgrind/bin//mysqltest_safe_process -- /data/work/mysql/mysql80-install.bak_valgrind/bin/mysqld --defaults-group-suffix=.2 --defaults-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/my.cnf --log-output=file --loose-debug-sync-timeout=600 --binlog-format=mixed --core-file</span><br><span class="line">   7133 pts/2    Sl     0:06              |   \_ /data/work/mysql/mysql80-install.bak_valgrind/bin/mysqld --defaults-group-suffix=.2 --defaults-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/my.cnf --log-output=file --loose-debug-sync-timeout=600 --binlog-format=mixed --core-file</span><br><span class="line">   7134 pts/2    S+     0:00              \_ /data/work/mysql/mysql80-install.bak_valgrind/bin//mysqltest_safe_process -- /data/work/mysql/mysql80-install.bak_valgrind/bin/mysqld --defaults-group-suffix=.3 --defaults-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/my.cnf --log-output=file --loose-debug-sync-timeout=600 --binlog-format=mixed --core-file</span><br><span class="line">   7135 pts/2    Sl     0:04              |   \_ /data/work/mysql/mysql80-install.bak_valgrind/bin/mysqld --defaults-group-suffix=.3 --defaults-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/my.cnf --log-output=file --loose-debug-sync-timeout=600 --binlog-format=mixed --core-file</span><br><span class="line">   7283 pts/2    S+     0:00              \_ /data/work/mysql/mysql80-install.bak_valgrind/bin//mysqltest_safe_process -- /data/work/mysql/mysql80-install.bak_valgrind/bin/mysqltest --defaults-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/my.cnf --silent --tmpdir=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/tmp --character-sets-dir=/data/work/mysql/mysql80-install.bak_valgrind/share/charsets --logdir=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/<span class="built_in">log</span> --database=<span class="built_in">test</span> --plugin_dir=/data/work/mysql/mysql80-install.bak_valgrind/lib/plugin --timer-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/<span class="built_in">log</span>/timer --test-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/suite/rpl/t/rpl_multi_source_basic.test --tail-lines=20 --result-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/suite/rpl/r/rpl_multi_source_basic.result</span><br><span class="line">   7284 pts/2    R      0:00                  \_ /data/work/mysql/mysql80-install.bak_valgrind/bin/mysqltest --defaults-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/my.cnf --silent --tmpdir=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/tmp --character-sets-dir=/data/work/mysql/mysql80-install.bak_valgrind/share/charsets --logdir=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/<span class="built_in">log</span> --database=<span class="built_in">test</span> --plugin_dir=/data/work/mysql/mysql80-install.bak_valgrind/lib/plugin --timer-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/<span class="built_in">log</span>/timer --test-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/suite/rpl/t/rpl_multi_source_basic.test --tail-lines=20 --result-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/suite/rpl/r/rpl_multi_source_basic.result</span><br></pre></td></tr></table></figure><p>可见：</p><ol><li>无论是 mysqldtest 还是 mysqld，都是由 mysqltest_safe_process 程序启动的。</li><li><code>--defaults-group-suffix=.1 到 3</code> 分别对应 3 个 mysqld 进程，说明 <strong>mtr 不是靠 mock 的形式来测试的，而是启动真 mysqld 进程来测试</strong>。</li></ol><h1 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h1><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p><strong>mysql-server 编译需要：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for mysql 8.0</span></span><br><span class="line"></span><br><span class="line">sudo apt install gdb gcc g++ cmake -y</span><br><span class="line">sudo apt install openssl libssl-dev -y</span><br><span class="line">sudo apt install libncurses-dev libudev-dev -y</span><br><span class="line">sudo apt install bison flex libaio-dev libreadline-dev libjemalloc-dev -y</span><br><span class="line">sudo apt install libevent-dev zlib1g-dev libmecab-dev libgcrypt20-dev -y</span><br><span class="line">sudo apt install libsasl2-dev libldap2-dev libtirpc-dev</span><br><span class="line">sudo apt-get install libsasl2-dev <span class="comment"># SASL</span></span><br><span class="line">sudo apt-get install slapd ldap-utils <span class="comment"># LDAP</span></span><br><span class="line">sudo apt install valgrind doxygen libcurl4-gnutls-dev -y <span class="comment"># extra</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># centos 7.6</span></span><br><span class="line">sudo yum install cmake gcc g++ <span class="comment"># 由于 cmake、gcc 版本偏低，需要自行通过源码编译安装</span></span><br><span class="line">sudo yum install readline-devel bison flex libarchive openssl-devel</span><br><span class="line">sudo yum install rpcgen libudev-devel ncurses-devel libtirpc libtirpc-devel</span><br><span class="line">sudo yum install cyrus-sasl-devel <span class="comment"># SASL</span></span><br><span class="line">sudo yum install openldap openldap-devel <span class="comment"># LDAP</span></span><br><span class="line">sudo yum install valgrind <span class="comment"># extra</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># centos stream 9</span></span><br><span class="line">sudo yum install cmake gcc g++ gcc-toolset-12-gcc gcc-toolset-12-gcc-c++ gcc-toolset-12-binutils</span><br><span class="line">sudo yum install readline-devel bison flex libarchive openssl-devel <span class="comment"># libtirpc-devel</span></span><br><span class="line">sudo yum install rpcgen libudev-devel ncurses-devel libtirpc libtirpc-devel</span><br><span class="line">sudo yum install cyrus-sasl-devel <span class="comment"># SASL</span></span><br><span class="line">sudo yum install openldap openldap-devel <span class="comment"># LDAP</span></span><br><span class="line">sudo yum install valgrind <span class="comment"># extra</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># macos</span></span><br><span class="line">brew install lz4</span><br><span class="line">brew install zlib</span><br><span class="line">brew install clang</span><br></pre></td></tr></table></figure><blockquote><p>由于系统及版本差异，这里罗列的软件包可能会有所缺失，版本也可能会有所不同。</p></blockquote><p><strong>对于 mtr 来说，也需要额外安装一些依赖：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># centos</span></span><br><span class="line">yum -y install perl -y</span><br><span class="line">sudo yum install perl-JSON -y</span><br><span class="line">sudo yum install perl-Test-use-ok.noarch -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># ubuntu</span></span><br><span class="line">sudo apt install perl -y</span><br><span class="line">sudo perl -MCPAN -e <span class="string">&#x27;install JSON&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>Debug 版本编译选项示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for MacOS and Ubuntu</span></span><br><span class="line">CURDIR=`<span class="built_in">pwd</span>`</span><br><span class="line">INSTALLDIR=<span class="variable">$CURDIR</span>/../../mysql80-install</span><br><span class="line">DATADIR=<span class="variable">$CURDIR</span>/../../mysql80-default-data</span><br><span class="line">BOOSTDIR=<span class="variable">$CURDIR</span>/../../boost_1_77_0</span><br><span class="line"></span><br><span class="line">rm CMakeCache.txt -f</span><br><span class="line">cmake .. \</span><br><span class="line">-DCMAKE_BUILD_TYPE=Debug \</span><br><span class="line">-DCMAKE_INSTALL_PREFIX=<span class="variable">$INSTALLDIR</span> \</span><br><span class="line">-DSYSCONFDIR=/etc \</span><br><span class="line">-DMYSQL_DATADIR=<span class="variable">$DATADIR</span> \</span><br><span class="line">-DMYSQL_UNIX_ADDR=/tmp/mysqld.sock \</span><br><span class="line">-DMYSQL_TCP_PORT=3306 \</span><br><span class="line">-DWITH_MYISAM_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 \</span><br><span class="line">-DENABLED_LOCAL_INFILE=1 \</span><br><span class="line">-DWITH_DEBUG=1 \ <span class="comment"># 必须是 debug 版本</span></span><br><span class="line">-DWITH_BOOST=<span class="variable">$BOOSTDIR</span> \</span><br><span class="line">-DWITH_SSL=/usr/<span class="built_in">local</span>/openssl-1.1.1 \</span><br><span class="line">-DFORCE_INSOURCE_BUILD=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># -DWITH_ASAN=ON -DWITH_ASAN_SCOPE=ON -DWITH_UBSAN=ON \ # 选择启用哪些组件</span></span><br><span class="line"><span class="comment"># -DWITH_VALGRIND=ON \</span></span><br><span class="line"><span class="comment"># -DENABLE_GCOV=1 -DENABLE_GPROF=1 \</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? != 0 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for MacOS, only need make</span></span><br><span class="line">make -j4</span><br><span class="line">make install</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Release 版本编译选项示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># for MacOS and Ubuntu</span></span><br><span class="line">CURDIR=`<span class="built_in">pwd</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment"># for 8.0.29</span></span><br><span class="line">INSTALLDIR=<span class="variable">$CURDIR</span>/../../mysql80-install</span><br><span class="line"><span class="comment">#INSTALLDIR=/usr</span></span><br><span class="line">DATADIR=<span class="variable">$CURDIR</span>/../../mysql80-default-data</span><br><span class="line">BOOSTDIR=<span class="variable">$CURDIR</span>/../../boost_1_77_0</span><br><span class="line"></span><br><span class="line">rm CMakeCache.txt -f</span><br><span class="line">cmake .. \</span><br><span class="line">-DCMAKE_BUILD_TYPE=Release \</span><br><span class="line">-DBUILD_CONFIG=mysql_release \</span><br><span class="line">-DFEATURE_SET=community \</span><br><span class="line">-DWITH_EMBEDDED_SERVER=OFF \</span><br><span class="line">-DWITHOUT_ROCKSDB=ON \</span><br><span class="line">-DWITH_UNIT_TESTS=OFF \</span><br><span class="line">-DWITH_BOOST=<span class="variable">$BOOSTDIR</span> \</span><br><span class="line">-DFORCE_INSOURCE_BUILD=1 \</span><br><span class="line">-DCOMPILATION_COMMENT=<span class="string">&quot;MySQL build <span class="subst">$(date +%Y%m%d.%H%M%S.$(git rev-parse --short HEAD)</span>)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-DCMAKE_INSTALL_PREFIX=$INSTALLDIR \</span></span><br><span class="line"><span class="comment">#-DSYSCONFDIR=/etc \</span></span><br><span class="line"><span class="comment">#-DMYSQL_DATADIR=$DATADIR \</span></span><br><span class="line"><span class="comment">#-DWITH_MYISAM_STORAGE_ENGINE=1 \</span></span><br><span class="line"><span class="comment">#-DWITH_INNOBASE_STORAGE_ENGINE=1 \</span></span><br><span class="line"><span class="comment">#-DWITH_MEMORY_STORAGE_ENGINE=1 \</span></span><br><span class="line"><span class="comment">#-DWITH_PARTITION_STORAGE_ENGINE=1 \</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? != 0 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># for MacOS, only need make</span></span><br><span class="line">make -j4</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_cmake_build_type"><code>-DCMAKE_BUILD_TYPE=type</code></a> 选项说明：</p><p>The type of build to produce:</p><ul><li><code>RelWithDebInfo</code>: <strong>default value</strong>。<strong>Enable optimizations and generate debugging information</strong>. This is the default MySQL build type.</li><li><code>Release</code>: Enable optimizations but omit debugging information to reduce the build size. <strong>This build type was added in MySQL 8.0.13</strong> (MySQL 5.7 is not supported).</li><li><code>Debug</code>: Disable optimizations and generate debugging information. This build type is also used if the <a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_debug"><code>WITH_DEBUG</code></a> option is enabled. That is, <a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_debug"><code>-DWITH_DEBUG=1</code></a> has the same effect as <a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_cmake_build_type"><code>-DCMAKE_BUILD_TYPE=Debug</code></a>.</li></ul><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><p>编译安装后，<code>mysql-test</code> 目录树结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line">mysql-test</span><br><span class="line">├── README</span><br><span class="line">├── README.gcov <span class="comment"># 代码覆盖率测试说明，最后更新于2006年</span></span><br><span class="line">├── README.stress <span class="comment"># 压力测试说明，针对 mysql-stress-test.pl ，最后更新于2006年</span></span><br><span class="line"></span><br><span class="line">├── collections <span class="comment"># 该目录下的文件是官方推荐的回归测试指令集</span></span><br><span class="line">│   ├── README <span class="comment"># 说明文档</span></span><br><span class="line">│   ├── coverage.ignore <span class="comment"># 指定需要忽略代码覆盖率测试的目录</span></span><br><span class="line">│   ├── disabled.def <span class="comment"># 列出需要临时禁用的测试用例，在运行测试时会跳过</span></span><br><span class="line">│   ├── disabled-asan.list <span class="comment"># 除 disabled.def 文件所列用例之外，还需要临时禁用的测试用例</span></span><br><span class="line">│   ├── disabled-ubsan.list <span class="comment"># 同上</span></span><br><span class="line">│   ├── disabled-valgrind.list <span class="comment"># 同上</span></span><br><span class="line">│   ├── disabled_ndb.def <span class="comment"># 仅在运行 MySQL Cluster 时才需要临时禁用的测试用例</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 适合每天都运行的回归测试指令集</span></span><br><span class="line">        <span class="comment"># 涵盖 default suites、非 default suites、针对复制和binlog的扩展测试（区分不同的复制参数）、InnoDB 扩展测试（区分不同页面大小）</span></span><br><span class="line">│   ├── default.daily</span><br><span class="line">        <span class="comment"># 由于 valgrind 运行比较耗时，因此，该指令集只能涵盖除 big-test 之外的所有 suites 。</span></span><br><span class="line">        <span class="comment"># 需要编译时添加选项 -DWITH_DEBUG=1 -DWITH_VALGRIND=1 的情况下，才能执行 valgrind 测试。</span></span><br><span class="line">        <span class="comment"># 注意：通过实测、分析代码，运行 mtr 时必须添加 --valgrind 选项才能用到 valgrind 组件。</span></span><br><span class="line">│   ├── default.daily-valgrind</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 适合每周运行一次的指令集，运行耗时能达到48小时。</span></span><br><span class="line">        <span class="comment"># 是 default.daily 的超集，同时，还指定了 --debug-server 。</span></span><br><span class="line">        <span class="comment"># 覆盖 default suites + 非 default suites + 复制和binlog的扩展 + InnoDB扩展 + 其他按周运行的指令集。</span></span><br><span class="line">│   ├── default.weekly</span><br><span class="line">│   ├── default.weekly-ndbcluster <span class="comment"># 覆盖 default.daily + ndbcluster + 部分非默认指令集</span></span><br><span class="line">│   ├── default.weekly-protocol <span class="comment"># 编译时需要设置 DWITH_TEST_TRACE_PLUGIN=1，只覆盖 main suite。</span></span><br><span class="line">        <span class="comment"># 在启用 --big-test 和 --debug-server 选项的前提下，运行所有的指令集。</span></span><br><span class="line">        <span class="comment"># 需要编译时添加选项 -DWITH_DEBUG=1 -DWITH_VALGRIND=1 的情况下，才能执行 valgrind 测试。</span></span><br><span class="line">        <span class="comment"># 注意：通过实测、分析代码，运行 mtr 时必须添加 --valgrind 选项才能用到 valgrind 组件。</span></span><br><span class="line">│   ├── default.weekly-valgrind</span><br><span class="line">│   ├── default.weekly.basic <span class="comment"># 在禁用 --big-test 选项的前提下，运行所有的指令集，即包含 default suites + 非 default suites。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 适用于每次push代码时运行的指令集，能控制在一个小时内。</span></span><br><span class="line">        <span class="comment"># 更适用于 mysql 5.7 版本。</span></span><br><span class="line">│   ├── default.push</span><br><span class="line">│   ├── default.push-ndbcluster <span class="comment"># 分为 default suites + 与 ndbcluster 相关的指令集</span></span><br><span class="line">│   ├── default.push-valgrind <span class="comment"># 分为 default suites（排除 rpl）+ ndb 相关 suites + group_replication suite</span></span><br><span class="line">│   ├── mysql-8.0-stage.push <span class="comment"># 在 default.push 基础上，为 mysql-8.0-stage 扩展的测试用例，在merge到main分支前使用</span></span><br><span class="line">│   ├── mysql-8.0-stage.push.basic <span class="comment"># mysql-8.0-stage.push 的子集</span></span><br><span class="line"></span><br><span class="line">│   ├── mysql-trunk-meb-itch.push <span class="comment"># 文件为空</span></span><br><span class="line">        <span class="comment"># default.push 的超集，目的是在 push 到 main 分支前，提前发现问题。</span></span><br><span class="line">│   ├── mysql-trunk-stage.push <span class="comment"># 内容与 mysql-8.0-stage.push 一样，在merge到main分支前使用</span></span><br><span class="line">│   ├── mysql-trunk-stage.push.basic <span class="comment"># mysql-trunk-stage.push 的子集</span></span><br><span class="line">│   └── mysql-trunk-tsan.push <span class="comment"># 由于 ThreadSanitizer 非常慢，因此，只测试 main suite</span></span><br><span class="line"></span><br><span class="line">├── extra <span class="comment"># 不属于 main 和 其他 suites 的测试 case</span></span><br><span class="line">│   ├── binlog_tests</span><br><span class="line">│   │   ├── binlog.test</span><br><span class="line">│   │   ├── binlog_cache_stat.test</span><br><span class="line">│   │   ├── binlog_crash_safe_ddl.inc</span><br><span class="line">│   │   ├── binlog_ddl.inc</span><br><span class="line">        ......</span><br><span class="line">│   │   └── tmp_table.test</span><br><span class="line">│   └── rpl_tests</span><br><span class="line">│       ├── binlog_transaction_compression.inc</span><br><span class="line">│       ├── check_slave_delay.inc</span><br><span class="line">        ......</span><br><span class="line">│       └── type_conversions.test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">├── lib <span class="comment"># 测试框架相关依赖文件，里面主要是一些用perl实现的逻辑。</span></span><br><span class="line">│   ├── My</span><br><span class="line">│   │   ├── Config.pm</span><br><span class="line">│   │   ├── ConfigFactory.pm</span><br><span class="line">        ......</span><br><span class="line">│   │   └── Test.pm</span><br><span class="line">│   ├── mtr_cases.pm</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">├── lock_order_dependencies.txt <span class="comment"># mysql-test-run.pl 读取该文件来控制加锁顺序，与 --lock-order 选项有关。该文件非空。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 mtr 运行对应工具期间，比如 asan，对应的 .supp 文件用于指定需要跳过的测试用例。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ASAN、LSAN、TSAN 出自谷歌的 Sanitizer 项目，包含了 ASAN、LSAN、MSAN、TSAN等内存、线程错误的检测工具。</span></span><br><span class="line">├── asan.supp <span class="comment"># ASAN（Address-Sanitizier），内存错误检测工具。早期是LLVM中的特性，后被加入GCC 4.8。</span></span><br><span class="line">├── lsan.supp <span class="comment"># LSAN（LeakSanitizer），内存泄漏检测工具，已集成在 ASAN（AddressSanitizer）中。</span></span><br><span class="line">├── tsan.supp <span class="comment"># TSAN（ThreadSanitizer），线程间数据竞争的检测工具。</span></span><br><span class="line">├── valgrind.supp <span class="comment"># Valgrind 是一个工具集。集成了：</span></span><br><span class="line">                  <span class="comment"># Memcheck 内存错误检测器。</span></span><br><span class="line">                  <span class="comment"># Cachegrind 缓存和分支预测分析器。</span></span><br><span class="line">                  <span class="comment"># Callgrind 可生成缓存分析器的调用图。</span></span><br><span class="line">                  <span class="comment"># Helgrind 线程错误检测器。</span></span><br><span class="line">                  <span class="comment"># DRD 也是线程错误检测器。</span></span><br><span class="line">                  <span class="comment"># Massif 堆分析器，它可以帮助程序使用更少的内存。</span></span><br><span class="line">                  <span class="comment"># DHAT 一种不同类型的堆分析器。使用它可以了解块寿命，块利用率和布局效率低下的问题。</span></span><br><span class="line"></span><br><span class="line">├── mtr -&gt; ./mysql-test-run.pl <span class="comment"># mysql-test-run.pl 脚本别名</span></span><br><span class="line">├── mysql-stress-test.pl</span><br><span class="line">├── mysql-test-run -&gt; ./mysql-test-run.pl</span><br><span class="line">├── mysql-test-run.dox</span><br><span class="line">├── mysql-test-run.pl <span class="comment"># mtr 入口文件，测试框架核心逻辑</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># include/ 目录包含.inc 文件，在测试用例中通过 source 命令引入，就像 C/C++ 的头文件。建议将多次重复使用的测试语句整合到 .inc 文件中。</span></span><br><span class="line">├── include <span class="comment"># include 下所有 *.inc 都会被 t/ 目录下的 *.test 引用</span></span><br><span class="line">│   ├── Load_data.inc</span><br><span class="line">    ......</span><br><span class="line">│   ├── json_lookup.inc</span><br><span class="line">│   ├── keyring_tests</span><br><span class="line">│   │   ├── binlog</span><br><span class="line">│   │   │   ├── rpl_binlog_cache_encryption.inc</span><br><span class="line">        ......</span><br><span class="line">│   ├── keyring_udf_keyring_plugin_loaded.inc</span><br><span class="line">    ......</span><br><span class="line">│   └── year-engine.test</span><br><span class="line"><span class="comment"># t/ 和 r/ 目录分别对应于 main suite 的测试 case 和 期望结果。</span></span><br><span class="line"><span class="comment"># 测试 case 以 .test 后缀结尾。</span></span><br><span class="line"><span class="comment"># 另外还有 .opt 后缀文件，它里面指定了MySQL的参数。某些测试用例会涉及重启，在重启时可能会变更 mysql 参数，可能会用 .opt 文件中指定的参数。</span></span><br><span class="line">├── t <span class="comment"># 该目录下的每个 *.test 都对应一个测试 case 。</span></span><br><span class="line">│   ├── 1st.test</span><br><span class="line">│   ├── admin_interface.test</span><br><span class="line">    ......</span><br><span class="line">├── r <span class="comment"># 路径和命名 与 t/ 目录一一对应，表示对应测试用例的期望输出。</span></span><br><span class="line">│   ├── 1st.result</span><br><span class="line">│   ├── admin_interface.result</span><br><span class="line">    ......</span><br><span class="line">│   └── year-myisam.result</span><br><span class="line"></span><br><span class="line">├── std_data <span class="comment"># 测试所用的数据文件，某些测试 case 需要使用到。</span></span><br><span class="line">│   ├── 14897.frm</span><br><span class="line">│   ├── 256kb.json</span><br><span class="line">│   ├── 41_decimal.frm</span><br><span class="line">│   ├── 57import.zip</span><br><span class="line">    ......</span><br><span class="line">│   └── x_y_data.csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试框架有 suite 的概念，每个 suite 为一个测试用例集合，默认的 suite 为 main，它的测试集合位于当前目录下的 t/ 目录。</span></span><br><span class="line"><span class="comment"># 除了 main suite 之外，其他的 suite 基本都以子目录的形式存放于当前文件夹，比如 json、binlog 等。</span></span><br><span class="line">├── suite <span class="comment"># 本目录下每个子目录都包含 include/r/t 三个子目录，其中：</span></span><br><span class="line">          <span class="comment"># include/*.inc 会被 t/*.test 引用</span></span><br><span class="line">          <span class="comment"># t/*.test 是各个测试case的主文件</span></span><br><span class="line">          <span class="comment"># r/*.result 是期望的测试输出</span></span><br><span class="line">          <span class="comment"># 另外，t/ 与 r/ 路径中的文件是一一对应的。</span></span><br><span class="line">│   ├── audit_null</span><br><span class="line">    ......</span><br><span class="line">│   ├── innodb</span><br><span class="line">│   │   ├── include</span><br><span class="line">│   │   │   ├── alter_table_pk_no_sort.inc</span><br><span class="line">            ......</span><br><span class="line">│   │   ├── r</span><br><span class="line">│   │   │   ├── add_foreign_key.result</span><br><span class="line">│   │   │   ├── alter_crash.result</span><br><span class="line">            ......</span><br><span class="line">│   │   └── t</span><br><span class="line">│   │       ├── add_foreign_key.test</span><br><span class="line">│   │       ├── alter_crash.test</span><br><span class="line">            ......</span><br><span class="line">│   │       └── zlob_update_purge.test</span><br><span class="line">│   ├── innodb_fts</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">└── var <span class="comment"># 测试开启后 mtr 创建的目录，用于存放测试过程产生的数据目录、日志等。</span></span><br><span class="line">    ├── data</span><br><span class="line">    │   ├── <span class="comment">#ib_16384_0.dblwr</span></span><br><span class="line">        ......</span><br><span class="line">    ......</span><br><span class="line">    ├── my.cnf</span><br><span class="line">    ├── run</span><br><span class="line">    ├── std_data</span><br><span class="line">    │   ├── 14897.frm</span><br><span class="line">    ......</span><br><span class="line">    └── tmp</span><br><span class="line">        └── mysqld.1</span><br></pre></td></tr></table></figure><h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><p>参考：</p><ul><li><a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_MYSQLTEST_PROGRAMS.html">MySQL: MySQL Test Programs</a></li><li><a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_MYSQL_TEST_RUN_PL.html">MySQL: mysql-test-run.pl — Run MySQL Test Suite</a></li></ul><h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><ul><li><code>--force</code><ul><li>默认情况下，只要遇到一个 case 出错，测试程序就会退出。</li><li>加入该参数后，mtr 会忽略错误并继续执行下一个 case 直到所有 case 执行结束再退出。</li><li>但如果脚本存在太多错误还是会退出，可设置<code>--max-test-fail=0</code> 忽略计数。</li></ul></li><li><code>--max-test-fail</code><ul><li>测试过程中失败 case 数达到一定值会退出，默认值是 10，设置为 0 则会忽略计数。</li></ul></li><li><code>--record</code><ul><li><strong>是否记录 results 结果，首次执行建议带上，让其自动生成 <code>.results</code> 文件，再基于该文件修改成我们预期的结果</strong>。</li><li>若一个执行输出结果和 <code>testname.result</code> 文件不同，会生成一个 <code>testname.reject</code> 文件，该文件在下次执行成功之后被删除；</li><li>检查<code>.reject</code>文件的内容，如果里面是期望的输出，则将内容拷贝到 <code>.result</code> 文件中，作为以后判断运行结果是否通过的依据；</li></ul></li><li><code>--parallel</code><ul><li>指定运行测试 case 的并行线程数。</li></ul></li><li><code>—-nowarnings</code><ul><li>忽略 warnings 错误。</li><li>设置该参数后，当出现 warnings 错误，不再累加 <code>--max-test-fail</code> 。</li></ul></li><li><code>--big-test</code><ul><li>执行标记为 <code>big</code> 的 test cases，也就是同时覆盖 <strong>非 big + big</strong>。这是因为标记为 big 的 case 较大、耗时较长，默认不会执行。</li></ul></li><li><code>--only-big-test</code> ：只启用带 big 标记的 test cases，也就是会跳过普通的非 big 标记的 cases。</li><li><code>--suite=[suitename1,...]</code><ul><li>默认情况下 mtr 会执行所有测试 case，但有时候我们要执行一个测试集，就可用该参数来指定，比如<code>./mtr --suite=rpl</code> 只执行 rpl 测试集。</li></ul></li><li><code>--do-test=events</code><ul><li>执行所有以 <code>events</code>为前缀的 case（搜索范围为 t/和所有的 suite）。</li><li><code>--do-test</code> 的参数支持正则表达式，上述命令等效于 <code>./mtr --do-test=events.*</code></li><li>所以如果想测试所有的包括 innodb 的 case，可以用 <code>./mtr --do-test=.*innodb.*</code></li></ul></li><li><strong>连接远程的数据库进行 mtr 执行：</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --extern  一般情况下mtr是启动自己的MySQL服务来进行测试，如果在启动时指定参数 --extern，则可以使用指定的 MySQL 服务进行测试</span></span><br><span class="line">./mtr --extern host=192.168.6.1 --extern port=3306 --extern user=root --extern password=<span class="string">&#x27;123456&#x27;</span>  --record --force example.1</span><br><span class="line">./mtr --extern host=127.0.0.1 --extern port=3306 --extern user=root --extern password= --force --max-test-fail=0 --suite=main</span><br><span class="line">./mtr --extern host=127.0.0.1 --extern port=3306 --extern user=root --extern password= --force --max-test-fail=0 --fast --suite=main</span><br></pre></td></tr></table></figure><ul><li><code>--debug-server</code> ：Use debug version of server, but without turning on tracing.</li><li><code>--platform</code> 和 <code>--exclude-platform</code> ：用于指定或排除平台的选项。<ul><li>如果 MTR 不是运行在 pushbuild test 环境中（存在环境变量<code>PB2WORKDIR</code>，即<code>export PB2WORKDIR=</code>），这两个选项是不生效的。</li></ul></li><li><code>comment=STR</code> ：添加该选项后，mtr 会将注释信息打印到 stdout 。比如 <code>--comment=all-default-big</code>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># all-default-big</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br></pre></td></tr></table></figure><ul><li><code>--vardir=DIR</code> ：指定测试过程中生成的文件存放的目录，默认是当前路径下的<code>var/</code> 。</li><li><code>--report-features</code> ：指定该选项后，mtr 首先运行名为 <code>report_features</code> 的 case，该 case 没有任何输出（设置了<code>--disable_query_log</code>） 。</li><li><code>--unit-tests-report</code> ：加上该参数后，如果在编译后的源码目录执行 mtr，会在测试的最后阶段加上每个测试用例的报告信息。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line">[----------] 1027 tests from Spec/ReuseConnectionTest (404 ms total)</span><br><span class="line"></span><br><span class="line">[----------] Global <span class="built_in">test</span> environment tear-down</span><br><span class="line">[==========] 1027 tests from 1 <span class="built_in">test</span> suite ran. (70804 ms total)</span><br><span class="line"></span><br><span class="line">Total Test time (real) = 3363.87 sec</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">The following tests FAILED:</span><br><span class="line">        203 - routertest_component_metadata_ttl (Subprocess aborted)</span><br><span class="line">        206 - routertest_component_rest_api_enable (Failed)</span><br><span class="line">        222 - routertest_component_routing_splicer (Failed)</span><br><span class="line">        224 - routertest_integration_routing_reuse (Failed)</span><br><span class="line">Errors <span class="keyword">while</span> running CTest</span><br><span class="line">  [  FAILED  ] CheckEdgeHttpsPortValues/UseEdgeHttpsPortValues.ensure_bootstrap_works_for_edge_https_port_values/1, <span class="built_in">where</span> GetParam() = 65535 (1444 ms)</span><br><span class="line">  [  FAILED  ] 1 <span class="built_in">test</span>, listed below:</span><br><span class="line">  [  FAILED  ] CheckEdgeHttpsPortValues/UseEdgeHttpsPortValues.ensure_bootstrap_works_for_edge_https_port_values/1, <span class="built_in">where</span> GetParam() = 65535</span><br><span class="line">   1 FAILED TEST</span><br><span class="line">  [  FAILED  ] Spec/SplicerFailParamTest.fails/client_ssl_dh_params_not_exists, <span class="built_in">where</span> GetParam() = 64-byte object &lt;C8-CE 3D-2F 4D-56 00-00 F0-DA BB-30 4D-56 00-00 B0-DB BB-30 4D-56 00-00 B0-DB BB-30 4D-56 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 3D-D1 F9-2E 4D-56 00-00 AD-D0 F9-2E 4D-56 00-00&gt; (383 ms)</span><br><span class="line">  [  FAILED  ] 1 <span class="built_in">test</span>, listed below:</span><br><span class="line">  [  FAILED  ] Spec/SplicerFailParamTest.fails/client_ssl_dh_params_not_exists, <span class="built_in">where</span> GetParam() = 64-byte object &lt;C8-CE 3D-2F 4D-56 00-00 F0-DA BB-30 4D-56 00-00 B0-DB BB-30 4D-56 00-00 B0-DB BB-30 4D-56 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 3D-D1 F9-2E 4D-56 00-00 AD-D0 F9-2E 4D-56 00-00&gt;</span><br><span class="line">   1 FAILED TEST</span><br><span class="line">  [  FAILED  ] 0 tests, listed below:</span><br><span class="line">   0 FAILED TESTS</span><br><span class="line">  [  FAILED  ] Spec/ReuseConnectionTest: SetUpTestSuite or TearDownTestSuite</span><br><span class="line">   1 FAILED TEST SUITE</span><br><span class="line"></span><br><span class="line">Unit tests: 98% tests passed, 4 tests failed out of 224</span><br><span class="line">  The following tests FAILED:</span><br><span class="line">        206 - routertest_component_rest_api_enable (Failed)</span><br><span class="line">        222 - routertest_component_routing_splicer (Failed)</span><br><span class="line">        224 - routertest_integration_routing_reuse (Failed)</span><br><span class="line">Report from unit tests <span class="keyword">in</span> /data/work/mysql/mysql-server/mysql-test/var-all-default-big/ctest.log</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">The servers were restarted 3 <span class="built_in">times</span></span><br><span class="line">The servers were reinitialized 0 <span class="built_in">times</span></span><br><span class="line">Spent 53.181 of 3579 seconds executing testcases</span><br><span class="line"></span><br><span class="line">Completed: Failed 1/6 tests, 83.33% were successful.</span><br><span class="line"></span><br><span class="line">Failing <span class="built_in">test</span>(s): unit_tests</span><br></pre></td></tr></table></figure><ul><li><code>--no-skip</code> ：指定该选项后，即使 <code>.inc</code> 文件中要求的条件不满足，也会运行所有的 mtr 测试 cases 。特别地，在 <code>include/excludenoskip.list</code> 文件中指定的 <code>.inc</code> 文件列表依然会跳过。</li><li><code>--skip-ndb</code> ：与选项<code>--skip-ndbcluster</code> 含义相同，表示跳过与 ndb 相关的 suites，默认启用。<ul><li>ndb 引擎也是开源的（<code>storage/ndb/</code>），涉及 ndb 引擎的 suites 包括：</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- ndb</span><br><span class="line">- ndb_big</span><br><span class="line">- ndb_opt</span><br><span class="line">- ndb_ddl</span><br><span class="line">- ndb_binlog</span><br><span class="line">- ndb_rpl</span><br><span class="line">- rpl_ndb</span><br><span class="line">- ndbcluster</span><br><span class="line">- gcol_ndb</span><br><span class="line">- json_ndb</span><br></pre></td></tr></table></figure><ul><li><code>--with-ndb-only</code> ：与选项<code>--with-ndbcluster-only</code> 含义相同，只运行与 ndb 相关的 suites 。如果没显示指定<code>--suites</code> 参数，则会跳过所有非 ndb 的 suites ；反之，若指定了，也会额外运行指定的 suites 。</li><li><code>--ps-protocol</code> ：在 client 和 server 端之间使用 prepared-statement 协议（binary），会将<code>--ps-protocol</code> 参数直接传给 mysqltest 程序。</li><li><code>--skip-combinations</code> ：忽略组合文件或选项，也就是忽略：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动 mtr 时的日志：</span></span><br><span class="line">Collecting tests</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> binlog</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> binlog_gtid</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> binlog_nogtid</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> rpl</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> rpl_gtid</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> rpl_nogtid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对应于</span></span><br><span class="line">./suite/rpl_nogtid/combinations</span><br><span class="line">./suite/binlog_gtid/combinations</span><br><span class="line">./suite/binlog/combinations</span><br><span class="line">./suite/rpl/combinations</span><br><span class="line">./suite/rpl_gtid/combinations</span><br><span class="line">./suite/binlog_nogtid/combinations</span><br><span class="line"></span><br><span class="line"><span class="comment"># 除此之外，还有：</span></span><br><span class="line">./suite/ndb_rpl/t/ndb_rpl_innodb2ndb.combinations</span><br><span class="line">./suite/ndb_rpl/t/ndb_rpl_conflict_epoch.combinations</span><br><span class="line">./suite/ndb_rpl/t/ndb_rpl_basic.combinations</span><br></pre></td></tr></table></figure><h2 id="suitename-可选范围"><a href="#suitename-可选范围" class="headerlink" title="suitename 可选范围"></a>suitename 可选范围</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">main,</span><br><span class="line"></span><br><span class="line">audit_null,</span><br><span class="line">auth_sec,</span><br><span class="line"></span><br><span class="line">binlog,</span><br><span class="line">binlog_gtid,</span><br><span class="line">binlog_nogtid,</span><br><span class="line"><span class="built_in">clone</span>,</span><br><span class="line"></span><br><span class="line">collations,</span><br><span class="line"></span><br><span class="line">component_keyring_file,</span><br><span class="line">connection_control,</span><br><span class="line">encryption,</span><br><span class="line"></span><br><span class="line">engines,</span><br><span class="line">engines/funcs,</span><br><span class="line">engines/iuds,</span><br><span class="line">engines/rr_trx,</span><br><span class="line">federated,</span><br><span class="line"></span><br><span class="line">funcs_1, <span class="comment"># 额外功能（包括视图、存储过程、INFORMATION_SCHEMA等）</span></span><br><span class="line">funcs_2, <span class="comment"># 额外功能（字符集等）</span></span><br><span class="line">gcol, <span class="comment"># 虚拟生成列</span></span><br><span class="line">gis,</span><br><span class="line">group_replication,</span><br><span class="line">information_schema,</span><br><span class="line"></span><br><span class="line">innodb,</span><br><span class="line">innodb_fts, <span class="comment"># 全文索引</span></span><br><span class="line">innodb_gis,</span><br><span class="line">innodb_stress,</span><br><span class="line">innodb_undo,</span><br><span class="line">innodb_zip,</span><br><span class="line"></span><br><span class="line">interactive_utilities,</span><br><span class="line">jp, <span class="comment"># 日语字符集</span></span><br><span class="line">json,</span><br><span class="line">large_tests,</span><br><span class="line">lock_order,</span><br><span class="line">max_parts,</span><br><span class="line">memcached,</span><br><span class="line">network_namespace,</span><br><span class="line">opt_trace,</span><br><span class="line">parts,parts/special_tests,</span><br><span class="line">perfschema,</span><br><span class="line">query_rewrite_plugins,</span><br><span class="line"></span><br><span class="line">rpl,</span><br><span class="line">rpl_gtid,</span><br><span class="line">rpl_nogtid,</span><br><span class="line"></span><br><span class="line">secondary_engine,</span><br><span class="line"></span><br><span class="line">service_status_var_registration,</span><br><span class="line">service_sys_var_registration,</span><br><span class="line">service_udf_registration,</span><br><span class="line"></span><br><span class="line">special,</span><br><span class="line">stress,</span><br><span class="line">sys_vars,</span><br><span class="line">sysschema,</span><br><span class="line"></span><br><span class="line">test_service_sql_api,</span><br><span class="line">test_services,</span><br><span class="line"></span><br><span class="line">x</span><br></pre></td></tr></table></figure><h1 id="suites-分类"><a href="#suites-分类" class="headerlink" title="suites 分类"></a>suites 分类</h1><h2 id="default-suites"><a href="#default-suites" class="headerlink" title="default suites:"></a>default suites:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">auth_sec,binlog,binlog_gtid,binlog_nogtid,<span class="built_in">clone</span>,</span><br><span class="line">collations,component_keyring_file,connection_control,encryption,</span><br><span class="line">federated,funcs_2,gcol,gis,information_schema,</span><br><span class="line">innodb,innodb_fts,innodb_gis,innodb_undo,innodb_zip,</span><br><span class="line">interactive_utilities,json,</span><br><span class="line">main,</span><br><span class="line">opt_trace,parts,perfschema,query_rewrite_plugins,rpl,rpl_gtid,rpl_nogtid,secondary_engine,</span><br><span class="line">service_status_var_registration,service_sys_var_registration,service_udf_registration,</span><br><span class="line">sys_vars,sysschema,test_service_sql_api,test_services,x</span><br></pre></td></tr></table></figure><h2 id="非-default-suites："><a href="#非-default-suites：" class="headerlink" title="非 default suites："></a>非 default suites：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">funcs_2, stress, jp, nist</span><br><span class="line">engines, memcached, audit_null</span><br><span class="line">group_replication</span><br></pre></td></tr></table></figure><h1 id="指令示例"><a href="#指令示例" class="headerlink" title="指令示例"></a>指令示例</h1><h2 id="mtr-执行路径："><a href="#mtr-执行路径：" class="headerlink" title="mtr 执行路径："></a><strong>mtr 执行路径：</strong></h2><ul><li>代码覆盖率、单元测试只能在 <code>编译的源码目录/mysql-test</code> 执行。</li><li>其他测试在 <code>编译的源码目录/mysql-test</code> 和 <code>安装目录/mysql-test</code> 都可以执行。</li><li><strong>如无特殊需求，更建议在安装目录执行 mtr 测试</strong>（目录结构更清晰）。</li></ul><h2 id="常用指令："><a href="#常用指令：" class="headerlink" title="常用指令："></a>常用指令：</h2><ul><li>在未编写 <code>.result</code>文件的情况下，可先通过<code>--reocrd</code>选项生成<code>.result</code>文件，再基于该文件修改成期望的结果：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl mysql-test-run.pl --record mytest</span><br></pre></td></tr></table></figure><ul><li>常态下执行，不加 <code>--reocrd</code>选项，这样才会比对实际结果与期望结果是否相同：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">perl mysql-test-run.pl mytestcase1</span><br><span class="line">perl mysql-test-run.pl --suites=main,rpl <span class="comment"># 指定多个 suites</span></span><br></pre></td></tr></table></figure><ul><li>当一些测试 case 频繁失败时，可单独运行这些 case 以便调试：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">./mtr testcasename --record</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只运行基础套餐里的 subquery_all 用例（ t/subquery_all.test ）</span></span><br><span class="line"><span class="comment"># 可选 --charset-for-testdb=utf8mb4</span></span><br><span class="line">./mtr --force --big-test --nowarnings --max-test-fail=0 main.subquery_all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如需执行多个 case，可通过空格分割，比如：</span></span><br><span class="line">./mtr --force --big-test --nowarnings --max-test-fail=0 main.subquery_all main.myisam_explain_json_non_select_none</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>如果不指定任何 suite，mtr 默认会执行所有 default suites（包括 main）</strong>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mtr --force</span><br></pre></td></tr></table></figure><ul><li>执行 main suite 中的所有 case（所有<code>mysql-test/t/*.test</code>），忽略中间的 warnings 报错，强制运行完所有 case：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./mtr  --suite=main --force --max-test-fail=0 --nowarnings --parallel=8</span><br><span class="line">./mtr  --suite=main --force --max-test-fail=0 --nowarnings --parallel=8 --big-test</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>执行所有以 <code>events </code>为前缀的 case，搜索范围为 <code>mysql-test/t</code>、<code>mysql-test/suite</code>，注意不包括<code>extra/</code> ：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --do-test 参数支持正则表达式，该指令等效于./mtr --do-test=events.*</span></span><br><span class="line">./mtr --do-test=events --force --max-test-fail=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想测试所有包含 innodb 的 case，可以用 ./mtr --do-test=.*innodb.*</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="特殊用法："><a href="#特殊用法：" class="headerlink" title="特殊用法："></a>特殊用法：</h2><ul><li><p>1、准备数据库： <code>create database test</code> 。</p><ul><li><p>a）执行 <code>./mtr --extern host=127.0.0.1 --extern port=3306 --extern user=root --extern password= --force --max-test-fail=0 --suite=main</code> ，第一个非 skipped case 可以执行成功，但之后的 case 全部失败。</p></li><li><p>b）分析原因，发现是每执行完一个 case ，mtr 就会 shutdown mysqld server，下一个 case 再启动，而这里是使用的外部 mysql，则不会启动。</p></li></ul></li><li><p>2、查看手册，发现有一个参数可以控制是否每个 case 都重启 mysqld：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--fast</span><br><span class="line"></span><br><span class="line">Do not perform controlled shutdown when servers need to be restarted or at the end of the <span class="built_in">test</span> run. This is equivalent to using --shutdown-timeout=0.</span><br></pre></td></tr></table></figure><ul><li><strong>3、添加后，虽然不重启了，但会导致一些 case 失败。 这是因为有些 case 需要初始化一些参数</strong>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Note</span><br><span class="line"></span><br><span class="line">    If a <span class="built_in">test</span> <span class="keyword">case</span> has an .opt file that requires the server to be restarted with specific options, the</span><br><span class="line">    file will not be used. The <span class="built_in">test</span> <span class="keyword">case</span> likely will fail as a result.</span><br></pre></td></tr></table></figure><p>可见，<strong>官方对这种用法的支持尚不完善</strong>。</p><h1 id="推荐用法"><a href="#推荐用法" class="headerlink" title="推荐用法"></a>推荐用法</h1><p>如果需要验证 release 版本稳定性（适用于 QA、研发），可参考 <code>default.daily</code> 中的指令集。</p><ul><li>该指令集覆盖了单元测试（必须以 DEBUG 编译）、压力测试等。</li></ul><h1 id="如何添加测试用例？"><a href="#如何添加测试用例？" class="headerlink" title="如何添加测试用例？"></a>如何添加测试用例？</h1><h2 id="1-示例一"><a href="#1-示例一" class="headerlink" title="1. 示例一"></a>1. 示例一</h2><p>我们通过一个最简单的例子来说明这个框架是怎么使用的。</p><h3 id="1-1-创建测试用例"><a href="#1-1-创建测试用例" class="headerlink" title="1.1. 创建测试用例"></a>1.1. 创建测试用例</h3><p>在 <code>mysql-test/t</code> 目录下创建一个文件名为 <code>mytest.test</code> 的测试用例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--disable_warnings</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> t1;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@sql</span>_mode<span class="operator">=</span><span class="string">&#x27;NO_ENGINE_SUBSTITUTION&#x27;</span>;</span><br><span class="line"><span class="comment">--enable_warnings</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> SQL_WARNINGS<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--echo #</span></span><br><span class="line"><span class="comment">--echo # test content</span></span><br><span class="line"><span class="comment">--echo #</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1 (a <span class="type">INT</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span> (<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span> (<span class="number">2</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> t1;</span><br></pre></td></tr></table></figure><p>在<code>mysql-test/r</code> 目录下创建名为<code>mytest.result</code> 的文件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> t1;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@sql</span>_mode<span class="operator">=</span><span class="string">&#x27;NO_ENGINE_SUBSTITUTION&#x27;</span>;</span><br><span class="line"><span class="keyword">SET</span> SQL_WARNINGS<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">#</span><br><span class="line"># test content</span><br><span class="line">#</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1 (a <span class="type">INT</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span> (<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span> (<span class="number">2</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1;</span><br><span class="line">a</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> t1;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可见，<code>.result</code> 文件中不仅要记录 SQL，还要记录输出结果。</p><h3 id="1-2-执行测试，成功"><a href="#1-2-执行测试，成功" class="headerlink" title="1.2. 执行测试，成功"></a>1.2. 执行测试，成功</h3><p>指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> mysql80-debug/mysql-test</span><br><span class="line">./mtr main.mytest</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Logging: ./mtr  main.mytest</span><br><span class="line">MySQL Version 8.0.29</span><br><span class="line">Checking supported features</span><br><span class="line"> - Binaries are debug compiled</span><br><span class="line">Using <span class="string">&#x27;all&#x27;</span> suites</span><br><span class="line">Collecting tests</span><br><span class="line">Checking leftover processes</span><br><span class="line">Removing old var directory</span><br><span class="line">Creating var directory <span class="string">&#x27;/Users/wslu/work/mysql/mysql80-debug/mysql-test/var&#x27;</span></span><br><span class="line">Installing system database</span><br><span class="line">Using parallel: 1</span><br><span class="line"></span><br><span class="line">==============================================================================</span><br><span class="line">                  TEST NAME                       RESULT  TIME (ms) COMMENT</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">[ 50%] main.mytest                               [ pass ]     63</span><br><span class="line">[100%] shutdown_report                           [ pass ]</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">The servers were restarted 0 <span class="built_in">times</span></span><br><span class="line">The servers were reinitialized 0 <span class="built_in">times</span></span><br><span class="line">Spent 0.063 of 16 seconds executing testcases</span><br><span class="line"></span><br><span class="line">Completed: All 2 tests were successful.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看到 successful 说明执行成功。</p><h3 id="1-3-修改-result-文件"><a href="#1-3-修改-result-文件" class="headerlink" title="1.3. 修改 result 文件"></a>1.3. 修改 result 文件</h3><p>在 <code>mytest.result</code> 文件中添加一些字符：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS t1;</span><br><span class="line">SET @@sql_mode=<span class="string">&#x27;NO_ENGINE_SUBSTITUTION&#x27;</span>;</span><br><span class="line">SET SQL_WARNINGS=1;</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># test content</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">CREATE TABLE t1 (a INT);</span><br><span class="line">INSERT INTO t1 VALUES (1);</span><br><span class="line">INSERT INTO t1 VALUES (2);</span><br><span class="line">SELECT * FROM t1; <span class="comment"># new comment</span></span><br><span class="line">a</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">DROP TABLE t1;</span><br></pre></td></tr></table></figure><h3 id="1-4-再次执行测试，失败"><a href="#1-4-再次执行测试，失败" class="headerlink" title="1.4. 再次执行测试，失败"></a>1.4. 再次执行测试，失败</h3><p>再次执行指令<code>./mtr main.mytest</code> ，可见<code># new comment</code> 那一行报错：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line">                  TEST NAME                       <span class="keyword">RESULT</span>  <span class="type">TIME</span> (ms) COMMENT</span><br><span class="line"><span class="comment">------------------------------------------------------------------------------</span></span><br><span class="line">[ <span class="number">50</span><span class="operator">%</span>] main.mytest                               [ fail ]</span><br><span class="line">        Test ended <span class="keyword">at</span> <span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">15</span>:<span class="number">07</span>:<span class="number">50</span></span><br><span class="line"></span><br><span class="line">CURRENT_TEST: main.mytest</span><br><span class="line"><span class="comment">--- /Users/wslu/work/mysql/mysql80-debug.bak_asan_ubsan_gcov/mysql-test/r/mytest.result  2023-03-20 10:07:31.000000000 +0300</span></span><br><span class="line"><span class="operator">+</span><span class="operator">+</span><span class="operator">+</span> <span class="operator">/</span>Users<span class="operator">/</span>wslu<span class="operator">/</span>work<span class="operator">/</span>mysql<span class="operator">/</span>mysql80<span class="operator">-</span>debug.bak_asan_ubsan_gcov<span class="operator">/</span>mysql<span class="operator">-</span>test<span class="operator">/</span>var<span class="operator">/</span>log<span class="operator">/</span>mytest.reject  <span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">07</span>:<span class="number">50.000000000</span> <span class="operator">+</span><span class="number">0300</span></span><br><span class="line">@@ <span class="number">-7</span>,<span class="number">7</span> <span class="operator">+</span><span class="number">7</span>,<span class="number">7</span> @@</span><br><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1 (a <span class="type">INT</span>);</span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span> (<span class="number">1</span>);</span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span> (<span class="number">2</span>);</span><br><span class="line"><span class="operator">-</span><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1; # <span class="keyword">new</span> comment</span><br><span class="line"><span class="operator">+</span><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1;</span><br><span class="line"> a</span><br><span class="line"> <span class="number">1</span></span><br><span class="line"> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">mysqltest: <span class="keyword">Result</span> length mismatch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">The <span class="keyword">result</span> <span class="keyword">from</span> queries just before the failure was:</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> t1;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@sql</span>_mode<span class="operator">=</span><span class="string">&#x27;NO_ENGINE_SUBSTITUTION&#x27;</span>;</span><br><span class="line"><span class="keyword">SET</span> SQL_WARNINGS<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">#</span><br><span class="line"># test content</span><br><span class="line">#</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1 (a <span class="type">INT</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span> (<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span> (<span class="number">2</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1;</span><br><span class="line">a</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> t1;</span><br><span class="line">safe_process[<span class="number">19130</span>]: Child process: <span class="number">19131</span>, exit: <span class="number">1</span></span><br><span class="line"></span><br><span class="line"> <span class="operator">-</span> the logfile can be found <span class="keyword">in</span> <span class="string">&#x27;/Users/wslu/work/mysql/mysql80-debug.bak_asan_ubsan_gcov/mysql-test/var/log/main.mytest/mytest.log&#x27;</span></span><br><span class="line"></span><br><span class="line">[<span class="number">100</span><span class="operator">%</span>] shutdown_report                           [ pass ]</span><br><span class="line"><span class="comment">------------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure><p>mtr 会指出具体是哪行导致的 case 失败。</p><h1 id="常见问题-FAQ"><a href="#常见问题-FAQ" class="headerlink" title="常见问题 FAQ"></a>常见问题 FAQ</h1><h2 id="test-case-failed-原因"><a href="#test-case-failed-原因" class="headerlink" title="test case failed 原因"></a>test case failed 原因</h2><ol><li>产生的测试结果文件与预期输出文件 diff 结果不一致：<ol><li>期望输入的 SQL 执行成功，实际执行失败。</li><li>期望输入的 SQL 执行失败，实际执行成功。</li><li>比如：<code>mysql-test/t/select_all.test</code> 这个测试 case，其预期结果在<code>mysql-test/r/select_all.result</code>，在实际执行时，会将执行结果与<code>mysql-test/r/select_all.result</code>作比较，若不一致，则失败，并在<code>mysql-test/var/log</code>目录生成一个<code>.reject</code>文件。</li></ol></li><li>测试过程中 mysql server 挂掉。这种情况一般会报“丢失连接”的错误。</li><li>测试期间 MySQL Server 端写入了未过滤的 warnings 或 errors 日志。</li></ol><blockquote><p>此外，测试用例可以执行外部程序，因此在某些方面，测试框架可以扩展为测试 SQL 语句以外的用途。<br>最后，可以在测试中嵌入一小段 Perl 代码。这有时可用于执行超出测试语言或 SQL 能力的操作或执行逻辑。</p></blockquote><p>可使用一些技巧来定为具体的错误原因，详见下节。</p><h1 id="异常调试"><a href="#异常调试" class="headerlink" title="异常调试"></a>异常调试</h1><h2 id="分析日志"><a href="#分析日志" class="headerlink" title="分析日志"></a>分析日志</h2><p>默认情况下，在目录 <code>mysql-test/var/log/</code>中有日志生成（若指定 <code>--vardir</code> 参数，则以该参数路径为准），分析该日志也能得到一些有用信息。</p><p>比如 启动失败，则可以查看 <code>bootstrap.log</code> 文件，去掉命令中的 <code>--bootstrap</code> 并运行即可启动对应的 MySQL 服务来验证、调试。</p><h2 id="verbose-参数"><a href="#verbose-参数" class="headerlink" title="verbose 参数"></a>verbose 参数</h2><p>启动 mtr 时加 <code>--verbose</code> 参数，定位到引用的脚本位置后可以配置 <code>--echo</code> 命令修改调试。</p><p>如果加上 <code>--verbose</code> 打印的内容还不够详细，可以再加一个，即 <code>--verbose --verbose</code>，能打印出 mtr perl 脚本中的日志信息。</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">wslu@ubuntu:/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test$ perl mysql-test-run.pl --timer  --force --parallel=1 --vardir=var-rpl --suite=rpl --verbose</span><br><span class="line">Logging: mysql-test-run.pl  --timer --force --parallel=1 --vardir=var-rpl --suite=rpl --verbose</span><br><span class="line">&gt; exe_name: mysqld</span><br><span class="line">MySQL Version 8.0.29</span><br><span class="line">Checking supported features</span><br><span class="line"> - Binaries are debug compiled</span><br><span class="line">&gt; Testing FIPS: --test-ssl-fips-mode 0 error:0F06D065:common libcrypto routines:FIPS_mode_set:fips mode not supported</span><br><span class="line"></span><br><span class="line">Using suite(s): rpl</span><br><span class="line">Collecting tests</span><br><span class="line">&gt; Collecting: rpl</span><br><span class="line">&gt; suitedir: /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/suite/rpl</span><br><span class="line">&gt; testdir: /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/suite/rpl/t</span><br><span class="line">&gt; resdir: /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/suite/rpl/r</span><br><span class="line">&gt; Read combinations file /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/suite/rpl/combinations.</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> rpl</span><br><span class="line">&gt; Collecting: i_rpl</span><br><span class="line">Removing old var directory</span><br><span class="line">&gt; opt_vardir: /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl</span><br><span class="line">&gt; Removing /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var</span><br><span class="line">&gt; Removing /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/</span><br><span class="line">&gt; Removing /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/tmp/</span><br><span class="line">Creating var directory <span class="string">&#x27;/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl&#x27;</span></span><br><span class="line">&gt; Creating /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl</span><br><span class="line">Installing system database</span><br><span class="line"><span class="comment">### safe_path: /data/work/mysql/mysql80-install.bak_asan_ubsan/bin//mysqltest_safe_process --verbose -- /data/work/mysql/mysql80-install.bak_asan_ubsan/bin/mysqld --no-defaults --initialize-insecure --loose-skip-ndbcluster --tmpdir=/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/tmp/ --core-file --datadir=/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/data/ --secure-file-priv=/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl --innodb_buffer_pool_size=24M --innodb-log-file-size=5M --innodb_autoextend_increment=8 --character-sets-dir=/data/work/mysql/mysql80-install.bak_asan_ubsan/share/charsets --loose-auto_generate_certs=OFF --loose-sha256_password_auto_generate_rsa_keys=OFF --loose-caching_sha2_password_auto_generate_rsa_keys=OFF --init-file=/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/tmp/bootstrap.sql</span></span><br><span class="line">Using parallel: 1</span><br><span class="line"></span><br><span class="line">==============================================================================</span><br><span class="line">                  TEST NAME                       RESULT  TIME (ms) COMMENT</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">&gt; Client connected</span><br><span class="line">worker[1] &gt; mtr_ping_port: 13000</span><br><span class="line">worker[1] &gt; FREE</span><br><span class="line">worker[1] &gt; mtr_ping_port: 13001</span><br><span class="line">worker[1] &gt; FREE</span><br><span class="line">worker[1] &gt; mtr_ping_port: 13002</span><br><span class="line">worker[1] &gt; FREE</span><br><span class="line">worker[1] &gt; mtr_ping_port: 13003</span><br><span class="line">worker[1] &gt; FREE</span><br><span class="line">......</span><br><span class="line">worker[1] &gt; mtr_ping_port: 13029</span><br><span class="line">worker[1] &gt; FREE</span><br><span class="line">worker[1] &gt; Using MTR_BUILD_THREAD 300, with reserved ports 13000..13029</span><br><span class="line">worker[1] Creating var directory <span class="string">&#x27;/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl&#x27;</span></span><br><span class="line">worker[1] &gt; result: , file_mode: 0</span><br><span class="line">[  0%] rpl.rpl_atomic_ddl                        [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_atomic_ddl_no_binlog              [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_binlog_cache_encryption           [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_filters_error_cases_on_startup    [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_group_commit_deadlock             [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_group_commit_deadlock_myisam      [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_innodb_auto_increment             [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_killed_ddl                        [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_log_info_repository_persistence_assign_gtids_to_anonymous_transactions  [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_log_info_repository_persistence_require_row  [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_log_info_repository_persistence_require_table_primary_key_check  [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_row_crash_safe                    [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_row_mts_rec_crash_safe            [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_stm_mixed_crash_safe              [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_stm_mixed_mts_rec_crash_safe      [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_stm_mixed_mts_rec_crash_safe_checksum  [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_io_thd_wait_for_disk_space_stress  [ disabled ]   BUG<span class="comment">#23581287 Disabled until bug is fixed.</span></span><br><span class="line">[  0%] rpl.rpl_writeset_add_unique_key           [ disabled ]   Bug<span class="comment">#33134835 RPL_WRITESET_ADD_UNIQUE_KEY FAILS SPORADICALLY</span></span><br><span class="line">worker[1] &gt; Running <span class="built_in">test</span>: rpl.rpl_plugin_load</span><br><span class="line">worker[1] &gt; Setting timezone: GMT-3</span><br><span class="line">worker[1] &gt; Cleaning datadirs...</span><br><span class="line">worker[1] &gt; clean_dir: /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/tmp</span><br><span class="line">worker[1] &gt; unlink: <span class="string">&#x27;/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/tmp/bootstrap.sql&#x27;</span></span><br><span class="line">worker[1] &gt; Generating my.cnf from <span class="string">&#x27;/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/suite/rpl/my.cnf&#x27;</span></span><br><span class="line">worker[1] &gt; MASTER_MYPORT = 13000</span><br><span class="line">worker[1] &gt; MASTER_MYSOCK = /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/tmp/mysqld.1.sock</span><br><span class="line">worker[1] &gt; MASTER_X_MYSOCK = /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/tmp/mysqlx.1.sock</span><br><span class="line">worker[1] &gt; SLAVE_MYPORT = 13002</span><br><span class="line">worker[1] &gt; SLAVE_MYSOCK = /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/tmp/mysqld.2.sock</span><br><span class="line">worker[1] &gt; SLAVE_X_MYSOCK = /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/tmp/mysqlx.2.sock</span><br><span class="line">worker[1] &gt; mysqld_start:  [<span class="string">&#x27; --plugin-dir=/data/work/mysql/mysql80-install.bak_asan_ubsan/lib/plugin&#x27;</span>, <span class="string">&#x27;--binlog-format=mixed &#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">### safe_path: /data/work/mysql/mysql80-install.bak_asan_ubsan/bin//mysqltest_safe_process --verbose -- /data/work/mysql/mysql80-install.bak_asan_ubsan/bin/mysqld --defaults-group-suffix=.1 --defaults-file=/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/my.cnf --log-output=file --loose-debug-sync-timeout=600 --plugin-dir=/data/work/mysql/mysql80-install.bak_asan_ubsan/lib/plugin --binlog-format=mixed --core-file</span></span><br><span class="line">worker[1] &gt; Started [mysqld.1 - pid: 61921, winpid: 61921]</span><br><span class="line">worker[1] &gt; mysqld_start:  [<span class="string">&#x27; --plugin-dir=/data/work/mysql/mysql80-install.bak_asan_ubsan/lib/plugin&#x27;</span>, <span class="string">&#x27;--binlog-format=mixed &#x27;</span>]</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="debug-参数和-gdb-参数"><a href="#debug-参数和-gdb-参数" class="headerlink" title="debug 参数和 gdb 参数"></a>debug 参数和 gdb 参数</h2><p>mtr 支持的一些 debug 参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">debug                 Dump trace output <span class="keyword">for</span> all servers and client programs.</span><br><span class="line">debug-common          Same as debug, but sets <span class="string">&#x27;d&#x27;</span> debug flags to</span><br><span class="line">                      <span class="string">&quot;query,info,error,enter,exit&quot;</span>; you need this <span class="keyword">if</span> you</span><br><span class="line">                      want both to see debug printouts and to use</span><br><span class="line">                      DBUG_EXECUTE_IF.</span><br><span class="line">debug-server          Use debug version of server, but without turning on</span><br><span class="line">                      tracing.</span><br><span class="line">debugger=NAME         Start mysqld <span class="keyword">in</span> the selected debugger.</span><br><span class="line">gdb                   Start the mysqld(s) <span class="keyword">in</span> gdb.</span><br><span class="line">lldb                  Start the mysqld(s) <span class="keyword">in</span> lldb.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可见，要想跟踪调用过程，只有 <code>--debug</code> 和 <code>--gdb</code> 参数满足要求，会生成 trace 信息。</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这几条指令很耗费内存</span></span><br><span class="line">./mtr --debug --suite=rpl</span><br><span class="line">./mtr --gdb --suite=rpl</span><br><span class="line">./mtr --debug --gdb --suite=rpl</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>指令执行后，生成 trace 文件，比如 <code>var/log/bootstrap.trace</code> 。</p><h2 id="脚本自身支持-debug-参数"><a href="#脚本自身支持-debug-参数" class="headerlink" title="脚本自身支持 debug 参数"></a>脚本自身支持 debug 参数</h2><p>如果引用（<code>source</code>）的脚本支持 debug 参数，比如常用的 <code>$rpl_debug</code>，则可以修改相应的 <code>.inc</code> 文件以获得更多的 debug 信息。</p><h2 id="perl-的调试模式"><a href="#perl-的调试模式" class="headerlink" title="perl 的调试模式"></a>perl 的调试模式</h2><p>添加<code>-d</code> 参数可进入 perl 语言的 debug 模式，便于调试 <code>mysql-test-run.pl</code> 及其调用。示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">wslu@ubuntu:/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test$ perl -d mysql-test-run.pl --timer  --force --parallel=1 --vardir=var-rpl --suite=rpl</span><br><span class="line"></span><br><span class="line">Loading DB routines from perl5db.pl version 1.60</span><br><span class="line">Editor support available.</span><br><span class="line"></span><br><span class="line">Enter h or <span class="string">&#x27;h h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>, or <span class="string">&#x27;man perldebug&#x27;</span> <span class="keyword">for</span> more <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line">main::(mysql-test-run.pl:54):  push @INC, <span class="string">&quot;.&quot;</span>;</span><br><span class="line">  DB&lt;1&gt; l</span><br><span class="line">54==&gt;  push @INC, <span class="string">&quot;.&quot;</span>;</span><br><span class="line">55</span><br><span class="line">56:  use My::ConfigFactory;</span><br><span class="line">57:  use My::CoreDump;</span><br><span class="line">58:  use My::File::Path;    <span class="comment"># Patched version of File::Path</span></span><br><span class="line">59:  use My::Find;</span><br><span class="line">60:  use My::Options;</span><br><span class="line">61:  use My::Platform;</span><br><span class="line">62:  use My::SafeProcess;</span><br><span class="line">63:  use My::SysInfo;</span><br><span class="line">  DB&lt;1&gt; n</span><br><span class="line">main::(mysql-test-run.pl:72):  require <span class="string">&quot;lib/mtr_gcov.pl&quot;</span>;</span><br><span class="line">  DB&lt;1&gt; l</span><br><span class="line">72==&gt;  require <span class="string">&quot;lib/mtr_gcov.pl&quot;</span>;</span><br><span class="line">73:  require <span class="string">&quot;lib/mtr_gprof.pl&quot;</span>;</span><br><span class="line">74:  require <span class="string">&quot;lib/mtr_io.pl&quot;</span>;</span><br><span class="line">75:  require <span class="string">&quot;lib/mtr_lock_order.pl&quot;</span>;</span><br><span class="line">76:  require <span class="string">&quot;lib/mtr_misc.pl&quot;</span>;</span><br><span class="line">77:  require <span class="string">&quot;lib/mtr_process.pl&quot;</span>;</span><br><span class="line">78</span><br><span class="line">79:  our <span class="variable">$secondary_engine_support</span> = <span class="built_in">eval</span> <span class="string">&#x27;use mtr_secondary_engine; 1&#x27;</span>;</span><br><span class="line">80</span><br><span class="line">81   <span class="comment"># Global variable to keep track of completed test cases</span></span><br><span class="line">  DB&lt;1&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调试模式常用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">h       查看帮助文档</span><br><span class="line">c line  运行到指定行</span><br><span class="line">n       运行到下一行</span><br><span class="line">s       跳到函数内部运行</span><br><span class="line">l       查看代码</span><br><span class="line">q       退出</span><br></pre></td></tr></table></figure><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 测试框架 </tag>
            
            <tag> MTR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐 | 一体化实时 HTAP 数据库 StoneDB，如何替换 MySQL 并实现近百倍性能提升</title>
      <link href="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/"/>
      <url>/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>本文首发于 2022-07-06 09:10:34</strong></p></blockquote><h1 id="推荐语"><a href="#推荐语" class="headerlink" title="推荐语"></a>推荐语</h1><p>本文为数据库圈内好友<strong>高日耀</strong>首发于“CSDN 微信公众号”的文章。</p><p>最近几年基于 PostgreSQL 开发的国产数据库如雨后春笋般涌现，而受限于 MySQL 的 GPL Licence（感兴趣的可移步我的博文<a href="https://dbkernel.github.io/2021/08/19/how-to-choose-open-source-licence/">《技术分享 | 如何为你的代码选择一个合适的开源协议？》</a>），二次开发必须开源，这导致基于 MySQL 开发的国产数据库相对较少（比如：万里开源的 <a href="https://github.com/GreatSQL/GreatSQL">GreatSQL</a>），因此，当听说 StoneDB 开源的消息时，我个人还是很兴奋的。</p><p>废话不多说，以下为正文。</p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>众所周知，MySQL 是世界上最流行的 OLTP 数据库之一，截至 2022 年它在整个数据库行业的市场占有率达到了 43.04%（数据来源：Slintel 网站）。许多企业将各种业务系统应用于 MySQL 上。然而，随着企业数据量的不断增加，除了在线业务逻辑的读写，数据库还要面对日益复杂的分析性业务需求，比如 BI 报表、可视化、大数据应用等。而 MySQL 原生的架构（基于流式迭代器模型 Volcano Iterator 的执行引擎，没有利用现代多核 CPU 并行处理能力，按行存储的存储引擎）在 AP 场景中存在天然的缺陷。针对这种情况，为了补足 MySQL 的 AP 能力缺陷，业内围绕 MySQL 做了很多解决方案。主要是围绕 MySQL 搭建的异构 HTAP 数据库系统。</p><p>什么是 HTAP ？在 2014 年，Gartner 给出了 HTAP 的严格定义，其目的是为了打破，事务型负载和分析型负载之间的“壁垒”, 使系统能够支持更多的“数据”在两个系统之间流动，以及以这些数据为基础的 “实时业务”的决策。</p><p>传统架构形式下，为了解决同时处理 TP 负载和 AP 负载的问题，通常采用一套 TP 系统加上一套 AP 系统的方式，TP 和 AP 之间通过 ETL 的方式进行数据同步的来满足业务对实时性的需求，这也是当前业界搭建 HTAP 的主流方案。</p><h1 id="业内围绕-MySQL-搭建-HTAP-主流方案"><a href="#业内围绕-MySQL-搭建-HTAP-主流方案" class="headerlink" title="业内围绕 MySQL 搭建 HTAP 主流方案"></a>业内围绕 MySQL 搭建 HTAP 主流方案</h1><p>我们先来看看业界主流的基于 MySQL 的 HTAP 解决方案。</p><h2 id="1-MySQL-Hadoop"><a href="#1-MySQL-Hadoop" class="headerlink" title="1. MySQL + Hadoop"></a>1. MySQL + Hadoop</h2><p>借助 Hadoop 体系，将 MySQL 的业务数据，通过 ETL 工具同步至开源大数据系统（如 Hive，Hadoop，Spark 等）搭建的数据仓库，再基于该数仓做数据分析。</p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/sync-mysql-data-to-hadoop.png" alt="MySQL 同步数据到 Hadoop"></p><h2 id="2-MySQL-数据湖"><a href="#2-MySQL-数据湖" class="headerlink" title="2. MySQL + 数据湖"></a>2. MySQL + 数据湖</h2><p>借助数据湖平台，通过 ETL 工具将 MySQL 数据同步至数据湖，再基于数据湖进行数据、报表、BI 等分析。</p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/sync-mysql-data-to-data-lake.png" alt="MySQL 同步数据到数据湖"></p><h2 id="3-MySQL-ClickHouse-Greenplum"><a href="#3-MySQL-ClickHouse-Greenplum" class="headerlink" title="3. MySQL + ClickHouse/Greenplum"></a>3. MySQL + ClickHouse/Greenplum</h2><p>通过 ETL 等数据迁移工具将 MySQL 数据迁移到 ClickHouse/Greenplum 做分析。</p><p>ClickHouse 官方在 20 年下半年发布了社区版 MaterializeMySQL 引擎 ，可以将 ClickHouse 作为 MySQL 的一个从库同步主节点数据，除了 ETL 工具，业内也有直接将 ClickHouse 作为一个 MySQL 从库直接挂载的方案。</p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/sync-mysql-data-to-greenplum-or-clickhouse.png" alt="MySQL 同步数据到 ClickHouse/Greenplum"></p><h2 id="4-基于多副本的-Divergent-Design"><a href="#4-基于多副本的-Divergent-Design" class="headerlink" title="4. 基于多副本的 Divergent Design"></a>4. 基于多副本的 Divergent Design</h2><p>比如兼容 MySQL 协议的 TiDB，在一个 Raft Group 其中一个副本上，通过自研列式存储 (TiFlash) 来响应复杂 AP 查询，并通过 TiDB 的智能路由功能来自动选取数据源，实现一套分布式 HTAP 数据库系统，在分布式领域这块做的是比较好的。</p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/htap-tidb.png" alt="TiDB HTAP 架构图"></p><h2 id="以上方案存在的问题"><a href="#以上方案存在的问题" class="headerlink" title="以上方案存在的问题"></a>以上方案存在的问题</h2><p>以上几种 HTAP 解决方案，虽然是行业内的主流，但依然存在着一些问题，包括：</p><ol><li>系统架构过重，运维复杂度较高；</li><li>TP 数据通过 ETL 方式同步到 AP 系统中，数据延时较大，难以满足服务对分析的实时性要求；</li><li>异构数据库组合，技术上需要维护两套数据库系统，涉及到众多技术栈，对技术人员要求较高；</li><li>NewSQL 系统，需要进行各种兼容性适配，适配工作会比较复杂，对技术人员要求也比较高。</li></ol><p>为此，我们带来了在 HTAP 方面的解决方案：StoneDB，一款开源的一体化实时 HTAP 数据库。</p><h1 id="StoneDB：完全兼容-MySQL-生态的一体化行列混合存储-HTAP-数据库"><a href="#StoneDB：完全兼容-MySQL-生态的一体化行列混合存储-HTAP-数据库" class="headerlink" title="StoneDB：完全兼容 MySQL 生态的一体化行列混合存储 HTAP 数据库"></a>StoneDB：完全兼容 MySQL 生态的一体化行列混合存储 HTAP 数据库</h1><p>StoneDB 是一款刚刚开源的基于原生 MySQL 的一体化实时 HTAP 数据库，用国内首创的一体化行列混存架构，以极低成本实现高性能的实时 HTAP 。</p><p>StoneDB 采用一体化的行列混合存储，跟分布式多副本 Divergent Design 做法不同，是在同一个数据库实例中采用行列混合存储的方案，高度集成，运维复杂度较低，用户使用体验更好。这套架构的设计初衷是用一套数据库，同时解决 TP 和 AP 的问题，<strong>更轻量，更优雅，更便捷。</strong> 目前国外厂商如 Oracle / SQL Server / DB2 等都采用了类似的方案，但是它们都不开源。</p><p>StoneDB 一体化架构图概览（v1.0）:</p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-architecture-v1.0.png" alt="StoneDB 一体化架构图概览（v1.0）"></p><p>StoneDB 以插件的方式接入 MySQL，通过 查询/写入接口和 MySQL server 层进行交互， 当前一体化架构主要特性有：</p><ul><li>按列式存储方式组织数据，并结合高效压缩算法，使得 StoneDB 在获得高性能的同时也具有存储成本优势。</li><li>基于知识网格（Knowledge Grid）的近似查询及并行处理等机制，使得 StoneDB 在处理海量数据以及复杂查询时候，能够最大限度的减少无关数据的 IO。</li><li>利用直方图，数据块位图等众多统计信息来进一步加速查询处理的速度。</li><li>采用带有延后重构模型的 Column-at-a-time 的面向列式存储的执行引擎，又进一步提高执行引擎的效率。</li><li>提供高速的数据载入能力。</li></ul><p>接下来我们看一下 StoneDB 的架构设计。</p><p><strong>架构设计：数据组织形式</strong></p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-data-form.png" alt="StoneDB 数据组织形式"></p><p>在 StoneDB 中，数据按列进行组织。这种数据组织形式，对各类压缩算法友好，可依据各列类型、数据等因素选择合适的高效压缩算法，以达到节约 IO 和 Memory 资源的目的。另外还具备以下优点 ：</p><ul><li>Cache Line 友好。</li><li>查询过程中，针对各列的运算并发执行,最后在内存中聚合完整记录集。</li><li>即席查询时，只需扫描特定列即可，无需消耗 IO 资源去读取其他列的值。</li><li>无需维护索引，支持任意列组合的即席查询。</li><li>可以提供基于知识网格能力， 提升数据查找效率。</li></ul><p><strong>架构设计：基于列的数据压缩</strong></p><p>正如上面所提到的，数据按列进行组织，列中所有记录的类型一致，可以根据数据类型选择对应的高效压缩算法，因为：</p><ul><li>列中重复值出现概率高，压缩效果明显。</li><li>数据节点大小固定，可以最大化压缩性能和效率。</li><li>根据特定的数值类型压缩（int，float，date/time，string 等）。</li></ul><p>StoneDB 可以支持多达 20+种自适应压缩算法，目前主要使用：</p><ul><li>PPM</li><li>LZ4</li><li>B2</li><li>Delta 等等</li></ul><p><strong>架构设计：数据组织结构与知识网格</strong></p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-data-structure-and-knowledge-grid.png" alt="StoneDB 数据组织结构与知识网格"></p><p>StoneDB 的查询处理部分如上图所示。查询处理作为整个数据库的大脑，查询优化算法好坏，直接影响查询效率。</p><p>我们再来讨论一下数据组织结构和知识网格。之前在介绍架构的时候，我们也提到数据的按列组织，而且在每个列中，数据又按更细粒度的数据块进行划分。该种方式所带来的优点有：</p><p>（1）物理数据按固定数据块，进行存储，通常称之为：Data Node，通常为：128KB，系统方便进行 IO 效率的优化。同时，也可为系统提供基于块（Block）的高效压缩/加密算法。</p><p>（2）知识网格可以为查询优化器，执行和压缩算法等提供支持。例如：基于知识网格的查询，优化器会利用知识网格来决定需要抓取哪些 Data Node 来执行数据操作。</p><p>我们解释一下相关概念，以下数据节点、元数据节点皆为逻辑概念：</p><ul><li>数据节点（Data Node，DN）：数据块大小固定（典型值 128KB），优化 IO 效率，提供基于块（Block）的高效压缩/加密算法。</li><li>知识网格（Knowledge Grid，KG）：用于元数据存储。</li><li>元数据节点（Metadata Node，MDN）：描述数据节点的元数据信息。由知识节点（Knowledge Node，KN）组成，为查询优化器，计划执行和压缩算法等提供支持。</li></ul><p><strong>架构设计 - 查询：知识网格（ Knowlegde Grid ）概览</strong></p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-knowledge-grid-overview.png" alt="StoneDB 知识网格（ Knowlegde Grid ）概览"></p><p><strong>架构设计 - 查询：基于 Knowlegde Grid 的优化器</strong></p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-knowledge-grid-optimizer.png" alt="StoneDB 知识网格（ Knowlegde Grid ）优化器"></p><p>如上图所示：首先由查询优化器进行基于知识网格的优化，对其所需要处理的数据进行剪枝，其采取的策略为：对于满足查询条件的数据节点，即关联性数据节点，对其采取直接读取并返回的策略；对不确定性数据节点，先进行解压，然后在进行基于查询条件的处理，最后返回处理结果；而对与查询条件完全不相关的数据节点，则直接忽略。</p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-data-pruning-1.png" alt="StoneDB 数据剪枝"></p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-data-pruning-2.png" alt="StoneDB 数据剪枝"></p><p>然后再基于知识网格中的信息进行粗糙集（Rough Set）构建，并确定此次请求所需使用到的数据节点。基于 KN 和 MD ，确定查询涉及到的 DN 节点集合，并将 DN 节点分类。执行计划构建时，会完全规避非关联 DN，仅读取并解压关联 DN，按照特定情况决定是否读取不确定的 DN。如果查询请求的结果可以直接从元数据节点（MDN）中产生（例如 count，max，min 等操作），则直接返回元数据节点中的数据，无需访问物理数据文件。</p><p><strong>架构设计 - 查询：处理流程</strong></p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-query-processing-process.png" alt="StoneDB 查询处理流程"></p><p>例如对于一个查询请求，通过 KG（知识网格）可以确定 3 个关联性 DN 和 1 个不确定性 DN。如果，此请求包含聚合函数。此时只需要解压不确定性 DN，并计算聚合值，再结合 3 个关联性 DN 中 MD 上的统计值即可得出最终结果。如果，此请求需要返回具体数据，那么无论关联性 DN 还是不确定性 DN，都需要读取数据块并进行并行解压缩，以便获得最终结果集。</p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-query-processing-example.png" alt="StoneDB 查询处理示例"></p><p>比如，执行一条 <code>select * from xx where seller = 86</code>，内部执行流程如下：</p><ol><li><p>执行计划优化与执行：</p><ol><li>基于知识网格进行 Cost-based 优化</li><li>IO 线程池维护</li><li>内存分配与管理</li></ol></li><li><p>SMP 支持（并发查询）</p></li><li><p>向量化执行</p></li></ol><h1 id="完全兼容-MySQL-生态的-StoneDB-一体化-HTAP-系统的优势"><a href="#完全兼容-MySQL-生态的-StoneDB-一体化-HTAP-系统的优势" class="headerlink" title="完全兼容 MySQL 生态的 StoneDB 一体化 HTAP 系统的优势"></a>完全兼容 MySQL 生态的 StoneDB 一体化 HTAP 系统的优势</h1><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-product-advantage.png" alt="StoneDB 产品优势"></p><p>完全兼容 MySQL 的 StoneDB 一体化 HTAP 数据库。其具有以下几个特点 ：</p><p>（1）完全兼容 MySQL。无论是语法还是生态 MySQL 用户均可以无缝切换至 StoneDB。</p><p>（2）事务、分析一体化。无需 ETL，事务型数据实时同步到分析引擎。使得用户可以获取实时业务分析结果。</p><p>（3）<strong>完全开源。</strong></p><p>（4）相较于 MySQL 提供<strong>10-100 倍的 AP 能力。</strong> 亿级多表关联急速响应，决策结果无需等待。</p><p>（5）<strong>10 倍导入速度。</strong> 由于 AP 场景下，分析数据量巨大，高效导入速度，能给带来良好的用户体验。</p><p>（6）<strong>1/10 的 TCO 成本</strong>，StoneDB 拥有高效的压缩算法，无缝的业务迁移能力，还有它的简单架构，都能为用户带来 TCO 的降低。</p><h1 id="StoneDB-2-0-将带来全新架构"><a href="#StoneDB-2-0-将带来全新架构" class="headerlink" title="StoneDB 2.0 将带来全新架构"></a>StoneDB 2.0 将带来全新架构</h1><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-architecture-v2.0.png" alt="StoneDB 2.0 全新架构"></p><p>上文介绍的是 StoneDB 单机版本的 1.0 架构。虽然 StoneDB 基于磁盘的列存引擎在 AP 场景下的表现已经非常出色，但是毕竟其是基于磁盘的解决方案。我们知道，IO 和内存在数据库领域又属于极度宝贵的资源，以为进一步提升 StoneDB 的性能，同时也为了减少 AP 负载在执行时候对于 TP 负载的影响。未来我们将在 2.0 版本中将推出了类似于 HEATWAVE 的基于内存计算的列存引擎的全新架构。该版本将基于 MySQL 8.0 构建，基于此引擎我们将实现 AP 负载的全内存计算。</p><p>有关于 2.0 更多的信息欢迎关注 StoneDB 的官方网站 <a href="https://stonedb.io/">https://stonedb.io</a></p><p>同时，StoneDB 在 6 月 29 日已宣布正式开源。如果您感兴趣，可以通过下方链接查看 StoneDB 源码、阅读文档，期待你的贡献！</p><p>StoneDB 开源仓库：<a href="https://github.com/stoneatom/stonedb">https://github.com/stoneatom/stonedb</a></p><blockquote><p>作者：高日耀</p><p>Title：StoneDB PMC、HTAP 内核架构师</p><p>简介：毕业于华中科技大学，喜欢研究主流数据库架构和源码。8 年的数据库内核开发经验，曾从事分布式数据库 CirroData 、RadonDB 和 TDengine 的内核研发工作，现担任 StoneDB 的内核架构师及 StoneDB 项目 PMC。</p></blockquote><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> StoneDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> StoneDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术分享 | 如何为你的代码选择一个合适的开源协议？</title>
      <link href="/2021/08/19/how-to-choose-open-source-licence/"/>
      <url>/2021/08/19/how-to-choose-open-source-licence/</url>
      
        <content type="html"><![CDATA[<p><strong>作者：卢文双 资深数据库内核研发</strong></p><p>近期公司全面拥抱开源，在选择开源协议方面遇到了一些问题，查阅了很多资料，特此总结~~</p><span id="more"></span><blockquote><p><strong>本文首发于 2021-08-19 00:37:15</strong></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于很多刚踏入开源软件这个行业的小伙伴来说，在编码过程中难免会用到其他人的成果，如果你足够细心，很容易注意到即使是一小段代码，优秀的作者都在文件开头附上一段关于版权的声明，比如 <code>Licensed under the MIT license</code>。同时，一些博客也会标明”此文章采用 <code>CC BY 4.0 CN</code> 协议“。</p><p>如果我们拷贝了别人的代码或文章却没注意版权问题，在国外法律意识特别强的环境下（国内版权意识也在逐步加强），那么我们的作品会因触犯别人的权益而违法。即使是最开放的开源协议，最低要求也是保留原作者对代码的声明，所以<code>开源不等于免费，也不等于没有约束</code>。</p><p><strong>何为 LICENCE？</strong></p><blockquote><p>LICENCE 是软件的授权许可，详细说明了获得代码后拥有的权利，哪些操作是允许的，哪些操作是禁止的。软件的版权许可证可有很多方式，本文仅限于讨论开源软件协议 Open Source License。</p></blockquote><p>对于大多数人来说，没必要花大把时间去写许可协议，选择一种比较流行的开源协议就足够了，省时省力，更便于自己作品的传播，于人于己都有利。</p><p><strong>PS：</strong></p><blockquote><p>说句题外话，很多国外开发者在尊重他人劳动成果方面做得很好，如果 A 的作品是因为 B 的作品的启发而来，A 甚至都没有使用 B 任何一句代码，但 A 会在他的作品里面指明是受到了 B 的启发：<code>Inspired by XXX link: http://www.xxxx.com</code>。</p></blockquote><h2 id="快速选择开源协议"><a href="#快速选择开源协议" class="headerlink" title="快速选择开源协议"></a>快速选择开源协议</h2><p>如果你不想了解太多，只是想要一个简直直接的答案，下面给出的建议或许适合你。本小节关于协议地址来自于 GitHub <a href="http://choosealicense.com/">choosealicence</a> 。</p><p><strong>简单宽松的协议：</strong></p><blockquote><p>如果你只想要一个简单点的协议不想太麻烦的话。</p><p><a href="http://choosealicense.com/licenses/mit">MIT 协议</a>相对宽松，此协议允许别人以任何方式使用你的代码同时署名原作者，但原作者不承担代码使用后的风险，当然也没有技术支持的义务。</p></blockquote><p><strong>考虑有专利的情况：</strong></p><blockquote><p>如果你的作品中涉及到专利相关。</p><p><a href="http://choosealicense.com/licenses/apache/">Apache 协议</a>也是个相对宽松的协议，与 MIT 类似，但它指明了作者对用户专利上的一些授权（我的理解是软件作品中含有专利，但它授权你可以免费使用）。</p></blockquote><p><strong>促进代码分享：</strong></p><blockquote><p>如果你在乎作品的传播和别人的修改，希望别人也以相同的协议分享出来。</p><p>GPL（<a href="http://choosealicense.com/licenses/gpl-v2">V2</a>或<a href="http://choosealicense.com/licenses/gpl-v3">V3</a>）协议要求代码分发者或者以此代码为基础开发出来的衍生作品需要以同样的协议来发布，也必须开源，因此，该协议具有”传染性“。</p></blockquote><p>乌克兰程序员<a href="http://pbagwl.com/post/5078147450/description-of-popular-software-licenses">Paul Bagwell</a>，画了一张分析图，说明应该怎么选择。只用两分钟，你就能搞清楚这六种开源协议之间的最大区别。<br><img src="/2021/08/19/how-to-choose-open-source-licence/paul-bagwell-licence.jpeg" alt="Paul Bagwell的LICENCE分析图"></p><p>国内大神阮一峰的汉化版本：<br><img src="/2021/08/19/how-to-choose-open-source-licence/ruan-yi-feng-licence.jpeg" alt="阮一峰的LICENCE分析图"></p><h2 id="主流开源许可协议（Open-Source-License）"><a href="#主流开源许可协议（Open-Source-License）" class="headerlink" title="主流开源许可协议（Open Source License）"></a>主流开源许可协议（Open Source License）</h2><p>世界上的开源许可协议（Open Source License）大概有<a href="https://www.gnu.org/licenses/license-list.html">上百种</a>，常用的开源软件协议大致有：</p><ul><li><a href="https://www.gnu.org/licenses/gpl-3.0.html">GPL</a></li><li><a href="https://www.gnu.org/licenses/lgpl-3.0.html">LGPL</a></li><li><a href="https://opensource.org/licenses/BSD-3-Clause">BSD</a></li><li><a href="https://opensource.org/licenses/mit-license.php">MIT</a></li><li><a href="https://opensource.org/licenses/MPL-2.0">Mozilla</a></li><li><a href="http://www.apache.org/licenses/LICENSE-2.0">Apache</a></li></ul><p>由宽松到严紧排序，常用的开源协议有：</p><ol><li>MIT</li><li>BSD</li><li>Apache</li><li>LGPL</li><li>GPL</li></ol><p>主要区别：</p><ul><li>MIT、BSD 开源协议都源自大学，体现了简单、开放和包容的特点。</li><li>MIT、BSD、Apache 三者都支持闭源的后续开发。</li><li>GPL、LGPL 传染性开源，编译的代码里用了这里的代码，都必须开源。</li></ul><h3 id="MIT"><a href="#MIT" class="headerlink" title="MIT"></a>MIT</h3><p>来源于大学，MIT 开源协议是史上最为简洁、慷慨的开源协议之一。作者只想保留版权，而无任何其他了限制。也就是说，你必须在你的发行版里包含原许可协议的声明，无论你是以二进制发布的还是以源代码发布的。</p><p><strong>特点：</strong></p><ul><li>用户可以拿你的代码做任何想做的事情。</li><li>用户在项目副本中要包含版权声明和许可声明。</li><li>你无需承担任何责任。</li></ul><p><strong>代表作品：</strong></p><ul><li><a href="https://github.com/jquery/jquery">jQuery</a></li><li><a href="https://github.com/rails/rails">Rails</a> 等。</li></ul><h3 id="BSD"><a href="#BSD" class="headerlink" title="BSD"></a>BSD</h3><ul><li><a href="https://opensource.org/licenses/BSD-2-Clause">BSD-2-Clause</a></li><li><a href="https://opensource.org/licenses/BSD-3-Clause">BSD-3-Clause</a></li></ul><p>BSD 可证也来源于大学，与 MIT 差不多，也非常简单、慷慨。</p><p>BSD 开源协议是一个给于使用者很大自由的协议。基本上使用者可以”为所欲为”,可以自由的使用、修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。前提是当你发布使用了 BSD 协议的代码，或者以 BSD 协议代码为基础开发自己的产品时，需要满足三个条件：</p><ol><li>如果再发布的产品中包含源代码，则在源代码中必须带有原代码中的 BSD 协议。</li><li>如果再发布的只是二进制类库/软件，则需要在类库/软件的文档和版权声明中包含原来代码中的 BSD 协议。</li><li>不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。</li></ol><p>BSD 开源协议鼓励代码共享，但需要尊重代码作者的著作权。BSD 开源协议允许使用者修改和重新发布代码，也允许使用或在 BSD 代码上开发商业软件发布、销售，是对商业集成很友好的协议。因此，很多公司在选用开源产品的时候都首选 BSD 协议。</p><h3 id="Apache-Licence"><a href="#Apache-Licence" class="headerlink" title="Apache Licence"></a>Apache Licence</h3><ul><li><a href="http://www.apache.org/licenses/LICENSE-2.0">Apache License, Version 2.0</a></li><li><a href="https://www.apache.org/licenses/LICENSE-1.1">Apache License, Version 1.1</a></li><li><a href="https://www.apache.org/licenses/LICENSE-1.0">Apache License, Version 1.0</a></li></ul><p>来自 Apache，类似 MIT 开源协议，但它重视专利权。</p><p>Apache Licence 是著名的非盈利开源组织 Apache 采用的协议。该协议和 BSD 类似，同样鼓励代码共享和尊重原作者的著作权，同样允许修改代码、再发布（作为开源或商业软件）。需要满足的条件也和 BSD 类似：</p><ol><li>需要为使用代码的用户提供一份 Apache Licence 。</li><li>如果你修改了代码，需要在被修改的文件中说明。</li><li>在延伸的代码中（修改和由源代码衍生的代码中）需要带有原来代码中的协议、商标、专利声明和其他原作者规定需要包含的说明。</li><li>如果再发布的产品中包含一个<code>Notice</code>文件，则在 Notice 文件中需要带有 Apache Licence 。你可以在<code>Notice</code>中增加自己的许可，但不可对 Apache Licence 构成更改。</li></ol><p>Apache Licence 也是对商业应用友好的许可，使用者也可以在需要的时候修改代码来满足需要并作为开源或商业产品发布/销售。</p><p><strong>代表作品：</strong></p><ul><li><a href="https://github.com/apache/echarts">echarts</a></li><li><a href="https://github.com/apache/superset">superset</a></li><li><a href="https://github.com/apache/dubbo">dubbo</a></li><li><a href="https://github.com/apache/spark">spark</a></li></ul><h3 id="LGPL"><a href="#LGPL" class="headerlink" title="LGPL"></a>LGPL</h3><p>LGPL（GNU LESSER GENERAL PUBLIC LICENSE）来自于自由软件联盟 GNU，可以翻译为更宽松的 GPL 协议，也属于传染性开源协议。</p><p>LGPL 是 GPL 的一个主要为类库使用设计的开源协议。和<code>GPL要求任何使用/修改/衍生之GPL类库的的软件必须采用GPL协议</code>不同，LGPL 允许商业软件通过类库引用(link)方式使用 LGPL 类库而不需要开源商业软件的代码。这使得采用 LGPL 协议的开源代码可以被商业软件作为类库引用并发布和销售。</p><p>但是如果修改 LGPL 协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用 LGPL 协议，因此，LGPL 协议的开源代码很适合作为第三方类库被商业软件引用，但不适合希望以 LGPL 协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。</p><p>GPL/LGPL 都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品。</p><h3 id="GPL"><a href="#GPL" class="headerlink" title="GPL"></a>GPL</h3><p>GPL（GNU GENERAL PUBLIC LICENSE）来源于自由软件联盟 GNU，GPL/LGPL 侧重于代码及衍生代码的开源与免费使用。</p><p>GPL 协议的主要内容是只要在一个软件中使用（”使用”指类库引用，修改后的代码或者衍生代码）GPL 协议的产品，则该软件产品必须也采用 GPL 协议，既必须也是开源和免费。<strong>这就是所谓的”传染性”</strong>。</p><p>由于 GPL 严格要求使用了 GPL 类库的软件产品必须使用 GPL 协议，对于使用 GPL 协议的开源代码，商业软件或者对代码有保密要求的部门就不适合集成/采用作为类库和二次开发的基础。</p><p>我们很熟悉的 Linux 就是采用了 GPL。GPL 协议和 BSD, Apache Licence 等鼓励代码重用的许可很不一样。GPL 的出发点是<code>代码的开源/免费使用/引用/修改</code>和<code>衍生代码的开源/免费使用</code>，但<code>不允许</code>修改后和衍生的代码做为<code>闭源</code>的商业软件发布和销售。</p><p>其它细节和 BSD/Apache 等协议类似。</p><p><strong>代表作品：</strong></p><ul><li><a href="https://github.com/torvalds/linux">Linux</a></li></ul><h2 id="更多开源协议对比"><a href="#更多开源协议对比" class="headerlink" title="更多开源协议对比"></a>更多开源协议对比</h2><p>下方表格中出现的用词的解释：</p><ul><li><strong>协议和版权信息</strong>(License and copyright notice)：在代码中保留作者提供的协议和版权信息。</li><li><strong>声明变更</strong>(State Changes)：在代码中声明对原来代码的重大修改及变更。</li><li><strong>公开源码</strong>(Disclose Source)：代码必需公开。</li><li><strong>库引用</strong>(Library usage)：该库可以用于商业软件中。</li><li><strong>责任承担</strong>(Hold Liable)：代码的作者承担代码使用后的风险及产生的后果。如果禁止，那么作者将不会承担责任，可以理解为免责条款。</li><li><strong>商标使用</strong>(Use Trademark)：可以使用作者的姓名，作品的 Logo，或商标。</li><li><strong>附加协议</strong>(Sublicensing)：允许在软件分发传播过程中附加上原来没有的协议条款等。</li></ul><table><thead><tr><th>协议</th><th>描述</th><th>要求</th><th>允许</th><th>禁止</th></tr></thead><tbody><tr><td><a href="http://choosealicense.com/licenses/apache/">Apache</a></td><td>一个比较宽松且简明地指出了专利授权的协议。</td><td>1. <font color=#0000FF>协议和版权信息</font><br/>2. <font color=#0000FF>声明变更</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>专利授权</font><br/>5. <font color=#00EE00>私用</font><br/>6. <font color=#00EE00>附加协议</font></td><td>1. <font color=#FF3030>责任承担</font>（作者免责）<br/>2. <font color=#FF3030>商标使用</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/gpl-v2/">GPL</a></td><td>应用最广泛的开源协议，拥有较强的版权自由（copyleft）要求。<br/>衍生代码的分发需开源并且也要遵守此协议。<br/>此协议有许多变种，不同变种的要求略有不同。</td><td>1. <font color=#0000FF>公开源码</font><br/>2. <font color=#0000FF>协议和版权信息</font><br/>3. <font color=#0000FF>声明变更</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>专利授权</font><br/>5. <font color=#00EE00>私用</font></td><td>1. <font color=#FF3030>责任承担</font><br/>2. <font color=#FF3030>附加协议</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/mit/">MIT</a></td><td>此协议宽松简单。在适当标明来源及免责的情况下，<br/>它允许你对代码进行任何形式的使用。</td><td>1. <font color=#0000FF>协议和版权信息</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>私用</font><br/>5. <font color=#00EE00>附加协议</font></td><td>1. <font color=#FF3030>责任承担</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/artistic/">Artistic</a></td><td>Perl 社区最钟爱此协议。<br/>要求更改后的软件不能影响原软件的使用。</td><td>1. <font color=#0000FF>协议和版权信息</font><br/>2. <font color=#0000FF>声明变更</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>私用</font><br/>5. <font color=#00EE00>附加协议</font></td><td>1. <font color=#FF3030>责任承担</font><br/>2. <font color=#FF3030>商标使用</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/bsd/">BSD</a></td><td>较为宽松的协议，有两个变种<a href="http://choosealicense.com/licenses/bsd"><strong>BSD 2-Clause</strong></a> 和<a href="http://choosealicense.com/licenses/bsd-3-clause"><strong>BSD 3-Clause</strong></a>，<br/>两者都与 MIT 协议只存在细微差异。</td><td>1. <font color=#0000FF>协议和版权信息</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>私用</font><br/>5. <font color=#00EE00>附加协议</font></td><td>1. <font color=#FF3030>责任承担</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/eclipse/">Eclipse</a></td><td>对商用非常友好的协议，可以用于软件的商业授权。<br/>包含对专利的优雅授权，也可以对相关代码应用商业协议。</td><td>1. <font color=#0000FF>公开源码</font><br/>2. <font color=#0000FF>协议和版权信息</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>专利授权</font><br/>5. <font color=#00EE00>私用</font><br/>6. <font color=#00EE00>附加协议</font></td><td>1. <font color=#FF3030>责任承担</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/lgpl-v2.1/">LGPL</a></td><td>主要用于一些代码库。<br/>衍生代码可以以此协议发布（也可以用其他协议），<br/>但与此协议相关的代码必需遵循此协议。</td><td>1. <font color=#0000FF>公开源码</font><br/>2. <font color=#0000FF>库引用</font><br/>3. <font color=#0000FF>协议和版权信息</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>专利授权</font><br/>5. <font color=#00EE00>私用</font><br/>6. <font color=#00EE00>附加协议</font></td><td>1. <font color=#FF3030>责任承担</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/mozilla/">Mozilla</a></td><td>Mozilla Public License(MPL 2.0)是由 Mozilla 基金创建维护的，<br/>旨在较为宽松的 BSD 协议和更加互惠的 GPL 协议中找一个折衷点。</td><td>1. <font color=#0000FF>公开源码</font><br/>2. <font color=#0000FF>协议和版权信息</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>专利授权</font><br/>5. <font color=#00EE00>私用</font><br/>6. <font color=#00EE00>附加协议</font></td><td>1. <font color=#FF3030>责任承担</font><br/>2. <font color=#FF3030>商标使用</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/no-license/">No license</a></td><td>作者保留所有权利，不允许他人分发，复制或者创造衍生物。<br/>当你将代码发表在一些网站上时需要遵守该网站的协议，<br/>此协议可能包含了一些对你劳动成果的授权许可。<br/>比如将代码发布到 GitHub，那么就必须同意别人查看和 fork。</td><td>1. <font color=#0000FF>协议和版权信息</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>私用</font></td><td>1. <font color=#FF3030>分发</font><br/>2. <font color=#FF3030>修改</font><br/>3. <font color=#FF3030>附加协议</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/unlicense/">Public domain dedication</a></td><td>在许多国家，默认版权归作者自动拥有，<br/>所以<a href="http://unlicense.org/">Unlicense</a>协议提供了一种通用的模板。<br/>此协议表明作者放弃版权，将劳动成果无私贡献出来，<br/>会丧失作品全部权利，包括在 MIT/X11 中定义的无担保权利。</td><td>1. <font color=#0000FF>N/A</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>私用</font></td><td>1. <font color=#FF3030>责任承担</font></td></tr></tbody></table><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/github/choosealicense.com">https://github.com/github/choosealicense.com</a></li><li><a href="https://opensource.org/licenses">https://opensource.org/licenses</a></li><li><a href="https://www.cnblogs.com/Wayou/p/how_to_choose_a_license.html">https://www.cnblogs.com/Wayou/p/how_to_choose_a_license.html</a></li><li><a href="https://zhuanlan.zhihu.com/p/87855729">https://zhuanlan.zhihu.com/p/87855729</a></li></ul><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 通用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源协议 </tag>
            
            <tag> 开源许可证 </tag>
            
            <tag> LICENCE </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码分析 | ClickHouse和他的朋友们（15）Group By 为什么这么快</title>
      <link href="/2021/01/26/clickhouse-and-friends-15-groupby/"/>
      <url>/2021/01/26/clickhouse-and-friends-15-groupby/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2021-01-26 21:31:12</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2021/01/21/clickhouse-and-friends-groupby/">https://bohutang.me/2021/01/21/clickhouse-and-friends-groupby/</a><br>以下为正文。</p></blockquote><p>在揭秘 ClickHouse Group By 之前，先聊聊数据库的性能对比测试问题。</p><p>在虎哥看来，一个“讲武德”的性能对比测试应该提供什么信息呢？</p><p>首先要尊重客观事实，在什么场景下，x 比 y 快？<br>其次是为什么 x 会比 y 快？</p><p>如果以上两条都做到了，还有一点也比较重要： x 的优势可以支撑多久？ 是架构等带来的长期优势，还是一袋烟的优化所得，是否能持续跟上自己的灵魂。</p><p>如果只是贴几个妖艳的数字，算不上是 benchmark，而是 benchmarket。</p><p>好了，回到 Group By 正题。</p><p>相信很多同学已经体验到 ClickHouse Group By 的出色性能，本篇就来分析下快的原因。</p><p>首先安慰一下，ClickHouse 的 Group By 并没有使用高大上的黑科技，只是摸索了一条相对较优的方案。</p><h2 id="一条-SQL"><a href="#一条-SQL" class="headerlink" title="一条 SQL"></a>一条 SQL</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">sum</span>(number) <span class="keyword">FROM</span> numbers(<span class="number">10</span>) <span class="keyword">GROUP</span> <span class="keyword">BY</span> number <span class="operator">%</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>我们就以这条简单的 SQL 作为线索，看看 ClickHouse 怎么实现 Group By 聚合。</p><h2 id="1-生成-AST"><a href="#1-生成-AST" class="headerlink" title="1. 生成 AST"></a>1. 生成 AST</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN AST</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">sum</span>(number)</span><br><span class="line"><span class="keyword">FROM</span> numbers(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> number <span class="operator">%</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">┌─explain─────────────────────────────────────┐</span><br><span class="line">│ SelectWithUnionQuery (children <span class="number">1</span>)           │</span><br><span class="line">│  ExpressionList (children <span class="number">1</span>)                │</span><br><span class="line">│   SelectQuery (children <span class="number">3</span>)                  │</span><br><span class="line">│    ExpressionList (children <span class="number">1</span>)              │</span><br><span class="line">│     <span class="keyword">Function</span> <span class="built_in">sum</span> (children <span class="number">1</span>)               │  <span class="operator">/</span><span class="operator">/</span> sum 聚合</span><br><span class="line">│      ExpressionList (children <span class="number">1</span>)            │</span><br><span class="line">│       Identifier number                     │</span><br><span class="line">│    TablesInSelectQuery (children <span class="number">1</span>)         │</span><br><span class="line">│     TablesInSelectQueryElement (children <span class="number">1</span>) │</span><br><span class="line">│      TableExpression (children <span class="number">1</span>)           │</span><br><span class="line">│       <span class="keyword">Function</span> numbers (children <span class="number">1</span>)         │</span><br><span class="line">│        ExpressionList (children <span class="number">1</span>)          │</span><br><span class="line">│         Literal UInt64_10                   │</span><br><span class="line">│    ExpressionList (children <span class="number">1</span>)              │</span><br><span class="line">│     <span class="keyword">Function</span> modulo (children <span class="number">1</span>)            │  <span class="operator">/</span><span class="operator">/</span> number <span class="operator">%</span> <span class="number">3</span> 函数</span><br><span class="line">│      ExpressionList (children <span class="number">2</span>)            │</span><br><span class="line">│       Identifier number                     │</span><br><span class="line">│       Literal UInt64_3                      │</span><br><span class="line">└─────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="2-生成-Query-Plan"><a href="#2-生成-Query-Plan" class="headerlink" title="2. 生成 Query Plan"></a>2. 生成 Query Plan</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">sum</span>(number)</span><br><span class="line"><span class="keyword">FROM</span> numbers(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> number <span class="operator">%</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">┌─explain───────────────────────────────────────────────────────────────────────┐</span><br><span class="line">│ Expression ((Projection <span class="operator">+</span> Before <span class="keyword">ORDER</span> <span class="keyword">BY</span>))                                   │</span><br><span class="line">│   Aggregating                                                                 │ <span class="operator">/</span><span class="operator">/</span> sum 聚合</span><br><span class="line">│     Expression (Before <span class="keyword">GROUP</span> <span class="keyword">BY</span>)                                              │ <span class="operator">/</span><span class="operator">/</span> number <span class="operator">%</span> <span class="number">3</span></span><br><span class="line">│       SettingQuotaAndLimits (<span class="keyword">Set</span> limits <span class="keyword">and</span> quota after reading <span class="keyword">from</span> storage) │</span><br><span class="line">│         ReadFromStorage (SystemNumbers)                                       │</span><br><span class="line">└───────────────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>代码主要在 <a href="https://github.com/ClickHouse/ClickHouse/blob/27ddf78ba572b893cb5351541f566d1080d8a9c6/src/Interpreters/InterpreterSelectQuery.cpp#L1063">InterpreterSelectQuery::executeImpl@Interpreters/InterpreterSelectQuery.cpp</a></p><h2 id="3-生成-Pipeline"><a href="#3-生成-Pipeline" class="headerlink" title="3. 生成 Pipeline"></a>3. 生成 Pipeline</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN PIPELINE</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">sum</span>(number)</span><br><span class="line"><span class="keyword">FROM</span> numbers(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> number <span class="operator">%</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">┌─explain───────────────────────┐</span><br><span class="line">│ (Expression)                  │</span><br><span class="line">│ ExpressionTransform           │</span><br><span class="line">│   (Aggregating)               │</span><br><span class="line">│   AggregatingTransform        │  <span class="operator">/</span><span class="operator">/</span> sum 计算</span><br><span class="line">│     (Expression)              │</span><br><span class="line">│     ExpressionTransform       │  <span class="operator">/</span><span class="operator">/</span> number <span class="operator">%</span> <span class="number">3</span> 计算</span><br><span class="line">│       (SettingQuotaAndLimits) │</span><br><span class="line">│         (ReadFromStorage)     │</span><br><span class="line">└───────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="4-执行-Pipeline"><a href="#4-执行-Pipeline" class="headerlink" title="4. 执行 Pipeline"></a>4. 执行 Pipeline</h2><p>Pipeline 是从底部往上逐一执行。</p><h3 id="4-1-ReadFromStorage"><a href="#4-1-ReadFromStorage" class="headerlink" title="4.1 ReadFromStorage"></a>4.1 ReadFromStorage</h3><p>首先从 ReadFromStorage 执行，生成一个 block1， 数据如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">┌─number─┐</span><br><span class="line">│      <span class="number">0</span> │</span><br><span class="line">│      <span class="number">1</span> │</span><br><span class="line">│      <span class="number">2</span> │</span><br><span class="line">│      <span class="number">3</span> │</span><br><span class="line">│      <span class="number">4</span> │</span><br><span class="line">│      <span class="number">5</span> │</span><br><span class="line">│      <span class="number">6</span> │</span><br><span class="line">│      <span class="number">7</span> │</span><br><span class="line">│      <span class="number">8</span> │</span><br><span class="line">│      <span class="number">9</span> │</span><br><span class="line">└────────┘</span><br><span class="line">number类型为 UInt64</span><br></pre></td></tr></table></figure><h3 id="4-2-ExpressionTransform"><a href="#4-2-ExpressionTransform" class="headerlink" title="4.2 ExpressionTransform"></a>4.2 ExpressionTransform</h3><p>ExpressionTransform 包含了 2 个 action:</p><ol><li>名字为 number，type 为 INPUT</li><li>名字为 <code>modulo(number, 3)</code>， type 为 FUNCTION</li></ol><p>经过 ExpressionTransform 运行处理后生成一个新的 block2， 数据如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">┌─number─┬─modulo(number, <span class="number">3</span>)─┐</span><br><span class="line">│      <span class="number">0</span> │                 <span class="number">0</span> │</span><br><span class="line">│      <span class="number">1</span> │                 <span class="number">1</span> │</span><br><span class="line">│      <span class="number">2</span> │                 <span class="number">2</span> │</span><br><span class="line">│      <span class="number">3</span> │                 <span class="number">0</span> │</span><br><span class="line">│      <span class="number">4</span> │                 <span class="number">1</span> │</span><br><span class="line">│      <span class="number">5</span> │                 <span class="number">2</span> │</span><br><span class="line">│      <span class="number">6</span> │                 <span class="number">0</span> │</span><br><span class="line">│      <span class="number">7</span> │                 <span class="number">1</span> │</span><br><span class="line">│      <span class="number">8</span> │                 <span class="number">2</span> │</span><br><span class="line">│      <span class="number">9</span> │                 <span class="number">0</span> │</span><br><span class="line">└────────┴───────────────────┘</span><br><span class="line">number 类型为 UInt64</span><br><span class="line">modulo(number, <span class="number">3</span>) 类型为 UInt8</span><br></pre></td></tr></table></figure><p>代码主要在 <a href="https://github.com/ClickHouse/ClickHouse/blob/27ddf78ba572b893cb5351541f566d1080d8a9c6/src/Interpreters/ExpressionActions.cpp#L416">ExpressionActions::execute@Interpreters/ExpressionActions.cpp</a></p><h3 id="4-3-AggregatingTransform"><a href="#4-3-AggregatingTransform" class="headerlink" title="4.3 AggregatingTransform"></a>4.3 AggregatingTransform</h3><p>AggregatingTransform 是 Group By 高性能的核心所在。<br>本示例中的 <code>modulo(number, 3)</code> 类型为 UInt8，在做优化上，ClickHouse 会选择使用数组代替 hashtable 作为分组，区分逻辑见 <a href="https://github.com/ClickHouse/ClickHouse/blob/27ddf78ba572b893cb5351541f566d1080d8a9c6/src/Interpreters/Aggregator.cpp#L526">Interpreters/Aggregator.cpp</a></p><p>在计算 sum 的时候，首先会生成一个数组 [1024]，然后做了一个编译展开(代码 <a href="https://github.com/ClickHouse/ClickHouse/blob/27ddf78ba572b893cb5351541f566d1080d8a9c6/src/AggregateFunctions/IAggregateFunction.h#L412-L487">addBatchLookupTable8@AggregateFunctions/IAggregateFunction.h</a>):</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">size_t</span> UNROLL_COUNT = <span class="number">4</span>;</span><br><span class="line">std::unique_ptr&lt;Data[]&gt; places&#123;<span class="keyword">new</span> Data[<span class="number">256</span> * UNROLL_COUNT]&#125;;</span><br><span class="line"><span class="keyword">bool</span> has_data[<span class="number">256</span> * UNROLL_COUNT]&#123;&#125;; <span class="comment">/// Separate flags array to avoid heavy initialization.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Aggregate data into different lookup tables.</span></span><br><span class="line"><span class="keyword">size_t</span> batch_size_unrolled = batch_size / UNROLL_COUNT * UNROLL_COUNT;</span><br><span class="line"><span class="keyword">for</span> (; i &lt; batch_size_unrolled; i += UNROLL_COUNT)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j &lt; UNROLL_COUNT; ++j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">size_t</span> idx = j * <span class="number">256</span> + key[i + j];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">unlikely</span>(!has_data[idx]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> (&amp;places[idx]) Data;</span><br><span class="line">            has_data[idx] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        func.<span class="built_in">add</span>(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span> *&gt;(&amp;places[idx]), columns, i + j, <span class="literal">nullptr</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>sum(number) … GROUP BY number % 3</code> 计算方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array[0] = 0 + 3 + 6 + 9 = 18</span><br><span class="line">array[1] = 1 + 4 + 7 = 12</span><br><span class="line">array[2] = 2 + 5 + 8 = 15</span><br></pre></td></tr></table></figure><p>这里只是针对 UInt8 做的一个优化分支，那么对于其他类型怎么优化处理呢？<br>ClickHouse 针对不同的类型分别提供了不同的 hashtable，声势比较浩大（代码见 <a href="https://github.com/ClickHouse/ClickHouse/blob/27ddf78ba572b893cb5351541f566d1080d8a9c6/src/Interpreters/Aggregator.h#L68-L103">Aggregator.h</a>）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> AggregatedDataWithUInt8Key = FixedImplicitZeroHashMapWithCalculatedSize&lt;UInt8, AggregateDataPtr&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithUInt16Key = FixedImplicitZeroHashMap&lt;UInt16, AggregateDataPtr&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithUInt32Key = HashMap&lt;UInt32, AggregateDataPtr, HashCRC32&lt;UInt32&gt;&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithUInt64Key = HashMap&lt;UInt64, AggregateDataPtr, HashCRC32&lt;UInt64&gt;&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithShortStringKey = StringHashMap&lt;AggregateDataPtr&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithStringKey = HashMapWithSavedHash&lt;StringRef, AggregateDataPtr&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithKeys128 = HashMap&lt;UInt128, AggregateDataPtr, UInt128HashCRC32&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithKeys256 = HashMap&lt;DummyUInt256, AggregateDataPtr, UInt256HashCRC32&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithUInt32KeyTwoLevel = TwoLevelHashMap&lt;UInt32, AggregateDataPtr, HashCRC32&lt;UInt32&gt;&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithUInt64KeyTwoLevel = TwoLevelHashMap&lt;UInt64, AggregateDataPtr, HashCRC32&lt;UInt64&gt;&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithShortStringKeyTwoLevel = TwoLevelStringHashMap&lt;AggregateDataPtr&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithStringKeyTwoLevel = TwoLevelHashMapWithSavedHash&lt;StringRef, AggregateDataPtr&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithKeys128TwoLevel = TwoLevelHashMap&lt;UInt128, AggregateDataPtr, UInt128HashCRC32&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithKeys256TwoLevel = TwoLevelHashMap&lt;DummyUInt256, AggregateDataPtr, UInt256HashCRC32&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithUInt64KeyHash64 = HashMap&lt;UInt64, AggregateDataPtr, DefaultHash&lt;UInt64&gt;&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithStringKeyHash64 = HashMapWithSavedHash&lt;StringRef, AggregateDataPtr, StringRefHash64&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithKeys128Hash64 = HashMap&lt;UInt128, AggregateDataPtr, UInt128Hash&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithKeys256Hash64 = HashMap&lt;DummyUInt256, AggregateDataPtr, UInt256Hash&gt;;</span><br></pre></td></tr></table></figure><p>如果我们改成 <code>GROUP BY number*100000</code> 后，它会选择 AggregatedDataWithUInt64Key 的 hashtable 作为分组。</p><p>而且 ClickHouse 提供了一种 Two Level 方式，用语应对有大量分组 key 的情况，Level1 先分大组，Level2 小组可以并行计算。</p><p>针对 String 类型，根据不同的长度，hashtable 也做了很多优化，代码见 <a href="https://github.com/ClickHouse/ClickHouse/blob/27ddf78ba572b893cb5351541f566d1080d8a9c6/src/Common/HashTable/StringHashMap.h#L78-L82">HashTable/StringHashMap.h</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>ClickHouse 会根据 Group By 的最终类型，选择一个最优的 hashtable 或数组，作为分组基础数据结构，使内存和计算尽量最优。</p><p>这个”最优解“是怎么找到的？从 test 代码可以看出，是不停的尝试、测试验证出来的，浓厚的 bottom-up 哲学范。</p><p>hashtable 测试代码：<a href="https://github.com/ClickHouse/ClickHouse/tree/27ddf78ba572b893cb5351541f566d1080d8a9c6/src/Interpreters/tests">Interpreters/tests</a></p><p>lookuptable 测试代码： <a href="https://github.com/ClickHouse/ClickHouse/blob/27ddf78ba572b893cb5351541f566d1080d8a9c6/src/Common/tests/average.cpp">tests/average.cpp</a></p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> ClickHouse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ClickHouse和他的朋友们 </tag>
            
            <tag> ClickHouse </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> group by </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码分析 | ClickHouse和他的朋友们（14）存储计算分离方案与实现</title>
      <link href="/2020/09/21/clickhouse-and-friends-14-compute-storage/"/>
      <url>/2020/09/21/clickhouse-and-friends-14-compute-storage/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-09-21 22:01:12</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/09/18/clickhouse-and-friends-compute-storage/">https://bohutang.me/2020/09/18/clickhouse-and-friends-compute-storage/</a><br>以下为正文。</p></blockquote><p><img src="clickhouse-map-2020-replicatedmergetree.png" alt="clickhouse-map-2020-replicatedmergetree.png"></p><p>如果多个 ClickHouse server 可以挂载同一份数据(分布式存储等)，并且每个 server 都可写，这样会有什么好处呢？</p><p>首先，我们可以把副本机制交给分布式存储来保障，上层架构变得简单朴素；</p><p>其次，clickhouse-server 可以在任意机器上增加、减少，使存储和计算能力得到充分发挥。</p><p>本文就来探讨一下 ClickHouse 的存储计算分离方案，实现上并不复杂。</p><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>ClickHouse 运行时数据由两部分组成：<strong>内存元数据</strong>和<strong>磁盘数据</strong>。</p><p>我们先看写流程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">w1. 开始写入数据</span><br><span class="line">w2. 生成内存part信息，并维护part metadata列表</span><br><span class="line">w3. 把part数据写到磁盘</span><br></pre></td></tr></table></figure><p>再来看读流程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r1. 从part metadata定位需要读取的part</span><br><span class="line">r2. 从磁盘读取part数据</span><br><span class="line">r3. 返回给上层数据</span><br></pre></td></tr></table></figure><p>这样，如果 server1 写了一条数据，只会更新自己内存的 part metadata，其他 server 是感知不到的，这样也就无法查询到刚写入的数据。</p><p>存储计算分离，首先要解决的就是内存状态数据的同步问题。</p><p>在 ClickHouse 里，我们需要解决的是内存中 part metadata 同步问题。</p><h2 id="2-内存数据同步"><a href="#2-内存数据同步" class="headerlink" title="2. 内存数据同步"></a>2. 内存数据同步</h2><p>在上篇 <a href="https://bohutang.me/2020/09/13/clickhouse-and-friends-replicated-merge-tree/">&lt;ReplicatedMergeTree 表引擎及同步机制&gt;</a> 中，我们知道副本间的数据同步机制：<br>首先同步元数据，再通过元数据获取相应 part 数据。</p><p>这里，我们借用 ReplicatedMergeTree 同步通道，然后再做减法，同步完元数据后跳过 part 数据的同步，因为磁盘数据只需一个 server 做更新(需要 fsync 语义)即可。</p><p>核心代码：<br><code>MergeTreeData::renameTempPartAndReplace</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!share_storage)</span><br><span class="line">    part-&gt;<span class="built_in">renameTo</span>(part_name, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h2 id="3-演示-demo"><a href="#3-演示-demo" class="headerlink" title="3. 演示 demo"></a>3. 演示 demo</h2><iframe src="https://bohutang-1253727613.cos.ap-beijing.myqcloud.com/video/clickhouse-storage-compute.mp4" frameborder="0" allowfullscreen="true" style="box-sizing: border-box;"></iframe><p>script：</p><ol><li>首先起 2 个 clickhouse-server，它们都挂载同一份数据 <code>&lt;path&gt;/home/bohu/work/cluster/d1/datas/&lt;/path&gt;</code></li><li>通过 clickhouse-server1(port 9101) 写入一条记录:(111, 3333)</li><li>通过 clickhouse-server2(port 9102) 进行查询正常</li><li>通过 clickhouse-server2(port 9102) truncate 表</li><li>通过 clickhouse-server1(port 9101) 查询正常</li></ol><h2 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4. 代码实现"></a>4. 代码实现</h2><p><a href="https://github.com/BohuTANG/ClickHouse/commit/f67d98ef408fda1a359e4fb17848619ef1f6e59b">原型</a></p><p>需要注意的是，这里只实现了写入数据同步，而且是非常 tricky 的方式。</p><p>由于 DDL 没有实现，所以在 zookeeper 上的注册方式也比较 tricky，demo 里的 replicas 都是手工注册的。</p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>本文提供一个思路，算是抛砖引玉，同时也期待更加系统的工程实现。</p><p><strong>ClickHouse 暂时还不支持 Distributed Query 功能，如果这个能力支持，ClickHouse 存储计算分离就是一个威力无比的小氢弹。</strong></p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> ClickHouse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ClickHouse和他的朋友们 </tag>
            
            <tag> ClickHouse </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> 存储计算分离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码分析 | ClickHouse和他的朋友们（13）ReplicatedMergeTree表引擎及同步机制</title>
      <link href="/2020/09/15/clickhouse-and-friends-13-replicated-merge-tree/"/>
      <url>/2020/09/15/clickhouse-and-friends-13-replicated-merge-tree/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-09-15 20:15:14</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/09/13/clickhouse-and-friends-replicated-merge-tree/">https://bohutang.me/2020/09/13/clickhouse-and-friends-replicated-merge-tree/</a><br>以下为正文。</p></blockquote><p><img src="clickhouse-map-2020-replicatedmergetree.png" alt="clickhouse-map-2020-replicatedmergetree.png"></p><p>在 MySQL 里，为了保证高可用以及数据安全性会采取主从模式，数据通过 binlog 来进行同步。</p><p>在 ClickHouse 里，我们可以使用 ReplicatedMergeTree 引擎，数据同步通过 zookeeper 完成。</p><p>本文先从搭建一个多 replica 集群开始，然后一窥底层的机制，简单吃两口。</p><h2 id="1-集群搭建"><a href="#1-集群搭建" class="headerlink" title="1. 集群搭建"></a>1. 集群搭建</h2><p>搭建一个 2 replica 测试集群，由于条件有限，这里在同一台物理机上起 clickhouse-server(2 个 replica) + zookeeper(1 个)，为了避免端口冲突，两个 replica 端口会有所不同。</p><h3 id="1-1-zookeeper"><a href="#1-1-zookeeper" class="headerlink" title="1.1 zookeeper"></a>1.1 zookeeper</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run  -p <span class="number">2181</span>:<span class="number">2181</span> --name some-zookeeper --restart always -d zookeeper</span><br></pre></td></tr></table></figure><h3 id="1-2-replica-集群"><a href="#1-2-replica-集群" class="headerlink" title="1.2 replica 集群"></a>1.2 replica 集群</h3><p>replica-1 config.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">zookeeper</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">node</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">host</span>&gt;</span>172.17.0.2<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">port</span>&gt;</span>2181<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">zookeeper</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">remote_servers</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mycluster_1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">shard_1</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">internal_replication</span>&gt;</span>true<span class="tag">&lt;/<span class="name">internal_replication</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">host</span>&gt;</span>s1<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">host</span>&gt;</span>s2<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span>9001<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">shard_1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mycluster_1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">remote_servers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">macros</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">cluster</span>&gt;</span>mycluster_1<span class="tag">&lt;/<span class="name">cluster</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">shard</span>&gt;</span>1<span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">replica</span>&gt;</span>s1<span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">macros</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tcp_port</span>&gt;</span>9101<span class="tag">&lt;/<span class="name">tcp_port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interserver_http_port</span>&gt;</span>9009<span class="tag">&lt;/<span class="name">interserver_http_port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span>&gt;</span>/cluster/d1/datas/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br></pre></td></tr></table></figure><p>replica-2 config.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">zookeeper</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">node</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">host</span>&gt;</span>172.17.0.2<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">port</span>&gt;</span>2181<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">zookeeper</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">remote_servers</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mycluster_1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">shard_1</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">internal_replication</span>&gt;</span>true<span class="tag">&lt;/<span class="name">internal_replication</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">host</span>&gt;</span>s1<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">host</span>&gt;</span>s2<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span>9001<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">shard_1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mycluster_1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">remote_servers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">macros</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">cluster</span>&gt;</span>mycluster_1<span class="tag">&lt;/<span class="name">cluster</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">shard</span>&gt;</span>1<span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">replica</span>&gt;</span>s2<span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">macros</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tcp_port</span>&gt;</span>9102<span class="tag">&lt;/<span class="name">tcp_port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interserver_http_port</span>&gt;</span>9010<span class="tag">&lt;/<span class="name">interserver_http_port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span>&gt;</span>/cluster/d2/datas/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-创建测试表"><a href="#1-3-创建测试表" class="headerlink" title="1.3 创建测试表"></a>1.3 创建测试表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> default.rtest1 <span class="keyword">ON</span> CLUSTER <span class="string">&#x27;mycluster_1&#x27;</span></span><br><span class="line">(</span><br><span class="line">    `id` Int64,</span><br><span class="line">    `p` Int16</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> ReplicatedMergeTree(<span class="string">&#x27;/clickhouse/tables/replicated/test&#x27;</span>, <span class="string">&#x27;&#123;replica&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> p</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> id</span><br></pre></td></tr></table></figure><h3 id="1-4-查看-zookeeper"><a href="#1-4-查看-zookeeper" class="headerlink" title="1.4 查看 zookeeper"></a>1.4 查看 zookeeper</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it some-zookeeper bash</span><br><span class="line">./bin/zkCli.sh</span><br><span class="line"></span><br><span class="line">[zk: localhost:2181(CONNECTED) 17] ls /clickhouse/tables/replicated/<span class="built_in">test</span>/replicas</span><br><span class="line">[s1, s2]</span><br></pre></td></tr></table></figure><p>两个 replica 都已经注册到 zookeeper。</p><h2 id="2-同步原理"><a href="#2-同步原理" class="headerlink" title="2. 同步原理"></a>2. 同步原理</h2><p>如果在 replica-1 上执行了一条写入:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">replica<span class="number">-1</span><span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> rtest <span class="keyword">VALUES</span>(<span class="number">33</span>,<span class="number">33</span>);</span><br></pre></td></tr></table></figure><p>数据是如何同步到 replica-2 的呢？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">s1.  replica<span class="number">-1</span>&gt; StorageReplicatedMergeTree::write --&gt; ReplicatedMergeTreeBlockOutputStream::<span class="built_in">write</span>(<span class="keyword">const</span> Block &amp; block)</span><br><span class="line">s2.  replica<span class="number">-1</span>&gt; storage.writer.writeTempPart，写入本地磁盘</span><br><span class="line">s3.  replica<span class="number">-1</span>&gt; ReplicatedMergeTreeBlockOutputStream::commitPart</span><br><span class="line">s4.  replica<span class="number">-1</span>&gt; StorageReplicatedMergeTree::getCommitPartOp，提交LogEntry到zookeeper，信息包括:</span><br><span class="line">    ReplicatedMergeTreeLogEntry &#123;</span><br><span class="line">     type: GET_PART,</span><br><span class="line">     source_replica: replica<span class="number">-1</span>,</span><br><span class="line">     new_part_name: part-&gt;name,</span><br><span class="line">     new_part_type: part-&gt;getType</span><br><span class="line">    &#125;</span><br><span class="line">s5.  replica<span class="number">-1</span>&gt; zkutil::<span class="built_in">makeCreateRequest</span>(zookeeper_path + <span class="string">&quot;/log/log-0000000022&quot;</span>)，更新log_pointer到zookeeper</span><br><span class="line"></span><br><span class="line">s6.  replica<span class="number">-2</span>&gt; StorageReplicatedMergeTree::<span class="built_in">queueUpdatingTask</span>()，定时pull任务</span><br><span class="line">s7.  replica<span class="number">-2</span>&gt; ReplicatedMergeTreeQueue::pullLogsToQueue ，拉取</span><br><span class="line">s8.  replica<span class="number">-2</span>&gt; zookeeper-&gt;<span class="built_in">get</span>(replica_path + <span class="string">&quot;/log_pointer&quot;</span>) ，向zookeeper获取当前replica已经同步的位点</span><br><span class="line">s9.  replica<span class="number">-2</span>&gt; zookeeper-&gt;<span class="built_in">getChildrenWatch</span>(zookeeper_path + <span class="string">&quot;/log&quot;</span>) ，向zookeeper获取所有的LogEntry信息</span><br><span class="line">s10. replica<span class="number">-2</span>&gt; 根据同步位点log_pointer从所有LogEntry中筛选需要同步的LogEntry，写到queue</span><br><span class="line">s11. replica<span class="number">-2</span>&gt; StorageReplicatedMergeTree::queueTask，消费queue任务</span><br><span class="line">s12. replica<span class="number">-2</span>&gt; StorageReplicatedMergeTree::<span class="built_in">executeLogEntry</span>(LogEntry &amp; entry)，根据LogEntry type执行消费</span><br><span class="line">s13. replica<span class="number">-2</span>&gt; StorageReplicatedMergeTree::<span class="built_in">executeFetch</span>(LogEntry &amp; entry)</span><br><span class="line">s14. replica<span class="number">-2</span>&gt; StorageReplicatedMergeTree::fetchPart，从replica<span class="number">-1</span>的interserver_http_port下载part目录数据</span><br><span class="line">s15. replica<span class="number">-2</span>&gt; MergeTreeData::renameTempPartAndReplace，把文件写入本地并更新内存meta信息</span><br><span class="line">s16. replica<span class="number">-2</span>&gt; 数据同步完成</span><br></pre></td></tr></table></figure><p>也可以进入 zookeeper docker 内部直接查看某个 LogEntry:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 85] get /clickhouse/tables/replicated/<span class="built_in">test</span>/<span class="built_in">log</span>/log-0000000022</span><br><span class="line">format version: 4</span><br><span class="line">create_time: 2020-09-13 16:39:05</span><br><span class="line"><span class="built_in">source</span> replica: s1</span><br><span class="line">block_id: 33_2673203974107464807_7670041793554220344</span><br><span class="line">get</span><br><span class="line">33_2_2_0</span><br></pre></td></tr></table></figure><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>本文以写入为例，从底层分析了 ClickHouse ReplicatedMergeTree 的工作原理，逻辑并不复杂。</p><p>不同 replica 的数据同步需要 zookeeper(目前社区有人在做 etcd 的集成 <a href="https://github.com/ClickHouse/ClickHouse/pull/10376">pr#10376</a>)做元数据协调，是一个订阅/消费模型，涉及具体数据目录还需要去相应的 replica 通过 interserver_http_port 端口进行下载。</p><p>replica 的同步都是以文件目录为单位，这样就带来一个好处：我们<strong>可以轻松实现 ClickHouse 的存储计算分离</strong>，多个 clickhouse-server 可以同时挂载同一份数据进行计算，而且这些 server 每个节点都是可写，虎哥已经实现了一个可以 work 的原型，详情请参考下篇 <a href="https://bohutang.me/2020/09/18/clickhouse-and-friends-compute-storage/">&lt;存储计算分离方案与实现&gt;</a>。</p><h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h2><ul><li>[1]<a href="https://github.com/ClickHouse/ClickHouse/blob/f37814b36754bf11b52bd9c77d0e15f4d1825033/src/Storages/StorageReplicatedMergeTree.cpp">storagereplicatedmergetree.cpp</a></li><li>[2]<a href="https://github.com/ClickHouse/ClickHouse/blob/f37814b36754bf11b52bd9c77d0e15f4d1825033/src/Storages/MergeTree/ReplicatedMergeTreeBlockOutputStream.cpp">replicatedmergetreeblockoutputstream.cpp</a></li><li>[3]<a href="https://github.com/ClickHouse/ClickHouse/blob/f37814b36754bf11b52bd9c77d0e15f4d1825033/src/Storages/MergeTree/ReplicatedMergeTreeLogEntry.cpp">replicatedmergetreelogentry.cpp</a></li><li>[4]<a href="https://github.com/ClickHouse/ClickHouse/blob/f37814b36754bf11b52bd9c77d0e15f4d1825033/src/Storages/MergeTree/ReplicatedMergeTreeQueue.cpp">replicatedmergetreequeue.cpp</a></li></ul><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> ClickHouse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ClickHouse和他的朋友们 </tag>
            
            <tag> ClickHouse </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> ReplicatedMergeTree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码分析 | ClickHouse和他的朋友们（12）神奇的物化视图(Materialized View)与原理</title>
      <link href="/2020/09/03/clickhouse-and-friends-12-materialized-view/"/>
      <url>/2020/09/03/clickhouse-and-friends-12-materialized-view/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-09-03 21:22:14</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/08/31/clickhouse-and-friends-materialized-view/">https://bohutang.me/2020/08/31/clickhouse-and-friends-materialized-view/</a><br>以下为正文。</p></blockquote><p><img src="clickhouse-map-2020-materializeview.png" alt="clickhouse-map-2020-materializeview.png"></p><p>在 ClickHouse 里，物化视图(Materialized View)可以说是一个神奇且强大的东西，用途别具一格。</p><p>本文从底层机制进行分析，看看 ClickHouse 的 Materalized View 是怎么工作的，以方便更好的使用它。</p><h2 id="什么是物化视图"><a href="#什么是物化视图" class="headerlink" title="什么是物化视图"></a>什么是物化视图</h2><p>对大部分人来说，物化视图这个概念会比较抽象，物化？视图？。。。</p><p>为了更好的理解它，我们先看一个场景。</p><p>假设你是 <code>*hub</code> 一个“幸福”的小程序员，某天产品经理有个需求：实时统计每小时视频下载量。</p><p>用户下载明细表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">clickhouse<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> download LIMIT <span class="number">10</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">when</span>                <span class="operator">|</span> userid <span class="operator">|</span> bytes  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">06</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span> <span class="number">530314</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">06</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span> <span class="number">872957</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">06</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span> <span class="number">107047</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">07</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span> <span class="number">214876</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">07</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span> <span class="number">820943</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">07</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span> <span class="number">693959</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">08</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span> <span class="number">882151</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">08</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span> <span class="number">644223</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">08</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span> <span class="number">199800</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">09</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span> <span class="number">511439</span> <span class="operator">|</span></span><br><span class="line">... ....</span><br></pre></td></tr></table></figure><p>计算每小时下载量：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">clickhouse<span class="operator">&gt;</span> <span class="keyword">SELECT</span> toStartOfHour(<span class="keyword">when</span>) <span class="keyword">AS</span> <span class="keyword">hour</span>, userid, <span class="built_in">count</span>() <span class="keyword">as</span> downloads, <span class="built_in">sum</span>(bytes) <span class="keyword">AS</span> bytes <span class="keyword">FROM</span> download <span class="keyword">GROUP</span> <span class="keyword">BY</span> userid, <span class="keyword">hour</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> userid, <span class="keyword">hour</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+-----------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">hour</span>                <span class="operator">|</span> userid <span class="operator">|</span> downloads <span class="operator">|</span> bytes      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+-----------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>      <span class="number">6822</span> <span class="operator">|</span> <span class="number">3378623036</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">19</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5424173178</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">20</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5418656068</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">21</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5404309443</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">22</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5354077456</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5390852563</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5369839540</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5384161012</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">02</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5404581759</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">03</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>      <span class="number">6778</span> <span class="operator">|</span> <span class="number">3399557322</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+-----------+------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.13</span> sec)</span><br></pre></td></tr></table></figure><p>很容易嘛，不过有个问题：每次都要以 <code>download</code> 表为基础数据进行计算，<code>*hub</code> 数据量太大，无法忍受。</p><p>想到一个办法：如果对 <code>download</code> 进行预聚合，把结果保存到一个新表 <code>download_hour_mv</code>，并随着 <code>download</code> 增量实时更新，每次去查询<code>download_hour_mv</code> 不就可以了。</p><p>这个新表可以看做是一个物化视图，它在 ClickHouse 是一个普通表。</p><h2 id="创建物化视图"><a href="#创建物化视图" class="headerlink" title="创建物化视图"></a>创建物化视图</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">clickhouse<span class="operator">&gt;</span> <span class="keyword">CREATE</span> MATERIALIZED <span class="keyword">VIEW</span> download_hour_mv</span><br><span class="line">ENGINE <span class="operator">=</span> SummingMergeTree</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> toYYYYMM(<span class="keyword">hour</span>) <span class="keyword">ORDER</span> <span class="keyword">BY</span> (userid, <span class="keyword">hour</span>)</span><br><span class="line"><span class="keyword">AS</span> <span class="keyword">SELECT</span></span><br><span class="line">  toStartOfHour(<span class="keyword">when</span>) <span class="keyword">AS</span> <span class="keyword">hour</span>,</span><br><span class="line">  userid,</span><br><span class="line">  <span class="built_in">count</span>() <span class="keyword">as</span> downloads,</span><br><span class="line">  <span class="built_in">sum</span>(bytes) <span class="keyword">AS</span> bytes</span><br><span class="line"><span class="keyword">FROM</span> download <span class="keyword">WHERE</span> <span class="keyword">when</span> <span class="operator">&gt;=</span> toDateTime(<span class="string">&#x27;2020-09-01 04:00:00&#x27;</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> userid, <span class="keyword">hour</span></span><br></pre></td></tr></table></figure><p>这个语句主要做了：</p><ul><li>创建一个引擎为 <code>SummingMergeTree</code> 的物化视图 <code>download_hour_mv</code></li><li>物化视图的数据来源于 <code>download</code> 表，并根据 <code>select</code> 语句中的表达式进行相应“物化”操作</li><li>选取一个未来时间(当前时间是 <code>2020-08-31 18:00:00</code>)作为开始点 <code>WHERE when &gt;= toDateTime(&#39;2020-09-01 04:00:00&#39;)</code>，表示在<code>2020-09-01 04:00:00</code> 之后的数据才会被同步到 <code>download_hour_mv</code></li></ul><p>这样，目前 <code>download_hour_mv</code> 是一个空表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clickhouse<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> download_hour_mv <span class="keyword">ORDER</span> <span class="keyword">BY</span> userid, <span class="keyword">hour</span>;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><p>注意：官方有 <a href="https://clickhouse.tech/docs/en/sql-reference/statements/create/view/#materialized">POPULATE</a> 关键字，但是不建议使用，因为视图创建期间 <code>download</code> 如果有写入数据会丢失，这也是我们加一个 <code>WHERE</code> 作为数据同步点的原因。</p><p>那么，我们如何让源表数据可以一致性的同步到 <code>download_hour_mv</code> 呢？</p><h2 id="物化全量数据"><a href="#物化全量数据" class="headerlink" title="物化全量数据"></a>物化全量数据</h2><p>在<code>2020-09-01 04:00:00</code>之后，我们可以通过一个带 <code>WHERE</code> 快照的<code>INSERT INTO SELECT...</code> 对 <code>download</code> 历史数据进行物化：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">clickhouse<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> download_hour_mv</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  toStartOfHour(<span class="keyword">when</span>) <span class="keyword">AS</span> <span class="keyword">hour</span>,</span><br><span class="line">  userid,</span><br><span class="line">  <span class="built_in">count</span>() <span class="keyword">as</span> downloads,</span><br><span class="line">  <span class="built_in">sum</span>(bytes) <span class="keyword">AS</span> bytes</span><br><span class="line"><span class="keyword">FROM</span> download <span class="keyword">WHERE</span> <span class="keyword">when</span> <span class="operator">&lt;</span> toDateTime(<span class="string">&#x27;2020-09-01 04:00:00&#x27;</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> userid, <span class="keyword">hour</span></span><br></pre></td></tr></table></figure><p>查询物化视图：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">clickhouse<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> download_hour_mv <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">hour</span>, userid, downloads <span class="keyword">DESC</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+-----------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">hour</span>                <span class="operator">|</span> userid <span class="operator">|</span> downloads <span class="operator">|</span> bytes      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+-----------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>      <span class="number">6822</span> <span class="operator">|</span> <span class="number">3378623036</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">19</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5424173178</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">20</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5418656068</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">21</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5404309443</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">22</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5354077456</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5390852563</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5369839540</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5384161012</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">02</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5404581759</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">03</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>      <span class="number">6778</span> <span class="operator">|</span> <span class="number">3399557322</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+-----------+------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.05</span> sec)</span><br></pre></td></tr></table></figure><p>可以看到数据已经“物化”到 <code>download_hour_mv</code>。</p><h2 id="物化增量数据"><a href="#物化增量数据" class="headerlink" title="物化增量数据"></a>物化增量数据</h2><p>写一些数据到 <code>download</code>表:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">clickhouse<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> download</span><br><span class="line">       <span class="keyword">SELECT</span></span><br><span class="line">         toDateTime(<span class="string">&#x27;2020-09-01 04:00:00&#x27;</span>) <span class="operator">+</span> number<span class="operator">*</span>(<span class="number">1</span><span class="operator">/</span><span class="number">3</span>) <span class="keyword">as</span> <span class="keyword">when</span>,</span><br><span class="line">         <span class="number">19</span>,</span><br><span class="line">         rand() <span class="operator">%</span> <span class="number">1000000</span></span><br><span class="line">       <span class="keyword">FROM</span> system.numbers</span><br><span class="line">       LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>查询物化视图 <code>download_hour_mv</code>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">clickhouse<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> download_hour_mv <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">hour</span>, userid, downloads;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+-----------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">hour</span>                <span class="operator">|</span> userid <span class="operator">|</span> downloads <span class="operator">|</span> bytes      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+-----------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>      <span class="number">6822</span> <span class="operator">|</span> <span class="number">3378623036</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">19</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5424173178</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">20</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5418656068</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">21</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5404309443</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">22</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5354077456</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5390852563</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5369839540</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5384161012</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">02</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5404581759</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">03</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>      <span class="number">6778</span> <span class="operator">|</span> <span class="number">3399557322</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>        <span class="number">10</span> <span class="operator">|</span>    <span class="number">5732600</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+-----------+------------+</span></span><br><span class="line"><span class="number">11</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>可以看到最后一条数据就是我们增量的一个物化聚合，已经实时同步，这是如何做到的呢？</p><h2 id="物化视图原理"><a href="#物化视图原理" class="headerlink" title="物化视图原理"></a>物化视图原理</h2><p>ClickHouse 的物化视图原理并不复杂，在 <code>download</code> 表有新的数据写入时，如果检测到有物化视图跟它关联，会针对这批写入的数据进行物化操作。</p><p>比如上面新增数据是通过以下 SQL 生成的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">clickhouse<span class="operator">&gt;</span> <span class="keyword">SELECT</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          toDateTime(<span class="string">&#x27;2020-09-01 04:00:00&#x27;</span>) <span class="operator">+</span> number<span class="operator">*</span>(<span class="number">1</span><span class="operator">/</span><span class="number">3</span>) <span class="keyword">as</span> <span class="keyword">when</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          <span class="number">19</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          rand() <span class="operator">%</span> <span class="number">1000000</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>        <span class="keyword">FROM</span> system.numbers</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>        LIMIT <span class="number">10</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+------+-------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">when</span>                <span class="operator">|</span> <span class="number">19</span>   <span class="operator">|</span> modulo(rand(), <span class="number">1000000</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+------+-------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span>                  <span class="number">870495</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span>                  <span class="number">322270</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span>                  <span class="number">983422</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">01</span> <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span>                  <span class="number">759708</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">01</span> <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span>                  <span class="number">975636</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">01</span> <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span>                  <span class="number">365507</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">02</span> <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span>                  <span class="number">865569</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">02</span> <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span>                  <span class="number">975742</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">02</span> <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span>                   <span class="number">85827</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">03</span> <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span>                  <span class="number">992779</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+------+-------------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><p>物化视图执行的语句类似：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> download_hour_mv</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  toStartOfHour(<span class="keyword">when</span>) <span class="keyword">AS</span> <span class="keyword">hour</span>,</span><br><span class="line">  userid,</span><br><span class="line">  <span class="built_in">count</span>() <span class="keyword">as</span> downloads,</span><br><span class="line">  <span class="built_in">sum</span>(bytes) <span class="keyword">AS</span> bytes</span><br><span class="line"><span class="keyword">FROM</span> [新增的<span class="number">10</span>条数据] <span class="keyword">WHERE</span> <span class="keyword">when</span> <span class="operator">&gt;=</span> toDateTime(<span class="string">&#x27;2020-09-01 04:00:00&#x27;</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> userid, <span class="keyword">hour</span></span><br></pre></td></tr></table></figure><p>代码导航：</p><ol><li><p>添加视图 OutputStream， <a href="https://github.com/ClickHouse/ClickHouse/blob/cb4644ea6d04b3d5900868b4f8d686a03082379a/src/Interpreters/InterpreterInsertQuery.cpp#L313">InterpreterInsertQuery.cpp</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (table-&gt;<span class="built_in">noPushingToViews</span>() &amp;&amp; !no_destination)</span><br><span class="line">    out = table-&gt;<span class="built_in">write</span>(query_ptr, metadata_snapshot, context);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    out = std::make_shared&lt;PushingToViewsBlockOutputStream&gt;(table, metadata_snapshot, context, query_ptr, no_destination);</span><br></pre></td></tr></table></figure></li><li><p>构造 Insert ， <a href="https://github.com/ClickHouse/ClickHouse/blob/cb4644ea6d04b3d5900868b4f8d686a03082379a/src/DataStreams/PushingToViewsBlockOutputStream.cpp#L85">PushingToViewsBlockOutputStream.cpp</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ASTPtr <span class="title">insert_query_ptr</span><span class="params">(insert.release())</span></span>;</span><br><span class="line"><span class="function">InterpreterInsertQuery <span class="title">interpreter</span><span class="params">(insert_query_ptr, *insert_context)</span></span>;</span><br><span class="line">BlockIO io = interpreter.<span class="built_in">execute</span>();</span><br><span class="line">out = io.out;</span><br></pre></td></tr></table></figure></li><li><p>物化新增数据：<a href="https://github.com/ClickHouse/ClickHouse/blob/cb4644ea6d04b3d5900868b4f8d686a03082379a/src/DataStreams/PushingToViewsBlockOutputStream.cpp#L331">PushingToViewsBlockOutputStream.cpp</a></p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Context local_context = *select_context;</span><br><span class="line">local_context.<span class="built_in">addViewSource</span>(</span><br><span class="line">    StorageValues::<span class="built_in">create</span>(</span><br><span class="line">        storage-&gt;<span class="built_in">getStorageID</span>(), metadata_snapshot-&gt;<span class="built_in">getColumns</span>(), block, storage-&gt;<span class="built_in">getVirtuals</span>()));</span><br><span class="line">select.<span class="built_in">emplace</span>(view.query, local_context, <span class="built_in">SelectQueryOptions</span>());</span><br><span class="line">in = std::make_shared&lt;MaterializingBlockInputStream&gt;(select-&gt;<span class="built_in">execute</span>().<span class="built_in">getInputStream</span>()</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>物化视图的用途较多。</p><p>比如可以解决表索引问题，我们可以用物化视图创建另外一种物理序，来满足某些条件下的查询问题。</p><p>还有就是通过物化视图的实时同步数据能力，我们可以做到更加灵活的表结构变更。</p><p>更强大的地方是它可以借助 MergeTree 家族引擎(SummingMergeTree、Aggregatingmergetree 等)，得到一个实时的预聚合，满足快速查询。</p><p>原理是把增量的数据根据 <code>AS SELECT ...</code> 对其进行处理并写入到物化视图表，物化视图是一种普通表，可以直接读取和写入。</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> ClickHouse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ClickHouse和他的朋友们 </tag>
            
            <tag> ClickHouse </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> Materialized View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码分析 | ClickHouse和他的朋友们（11）MySQL实时复制之GTID模式</title>
      <link href="/2020/08/28/clickhouse-and-friends-11-mysql-gtid-replication/"/>
      <url>/2020/08/28/clickhouse-and-friends-11-mysql-gtid-replication/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-08-28 20:40:14</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/08/26/clickhouse-and-friends-mysql-gtid-replication/">https://bohutang.me/2020/08/26/clickhouse-and-friends-mysql-gtid-replication/</a><br>以下为正文。</p></blockquote><p><img src="clickhouse-map-2020-materialzemysql.png" alt="clickhouse-map-2020-materialzemysql.png"></p><p><a href="https://bohutang.me/2020/07/26/clickhouse-and-friends-mysql-replication/">MySQL 实时复制原理篇</a></p><p>几天前 ClickHouse 官方发布了 <a href="https://github.com/ClickHouse/ClickHouse/releases/tag/v20.8.1.4447-testing">v20.8.1.4447-testing</a>，这个版本已经包含了 MaterializeMySQL 引擎，实现了 ClickHouse 实时复制 MySQL 数据的能力，感兴趣的朋友可以通过官方安装包来做体验，安装方式参考 <a href="https://clickhouse.tech/#quick-start">https://clickhouse.tech/#quick-start</a>，需要注意的是要选择 testing 分支。</p><h2 id="基于位点同步"><a href="#基于位点同步" class="headerlink" title="基于位点同步"></a>基于位点同步</h2><p>MaterializeMySQL 在 v20.8.1.4447-testing 版本是基于 binlog 位点模式进行同步的。</p><p>每次消费完一批 binlog event，就会记录 event 的位点信息到 .metadata 文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Version:1</span><br><span class="line">Binlog File:mysql-bin.000002</span><br><span class="line">Binlog Position:328</span><br><span class="line">Data Version:1</span><br></pre></td></tr></table></figure><p>这样当 ClickHouse 再次启动时，它会把 <code>&#123;‘mysql-bin.000002’, 328&#125;</code> 二元组通过协议告知 MySQL Server，MySQL 从这个位点开始发送数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1&gt; ClickHouse 发送 &#123;&#x27;mysql-bin.000002&#x27;, 328&#125; 位点信息给 MySQL</span><br><span class="line">s2&gt; MySQL 找到本地 mysql-bin.000002 文件并定位到 328 偏移位置，读取下一个 event 发送给 ClickHouse</span><br><span class="line">s3&gt; ClickHouse 接收 binlog event 并更新 .metadata位点</span><br></pre></td></tr></table></figure><p>看起来不错哦，但是有个问题：<br>如果 MySQL Server 是一个集群(比如１主２从)，通过 VIP 对外服务，MaterializeMySQL 的 host 指向的是这个 vip。<br>当集群主从发生切换后，<code>&#123;binlog-name, binlog-position&#125;</code> 二元组其实是不准确的，因为集群里主从 binlog 不一定是完全一致的(binlog 可以做 reset 操作)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1&gt; ClickHouse 发送 &#123;&#x27;mysql-bin.000002&#x27;, 328&#125; 给集群新主 MySQL</span><br><span class="line">s2&gt; 新主 MySQL 发现本地没有 mysql-bin.000002 文件，因为它做过 reset master 操作，binlog 文件是 mysql-bin.000001</span><br><span class="line">... oops ...</span><br></pre></td></tr></table></figure><p>为了解决这个问题，我们开发了 GTID 同步模式，废弃了不安全的位点同步模式，目前已被 upstream merged <a href="https://github.com/ClickHouse/ClickHouse/pull/13820">#PR13820</a>，下一个 testing 版本即可体验。</p><p>着急的话可以自己编译或通过 <a href="https://clickhouse-builds.s3.yandex.net/0/2b8ad576cc3892d2d760f3f8b670adf17db0c2a0/clickhouse_build_check/report.html">ClickHouse Build Check for master-20.9.1</a> 下载安装。</p><h2 id="基于-GTID-同步"><a href="#基于-GTID-同步" class="headerlink" title="基于 GTID 同步"></a>基于 GTID 同步</h2><p>GTID 是 MySQL 复制增强版，从 MySQL 5.6 版本开始支持，目前已经是 MySQL 主流复制模式。</p><p>它为每个 event 分配一个全局唯一 ID 和序号，我们可以不用关心 MySQL 集群主从拓扑结构，直接告知 MySQL 这个 GTID 即可，.metadata 变为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Version:2</span><br><span class="line">Executed GTID:f4aee41e-e36f-11ea-8b37-0242ac110002:1-5</span><br><span class="line">Data Version:1</span><br></pre></td></tr></table></figure><p><code>f4aee41e-e36f-11ea-8b37-0242ac110002</code> 是生成 event 的主机 UUID，<code>1-5</code>是已经同步的 event 区间。</p><p>这样流程就变为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1&gt; ClickHouse 发送 GTID:f4aee41e-e36f-11ea-8b37-0242ac110002:1-5 给 MySQL</span><br><span class="line">s2&gt; MySQL 根据 GTID:f4aee41e-e36f-11ea-8b37-0242ac110002:1-5 找到本地位点，读取下一个 event 发送给 ClickHouse</span><br><span class="line">s3&gt; ClickHouse 接收 binlog event 并更新 .metadata GTID信息</span><br></pre></td></tr></table></figure><h2 id="MySQL-开启-GTID"><a href="#MySQL-开启-GTID" class="headerlink" title="MySQL 开启 GTID"></a>MySQL 开启 GTID</h2><p>那么，MySQL 侧怎么开启 GTID 呢？增加以下两个参数即可:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--gtid-mode=ON --enforce-gtid-consistency</span></span><br></pre></td></tr></table></figure><p>比如启动一个启用 GTID 的 MySQL docker：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="operator">-</span>d <span class="operator">-</span>e MYSQL_ROOT_PASSWORD<span class="operator">=</span><span class="number">123</span> mysql:<span class="number">5.7</span> mysqld <span class="comment">--datadir=/var/lib/mysql --server-id=1 --log-bin=/var/lib/mysql/mysql-bin.log --gtid-mode=ON --enforce-gtid-consistency</span></span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>启用 GTID 复制模式后，metadata Version 会变为 2，也就是老版本启动时会直接报错，database 需要重建。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>MaterializeMySQL 引擎还处于不停迭代中，对于它我们有一个初步的规划：</p><ul><li><strong>稳定性保证</strong><br>这块需要更多测试，更多试用反馈</li><li><strong>索引优化</strong><br>OLTP 索引一般不是为 OLAP 设计，目前索引转换还是依赖 MySQL 表结构，需要更加智能化</li><li><strong>可观测性</strong><br>在 ClickHouse 侧可以方便的查看当前同步信息，类似 MySQL <code>show slave status</code></li><li><strong>数据一致性校验</strong><br>需要提供方式可以校验 MySQL 和 ClickHouse 数据一致性</li></ul><p>MaterializeMySQL 已经是社区功能，仍然有不少的工作要做。期待更多的力量加入，我们的征途不止星辰大海。</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> ClickHouse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> ClickHouse和他的朋友们 </tag>
            
            <tag> ClickHouse </tag>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>问题定位 | Peronca Xtrabackup 8.0近日踩坑总结 - xtrabackup 2.4和8.0区别</title>
      <link href="/2020/08/27/percona-xtrabackup-2.4-vs-8.0/"/>
      <url>/2020/08/27/percona-xtrabackup-2.4-vs-8.0/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p><strong>本文首发于 2020-08-27 13:46:15</strong></p></blockquote><p><strong>作者：卢文双 资深数据库内核研发</strong></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>近期在给 <code>radondb/xenon</code> 适配 percona xtrabackup 8.0 时，遇到了一些问题，经过多日调研、尝试终于解决，特此分享。</p><p><strong>版本信息：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Percona-Server 8.0.19-10</span><br><span class="line">Percona-Xtrabackup 8.0.13</span><br></pre></td></tr></table></figure><p>版本各字段含义参考 <a href="https://www.percona.com/blog/2020/08/18/aligning-percona-xtrabackup-versions-with-percona-server-for-mysql/">https://www.percona.com/blog/2020/08/18/aligning-percona-xtrabackup-versions-with-percona-server-for-mysql/</a></p><h3 id="适配过程中遇到的坑"><a href="#适配过程中遇到的坑" class="headerlink" title="适配过程中遇到的坑"></a>适配过程中遇到的坑</h3><p>一、MySQL 8.0 + Semi-Sync + 持续写入数据期间执行重建后，change master to &amp;&amp; start slave 报错：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Last_Error: Could <span class="keyword">not</span> execute Write_rows <span class="keyword">event</span> on <span class="keyword">table</span> db1<span class="variable">.t1</span>; Duplicate entry &#x27;<span class="number">28646</span>&#x27; <span class="keyword">for</span> key &#x27;t1<span class="variable">.PRIMARY</span>&#x27;, Error_code: <span class="number">1062</span>; handler error HA_ERR_FOUND_DUPP_KEY; the <span class="keyword">event</span>&#x27;s master log mysql-bin<span class="variable">.000052</span>, end_log_pos <span class="number">437</span></span><br></pre></td></tr></table></figure><p>二、MySQL 8.0 + Group Replication + 持续写入数据期间执行重建后，change master to &amp;&amp; start group_replication 报错：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">21</span>T14:<span class="number">51</span>:<span class="number">09</span><span class="variable">.977606</span>+<span class="number">08</span>:<span class="number">00</span> <span class="number">61</span> [System] [MY-<span class="number">010597</span>] [Repl] &#x27;CHANGE MASTER TO FOR CHANNEL &#x27;group_replication_applier&#x27; executed&#x27;. Previous state master_host=&#x27;&lt;NULL&gt;&#x27;, master_port= <span class="number">0</span>, master_log_file=&#x27;&#x27;, master_log_pos= <span class="number">4</span>, master_bind=&#x27;&#x27;. New state master_host=&#x27;&lt;NULL&gt;&#x27;, master_port= <span class="number">0</span>, master_log_file=&#x27;&#x27;, master_log_pos= <span class="number">4</span>, master_bind=&#x27;&#x27;.</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">21</span>T14:<span class="number">51</span>:<span class="number">09</span><span class="variable">.987494</span>+<span class="number">08</span>:<span class="number">00</span> <span class="number">61</span> [ERROR] [MY-<span class="number">013124</span>] [Repl] Slave SQL <span class="keyword">for</span> channel &#x27;group_replication_applier&#x27;: Slave failed to initialize relay log info structure from the repository, Error_code: MY-<span class="number">013124</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">21</span>T14:<span class="number">51</span>:<span class="number">09</span><span class="variable">.987542</span>+<span class="number">08</span>:<span class="number">00</span> <span class="number">61</span> [ERROR] [MY-<span class="number">011534</span>] [Repl] Plugin group_replication reported: &#x27;Error <span class="keyword">while</span> starting the group replication applier thread&#x27;</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">21</span>T14:<span class="number">51</span>:<span class="number">09</span><span class="variable">.987651</span>+<span class="number">08</span>:<span class="number">00</span> <span class="number">7</span> [ERROR] [MY-<span class="number">011669</span>] [Repl] Plugin group_replication reported: &#x27;Unable to initialize the Group Replication applier <span class="keyword">module</span>.&#x27;</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">21</span>T14:<span class="number">51</span>:<span class="number">09</span><span class="variable">.987831</span>+<span class="number">08</span>:<span class="number">00</span> <span class="number">7</span> [ERROR] [MY-<span class="number">011735</span>] [Repl] Plugin group_replication reported: &#x27;[GCS] The member is leaving a group without being on one.&#x27;</span><br></pre></td></tr></table></figure><p>要解释这个问题，首先要弄清楚 xtrabackup 2.4 和 8.0 的区别。</p><h3 id="xtrabackup-2-4-和-8-0-区别"><a href="#xtrabackup-2-4-和-8-0-区别" class="headerlink" title="xtrabackup 2.4 和 8.0 区别"></a>xtrabackup 2.4 和 8.0 区别</h3><p><strong>google 查到 xtrabackup 8.0 与 2.4 版本行为有所不同：</strong></p><blockquote><ol><li>Xtrabackup 2.4 备份后生成的 <code>xtrabackup_binlog_info</code> 文件记录的 GTID 信息是准确的，但是备份恢复后 <code>show master status</code> 显示的 GTID 是不准确的。</li><li>Xtrabackup 8.0 在备份只有 InnoDB 表的实例时，<code>xtrabackup_binlog_info</code> 文件记录的 GTID 信息不一定是准确的，但是备份恢复后 <code>show master status</code> 显示的 GTID 是准确的。</li><li>Xtrabackup 8.0 在备份有非 InnoDB 表格的实例时，<code>xtrabackup_binlog_info</code> 文件记录的 GTID 信息是准确的，备份恢复后 <code>show master status</code> 显示的 GTID 也是准确的。</li></ol></blockquote><p><strong>之前研究过 xtrabackup 2.4 ，其过程大致如下：</strong></p><blockquote><ol><li>start backup</li><li>copy ibdata1 / copy .ibd file</li><li>excuted FTWRL</li><li>backup non-InnoDB tables and files</li><li>writing xtrabackup_binlog_info</li><li>executed FLUSH NO_WRITE_TO_BINLOG ENGINE LOGS</li><li>executed UNLOCK TABLES</li><li>copying ib_buffer_pool</li><li>completed OK!</li></ol></blockquote><p><strong>问题 1：xtrabackup 8.0 的执行过程是什么样？</strong></p><p>首先，查看重建期间的 <code>general log</code>：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.136376</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySET SESSION wait_timeout=<span class="number">2147483</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.136439</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySET SESSION autocommit=<span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.136523</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySET NAMES utf8</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.136595</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySHOW VARIABLES</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.138840</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySELECT COUNT(*) FROM information_schema<span class="variable">.tables</span> WHERE engine = &#x27;MyISAM&#x27; OR engine = &#x27;RocksDB&#x27;</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.140203</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySHOW ENGINES</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.140407</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySHOW ENGINE INNODB STATUS</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.141570</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySELECT PLUGIN_NAME, PLUGIN_LIBRARY FROM information_schema<span class="variable">.plugins</span> WHERE PLUGIN_STATUS = &#x27;ACTIVE&#x27; AND PLUGIN_TYPE = &#x27;KEYRING&#x27;</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.142140</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySELECT  CONCAT(table_schema, &#x27;/&#x27;, table_name), engine FROM information_schema<span class="variable">.tables</span> WHERE engine NOT IN (&#x27;MyISAM&#x27;, &#x27;InnoDB&#x27;, &#x27;CSV&#x27;, &#x27;MRG_MYISAM&#x27;, &#x27;ROCKSDB&#x27;) AND table_schema NOT IN (  &#x27;performance_schema&#x27;, &#x27;information_schema&#x27;,   &#x27;mysql&#x27;)</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.209819</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">171</span> QuerySET SESSION wait_timeout=<span class="number">2147483</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.209879</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">171</span> QuerySET SESSION autocommit=<span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.209950</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">171</span> QuerySET NAMES utf8</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.210015</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">171</span> QuerySHOW VARIABLES</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.214030</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySELECT T2<span class="variable">.PATH</span>,        T2<span class="variable">.NAME</span>,        T1<span class="variable">.SPACE_TYPE</span> FROM   INFORMATION_SCHEMA<span class="variable">.INNODB_TABLESPACES</span> T1        JOIN INFORMATION_SCHEMA<span class="variable">.INNODB_TABLESPACES_BRIEF</span> T2 USING (SPACE) WHERE  T1<span class="variable">.SPACE_TYPE</span> = &#x27;Single&#x27; &amp;&amp; T1<span class="variable">.ROW_FORMAT</span> != &#x27;Undo&#x27;UNION SELECT T2<span class="variable">.PATH</span>,        SUBSTRING_INDEX(SUBSTRING_INDEX(T2<span class="variable">.PATH</span>, &#x27;/&#x27;, -<span class="number">1</span>), &#x27;.&#x27;, <span class="number">1</span>) NAME,        T1<span class="variable">.SPACE_TYPE</span> FROM   INFORMATION_SCHEMA <span class="variable">.INNODB_TABLESPACES</span> T1        JOIN INFORMATION_SCHEMA <span class="variable">.INNODB_TABLESPACES_BRIEF</span> T2 USING (SPACE) WHERE  T1<span class="variable">.SPACE_TYPE</span> = &#x27;General&#x27; &amp;&amp; T1<span class="variable">.ROW_FORMAT</span> != &#x27;Undo&#x27;</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">19</span><span class="variable">.533904</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QueryFLUSH NO_WRITE_TO_BINLOG BINARY LOGS</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">19</span><span class="variable">.543095</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySELECT server_uuid, <span class="keyword">local</span>, replication, storage_engines FROM performance_schema<span class="variable">.log_status</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">19</span><span class="variable">.543418</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySHOW VARIABLES</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">19</span><span class="variable">.545383</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySHOW VARIABLES</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">19</span><span class="variable">.550641</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QueryFLUSH NO_WRITE_TO_BINLOG ENGINE LOGS</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">20</span><span class="variable">.556885</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySELECT UUID()</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">20</span><span class="variable">.557118</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySELECT VERSION()</span><br></pre></td></tr></table></figure><p>可见，<strong>xtrabackup 8.0 默认情况下大致过程如下：</strong></p><blockquote><ol><li>start backup</li><li>copy .ibd file</li><li>backup non-InnoDB tables and files</li><li>executed FLUSH NO_WRITE_TO_BINLOG BINARY LOGS</li><li>selecting LSN and binary log position from p_s.log_status</li><li>copy last binlog file</li><li>writing /mysql/backup/backup/binlog.index</li><li>writing xtrabackup_binlog_info</li><li>executing FLUSH NO_WRITE_TO_BINLOG ENGINE LOGS</li><li>copy ib_buffer_pool</li><li>completed OK!</li></ol><p><strong>注意：</strong> 当存在非 InnoDB 表时，xtrabackup 8.0 会执行 FTWRL。</p></blockquote><p>从上述步骤可知，xtrabackup 8.0 与 2.4 的步骤<strong>主要区别</strong>为：</p><p>当只存在 InnoDB 引擎的表时，不再执行 FTWRL，而是通过 上述第 5 步（<code>SELECT server_uuid, local, replication, storage_engines FROM performance_schema.log_status</code> ）来获取 LSN、binlog position、GTID 。</p><p>手册中对于表 <a href="https://dev.mysql.com/doc/refman/8.0/en/performance-schema-log-status-table.html">log_status</a> 的描述如下：</p><blockquote><p>The <a href="https://dev.mysql.com/doc/refman/8.0/en/performance-schema-log-status-table.html"><code>log_status</code></a> table provides information that enables an online backup tool to copy the required log files without locking those resources for the duration of the copy process.</p><p>When the <a href="https://dev.mysql.com/doc/refman/8.0/en/performance-schema-log-status-table.html"><code>log_status</code></a> table is queried, the server blocks logging and related administrative changes for just long enough to populate the table, then releases the resources. The <a href="https://dev.mysql.com/doc/refman/8.0/en/performance-schema-log-status-table.html"><code>log_status</code></a> table informs the online backup which point it should copy up to in the source’s binary log and <code>gtid_executed</code> record, and the relay log for each replication channel. It also provides relevant information for individual storage engines, such as the last log sequence number (LSN) and the LSN of the last checkpoint taken for the <code>InnoDB</code> storage engine.</p></blockquote><p>从上述手册描述可知，<code>performance_schema.log_status</code>是 MySQL 8.0 提供给在线备份工具获取复制信息的表格，查询该表时，mysql server 将阻止日志的记录和相关的更改来获取足够的时间以填充该表，然后释放资源。</p><p>log_status 表通知在线备份工具当前主库的 binlog 的位点和 gtid_executed 的值以及每个复制通道的 relay log。另外，它还提供了各个存储引擎的相关信息，比如，提供了 InnoDB 引擎使用的最后一个日志序列号（LSN）和最后一个检查点的 LSN。</p><p><code>performance_schema.log_status</code>表定义为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Semi-Sync</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> performance_schema.log_status\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">    SERVER_UUID: <span class="number">6</span>b437e80<span class="operator">-</span>e5d5<span class="number">-11</span>ea<span class="number">-88e3</span><span class="number">-52549922</span>fdbb</span><br><span class="line">          <span class="keyword">LOCAL</span>: &#123;&quot;gtid_executed&quot;: &quot;6b437e80-e5d5-11ea-88e3-52549922fdbb:1-201094&quot;, &quot;binary_log_file&quot;: &quot;mysql-bin.000079&quot;, &quot;binary_log_position&quot;: <span class="number">195</span>&#125;</span><br><span class="line">    REPLICATION: &#123;&quot;channels&quot;: []&#125;</span><br><span class="line">STORAGE_ENGINES: &#123;&quot;InnoDB&quot;: &#123;&quot;LSN&quot;: <span class="number">23711425885</span>, &quot;LSN_checkpoint&quot;: <span class="number">23711425885</span>&#125;&#125;</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Group Replication</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> performance_schema.log_status\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">    SERVER_UUID: <span class="number">7</span>bd32480<span class="operator">-</span>e5d5<span class="number">-11</span>ea<span class="number">-8</span>f8a<span class="number">-525499</span>cfbb7d</span><br><span class="line">          <span class="keyword">LOCAL</span>: &#123;&quot;gtid_executed&quot;: &quot;aaaaaaaa-aaaa-aaaa-aaaa-53ab6ea1210a:1-11&quot;, &quot;binary_log_file&quot;: &quot;mysql-bin.000003&quot;, &quot;binary_log_position&quot;: <span class="number">1274</span>&#125;</span><br><span class="line">    REPLICATION: &#123;&quot;channels&quot;: [&#123;&quot;channel_name&quot;: &quot;group_replication_applier&quot;, &quot;relay_log_file&quot;: &quot;mysql-relay-bin-group_replication_applier.000004&quot;, &quot;relay_log_position&quot;: <span class="number">311</span>, &quot;relay_master_log_file&quot;: &quot;&quot;, &quot;exec_master_log_position&quot;: <span class="number">0</span>&#125;, &#123;&quot;channel_name&quot;: &quot;group_replication_recovery&quot;, &quot;relay_log_file&quot;: &quot;mysql-relay-bin-group_replication_recovery.000003&quot;, &quot;relay_log_position&quot;: <span class="number">151</span>, &quot;relay_master_log_file&quot;: &quot;&quot;, &quot;exec_master_log_position&quot;: <span class="number">0</span>&#125;]&#125;</span><br><span class="line">STORAGE_ENGINES: &#123;&quot;InnoDB&quot;: &#123;&quot;LSN&quot;: <span class="number">20257208</span>, &quot;LSN_checkpoint&quot;: <span class="number">20257208</span>&#125;&#125;</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>问题 2：<code>performance_schema.log_status</code>提供的信息是否准确呢？</strong></p><p>当写入压力大时，该表中的 binlog position 与 GTID 信息不一致。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> performance_schema.log_status\G  <span class="keyword">show</span> master status;</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">    SERVER_UUID: <span class="number">6</span>b437e80<span class="operator">-</span>e5d5<span class="number">-11</span>ea<span class="number">-88e3</span><span class="number">-52549922</span>fdbb</span><br><span class="line">          <span class="keyword">LOCAL</span>: &#123;&quot;gtid_executed&quot;: &quot;6b437e80-e5d5-11ea-88e3-52549922fdbb:1-448709&quot;, &quot;binary_log_file&quot;: &quot;mysql-bin.000087&quot;, &quot;binary_log_position&quot;: <span class="number">341265185</span>&#125;</span><br><span class="line">    REPLICATION: &#123;&quot;channels&quot;: []&#125;</span><br><span class="line">STORAGE_ENGINES: &#123;&quot;InnoDB&quot;: &#123;&quot;LSN&quot;: <span class="number">33797305275</span>, &quot;LSN_checkpoint&quot;: <span class="number">33433316246</span>&#125;&#125;</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.11</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------+--------------+------------------+-----------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> File             <span class="operator">|</span> Position  <span class="operator">|</span> Binlog_Do_DB <span class="operator">|</span> Binlog_Ignore_DB <span class="operator">|</span> Executed_Gtid_Set                             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------+--------------+------------------+-----------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> mysql<span class="operator">-</span>bin<span class="number">.000087</span> <span class="operator">|</span> <span class="number">343317905</span> <span class="operator">|</span>              <span class="operator">|</span>                  <span class="operator">|</span> <span class="number">6</span>b437e80<span class="operator">-</span>e5d5<span class="number">-11</span>ea<span class="number">-88e3</span><span class="number">-52549922</span>fdbb:<span class="number">1</span><span class="number">-448709</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------+--------------+------------------+-----------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p><strong>问题 3：既然 log_status 中的 binlog position 不准确，为什么备份恢复后 GTID 并没有缺失，数据也没问题？</strong></p><p>原因是 xtrabackup 8.0 在第 4 步 <code>FLUSH NO_WRITE_TO_BINLOG BINARY LOGS</code>之后，在第 6 步 <code>copy last binlog file</code>，这样备份恢复出的新实例在启动后不仅会读取 <code>gtid_executed</code> 表，还会读取拷贝的那个 binlog 文件来更新 GTID。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ mysqlbinlog -vv /data/mysql/mysql-bin<span class="variable">.000096</span></span><br><span class="line"><span class="comment">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/</span>;</span><br><span class="line"><span class="comment">/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/</span>;</span><br><span class="line">DELIMITER <span class="comment">/*!*/</span>;</span><br><span class="line"># at <span class="number">4</span></span><br><span class="line">#<span class="number">200827</span> <span class="number">11</span>:<span class="number">26</span>:<span class="number">47</span> server id <span class="number">575010000</span>  end_log_pos <span class="number">124</span> CRC32 <span class="number">0</span>xb026e372 Start: binlog v <span class="number">4</span>, server v <span class="number">8</span><span class="variable">.0</span><span class="variable">.19</span>-<span class="number">10</span> created <span class="number">200827</span> <span class="number">11</span>:<span class="number">26</span>:<span class="number">47</span></span><br><span class="line"># Warning: <span class="keyword">this</span> binlog is either in <span class="keyword">use</span> <span class="keyword">or</span> was <span class="keyword">not</span> closed properly.</span><br><span class="line">BINLOG &#x27;</span><br><span class="line"><span class="number">9</span>ydHXw/Q9EUieAAAAHwAAAABAAQAOC4wLjE5LTEwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAEwANAAgAAAAABAAEAAAAYAAEGggAAAAICAgCAAAACgoKKioAEjQA</span><br><span class="line">CgFy4yaw</span><br><span class="line">&#x27;<span class="comment">/*!*/</span>;</span><br><span class="line"># at <span class="number">124</span></span><br><span class="line">#<span class="number">200827</span> <span class="number">11</span>:<span class="number">26</span>:<span class="number">47</span> server id <span class="number">575010000</span>  end_log_pos <span class="number">195</span> CRC32 <span class="number">0</span>xad060415 Previous-GTIDs</span><br><span class="line"># <span class="number">6</span>b437e80-e5d5-<span class="number">11</span>ea-<span class="number">88</span>e3-<span class="number">52549922</span>fdbb:<span class="number">1</span>-<span class="number">465503</span></span><br><span class="line">SET @@SESSION<span class="variable">.GTID_NEXT</span>= &#x27;AUTOMATIC&#x27; <span class="comment">/* added by mysqlbinlog */</span> <span class="comment">/*!*/</span>;</span><br><span class="line">DELIMITER ;</span><br><span class="line"># End of log file</span><br><span class="line"><span class="comment">/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/</span>;</span><br><span class="line"><span class="comment">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/</span>;</span><br></pre></td></tr></table></figure><h3 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h3><h4 id="坑一：MySQL-8-0-Semi-Sync-重建问题"><a href="#坑一：MySQL-8-0-Semi-Sync-重建问题" class="headerlink" title="坑一：MySQL 8.0 + Semi-Sync 重建问题"></a>坑一：MySQL 8.0 + Semi-Sync 重建问题</h4><p>xenon 原有的重建逻辑是适配于 MySQL 5.6、5.7 的（重建过程中 xenon 进程存活），一直无问题：</p><blockquote><ol><li>禁用 raft，将 xenon 状态设为 LEARNER ；</li><li>如 mysql 进程存在，则 stop mysql；</li><li>清空 MySQL 数据目录；</li><li>执行 <code>xtrabackup --backup</code>以 <code>xbstream</code>方式获取对端数据；</li><li>执行 <code>xtrabackup --prepare</code>应用 redo log；</li><li>启动 mysql；</li><li>执行 <code>stop slave; reset slave all</code>；</li><li>执行 <code>reset master</code>，以 <code>xtrabackup_binlog_info</code>文件中的 GTID 为准设置 <code>gtid_purged</code>；</li><li>启用 raft，将 xenon 状态设为 FOLLOWER 或 IDLE；</li><li>等待 xenon 自动 <code>change master to</code>到主节点。</li><li>执行 <code>start slave</code>。</li></ol></blockquote><p><strong>问题 1：为什么在 MySQL 8.0 + Semi-Sync 组合下会出现 Duplicate entry ？</strong></p><p>跟踪重建过程中的 general log，发现在第 6 和第 7 步中间，也就是设置 <code>gtid_purged</code>之前凭空多出了 <code>change master to</code> 和 <code>start slave</code> 操作：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">22</span><span class="variable">.817859</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL rpl_semi_sync_master_enabled=OFF</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">22</span><span class="variable">.818025</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL read_only = <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">22</span><span class="variable">.818143</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL super_read_only = <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">22</span><span class="variable">.818323</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     START SLAVE</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">22</span><span class="variable">.824449</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     STOP SLAVE</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">22</span><span class="variable">.824610</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     CHANGE MASTER TO MASTER_HOST = &#x27;<span class="number">192</span><span class="variable">.168</span><span class="variable">.0</span><span class="variable">.3</span>&#x27;, MASTER_USER = &#x27;qc_repl&#x27;, MASTER_PASSWORD = &lt;secret&gt;, MASTER_PORT = <span class="number">3306</span>, MASTER_AUTO_POSITION = <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">22</span><span class="variable">.833710</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     START SLAVE</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">22</span><span class="variable">.935973</span>+<span class="number">08</span>:<span class="number">00</span>           <span class="number">10</span> Query     BEGIN</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">22</span><span class="variable">.936084</span>+<span class="number">08</span>:<span class="number">00</span>           <span class="number">10</span> Query     COMMIT <span class="comment">/* implicit, from Xid_log_event */</span></span><br><span class="line">......</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">24</span><span class="variable">.701711</span>+<span class="number">08</span>:<span class="number">00</span>           <span class="number">10</span> Query     BEGIN</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">24</span><span class="variable">.701901</span>+<span class="number">08</span>:<span class="number">00</span>           <span class="number">10</span> Query     COMMIT <span class="comment">/* implicit, from Xid_log_event */</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">24</span><span class="variable">.816571</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL rpl_semi_sync_master_enabled=OFF</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">24</span><span class="variable">.816886</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL read_only = <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">24</span><span class="variable">.817177</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL super_read_only = <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">24</span><span class="variable">.817281</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     START SLAVE</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.039581</span>+<span class="number">08</span>:<span class="number">00</span>           <span class="number">10</span> Query     BEGIN</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.039749</span>+<span class="number">08</span>:<span class="number">00</span>           <span class="number">10</span> Query     COMMIT <span class="comment">/* implicit, from Xid_log_event */</span></span><br><span class="line">......</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.152919</span>+<span class="number">08</span>:<span class="number">00</span>           <span class="number">10</span> Query     BEGIN</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.153082</span>+<span class="number">08</span>:<span class="number">00</span>           <span class="number">10</span> Query     COMMIT <span class="comment">/* implicit, from Xid_log_event */</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.389776</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     STOP SLAVE</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.392581</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     RESET SLAVE ALL</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.407434</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     RESET MASTER</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.417292</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL gtid_purged=&#x27;<span class="number">6</span>b437e80-e5d5-<span class="number">11</span>ea-<span class="number">88</span>e3-<span class="number">52549922</span>fdbb:<span class="number">1</span>-<span class="number">102610</span></span><br><span class="line">&#x27;</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.419835</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     START SLAVE</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.427071</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL read_only = <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.427178</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL super_read_only = <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.427271</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL sync_binlog=<span class="number">1000</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.427339</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL innodb_flush_log_at_trx_commit=<span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.427423</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SHOW SLAVE STATUS</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.427600</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SHOW MASTER STATUS</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">26</span><span class="variable">.817622</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL rpl_semi_sync_master_enabled=OFF</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">26</span><span class="variable">.817794</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL read_only = <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">26</span><span class="variable">.817897</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL super_read_only = <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">26</span><span class="variable">.817988</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     START SLAVE</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">26</span><span class="variable">.818381</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SHOW SLAVE STATUS</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">26</span><span class="variable">.818570</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SHOW MASTER STATUS</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">26</span><span class="variable">.818715</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     STOP SLAVE</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">26</span><span class="variable">.818823</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     CHANGE MASTER TO MASTER_HOST = &#x27;<span class="number">192</span><span class="variable">.168</span><span class="variable">.0</span><span class="variable">.3</span>&#x27;, MASTER_USER = &#x27;qc_repl&#x27;, MASTER_PASSWORD = &lt;secret&gt;, MASTER_PORT = <span class="number">3306</span>, MASTER_AUTO_POSITION = <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">26</span><span class="variable">.832164</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     START SLAVE</span><br></pre></td></tr></table></figure><p>这就是说在设置 gtid_purged 之前已经启用复制获取了一部分数据，那么 xtrabackup_binlog_info 中的内容就不再准确，之后设置的 GTID 与实际数据就不一致，实际的数据比设置的 GTID 要多，引起主键冲突。</p><p><strong>问题 2：为什么之前 MySQL 5.6、5.7 从没遇到过这个问题呢？</strong></p><p>测试了很多次，发现在 MySQL 5.6 &amp; 5.7 在 <code>set gtid_purged</code> 前执行 <code>change master to &amp; start slave</code> 后会报复制错误 <code>Slave failed to initialize relay log info structure from the repository</code> ，而在 <code>reset slave all; reset master、set gtid_purged</code>后再执行 <code>change master to &amp; start slave</code> 就可以正常复制，数据无误。</p><p><strong>问题 3：xenon 中哪块逻辑引起的额外的 change master to 和 start slave ？</strong></p><p>问题根源在重建期间 xenon 会设为 LEARNER 角色，而该角色在探测到 MySQL Alive 后，会 change master 到主节点。正常来说，要等 raft 状态设为 FOLLOWER 后由 FOLLOWER 的监听线程 change master 到主节点。（代码见 <a href="https://github.com/radondb/xenon/pull/104">pr104</a> 、<a href="https://github.com/radondb/xenon/pull/102">pr102</a> ）</p><h4 id="坑二：MySQL-8-0-Group-Replication-重建后无法启动-MGR"><a href="#坑二：MySQL-8-0-Group-Replication-重建后无法启动-MGR" class="headerlink" title="坑二：MySQL 8.0 + Group-Replication 重建后无法启动 MGR"></a>坑二：MySQL 8.0 + Group-Replication 重建后无法启动 MGR</h4><p>根据报错信息 <code>Slave failed to initialize relay log info structure from the repository</code>看，应该是 xtrabackup 重建后的数据目录保留了 slave 复制信息导致的，尝试在启动组复制前执行 <code>reset slave或reset slave all</code>即可解决。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><ol><li>Xtrabackup 2.4 备份后生成的 <code>xtrabackup_binlog_info</code> 文件记录的 GTID 信息是准确的，但是备份恢复后 <code>show master status</code> 显示的 GTID 是不准确的。</li><li>Xtrabackup 8.0 在备份只有 InnoDB 表的实例时，<code>xtrabackup_binlog_info</code> 文件记录的 GTID 信息不一定是准确的，但是备份恢复后 <code>show master status</code> 显示的 GTID 是准确的。</li><li>Xtrabackup 8.0 在备份有非 InnoDB 表格的实例时，<code>xtrabackup_binlog_info</code> 文件记录的 GTID 信息是准确的，备份恢复后 <code>show master status</code> 显示的 GTID 也是准确的。</li><li>使用 Xtrabackup 8.0 重建集群节点后，无需执行 <code>reset master &amp; set gtid_purged</code> 操作。</li><li>使用 Xtrabackup 8.0 重建 Group-Replication 集群节点后，启动组复制前需要先执行 <code>reset slave或reset slave all</code>清除 slave 信息，否则 <code>start group_replication</code> 会失败。</li></ol></blockquote><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 问题定位 </tag>
            
            <tag> Percona </tag>
            
            <tag> Xtrabackup </tag>
            
            <tag> RadonDB </tag>
            
            <tag> Xenon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码分析 | ClickHouse和他的朋友们（10）MergeTree Write-Ahead Log</title>
      <link href="/2020/08/20/clickhouse-and-friends-10-merge-tree-wal/"/>
      <url>/2020/08/20/clickhouse-and-friends-10-merge-tree-wal/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-08-20 19:55:14</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/08/18/clickhouse-and-friends-merge-tree-wal/">https://bohutang.me/2020/08/18/clickhouse-and-friends-merge-tree-wal/</a><br>以下为正文。</p></blockquote><p>数据库系统为了提高写入性能，会把数据先写到内存，等“攒”到一定程度后再回写到磁盘，比如 MySQL 的 buffer pool 机制。</p><p>因为数据先写到内存，为了数据的安全性，我们需要一个 Write-Ahead Log (WAL) 来保证内存数据的安全性。</p><p>今天我们来看看 ClickHouse 新增的 <a href="https://github.com/ClickHouse/ClickHouse/pull/8290">MergeTreeWriteAheadLog</a> 模块，它到底解决了什么问题。</p><h2 id="高频写问题"><a href="#高频写问题" class="headerlink" title="高频写问题"></a>高频写问题</h2><p>对于 ClickHouse MergeTree 引擎，每次写入(即使１条数据)都会在磁盘生成一个分区目录(part)，等着 merge 线程合并。</p><p>如果有多个客户端，每个客户端写入的数据量较少、次数较频繁的情况下，就会引发 <code>DB::Exception: Too many parts</code> 错误。</p><p>这样就对客户端有一定的要求，比如需要做 batch 写入。</p><p>或者，写入到 Buffer 引擎，定时的刷回 MergeTree，缺点是在宕机时可能会丢失数据。</p><h2 id="MergeTree-WAL"><a href="#MergeTree-WAL" class="headerlink" title="MergeTree WAL"></a>MergeTree WAL</h2><h3 id="1-默认模式"><a href="#1-默认模式" class="headerlink" title="1. 默认模式"></a>1. 默认模式</h3><p>我们先看看在没有 WAL 情况下，MergeTree 是如何写入的：</p><p><img src="mergetree-part-raw.png" alt="mergetree-part-raw.png"></p><p>每次写入 MergeTree 都会直接在磁盘上创建分区目录，并生成分区数据，这种模式其实就是 WAL + 数据的融合。</p><p>很显然，这种模式不适合频繁写操作的情况，否则会生成非常多的分区目录和文件，引发 <code>Too many parts</code> 错误。</p><h3 id="2-WAL-模式"><a href="#2-WAL-模式" class="headerlink" title="2. WAL 模式"></a>2. WAL 模式</h3><p>设置 SETTINGS: <code>min_rows_for_compact_part=2</code>，分别执行２条写 SQL，数据会先写到 wal.bin 文件：</p><p><img src="mergetree-part-wal.png" alt="mergetree-part-wal.png"></p><p>当满足 <code>min_rows_for_compact_part=2</code> 后，merger 线程触发合并操作，生成 <code>1_1_2_1</code> 分区，也就是完成了 wal.bin 里的 <code>1_1_1_0</code> 和 <code>1_2_2_0</code> 两个分区的合并操作。当我们执行第三条 SQL 写入:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> default.mt(a,b,c) <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>数据块(分区)会继续追加到 wal.bin 尾部：</p><p><img src="mergetree-part-wal-merge.png" alt="mergetree-part-wal-merge.png"></p><p>此时，3 条数据分布在两个地方：分区 <code>1_1_2_1</code>， wal.bin 里的 <code>1_3_3_0</code>。</p><p>这样就有一个问题：当我们执行查询的时候，数据是怎么合并的呢？</p><p>MergeTree 使用全局结构 <code>data_parts_indexes</code> 维护分区信息，当服务启动的时候，<code>MergeTreeData::loadDataParts</code>方法：</p><ol><li><code>data_parts_indexes.insert(1_1_2_1)</code></li><li>读取 <code>wal.bin</code>，通过 <code>getActiveContainingPart</code> 判断分区是否已经 merge 到磁盘：<code>1_1_1_0</code> 已经存在, <code>1_2_2_0</code> 已经存在，<code>data_parts_indexes.insert(1_3_3_0)</code></li><li><code>data_parts_indexes:&#123;1_1_2_1,1_3_3_0&#125;</code></li></ol><p>这样，它总是能维护全局的分区信息。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>WAL 功能在 <a href="https://github.com/ClickHouse/ClickHouse/pull/8290">PR＃8290</a> 实现，master 分支已经默认开启。</p><p>MergeTree 通过 WAL 来保护客户端的高频、少量写机制，减少服务端目录和文件数量，让客户端操作尽可能简单、高效。</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> ClickHouse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ClickHouse和他的朋友们 </tag>
            
            <tag> ClickHouse </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> WAL </tag>
            
            <tag> MergeTree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码分析 | ClickHouse和他的朋友们（9）MySQL实时复制与实现</title>
      <link href="/2020/07/28/clickhouse-and-friends-09-mysql-replication/"/>
      <url>/2020/07/28/clickhouse-and-friends-09-mysql-replication/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-07-28 21:50:10</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/07/25/clickhouse-and-friends-parser/">https://bohutang.me/2020/07/25/clickhouse-and-friends-parser/</a><br>以下为正文。</p></blockquote><p><img src="clickhouse-map-2020-materialzemysql.png" alt="clickhouse-map-2020-materialzemysql.png"></p><p>很多人看到标题还以为自己走错了夜场，其实没有。</p><p>ClickHouse 可以挂载为 MySQL 的一个从库 ，先全量再增量的实时同步 MySQL 数据，这个功能可以说是今年最亮眼、最刚需的功能，基于它我们可以轻松的打造一套企业级解决方案，让 OLTP 和 OLAP 的融合从此不再头疼。</p><p>目前支持 MySQL 5.6/5.7/8.0 版本，兼容 Delete/Update 语句，及大部分常用的 DDL 操作。</p><p><a href="https://github.com/ClickHouse/ClickHouse/pull/10851">代码</a>已经合并到 upstream master 分支，预计在 20.8 版本作为 experimental 功能发布。</p><p>毕竟是两个异构生态的融合，仍然有不少的工作要做，同时也期待着社区用户的反馈，以加速迭代。</p><h3 id="代码获取"><a href="#代码获取" class="headerlink" title="代码获取"></a>代码获取</h3><p>获取 <a href="https://github.com/ClickHouse/ClickHouse">clickhouse/master</a> 代码编译即可，方法见 <a href="https://bohutang.me/2020/06/05/clickhouse-and-friends-development/">ClickHouse 和他的朋友们（1）编译、开发、测试</a>…</p><h3 id="MySQL-Master"><a href="#MySQL-Master" class="headerlink" title="MySQL Master"></a>MySQL Master</h3><p>我们需要一个开启 binlog 的 MySQL 作为 master:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -e MYSQL_ROOT_PASSWORD=123 mysql:5.7 mysqld --datadir=/var/lib/mysql --server-id=1 --log-bin=/var/lib/mysql/mysql-bin.log --gtid-mode=ON --enforce-gtid-consistency</span><br></pre></td></tr></table></figure><p>创建数据库和表，并写入数据:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> database ckdb;</span><br><span class="line">mysql<span class="operator">&gt;</span> use ckdb;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> t1(a <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key, b <span class="type">int</span>);</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t1 <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">1</span>),(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> a <span class="operator">|</span> b    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="ClickHouse-Slave"><a href="#ClickHouse-Slave" class="headerlink" title="ClickHouse Slave"></a>ClickHouse Slave</h3><p>目前以 database 为单位进行复制，不同的 database 可以来自不同的 MySQL master，这样就可以实现多个 MySQL 源数据同步到一个 ClickHouse 做 OLAP 分析功能。</p><p>首先开启体验开关:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clickhouse :) <span class="keyword">SET</span> allow_experimental_database_materialize_mysql<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>创建一个复制通道：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">clickhouse :) <span class="keyword">CREATE</span> DATABASE ckdb ENGINE <span class="operator">=</span> MaterializeMySQL(<span class="string">&#x27;172.17.0.2:3306&#x27;</span>, <span class="string">&#x27;ckdb&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">clickhouse :) use ckdb;</span><br><span class="line">clickhouse :) <span class="keyword">show</span> tables;</span><br><span class="line">┌─name─┐</span><br><span class="line">│ t1   │</span><br><span class="line">└──────┘</span><br><span class="line">clickhouse :) <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line">┌─a─┬─b─┐</span><br><span class="line">│ <span class="number">1</span> │ <span class="number">1</span> │</span><br><span class="line">└───┴───┘</span><br><span class="line">┌─a─┬─b─┐</span><br><span class="line">│ <span class="number">2</span> │ <span class="number">2</span> │</span><br><span class="line">└───┴───┘</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> set. Elapsed: <span class="number">0.017</span> sec.</span><br></pre></td></tr></table></figure><p>看下 ClickHouse 的同步位点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat ckdatas/metadata/ckdb/.metadata</span><br><span class="line">Version:1</span><br><span class="line">Binlog File:mysql-bin.000001</span><br><span class="line">Binlog Position:913</span><br><span class="line">Data Version:0</span><br></pre></td></tr></table></figure><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>首先在 MySQL Master 上执行一个删除操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">delete</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> a<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>然后在 ClickHouse Slave 侧查看记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">clickhouse :) <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"></span><br><span class="line">┌─a─┬─b─┐</span><br><span class="line">│ <span class="number">2</span> │ <span class="number">2</span> │</span><br><span class="line">└───┴───┘</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="keyword">rows</span> <span class="keyword">in</span> set. Elapsed: <span class="number">0.032</span> sec.</span><br></pre></td></tr></table></figure><p>此时的 metadata 里 Data Version 已经递增到 2:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat ckdatas<span class="operator">/</span>metadata<span class="operator">/</span>ckdb<span class="operator">/</span>.metadata</span><br><span class="line">Version:<span class="number">1</span></span><br><span class="line">Binlog File:mysql<span class="operator">-</span>bin<span class="number">.000001</span></span><br><span class="line">Binlog Position:<span class="number">1171</span></span><br><span class="line">Data Version:<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><p>MySQL Master:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> a <span class="operator">|</span> b    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> update t1 <span class="keyword">set</span> b<span class="operator">=</span>b<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> a <span class="operator">|</span> b    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>ClickHouse Slave:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">clickhouse :) <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"></span><br><span class="line">┌─a─┬─b─┐</span><br><span class="line">│ <span class="number">2</span> │ <span class="number">3</span> │</span><br><span class="line">└───┴───┘</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="keyword">rows</span> <span class="keyword">in</span> set. Elapsed: <span class="number">0.023</span> sec.</span><br></pre></td></tr></table></figure><h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><h4 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MySQL          8C16G 云主机, 192.168.0.3，基础数据 10188183 条记录</span><br><span class="line">ClickHouse     8C16G 云主机, 192.168.0.4</span><br><span class="line">benchyou       8C8G  云主机, 192.168.0.5, 256并发写, https://github.com/xelabs/benchyou</span><br></pre></td></tr></table></figure><p>性能测试跟硬件环境有较大关系，这里使用的是云主机模式，数据供参考。</p><h4 id="全量性能"><a href="#全量性能" class="headerlink" title="全量性能"></a>全量性能</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span>c16G<span class="operator">-</span>vm :) <span class="keyword">create</span> database sbtest engine<span class="operator">=</span>MaterializeMySQL(<span class="string">&#x27;192.168.0.3:3306&#x27;</span>, <span class="string">&#x27;sbtest&#x27;</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;123&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">8</span>c16G<span class="operator">-</span>vm :) watch lv1;</span><br><span class="line"></span><br><span class="line">WATCH lv1</span><br><span class="line"></span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│       <span class="number">0</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">04</span> │        <span class="number">1</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│ <span class="number">1113585</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">05</span> │        <span class="number">2</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│ <span class="number">2227170</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">07</span> │        <span class="number">3</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│ <span class="number">3340755</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">10</span> │        <span class="number">4</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│ <span class="number">4454340</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">13</span> │        <span class="number">5</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│ <span class="number">5567925</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">16</span> │        <span class="number">6</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│ <span class="number">6681510</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">18</span> │        <span class="number">7</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│ <span class="number">7795095</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">22</span> │        <span class="number">8</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│ <span class="number">8908680</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">25</span> │        <span class="number">9</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌──<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│ <span class="number">10022265</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">28</span> │       <span class="number">10</span> │</span><br><span class="line">└──────────┴─────────────────────┴──────────┘</span><br><span class="line">┌──<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│ <span class="number">10188183</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">28</span> │       <span class="number">11</span> │</span><br><span class="line">└──────────┴─────────────────────┴──────────┘</span><br><span class="line">← Progress: <span class="number">11.00</span> <span class="keyword">rows</span>, <span class="number">220.00</span> B (<span class="number">0.16</span> <span class="keyword">rows</span><span class="operator">/</span>s., <span class="number">3.17</span> B<span class="operator">/</span>s.)</span><br></pre></td></tr></table></figure><p>在这个硬件环境下，全量同步性能大概是 <strong>424507/s</strong>，<strong>42w</strong> 事务每秒。</p><p>因为全量的数据之间没有依赖关系，可以进一步优化成并行，加速同步。</p><p>全量的性能直接决定 ClickHouse slave 坏掉后重建的速度，如果你的 MySQL 有 <strong>10 亿</strong>条数据，大概 <strong>40 分钟</strong>就可以重建完成。</p><h4 id="增量性能-实时同步"><a href="#增量性能-实时同步" class="headerlink" title="增量性能(实时同步)"></a>增量性能(实时同步)</h4><p>在当前配置下，ClickHouse slave 单线程回放消费能力大于 MySQL master 256 并发下生产能力，通过测试可以看到它们保持<strong>实时同步</strong>。</p><p>benchyou 压测数据，<strong>2.1w</strong> 事务/秒(MySQL 在当前环境下 TPS 上不去):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">./bin/benchyou --mysql-host=192.168.0.3 --mysql-user=test --mysql-password=123 --oltp-tables-count=1 --write-threads=256 --read-threads=0</span><br><span class="line"></span><br><span class="line">time            thds               tps     wtps    rtps</span><br><span class="line">[13s]        [r:0,w:256,u:0,d:0]  19962    19962   0</span><br><span class="line"></span><br><span class="line">time            thds               tps     wtps    rtps</span><br><span class="line">[14s]        [r:0,w:256,u:0,d:0]  20415    20415   0</span><br><span class="line"></span><br><span class="line">time            thds               tps     wtps    rtps</span><br><span class="line">[15s]        [r:0,w:256,u:0,d:0]  21131    21131   0</span><br><span class="line"></span><br><span class="line">time            thds               tps     wtps    rtps</span><br><span class="line">[16s]        [r:0,w:256,u:0,d:0]  21606    21606   0</span><br><span class="line"></span><br><span class="line">time            thds               tps     wtps    rtps</span><br><span class="line">[17s]        [r:0,w:256,u:0,d:0]  22505    22505   0</span><br></pre></td></tr></table></figure><p>ClickHouse 侧单线程回放能力，<strong>2.1w</strong> 事务/秒，实时同步：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">150732</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">15</span> │       <span class="number">17</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">155477</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">16</span> │       <span class="number">18</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">160222</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">16</span> │       <span class="number">19</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">164967</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">16</span> │       <span class="number">20</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">169712</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">16</span> │       <span class="number">21</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">174457</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">16</span> │       <span class="number">22</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">179202</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">17</span> │       <span class="number">23</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">183947</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">17</span> │       <span class="number">24</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">188692</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">17</span> │       <span class="number">25</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">193437</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">17</span> │       <span class="number">26</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">198182</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">17</span> │       <span class="number">27</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br></pre></td></tr></table></figure><h3 id="实现机制"><a href="#实现机制" class="headerlink" title="实现机制"></a>实现机制</h3><p>在探讨机制之前，首先需要了解下 MySQL 的 binlog event ，主要有以下几种类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. MYSQL_QUERY_EVENT　　　　-- DDL</span><br><span class="line">2. MYSQL_WRITE_ROWS_EVENT　-- insert数据</span><br><span class="line">3. MYSQL_UPDATE_ROWS_EVENT -- update数据</span><br><span class="line">4. MYSQL_DELETE_ROWS_EVENT -- delete数据</span><br></pre></td></tr></table></figure><p>当一个事务提交后，MySQL 会把执行的 SQL 处理成相应的 binlog event，并持久化到 binlog 文件。</p><p>binlog 是 MySQL 对外输出的重要途径，只要你实现 MySQL Replication Protocol，就可以流式的消费 MySQL 生产的 binlog event，具体协议见 <a href="https://dev.mysql.com/doc/internals/en/replication-protocol.html">Replication Protocol</a>。</p><p>由于历史原因，协议繁琐而诡异，这不是本文重点。</p><p>对于 ClickHouse 消费 MySQL binlog 来说，主要有以下３个难点：</p><ul><li>DDL 兼容</li><li>Delete/Update 支持</li><li>Query 过滤</li></ul><h4 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h4><p>DDL 兼容花费了大量的代码去实现。</p><p>首先，我们看看 MySQL 的表复制到 ClickHouse 后会变成什么样子。</p><p>MySQL master:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> t1\G;</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">       <span class="keyword">Table</span>: t1</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span>: <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t1` (</span><br><span class="line">  `a` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `b` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`a`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>latin1</span><br></pre></td></tr></table></figure><p>ClickHouse slave:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ATTACH <span class="keyword">TABLE</span> t1</span><br><span class="line">(</span><br><span class="line">    `a` Int32,</span><br><span class="line">    `b` Nullable(Int32),</span><br><span class="line">    `_sign` Int8,</span><br><span class="line">    `_version` UInt64</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> ReplacingMergeTree(_version)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> intDiv(a, <span class="number">4294967</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> tuple(a)</span><br><span class="line">SETTINGS index_granularity <span class="operator">=</span> <span class="number">8192</span></span><br></pre></td></tr></table></figure><p>可以看到：</p><ul><li>默认增加了 2 个隐藏字段：<code>_sign</code>(-1 删除, 1 写入) 和 <code>_version</code>(数据版本)</li><li>引擎转换成了 ReplacingMergeTree，以 _version 作为 column version</li><li>原主键字段 a 作为排序和分区键</li></ul><p>这只是一个表的复制，其他还有非常多的 DDL 处理，比如增加列、索引等，感兴趣可以观摩 Parsers/MySQL 下代码。</p><h4 id="Update-和-Delete"><a href="#Update-和-Delete" class="headerlink" title="Update 和 Delete"></a>Update 和 Delete</h4><p>当我们在 MySQL master 执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">delete</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> a<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> update t1 <span class="keyword">set</span> b<span class="operator">=</span>b<span class="operator">+</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>ClickHouse t1 数据（把 <code>_sign</code> 和 <code>_version</code> 一并查询）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">clickhouse :) <span class="keyword">select</span> a,b,_sign, _version <span class="keyword">from</span> t1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a,</span><br><span class="line">    b,</span><br><span class="line">    _sign,</span><br><span class="line">    _version</span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"></span><br><span class="line">┌─a─┬─b─┬─_sign─┬─_version─┐</span><br><span class="line">│ <span class="number">1</span> │ <span class="number">1</span> │     <span class="number">1</span> │        <span class="number">1</span> │</span><br><span class="line">│ <span class="number">2</span> │ <span class="number">2</span> │     <span class="number">1</span> │        <span class="number">1</span> │</span><br><span class="line">└───┴───┴───────┴──────────┘</span><br><span class="line">┌─a─┬─b─┬─_sign─┬─_version─┐</span><br><span class="line">│ <span class="number">1</span> │ <span class="number">1</span> │    <span class="number">-1</span> │        <span class="number">2</span> │</span><br><span class="line">└───┴───┴───────┴──────────┘</span><br><span class="line">┌─a─┬─b─┬─_sign─┬─_version─┐</span><br><span class="line">│ <span class="number">2</span> │ <span class="number">3</span> │     <span class="number">1</span> │        <span class="number">3</span> │</span><br><span class="line">└───┴───┴───────┴──────────┘</span><br></pre></td></tr></table></figure><p>根据返回结果，可以看到是由 3 个 part 组成。</p><p>part1 由 <code>mysql&gt; insert into t1 values(1,1),(2,2)</code> 生成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─a─┬─b─┬─_sign─┬─_version─┐</span><br><span class="line">│ 1 │ 1 │     1 │        1 │</span><br><span class="line">│ 2 │ 2 │     1 │        1 │</span><br><span class="line">└───┴───┴───────┴──────────┘</span><br></pre></td></tr></table></figure><p>part2 由 <code>mysql&gt; delete from t1 where a=1</code> 生成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">┌─a─┬─b─┬─_sign─┬─_version─┐</span><br><span class="line">│ 1 │ 1 │    -1 │        2 │</span><br><span class="line">└───┴───┴───────┴──────────┘</span><br><span class="line">说明：</span><br><span class="line">_sign = -1表明处于删除状态</span><br></pre></td></tr></table></figure><p>part3 由 <code>update t1 set b=b+1</code> 生成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─a─┬─b─┬─_sign─┬─_version─┐</span><br><span class="line">│ 2 │ 3 │     1 │        3 │</span><br><span class="line">└───┴───┴───────┴──────────┘</span><br></pre></td></tr></table></figure><p>使用 final 查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">clickhouse :) <span class="keyword">select</span> a,b,_sign,_version <span class="keyword">from</span> t1 <span class="keyword">final</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a,</span><br><span class="line">    b,</span><br><span class="line">    _sign,</span><br><span class="line">    _version</span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"><span class="keyword">FINAL</span></span><br><span class="line"></span><br><span class="line">┌─a─┬─b─┬─_sign─┬─_version─┐</span><br><span class="line">│ <span class="number">1</span> │ <span class="number">1</span> │    <span class="number">-1</span> │        <span class="number">2</span> │</span><br><span class="line">└───┴───┴───────┴──────────┘</span><br><span class="line">┌─a─┬─b─┬─_sign─┬─_version─┐</span><br><span class="line">│ <span class="number">2</span> │ <span class="number">3</span> │     <span class="number">1</span> │        <span class="number">3</span> │</span><br><span class="line">└───┴───┴───────┴──────────┘</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> set. Elapsed: <span class="number">0.016</span> sec.</span><br></pre></td></tr></table></figure><p>可以看到 ReplacingMergeTree 已经根据 <code>_version</code> 和 OrderBy 对记录进行去重。</p><h4 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h4><p>MySQL master:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> a <span class="operator">|</span> b    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>ClickHouse slave:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">clickhouse :) <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"></span><br><span class="line">┌─a─┬─b─┐</span><br><span class="line">│ <span class="number">2</span> │ <span class="number">3</span> │</span><br><span class="line">└───┴───┘</span><br><span class="line"></span><br><span class="line">clickhouse :) <span class="keyword">select</span> <span class="operator">*</span>,_sign,_version <span class="keyword">from</span> t1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="operator">*</span>,</span><br><span class="line">    _sign,</span><br><span class="line">    _version</span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"></span><br><span class="line">┌─a─┬─b─┬─_sign─┬─_version─┐</span><br><span class="line">│ <span class="number">1</span> │ <span class="number">1</span> │    <span class="number">-1</span> │        <span class="number">2</span> │</span><br><span class="line">│ <span class="number">2</span> │ <span class="number">3</span> │     <span class="number">1</span> │        <span class="number">3</span> │</span><br><span class="line">└───┴───┴───────┴──────────┘</span><br><span class="line">说明：这里还有一条删除记录，_sign为<span class="number">-1</span></span><br></pre></td></tr></table></figure><p>MaterializeMySQL 被定义成一种存储引擎，所以在读取的时候，会根据 <code>_sign</code> 状态进行判断，如果是-1 则是已经删除，进行过滤。</p><h3 id="并行回放"><a href="#并行回放" class="headerlink" title="并行回放"></a>并行回放</h3><p>为什么 MySQL 需要并行回放？</p><p>假设 MySQL master 有 1024 个并发同时写入、更新数据，瞬间产生大量的 binlog event ，MySQL slave 上只有一个线程一个 event 接着一个 event 式回放，于是 MySQL 实现了并行回放功能！</p><p>那么，MySQL slave 回放时能否完全(或接近)模拟出 master 当时的 1024 并发行为呢？</p><p>要想并行首先要解决的就是依赖问题：我们需要 master 标记出哪些 event 可以并行，哪些 event 有先后关系，因为它是第一现场。</p><p>MySQL 通过在 binlog 里增加:</p><ul><li>last_committed，相同则可以并行</li><li>sequece_number，较小先执行，描述先后依赖</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">last_committed=3   sequece_number=4   -- event1</span><br><span class="line">last_committed=4   sequece_number=5   -- event2</span><br><span class="line">last_committed=4   sequece_number=6   -- event3</span><br><span class="line">last_committed=5   sequece_number=7   -- event4</span><br></pre></td></tr></table></figure><p>event2 和 event3 则可以并行，event4 需要等待前面 event 完成才可以回放。</p><p>以上只是一个大体原理，目前 MySQL 有３种并行模式可以选择：</p><ol><li>基于 database 并行</li><li>基于 group commit 并行</li><li>基于主键不冲突的 write set 并行</li></ol><p>最大程度上让 MySQL slave 加速回放，整套机制还是异常复杂的。</p><p>回到 ClickHouse slave 问题，我们采用的单线程回放，延迟已经不是主要问题，这是由它们的机制决定的：</p><ul><li>MySQL slave 回放时，需要把 binlog event 转换成 SQL，然后模拟 master 的写入，这种逻辑复制是导致性能低下的最重要原因。</li><li>而 ClickHouse 在回放上，直接把 binlog event 转换成 底层 block 结构，然后直接写入底层的存储引擎，接近于物理复制，可以理解为把 binlog event 直接回放到 InnoDB 的 page。</li></ul><h3 id="读取最新"><a href="#读取最新" class="headerlink" title="读取最新"></a>读取最新</h3><p>虽然 ClickHouse slave 回放非常快，接近于实时，如何在 ClickHouse slave 上总是读取到最新的数据呢？</p><p>其实非常简单，借助 MySQL binlog GTID 特性，每次读的时候，我们跟 ｍ aster 做一次 executed_gtid 同步，然后等待这些 executed_gtid 回放完毕即可。</p><h3 id="数据一致性"><a href="#数据一致性" class="headerlink" title="数据一致性"></a>数据一致性</h3><p>对一致性要求较高的场景，我们怎么验证 MySQL master 的数据和 ClickHouse slave 的数据一致性呢？</p><p>这块初步想法是提供一个兼容 MySQL checksum 算法的函数，我们只需对比两边的 checksum 值即可。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>ClickHouse 实时复制同步 MySQL 数据是 upstream 2020 的一个 roadmap，在整体构架上比较有挑战一直无人接单，挑战主要来自两方面：</p><ul><li>对 MySQL 复制通道与协议非常熟悉</li><li>对 ClickHouse 整体机制非常熟悉</li></ul><p>这样，在两个本来有点遥远的山头中间架起了一座高速，这条 <a href="https://github.com/ClickHouse/ClickHouse/pull/10851">10851 号</a> 高速由 zhang1024(ClickHouse 侧) 和 BohuTANG(MySQL 复制) 两个修路工联合承建，目前已经合并到 upstream 分支。</p><p>关于同步 MySQL 的数据，目前大家的方案基本都是在中间安置一个 binlog 消费工具，这个工具对 event 进行解析，然后再转换成 ClickHouse 的 SQL 语句，写到 ClickHouse server，链路较长，性能损耗较大。</p><p><a href="https://github.com/ClickHouse/ClickHouse/pull/10851">10851 号</a> 高速是在 ClickHouse 内部实现一套 binlog 消费方案，然后根据 event 解析成 ClickHouse 内部的 block 结构，再直接回写到底层存储引擎，几乎是最高效的一种实现方式，实现与 MySQL 实时同步的能力，让分析更接近现实。</p><p>基于 database 级的复制，实现了多源复制的功能，如果复制通道坏掉，我们只需在 ClickHouse 侧删掉 database 再重建一次即可，非常快速、方便，OLTP+OLAP 就是这么简单！</p><p>要想富，先修路！</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> ClickHouse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> ClickHouse和他的朋友们 </tag>
            
            <tag> ClickHouse </tag>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码分析 | ClickHouse和他的朋友们 (８) 纯手工打造的SQL解析器</title>
      <link href="/2020/07/26/clickhouse-and-friends-08-parser/"/>
      <url>/2020/07/26/clickhouse-and-friends-08-parser/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-07-26 21:55:10</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/07/25/clickhouse-and-friends-parser/">https://bohutang.me/2020/07/25/clickhouse-and-friends-parser/</a><br>以下为正文。</p></blockquote><p>现实生活中的物品一旦被标记为“纯手工打造”，给人的第一感觉就是“上乘之品”，一个字“贵”，比如北京老布鞋。</p><p>但是在计算机世界里，如果有人告诉你 ClickHouse 的 SQL 解析器是纯手工打造的，是不是很惊讶！</p><p>这个问题引起了不少网友的关注，所以本篇聊聊 ClickHouse 的纯手工解析器，看看它们的底层工作机制及优缺点。</p><p>枯燥先从一个 SQL 开始：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> a,b <span class="keyword">FROM</span> t1</span><br></pre></td></tr></table></figure><h2 id="token"><a href="#token" class="headerlink" title="token"></a>token</h2><p>首先对 SQL 里的字符逐个做判断，然后根据其关联性做 token 分割：</p><p><img src="parser.png" alt="parser.png"></p><p>比如连续的 WordChar，那它就是 BareWord，解析函数在 <a href="https://github.com/ClickHouse/ClickHouse/blob/558f9c76306ffc4e6add8fd34c2071b64e914103/src/Parsers/Lexer.cpp#L61">Lexer::nextTokenImpl()</a>，解析调用栈：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DB::Lexer::<span class="built_in">nextTokenImpl</span>() Lexer.cpp:<span class="number">63</span></span><br><span class="line">DB::Lexer::<span class="built_in">nextToken</span>() Lexer.cpp:<span class="number">52</span></span><br><span class="line">DB::Tokens::<span class="keyword">operator</span>[](<span class="keyword">unsigned</span> <span class="keyword">long</span>) TokenIterator.h:<span class="number">36</span></span><br><span class="line">DB::TokenIterator::<span class="built_in">get</span>() TokenIterator.h:<span class="number">62</span></span><br><span class="line">DB::TokenIterator::<span class="keyword">operator</span>-&gt;() TokenIterator.h:<span class="number">64</span></span><br><span class="line">DB::<span class="built_in">tryParseQuery</span>(DB::IParser&amp;, <span class="keyword">char</span> <span class="keyword">const</span>*&amp;, <span class="keyword">char</span> <span class="keyword">const</span>*, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt;&amp;, <span class="keyword">bool</span>, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, <span class="keyword">bool</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>) parseQuery.cpp:<span class="number">224</span></span><br><span class="line">DB::<span class="built_in">parseQueryAndMovePosition</span>(DB::IParser&amp;, <span class="keyword">char</span> <span class="keyword">const</span>*&amp;, <span class="keyword">char</span> <span class="keyword">const</span>*, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, <span class="keyword">bool</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>) parseQuery.cpp:<span class="number">314</span></span><br><span class="line">DB::<span class="built_in">parseQuery</span>(DB::IParser&amp;, <span class="keyword">char</span> <span class="keyword">const</span>*, <span class="keyword">char</span> <span class="keyword">const</span>*, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>) parseQuery.cpp:<span class="number">332</span></span><br><span class="line">DB::<span class="built_in">executeQueryImpl</span>(<span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *, DB::Context &amp;, <span class="keyword">bool</span>, DB::QueryProcessingStage::Enum, <span class="keyword">bool</span>, DB::ReadBuffer *) executeQuery.cpp:<span class="number">272</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">731</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">313</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">150</span></span><br></pre></td></tr></table></figure><h2 id="ast"><a href="#ast" class="headerlink" title="ast"></a>ast</h2><p>token 是最基础的元组，他们之间没有任何关联，只是一堆生冷的词组与符号，所以我们还需对其进行<strong>语法解析</strong>，让这些 token 之间建立一定的关系，达到一个可描述的活力。</p><p>ClickHouse 在解每一个 token 的时候，会根据当前的 token 进行状态空间进行预判（parse 返回 true 则进入子状态空间继续），然后决定状态跳转，比如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN  <span class="comment">-- TokenType::BareWord</span></span><br></pre></td></tr></table></figure><p>逻辑首先会进入 Parsers/ParserQuery.cpp 的 <a href="https://github.com/ClickHouse/ClickHouse/blob/558f9c76306ffc4e6add8fd34c2071b64e914103/src/Parsers/ParserQuery.cpp#L26">ParserQuery::parseImpl</a> 方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> res = query_with_output_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || insert_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || use_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || set_role_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || set_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || system_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || create_user_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || create_role_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || create_quota_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || create_row_policy_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || create_settings_profile_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || drop_access_entity_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || grant_p.<span class="built_in">parse</span>(pos, node, expected);</span><br></pre></td></tr></table></figure><p>这里会对所有 query 类型进行 parse 方法的调用，直到有分支返回 true。</p><p>我们来看<strong>第一层</strong> query_with_output_p.parse <a href="https://github.com/ClickHouse/ClickHouse/blob/558f9c76306ffc4e6add8fd34c2071b64e914103/src/Parsers/ParserQueryWithOutput.cpp#L31">Parsers/ParserQueryWithOutput.cpp</a>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> parsed =</span><br><span class="line">       explain_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || select_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || show_create_access_entity_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || show_tables_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || table_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || describe_table_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || show_processlist_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || create_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || alter_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || rename_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || drop_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || check_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || kill_query_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || optimize_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || watch_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || show_access_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || show_access_entities_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || show_grants_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || show_privileges_p.<span class="built_in">parse</span>(pos, query, expected</span><br></pre></td></tr></table></figure><p>跳进<strong>第二层</strong> explain_p.parse <a href="https://github.com/ClickHouse/ClickHouse/blob/558f9c76306ffc4e6add8fd34c2071b64e914103/src/Parsers/ParserExplainQuery.cpp#L10">ParserExplainQuery::parseImpl</a>状态空间：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ParserExplainQuery::parseImpl</span><span class="params">(Pos &amp; pos, ASTPtr &amp; node, Expected &amp; expected)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ASTExplainQuery::ExplainKind kind;</span><br><span class="line">    <span class="keyword">bool</span> old_syntax = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_ast</span><span class="params">(<span class="string">&quot;AST&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_analyze</span><span class="params">(<span class="string">&quot;ANALYZE&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_explain</span><span class="params">(<span class="string">&quot;EXPLAIN&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_syntax</span><span class="params">(<span class="string">&quot;SYNTAX&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_pipeline</span><span class="params">(<span class="string">&quot;PIPELINE&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_plan</span><span class="params">(<span class="string">&quot;PLAN&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    ... ...</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (s_explain.<span class="built_in">ignore</span>(pos, expected))</span><br><span class="line">    &#123;</span><br><span class="line">       ... ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ... ...</span><br><span class="line"></span><br><span class="line">    ParserSelectWithUnionQuery select_p;</span><br><span class="line">    ASTPtr query;</span><br><span class="line">    <span class="keyword">if</span> (!select_p.<span class="built_in">parse</span>(pos, query, expected))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    ... ...</span><br></pre></td></tr></table></figure><p>s_explain.ignore 方法会进行一个 keyword 解析，解析出 ast node:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="comment">-- keyword</span></span><br></pre></td></tr></table></figure><p>跃进<strong>第三层</strong> select_p.parse <a href="https://github.com/ClickHouse/ClickHouse/blob/558f9c76306ffc4e6add8fd34c2071b64e914103/src/Parsers/ParserSelectWithUnionQuery.cpp#L26">ParserSelectWithUnionQuery::parseImpl</a>状态空间：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ParserSelectWithUnionQuery::parseImpl</span><span class="params">(Pos &amp; pos, ASTPtr &amp; node, Expected &amp; expected)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ASTPtr list_node;</span><br><span class="line"></span><br><span class="line">    <span class="function">ParserList <span class="title">parser</span><span class="params">(std::make_unique&lt;ParserUnionQueryElement&gt;(), std::make_unique&lt;ParserKeyword&gt;(<span class="string">&quot;UNION ALL&quot;</span>), <span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!parser.<span class="built_in">parse</span>(pos, list_node, expected))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>parser.parse 里又调用<strong>第四层</strong> <a href="https://github.com/ClickHouse/ClickHouse/blob/558f9c76306ffc4e6add8fd34c2071b64e914103/src/Parsers/ParserSelectQuery.cpp#L24">ParserSelectQuery::parseImpl</a> 状态空间：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ParserSelectQuery::parseImpl</span><span class="params">(Pos &amp; pos, ASTPtr &amp; node, Expected &amp; expected)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> select_query = std::make_shared&lt;ASTSelectQuery&gt;();</span><br><span class="line">    node = select_query;</span><br><span class="line"></span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_select</span><span class="params">(<span class="string">&quot;SELECT&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_distinct</span><span class="params">(<span class="string">&quot;DISTINCT&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_from</span><span class="params">(<span class="string">&quot;FROM&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_prewhere</span><span class="params">(<span class="string">&quot;PREWHERE&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_where</span><span class="params">(<span class="string">&quot;WHERE&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_group_by</span><span class="params">(<span class="string">&quot;GROUP BY&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_with</span><span class="params">(<span class="string">&quot;WITH&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_totals</span><span class="params">(<span class="string">&quot;TOTALS&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_having</span><span class="params">(<span class="string">&quot;HAVING&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_order_by</span><span class="params">(<span class="string">&quot;ORDER BY&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_limit</span><span class="params">(<span class="string">&quot;LIMIT&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_settings</span><span class="params">(<span class="string">&quot;SETTINGS&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_by</span><span class="params">(<span class="string">&quot;BY&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_rollup</span><span class="params">(<span class="string">&quot;ROLLUP&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_cube</span><span class="params">(<span class="string">&quot;CUBE&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_top</span><span class="params">(<span class="string">&quot;TOP&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_with_ties</span><span class="params">(<span class="string">&quot;WITH TIES&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_offset</span><span class="params">(<span class="string">&quot;OFFSET&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ParserNotEmptyExpressionList <span class="title">exp_list</span><span class="params">(<span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserNotEmptyExpressionList <span class="title">exp_list_for_with_clause</span><span class="params">(<span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserNotEmptyExpressionList <span class="title">exp_list_for_select_clause</span><span class="params">(<span class="literal">true</span>)</span></span>;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!exp_list_for_select_clause.<span class="built_in">parse</span>(pos, select_expression_list, expected))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p><strong>第五层</strong> exp_list_for_select_clause.parse <a href="https://github.com/ClickHouse/ClickHouse/blob/558f9c76306ffc4e6add8fd34c2071b64e914103/src/Parsers/ExpressionListParsers.cpp#L520">ParserExpressionList::parseImpl</a>状态空间继续：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ParserExpressionList::parseImpl</span><span class="params">(Pos &amp; pos, ASTPtr &amp; node, Expected &amp; expected)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">ParserList</span>(</span><br><span class="line">        std::make_unique&lt;ParserExpressionWithOptionalAlias&gt;(allow_alias_without_as_keyword),</span><br><span class="line">        std::make_unique&lt;ParserToken&gt;(TokenType::Comma))</span><br><span class="line">        .<span class="built_in">parse</span>(pos, node, expected);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>… … 写不下去个鸟！</p><p>可以发现，ast parser 的时候，预先构造好状态空间，比如 select 的状态空间:</p><ol><li>expression list</li><li>from tables</li><li>where</li><li>group by</li><li>with …</li><li>order by</li><li>limit</li></ol><p>在一个状态空间內，还可以根据 parse 返回的 bool 判断是否继续进入子状态空间，一直递归解析出整个 ast。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>手工 parser 的好处是代码清晰简洁，每个细节可防可控，以及友好的错误处理，改动起来不会一发动全身。</p><p>缺点是手工成本太高，需要大量的测试来保证其正确性，还需要一些 fuzz 来保证可靠性。</p><p>好在 ClickHouse 已经实现的比较全面，即使有新的需求，在现有基础上修修补补即可。</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> ClickHouse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ClickHouse和他的朋友们 </tag>
            
            <tag> ClickHouse </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> Parser </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码分析 | ClickHouse和他的朋友们（6）MergeTree存储结构</title>
      <link href="/2020/06/30/clickhouse-and-friends-06-merge-tree-disk-layout/"/>
      <url>/2020/06/30/clickhouse-and-friends-06-merge-tree-disk-layout/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-06-30 21:41:12</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/06/26/clickhouse-and-friends-merge-tree-disk-layout/">https://bohutang.me/2020/06/26/clickhouse-and-friends-merge-tree-disk-layout/</a><br>以下为正文。</p></blockquote><p>上篇的 <a href="https://bohutang.me/2020/06/20/clickhouse-and-friends-merge-tree-algo/">存储引擎技术进化与 MergeTree</a> 介绍了存储算法的演进。</p><p>存储引擎是一个数据库的底盘，一定要稳和动力澎湃。</p><p>接下来我们将一起来探索下 ClickHouse MergeTree 列式存储引擎，解构下这台“跑车”最重要的部件。</p><p>所有的存储引擎，无论精良与粗制滥造，最终都是要把数据回写到磁盘，来满足存储和索引目的。</p><p>磁盘文件的构造可以说是算法的物理体现，我们甚至可以通过这些存储结构反推出其算法实现。</p><p>所以，要想深入了解一个存储引擎，最好的入手点是它的磁盘存储结构，然后再反观它的读、写机制就会有一种水到渠成的感觉。</p><p>如果这个分析顺序搞反了，会有一种生硬的感觉，网上大部分教程都是这种“生硬”式教学，本文将直击灵魂从最底层谈起，彻底搞明白４个问题：</p><ol><li>MergeTree 有哪些文件？</li><li>MergeTree 数据如何分布？</li><li>MergeTree 索引如何组织？</li><li>MergeTree 如何利用索引加速？</li></ol><p>话不多说，上表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> default.mt</span><br><span class="line">(</span><br><span class="line">    `a` Int32,</span><br><span class="line">    `b` Int32,</span><br><span class="line">    `c` Int32,</span><br><span class="line">    INDEX `idx_c` (c) TYPE minmax GRANULARITY <span class="number">1</span></span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> MergeTree</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> a</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> b</span><br><span class="line">SETTINGS index_granularity<span class="operator">=</span><span class="number">3</span></span><br></pre></td></tr></table></figure><p>造点数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> default.mt(a,b,c) <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> default.mt(a,b,c) <span class="keyword">values</span>(<span class="number">5</span>,<span class="number">2</span>,<span class="number">2</span>),(<span class="number">5</span>,<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> default.mt(a,b,c) <span class="keyword">values</span>(<span class="number">3</span>,<span class="number">10</span>,<span class="number">4</span>),(<span class="number">3</span>,<span class="number">9</span>,<span class="number">5</span>),(<span class="number">3</span>,<span class="number">8</span>,<span class="number">6</span>),(<span class="number">3</span>,<span class="number">7</span>,<span class="number">7</span>),(<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>),(<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>),(<span class="number">3</span>,<span class="number">4</span>,<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h2 id="磁盘文件"><a href="#磁盘文件" class="headerlink" title="磁盘文件"></a>磁盘文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls ckdatas/data/default/mt/</span><br><span class="line">1_4_4_0  3_6_6_0  5_5_5_0  detached  format_version.txt</span><br></pre></td></tr></table></figure><p>可以看到，生成了 3 个数据目录，每个目录在 ClickHouse 里称作一个分区(part)，目录名的前缀正是我们写入时字段 a 的值: 1,3,5，因为表分区是这样定位的：<code>PARTITION BY a</code>。</p><p>现在我们看看 a=3 分区：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls ckdatas/data/default/mt/3_6_6_0/</span><br><span class="line">a.bin  a.mrk2  b.bin  b.mrk2  c.bin  checksums.txt  c.mrk2  columns.txt  count.txt  minmax_a.idx  partition.dat  primary.idx  skp_idx_idx_c.idx  skp_idx_idx_c.mrk2</span><br></pre></td></tr></table></figure><ul><li><code>*.bin</code> 是列数据文件，按主键排序(ORDER BY)，这里是按照字段 b 进行排序</li><li><code>*.mrk2</code> mark 文件，目的是快速定位 bin 文件数据位置</li><li><code>minmax_a.idx</code> 分区键 min-max 索引文件，目的是加速分区键 a 查找</li><li><code>primay.idx</code> 主键索引文件，目的是加速主键 b 查找</li><li><code>skp_idx_idx_c.*</code> 字段 c 索引文件，目的是加速 c 的查找</li></ul><p>在磁盘上，MergeTree 只有一种物理排序，就是 ORDER BY 的主键序，其他文件(比如 .mrk/.idx)是一种逻辑加速，围绕仅有的一份物理排序，要解决的问题是：</p><p><strong>在以字段 b 物理排序上，如何实现字段 a、字段 c 的快速查找？</strong></p><p>MergeTree 引擎概括起来很简单：<br>整个数据集通过分区字段被划分为多个物理分区，每个分区內又通过逻辑文件围绕仅有的一种物理排序进行加速查找。</p><h2 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h2><h3 id="数据文件"><a href="#数据文件" class="headerlink" title="数据文件"></a>数据文件</h3><p>对于单个物理分区內的存储结构，首先要明确一点，MergeTree 的数据只有一份：<code>*.bin</code>。</p><p>a.bin 是字段 a 的数据，b.bin 是字段 b 的数据，c.bin 是字段 c 的数据，也就是大家熟悉的列存储。</p><p>各个 bin 文件以 b.bin 排序对齐（b 是排序键），如图：<br><img src="merge-tree-bin-without-granule.png" alt="merge-tree-bin-without-granule.png"></p><p>这样会有一个比较严重的问题：<br>如果 <code>*.bin</code> 文件较大，即使读取一行数据，也要加载整个 bin 文件，浪费了大量的 IO，没法忍。</p><h3 id="granule"><a href="#granule" class="headerlink" title="granule"></a>granule</h3><p>高、黑科技来了，ClickHouse MergeTree 把 bin 文件根据颗粒度(GRANULARITY)划分为多个颗粒(granule)，每个 granule 单独压缩存储。</p><p><code>SETTINGS index_granularity=3</code> 表示每 ３ 行数据为一个 granule，分区目前只有 ７ 条数据，所以被划分成 3 个 granule(三个色块)：<br><img src="merge-tree-bin-granule.png" alt="merge-tree-bin-granule.png"></p><p>为方便读取某个 granule，使用 <code>*.mrk</code> 文件记录每个 granule 的 offset，每个 granule 的 header 里会记录一些元信息，用于读取解析:<br><img src="merge-tree-bin-marker.png" alt="merge-tree-bin-marker.png"></p><p>这样，我们就可以根据 ｍ ark 文件，直接定位到想要的 granule，然后对这个单独的 granule 进行读取、校验。</p><p>目前，我们还有缺少一种映射：每个 mark 与字段值之间的对应，哪些值区间落在 mark0，哪些落在 mark1 …？</p><p>有了这个映射，就可以实现最小化读取 granule 来加速查询：</p><ol><li>根据查询条件确定需要哪些 mark</li><li>根据 mark 读取相应的 granule</li></ol><h3 id="存储排序"><a href="#存储排序" class="headerlink" title="存储排序"></a>存储排序</h3><p>在了解 MergeTree 索引机制之前，需要明白以下两点：</p><ol><li>只有一份全量数据，存储在 <code>*.bin</code> 文件</li><li><code>*.bin</code> 按照 ORDER BY 字段降序存储<br><img src="merge-tree-bin-orderby-sort.png" alt="merge-tree-bin-orderby-sort.png"></li></ol><h3 id="稀疏索引"><a href="#稀疏索引" class="headerlink" title="稀疏索引"></a>稀疏索引</h3><p>因为数据只有一份且只有一种物理排序，MergeTree 在索引设计上选择了简单、高效的稀疏索引模式。</p><p>什么是稀疏索引呢？就是从已经排序的全量数据里，间隔性的选取一些点，并记录这些点属于哪个 mark。</p><h4 id="1-primary-index"><a href="#1-primary-index" class="headerlink" title="1. primary index"></a>1. primary index</h4><p>主键索引，可通过<code>[PRIMARY KEY expr]</code>指定，默认是 ORDER BY 字段值。</p><p>注意 ClickHouse primary index 跟 MySQL primary key 不是一个概念。</p><p>在稀疏点的选择上，取每个 granule 最小值：</p><p><img src="merge-tree-primary-key.png" alt="merge-tree-primary-key.png"></p><h4 id="2-skipping-index"><a href="#2-skipping-index" class="headerlink" title="2. skipping index"></a>2. skipping index</h4><p>普通索引。</p><p><code>INDEX idx_c(c) TYPE minmax GRANULARITY 1</code> 针对字段 c 创建一个 minmax 模式索引。</p><p><code>GRANULARITY</code> 是稀疏点选择上的 granule 颗粒度，<code>GRANULARITY 1</code> 表示每 1 个 granule 选取一个：<br><img src="merge-tree-skipping-index-g1.png" alt="merge-tree-skipping-index-g1.png"></p><p>如果定义为<code>GRANULARITY 2</code> ，则 2 个 granule 选取一个：<br><img src="merge-tree-skipping-index-g2.png" alt="merge-tree-skipping-index-g2.png"></p><h4 id="3-partition-minmax-index"><a href="#3-partition-minmax-index" class="headerlink" title="3. partition minmax index"></a>3. partition minmax index</h4><p>针对分区键，MergeTree 还会创建一个 min/max 索引，来加速分区选择。</p><p><img src="merge-tree-minmax-idx.png" alt="merge-tree-minmax-idx.png"></p><h4 id="4-全景图"><a href="#4-全景图" class="headerlink" title="4. 全景图"></a>4. 全景图</h4><p><img src="merge-tree-layout.png" alt="merge-tree-layout.png"></p><h2 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h2><p>现在熟悉了 MergeTree 的存储结构，我们通过几个查询来体验下。</p><h3 id="1-分区键查询"><a href="#1-分区键查询" class="headerlink" title="1. 分区键查询"></a>1. 分区键查询</h3><p>语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> default.mt <span class="keyword">where</span> a<span class="operator">=</span><span class="number">3</span></span><br></pre></td></tr></table></figure><p>查询会直接根据 <code>a=3</code> 定位到单个分区:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;Debug&gt; InterpreterSelectQuery: MergeTreeWhereOptimizer: condition <span class="string">&quot;a = 3&quot;</span> moved to PREWHERE</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): Key condition: unknown</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): MinMax index condition: (column <span class="number">0</span> in [<span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): Selected <span class="number">1</span> parts by a, <span class="number">1</span> parts by key, <span class="number">3</span> marks by primary key, <span class="number">3</span> marks to read from <span class="number">1</span> ranges</span><br><span class="line">┌─a─┬──b─┬──c─┐</span><br><span class="line">│ <span class="number">3</span> │  <span class="number">4</span> │ <span class="number">10</span> │</span><br><span class="line">│ <span class="number">3</span> │  <span class="number">5</span> │  <span class="number">9</span> │</span><br><span class="line">│ <span class="number">3</span> │  <span class="number">6</span> │  <span class="number">8</span> │</span><br><span class="line">│ <span class="number">3</span> │  <span class="number">7</span> │  <span class="number">7</span> │</span><br><span class="line">│ <span class="number">3</span> │  <span class="number">8</span> │  <span class="number">6</span> │</span><br><span class="line">│ <span class="number">3</span> │  <span class="number">9</span> │  <span class="number">5</span> │</span><br><span class="line">│ <span class="number">3</span> │ <span class="number">10</span> │  <span class="number">4</span> │</span><br><span class="line">└───┴────┴────┘</span><br></pre></td></tr></table></figure><h3 id="2-主键索引查询"><a href="#2-主键索引查询" class="headerlink" title="2. 主键索引查询"></a>2. 主键索引查询</h3><p>语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> default.mt <span class="keyword">where</span> b<span class="operator">=</span><span class="number">5</span></span><br></pre></td></tr></table></figure><p>查询会先从 3 个分区读取 prmary.idx，然后定位到只有一个分区符合条件，找到要读取的 mark:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): Key condition: (column <span class="number">0</span> in [<span class="number">5</span>, <span class="number">5</span>])</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): MinMax index condition: unknown</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): Selected <span class="number">3</span> parts by a, <span class="number">1</span> parts by key, <span class="number">1</span> marks by primary key, <span class="number">1</span> marks to read from <span class="number">1</span> ranges</span><br><span class="line">┌─a─┬─b─┬─c─┐</span><br><span class="line">│ <span class="number">3</span> │ <span class="number">5</span> │ <span class="number">9</span> │</span><br><span class="line">└───┴───┴───┘</span><br></pre></td></tr></table></figure><h3 id="3-索引查询"><a href="#3-索引查询" class="headerlink" title="3. 索引查询"></a>3. 索引查询</h3><p>语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> default.mt <span class="keyword">where</span> c<span class="operator">=</span><span class="number">5</span></span><br></pre></td></tr></table></figure><p>查询会先从 3 个分区读取 prmary.idx 和 skp_idx_idx_c.idx 进行 granule 过滤（没用的 drop 掉），然后定位到只有 3_x_x_x 分区的一个 granule 符合条件:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;Debug&gt; InterpreterSelectQuery: MergeTreeWhereOptimizer: condition <span class="string">&quot;b = 5&quot;</span> moved to PREWHERE</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): Key condition: unknown</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): MinMax index condition: unknown</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): Index `idx_c` has dropped <span class="number">1</span> / <span class="number">1</span> granules.</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): Index `idx_c` has dropped <span class="number">1</span> / <span class="number">1</span> granules.</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): Index `idx_c` has dropped <span class="number">2</span> / <span class="number">3</span> granules.</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): Selected <span class="number">3</span> parts by a, <span class="number">1</span> parts by key, <span class="number">5</span> marks by primary key, <span class="number">1</span> marks to read from <span class="number">1</span> ranges</span><br><span class="line">┌─a─┬─b─┬─c─┐</span><br><span class="line">│ <span class="number">3</span> │ <span class="number">9</span> │ <span class="number">5</span> │</span><br><span class="line">└───┴───┴───┘</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文从磁盘存储结构入手，分析 ClickHouse MergeTree 的存储、索引设计。</p><p>只有了解了这些底层机制，我们才好对自己的 SQL 和表结构进行优化，使其执行更加高效。</p><p>ClickHouse MergeTree 设计简单、高效，它首要解决的问题是：在一种物理排序上，如何实现快速查找。</p><p>针对这个问题，ClickHouse 使用稀疏索引来解决。</p><p>在官方 roadmap 上，列举了一个有意思的索引方向：Z-Order Indexing，目的是把多个维度编码到一维存储，当我们给出多维度条件的时候，可以快速定位到这个条件点集的空间位置，目前 ClickHouse 针对这个索引设计暂无进展。</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> ClickHouse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ClickHouse和他的朋友们 </tag>
            
            <tag> ClickHouse </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> MergeTree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码分析 | ClickHouse和他的朋友们（5）存储引擎技术进化与MergeTree</title>
      <link href="/2020/06/22/clickhouse-and-friends-05-merge-tree-algo/"/>
      <url>/2020/06/22/clickhouse-and-friends-05-merge-tree-algo/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-06-22 21:55:10</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/06/20/clickhouse-and-friends-merge-tree-algo/">https://bohutang.me/2020/06/20/clickhouse-and-friends-merge-tree-algo/</a><br>以下为正文。</p></blockquote><p>21 世纪的第二个 10 年，虎哥已经在存储引擎一线奋战近 10 年，由于强大的兴趣驱动，这么多年来几乎不放过 arXiv 上与存储相关的每一篇 paper。</p><p>尤其是看到带有 draft 的 paper 时，有一种乞丐听到“叮当”响时的愉悦。</p><p>看 paper 这玩意就像鉴宝，多数是“赝品”，需要你有“鉴真”的本领，否则今天是张三的算法超越 xx，明儿又是王二的硬件提升了 yy，让你永远跟不上节奏 zz，湮灭在这些没有营养的技术垃圾中，浪费大好青春。</p><p>言归正传，接下来的 3 篇，跟 ClickHouse 的 MergeTree 引擎有关：</p><p><strong>上篇介绍存储引擎的技术演进史</strong>，从”远古”的 B-tree 出发推演到目前主流的技术架构。</p><p><strong><a href="https://bohutang.me/2020/06/26/clickhouse-and-friends-merge-tree-disk-layout/">中篇会从存储结构介绍 MergeTree 原理</a></strong> ，对 ClickHouse MergeTree 有一个深入的认识，如何合理设计来进行科学加速。</p><p><strong>下篇会从 MergeTree 代码出发</strong>，看看 ClickHouse MergeTree 如何实现读、写。</p><p>本文为上篇，先来个热身，相信本篇大部分内容对大家来说都比较陌生，很少人写过。</p><h2 id="地位"><a href="#地位" class="headerlink" title="地位"></a>地位</h2><p>存储引擎(事务型)在一个数据库(DBMS)中的地位如何呢？</p><p>MySQL 的商业成功可以说大部分来自于 InnoDB 引擎，Oracle 收购 InnoDB 比 MySQL 早好几年呢！</p><p>20 年前，能亲手撸一套 <a href="https://en.wikipedia.org/wiki/Algorithms_for_Recovery_and_Isolation_Exploiting_Semantics">ARIES (Algorithms for Recovery and Isolation Exploiting Semantics)</a> 规范引擎，实力还是相当震撼的，相信 Oracle 收购的不仅是 InnoDB 这个引擎，更重要的是人， InnoDB 作者在哪里，在干什么？！</p><p>Fork 出来的 MariaDB 这么多年一直找不到自己的灵魂，在 Server 层磨磨蹭蹭可谓是江河日下，只能四处收购碰碰运气，当年 TokuDB 战斗过的 commit 依在，但这些已经是历史了。</p><p>另，WiredTiger 被 MongoDB 收购并使用，对整个生态所起的作用也是无可估量的，这些发动机引擎对于一辆汽车是非常重要的。</p><p>有人问道，都已经 2020 年了，开发一个存储引擎还这么难吗？不难，但是造出来的未必有 RocksDB 好用？！</p><p>如大家所见，很多的分布式存储引擎都是基于 RocksDB 研发，可谓短期内还算明智的选择。</p><p>从工程角度来看，一个 ACID 引擎要打磨的东西非常之多，到处充斥着人力、钱力、耐心的消耗，一种可能是写到一半就停滞了(如 <a href="https://github.com/BohuTANG/nessDB">nessDB</a>)，还有一种可能是写着写着发现跟 xx 很像，沃茨法克。</p><p>当然，这里并不是鼓励大家都去基于 RocksDB 去构建自己的产品，而是要根据自己的情况去做选择。</p><h2 id="B-tree"><a href="#B-tree" class="headerlink" title="B-tree"></a>B-tree</h2><p>首先要尊称一声大爷，这个大爷年方 50，目前支撑着数据库产业的半壁江山。</p><p>50 年来不变而且人们还没有改变它的意向，这个大爷厉害的很！</p><p>鉴定一个算法的优劣，有一个学派叫 <strong>IO 复杂度分析</strong>，简单推演真假便知。</p><p>下面就用此法分析下 B-tree(traditional b-tree) 的 IO 复杂度，对读、写 IO 一目了然，真正明白读为什么快，写为什么慢，如何优化。</p><p>为了可以愉快的阅读，本文不会做任何公式推导，复杂度分析怎么可能没有公式呢！</p><h3 id="读-IO-分析"><a href="#读-IO-分析" class="headerlink" title="读 IO 分析"></a>读 IO 分析</h3><p>这里有一个 3-level 的 B-tree，每个方块代表一个 page，数字代表 page ID。</p><p><img src="btree-read.png" alt="btree-read.png"></p><p>上图 B-tree 结构是<strong>内存</strong>的一个表现形式，如果我们要读取的记录在 leaf-8 上，read-path 如蓝色箭头所示:</p><p>root-9 –&gt; branch-6 –&gt; leaf-8</p><p>下图是 B-tree 在<strong>磁盘</strong>上的存储形式，meta page 是起点:</p><p><img src="btree-read-disk.png" alt="btree-read-disk.png"></p><p>这样读取的随机 IO (假设内存里没有 page 缓存且 page 存储是随机的)总数就是(蓝色箭头):</p><p>1(meta-10)IO + 1(root-9)IO + 1(branch-6)IO + 1(leaf-8)IO = 4 次 IO，这里忽略一直缓存的 meta 和 root，就是 <strong>2</strong> 次随机 IO。<br>如果磁盘 seek 是 1ms，读取延迟就是 <strong>2ms</strong>。</p><p>通过推演就会发现，B-tree 是一种读优化(Read-Optimized)的数据结构，无论 LSM-tree 还是 Fractal-tree 等在读上只能比它慢，因为读放大(Read Amplification)问题。</p><p>存储引擎算法可谓日新月异，但是大部分都是在跟写优化(Write-Optimized)做斗争，那怕是一个常数项的优化那就是突破，自从 Fractal-tree 突破后再无来者了！</p><h3 id="写-IO-分析"><a href="#写-IO-分析" class="headerlink" title="写 IO 分析"></a>写 IO 分析</h3><p>现在写一条记录到 leaf-8。</p><p><img src="btree-update-raw.png" alt="btree-update-raw.png"></p><p>可以发现，每次写都需要先读取一遍，如上图蓝色路径所示。</p><p>假设这次写入导致 root, branch 都发生了变化，这种 in-place 的更新反映到磁盘上就是：</p><p><img src="btree-update-raw-disk.png" alt="btree-update-raw-disk.png"></p><p>基本是 <strong>2</strong> 次读 IO 和写 <strong>2</strong> 次写 IO+WAL fsync，粗略为 <strong>4</strong> 次随机 IO。</p><p>通过分析发现，B-tree 对写操作不太友好，随机 IO 次数较多，而且 in-place 更新必须增加一个 page 级的 WAL 保证失败回滚，简直是要命。</p><h3 id="Write-Optimized-B-tree"><a href="#Write-Optimized-B-tree" class="headerlink" title="Write-Optimized B-tree"></a>Write-Optimized B-tree</h3><p>说到写优化，在机械盘的年代，大家的方向基本是把随机 IO 转换为顺序 IO，充分发挥磁盘的机械优势，于是出现一种 Append-only B-tree：</p><p><img src="btree-aof.png" alt="btree-aof.png"></p><ol><li>更新生成新的 page(蓝色)</li><li>page 回写磁盘时 append only 到文件末尾</li><li>无需 page WAL，数据不 overwrite，有写放大(Write Amplification)问题，需要做空洞重利用机制</li></ol><p>Append-only B-tree 节省了回写时的 2 次随机 IO，转换为常数级(constant)的 1 次顺序 IO，写性能大幅提升，总结起来就是：</p><blockquote><p><strong>随机变顺序，空间换时间</strong></p></blockquote><p>LSM-tree, Fractal-tree 等写优化算法的核心思想也是这个，只不过其实现机制不同。</p><h2 id="LSM-trees"><a href="#LSM-trees" class="headerlink" title="LSM-trees"></a>LSM-trees</h2><p>随着 LevelDB 的问世，LSM-tree 逐渐被大家所熟知。</p><p>LSM-tree 更像一种思想，模糊了 B-tree 里 tree 的严肃性，通过文件组织成一个更加松散的 tree。</p><p>这里不谈一个具体的 LSM-tree 是 Leveled 还是 Size-tiered，只谈大体思想。</p><p><img src="lsm-tree.png" alt="lsm-tree.png"></p><h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><ol><li>先写入内存的 C0</li><li>后台线程根据规则(Leveled/Sized)进行 merge，C0 –&gt; C1, C1 –&gt; C2 … CL</li><li>写入 C0 即可返回，IO 放到后台的 Merge 过程</li><li>每次 Merge 是硬伤，动作大就抖，动作小性能不好，每次 Merge 的数据流向不明确</li><li>写放大问题</li></ol><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><ol><li>读取 C0</li><li>读取 C1 .. CL</li><li>合并记录返回</li><li>读放大问题</li></ol><h2 id="Fractal-tree"><a href="#Fractal-tree" class="headerlink" title="Fractal-tree"></a>Fractal-tree</h2><p>终于发展到了“终极”优化(目前最先进的索引算法)，Fractal-tree。</p><p>它是在 Append-only B-tree 的基础上，对每个 branch 节点增加了一个 message buffer 作为缓冲，可以看做是 LSM-tree 和 Append-only B-tree 完美合体。</p><p>相对于 LSM-tree 它的优势非常明显:<br>Merge 更加有序，数据流向非常分明，消除了 Merge 的抖动问题，大家一直寻找的 compaction 防抖方案一直存在的！</p><p>这个高科技目前只有 <a href="https://github.com/xelabs/tokudb">TokuDB</a> 在使用，这个算法可以开篇新介，这里不做累述，感兴趣的可以参考原型实现 <a href="https://github.com/BohuTANG/nessDB">nessDB</a>。</p><h2 id="Cache-oblivious"><a href="#Cache-oblivious" class="headerlink" title="Cache-oblivious"></a>Cache-oblivious</h2><p>这个词对于大部分人都是陌生的，不过别怕。</p><p>在存储引擎里，有一个数据结构非常非常重要，它负责 page 数据有序性维护，比如在一个 page 里怎么快速定位到我要的记录。</p><p>在 LevelDB 里使用 skiplist，但大部分引擎使用的是一个有序数组来表示，比如 [1, 2, 3, … 100]，然后使用二分查找。</p><p>大概 10 年前一位内核开发者发表了一篇 &lt;<a href="https://queue.acm.org/detail.cfm?id=1814327">You’re Doing It Wrong</a>&gt;，这个小文讲了一个很有意思的事情：</p><p>数据的组织形式对性能有很大的影响，因为 CPU 有 cache line。</p><p>抛开这篇文章不谈，咱们来看一张“神仙”图：</p><p><img src="veb-layout.png" alt="veb-layout.png"></p><p>这是一个 binary-tree 的 4 种 layout 表示形式，那么哪种 layout 对 CPU cache line 最友好？</p><p>也许你已经猜对了，那就是 van Emde Boas，简称 vEB。</p><p>因为它的相邻数据“扎堆”存储，point-query 和 range-query 的 cache line 可以最大化共享，skiplist 对 cache line 是非常不友好的，还可以更快！</p><p>对于 cache oblivious 数据结构，这里有一个简单的原型实现: <a href="https://github.com/BohuTANG/omt">omt</a></p><h2 id="B-tree-优化魔力象限"><a href="#B-tree-优化魔力象限" class="headerlink" title="B-tree 优化魔力象限"></a>B-tree 优化魔力象限</h2><p>写优化算法从原生的 B-tree 到 Append-only B-tree(代表作 LMDB)，又到 LSM-tree(LevelDB/RocksDB 等)，最后进化到目前最先进的 Fractal-tree (TokuDB)。</p><p>这些算法耗费了很多年才在工程上实现并被认可，研发一款存储引擎缺的不是算法而是“鉴宝”的能力，这个“宝”可能已经躺了几十年了。</p><p>其实，”科学家”们已经总结出一个 B-tree 优化魔力象限:</p><p><img src="btree-optimal-curve.png" alt="btree-optimal-curve.png"></p><p>横坐标是写性能，纵坐标是读性能，B-tree 和 Logging 数据结构分布在曲线的两个极端。</p><p>B-tree 的读性能非常好，但是写性能差。</p><p>Logging 的写性能非常好，但是读性能差(想想我们每次写都把数据追加到文件末尾，是不是很快？但是读…)。</p><p>在它们中间有一个优化曲度(Optimal Curve)。</p><p>在这个曲度上，你可以通过增加/减少一个常数(1-epsilon)来做读和写优化组合，LSM-tree/Fractal-tree 都在这个曲度之上。</p><p><img src="btree-epsilon.png" alt="btree-epsilon.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要讨论事务性引擎的技术演进，其中包含了 IO 复杂度分析，其实这个分析是基于一个 DAM(Disk Access Machine) 模型，这里不再展开。<br>这个模型要解决什么问题呢？</p><p>如果工程中涉及硬件层级关系，比如 Disk / Memory / CPU，数据在 Disk，读取(以 block 为单位)到 Memory，查找计算(cache-line)在 CPU，不同介质间性能差距又非常之大，我们怎么做才能让整体性能更优的问题。</p><p>和当今的硬件相融合，这个模型也一样适用。</p><p>最后回到 ClickHouse 的 MergeTree 引擎，它只使用了本文中的部分优化，实现也比较简洁、高效，毕竟没有事务，撸起来也没啥心理负担。</p><p><strong>随机变顺序，空间换时间</strong>， MergeTree 原理，请听下回分解。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li>[1] <a href="https://www.cs.au.dk/~gerth/papers/cacheoblivious05.pdf">Cache-Oblivious Data Structures</a></li><li>[2] <a href="https://www3.cs.stonybrook.edu/~bender/talks/2013-BenderKuszmaul-xldb-tutorial.pdf">Data Structures and Algorithms for Big Databases</a></li><li>[3] <a href="https://link.springer.com/chapter/10.1007%2F3-540-60220-8_74">The buffer tree: A new technique for optimal I/O-algorithms</a></li><li>[4] <a href="http://www.bzero.se/ldapd/btree.html">how the append-only btree works</a></li><li>[5] <a href="https://www.douban.com/note/269741273/">写优化的数据结构(1):AOF 和 b-tree 之间</a></li><li>[6] <a href="https://www.douban.com/note/269744617/">写优化的数据结构(2):buffered tree</a></li><li>[7] <a href="https://www.douban.com/note/304123656/">存储引擎数据结构优化(1):cpu bound</a></li><li>[8] <a href="https://www.douban.com/note/304349195/">存储引擎数据结构优化(2):io bound</a></li><li>[9] <a href="https://github.com/BohuTANG/nessDB">nessDB</a></li><li>[10] <a href="https://github.com/BohuTANG/omt">omt</a></li></ul><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> ClickHouse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ClickHouse和他的朋友们 </tag>
            
            <tag> ClickHouse </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> B-Tree </tag>
            
            <tag> LSM-Tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码分析 | ClickHouse和他的朋友们（4）Pipeline处理器和调度器</title>
      <link href="/2020/06/12/clickhouse-and-friends-04-processor/"/>
      <url>/2020/06/12/clickhouse-and-friends-04-processor/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-06-12 19:57:10</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/06/11/clickhouse-and-friends-processor/">https://bohutang.me/2020/06/11/clickhouse-and-friends-processor/</a><br>以下为正文。</p></blockquote><p><strong>最后更新: 2020-08-15</strong></p><p>本文谈下 ClickHouse 核心科技：处理器 Processor 和有向无环调度器 DAG Scheduler。</p><p>这些概念并不是 ClickHouse 首创，感兴趣的同学可以关注下 <a href="https://github.com/MaterializeInc/materialize">materialize</a> 的 <a href="https://github.com/TimelyDataflow/timely-dataflow">timely-dataflow</a>，虎哥用 golang 也写过一个<a href="https://github.com/vectorengine/vectorsql/tree/master/src/processors">原型</a>。</p><p>拼的是实现细节，正是这些模块的精良设计，才有了 ClickHous e 整体的高性能。</p><h2 id="Pipeline-问题"><a href="#Pipeline-问题" class="headerlink" title="Pipeline 问题"></a>Pipeline 问题</h2><p>在传统数据库系统中，一个 Query 处理流程大体是:</p><p><img src="processor-plan.png" alt="processor-plan.png"></p><p>其中在 Plan 阶段，往往会增加一个 Pipeline 组装(一个 transformer 代表一次数据处理)：</p><p><img src="processor-transformer.png" alt="processor-transformer.png"></p><p>所有 transformer 被编排成一个流水线(pipeline)，然后交给 executor 串行式执行，每执行一个 transformer 数据集就会被加工并输出，一直到下游的 sinker。</p><p>可以看到，这种模型的优点是<strong>简单</strong>，缺点是<strong>性能低</strong>，无法发挥 CPU 的<strong>并行</strong>能力，通常叫火山模型(<strong>volcano</strong>-style)，对于 OLTP 低延迟来说足够，对于计算密集的 OLAP 来说是远远不够的，CPU 不到 100% 就是犯罪！</p><p>对于上面的例子，如果 transformer1 和 transformer2 没有交集，那么它们就可以并行处理：</p><p><img src="processor-transformer2.png" alt="processor-transformer2.png"></p><p>这样就涉及到一些比较灵魂的问题：</p><ol><li>如何实现 transformer 的灵活编排？</li><li>如何实现 transformer 间的数据同步？</li><li>如何实现 transformer 间的并行调度？</li></ol><h2 id="Processor-和-DAG-Scheduler"><a href="#Processor-和-DAG-Scheduler" class="headerlink" title="Processor 和 DAG Scheduler"></a>Processor 和 DAG Scheduler</h2><h3 id="1-Transformer-编排"><a href="#1-Transformer-编排" class="headerlink" title="1. Transformer 编排"></a>1. Transformer 编排</h3><p>ClickHouse 实现了一系列基础 transformer 模块，见 <a href="https://github.com/ClickHouse/ClickHouse/tree/master/src/Processors/Transforms">src/Processors/Transforms</a>，比如:</p><ul><li>FilterTransform – WHERE 条件过滤</li><li>SortingTransform – ORDER BY 排序</li><li>LimitByTransform – LIMIT 裁剪</li></ul><p>当我们执行:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="type">time</span> <span class="keyword">DESC</span> LIMIT <span class="number">10</span></span><br></pre></td></tr></table></figure><p>对于 ClickHouse 的 QueryPipeline 来说，它会按照以下方式进行编排组装：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">QueryPipeline::<span class="built_in">addSimpleTransform</span>(Source)</span><br><span class="line">QueryPipeline::<span class="built_in">addSimpleTransform</span>(FilterTransform)</span><br><span class="line">QueryPipeline::<span class="built_in">addSimpleTransform</span>(SortingTransform)</span><br><span class="line">QueryPipeline::<span class="built_in">addSimpleTransform</span>(LimitByTransform)</span><br><span class="line">QueryPipeline::<span class="built_in">addSimpleTransform</span>(Sinker)</span><br></pre></td></tr></table></figure><p>这样就实现了 Transformer 的编排，但是执行时数据如何进行同步呢？</p><h3 id="2-Transformer-数据同步"><a href="#2-Transformer-数据同步" class="headerlink" title="2. Transformer 数据同步"></a>2. Transformer 数据同步</h3><p>当 QueryPipeline 进行 transformer 编排时，我们还需要进行更加底层的 DAG 连通构建。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">connect</span>(Source.OutPort, FilterTransform.InPort)</span><br><span class="line"><span class="built_in">connect</span>(FilterTransform.OutPort, SortingTransform.InPort)</span><br><span class="line"><span class="built_in">connect</span>(SortingTransform.OutPort, LimitByTransform.InPort)</span><br><span class="line"><span class="built_in">connect</span>(LimitByTransform.OutPort, Sinker.InPort)</span><br></pre></td></tr></table></figure><p>这样就实现了数据的流向关系，一个 transformer 的 OutPort 对接另外一个的 InPort，就像我们现实中的水管管道一样，接口有 3 通甚至多通。</p><h3 id="3-Transformer-执行调度"><a href="#3-Transformer-执行调度" class="headerlink" title="3. Transformer 执行调度"></a>3. Transformer 执行调度</h3><p>现在管道组装起来了，那么管道内的水如何进行处理和给压流动呢？</p><p>ClickHouse 定义了一套 transform 状态，processor 根据这些状态来实现调度。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title">Status</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    NeedData  <span class="comment">// 等待数据流进入</span></span><br><span class="line">    PortFull, <span class="comment">// 管道流出端阻塞</span></span><br><span class="line">    Finished, <span class="comment">// 完成状态，退出</span></span><br><span class="line">    Ready,    <span class="comment">// 切换到 work 函数，进行逻辑处理</span></span><br><span class="line">    Async,    <span class="comment">// 切换到 schedule 函数，进行异步处理</span></span><br><span class="line">    Wait,     <span class="comment">// 等待异步处理</span></span><br><span class="line">    ExpandPipeline,      <span class="comment">// Pipeline 需要裂变</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当 source 生成数据后，它的状态会设置为 PortFull，意思是等着流入其他 transformer 的 InPort，processor 会开始调度 FilterTransformer(NeedData) 的 Prepare，进行 PullData，然后它的状态设置为 Ready，等待 processor 调度 Work 方法进行数据 Filter 处理，大家就这样靠状态让 processor 去感知，来调度和做状态迁移，直到 Finished 状态。</p><p>这里值得一提的是 ExpandPipeline 状态，它会根据 transformer 的实现，可以把一个 transformer 裂变出更多个 transformer 并行执行，达到一个爆炸效果。</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> number <span class="operator">+</span> <span class="number">1</span> <span class="keyword">FROM</span> t1;</span><br></pre></td></tr></table></figure><p>为了更加深入理解 ClickHouse 的 processor 和 scheduler 机制，我们来一个原生态的 example:</p><ol><li>一个 Source:{0,1,2,3,4}</li><li>AdderTransformer 对每个数字做加 1 操作</li><li>一个 Sinker，输出结果</li></ol><h3 id="1-Source"><a href="#1-Source" class="headerlink" title="1. Source"></a>1. Source</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySource</span> :</span> <span class="keyword">public</span> ISource</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;MySource&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MySource</span>(UInt64 end_)</span><br><span class="line">        : <span class="built_in">ISource</span>(<span class="built_in">Block</span>(&#123;ColumnWithTypeAndName&#123;ColumnUInt64::<span class="built_in">create</span>(), std::make_shared&lt;DataTypeUInt64&gt;(), <span class="string">&quot;number&quot;</span>&#125;&#125;)), <span class="built_in">end</span>(end_)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    UInt64 end;</span><br><span class="line">    <span class="keyword">bool</span> done = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Chunk <span class="title">generate</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (done)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Chunk</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        MutableColumns columns;</span><br><span class="line">        columns.<span class="built_in">emplace_back</span>(ColumnUInt64::<span class="built_in">create</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="number">0U</span>; i &lt; end; i++)</span><br><span class="line">            columns[<span class="number">0</span>]-&gt;<span class="built_in">insert</span>(i);</span><br><span class="line"></span><br><span class="line">        done = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Chunk</span>(std::<span class="built_in">move</span>(columns), end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-MyAddTransform"><a href="#2-MyAddTransform" class="headerlink" title="2. MyAddTransform"></a>2. MyAddTransform</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAddTransformer</span> :</span> <span class="keyword">public</span> IProcessor</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;MyAddTransformer&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MyAddTransformer</span>()</span><br><span class="line">        : <span class="built_in">IProcessor</span>(</span><br><span class="line">            &#123;<span class="built_in">Block</span>(&#123;ColumnWithTypeAndName&#123;ColumnUInt64::<span class="built_in">create</span>(), std::make_shared&lt;DataTypeUInt64&gt;(), <span class="string">&quot;number&quot;</span>&#125;&#125;)&#125;,</span><br><span class="line">            &#123;<span class="built_in">Block</span>(&#123;ColumnWithTypeAndName&#123;ColumnUInt64::<span class="built_in">create</span>(), std::make_shared&lt;DataTypeUInt64&gt;(), <span class="string">&quot;number&quot;</span>&#125;&#125;)&#125;)</span><br><span class="line">        , <span class="built_in">input</span>(inputs.<span class="built_in">front</span>())</span><br><span class="line">        , <span class="built_in">output</span>(outputs.<span class="built_in">front</span>())</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Status <span class="title">prepare</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (output.<span class="built_in">isFinished</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            input.<span class="built_in">close</span>();</span><br><span class="line">            <span class="keyword">return</span> Status::Finished;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!output.<span class="built_in">canPush</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            input.<span class="built_in">setNotNeeded</span>();</span><br><span class="line">            <span class="keyword">return</span> Status::PortFull;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (has_process_data)</span><br><span class="line">        &#123;</span><br><span class="line">            output.<span class="built_in">push</span>(std::<span class="built_in">move</span>(current_chunk));</span><br><span class="line">            has_process_data = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (input.<span class="built_in">isFinished</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            output.<span class="built_in">finish</span>();</span><br><span class="line">            <span class="keyword">return</span> Status::Finished;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!input.<span class="built_in">hasData</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            input.<span class="built_in">setNeeded</span>();</span><br><span class="line">            <span class="keyword">return</span> Status::NeedData;</span><br><span class="line">        &#125;</span><br><span class="line">        current_chunk = input.<span class="built_in">pull</span>(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> Status::Ready;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> num_rows = current_chunk.<span class="built_in">getNumRows</span>();</span><br><span class="line">        <span class="keyword">auto</span> result_columns = current_chunk.<span class="built_in">cloneEmptyColumns</span>();</span><br><span class="line">        <span class="keyword">auto</span> columns = current_chunk.<span class="built_in">detachColumns</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="number">0U</span>; i &lt; num_rows; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> val = columns[<span class="number">0</span>]-&gt;<span class="built_in">getUInt</span>(i);</span><br><span class="line">            result_columns[<span class="number">0</span>]-&gt;<span class="built_in">insert</span>(val+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        current_chunk.<span class="built_in">setColumns</span>(std::<span class="built_in">move</span>(result_columns), num_rows);</span><br><span class="line">        has_process_data = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">InputPort &amp; <span class="title">getInputPort</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> input; &#125;</span><br><span class="line">    <span class="function">OutputPort &amp; <span class="title">getOutputPort</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> output; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">bool</span> has_input = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">bool</span> has_process_data = <span class="literal">false</span>;</span><br><span class="line">    Chunk current_chunk;</span><br><span class="line">    InputPort &amp; input;</span><br><span class="line">    OutputPort &amp; output;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-MySink"><a href="#3-MySink" class="headerlink" title="3. MySink"></a>3. MySink</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySink</span> :</span> <span class="keyword">public</span> ISink</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;MySinker&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MySink</span>() : <span class="built_in">ISink</span>(<span class="built_in">Block</span>(&#123;ColumnWithTypeAndName&#123;ColumnUInt64::<span class="built_in">create</span>(), std::make_shared&lt;DataTypeUInt64&gt;(), <span class="string">&quot;number&quot;</span>&#125;&#125;)) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    WriteBufferFromFileDescriptor out&#123;STDOUT_FILENO&#125;;</span><br><span class="line">    FormatSettings settings;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">consume</span><span class="params">(Chunk chunk)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">size_t</span> rows = chunk.<span class="built_in">getNumRows</span>();</span><br><span class="line">        <span class="keyword">size_t</span> columns = chunk.<span class="built_in">getNumColumns</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> row_num = <span class="number">0</span>; row_num &lt; rows; ++row_num)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">writeString</span>(<span class="string">&quot;prefix-&quot;</span>, out);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">size_t</span> column_num = <span class="number">0</span>; column_num &lt; columns; ++column_num)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (column_num != <span class="number">0</span>)</span><br><span class="line">                    <span class="built_in">writeChar</span>(<span class="string">&#x27;\t&#x27;</span>, out);</span><br><span class="line">                <span class="built_in">getPort</span>()</span><br><span class="line">                    .<span class="built_in">getHeader</span>()</span><br><span class="line">                    .<span class="built_in">getByPosition</span>(column_num)</span><br><span class="line">                    .type-&gt;<span class="built_in">serializeAsText</span>(*chunk.<span class="built_in">getColumns</span>()[column_num], row_num, out, settings);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">writeChar</span>(<span class="string">&#x27;\n&#x27;</span>, out);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        out.<span class="built_in">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-DAG-Scheduler"><a href="#4-DAG-Scheduler" class="headerlink" title="4. DAG Scheduler"></a>4. DAG Scheduler</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">char</span> **)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> source0 = std::make_shared&lt;MySource&gt;(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">auto</span> add0 = std::make_shared&lt;MyAddTransformer&gt;();</span><br><span class="line">    <span class="keyword">auto</span> sinker0 = std::make_shared&lt;MySink&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Connect.</span></span><br><span class="line">    <span class="built_in">connect</span>(source0-&gt;<span class="built_in">getPort</span>(), add0-&gt;<span class="built_in">getInputPort</span>());</span><br><span class="line">    <span class="built_in">connect</span>(add0-&gt;<span class="built_in">getOutputPort</span>(), sinker0-&gt;<span class="built_in">getPort</span>());</span><br><span class="line"></span><br><span class="line">    std::vector&lt;ProcessorPtr&gt; processors = &#123;source0, add0, sinker0&#125;;</span><br><span class="line">    <span class="function">PipelineExecutor <span class="title">executor</span><span class="params">(processors)</span></span>;</span><br><span class="line">    executor.<span class="built_in">execute</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从开发者角度看还是比较复杂，状态迁移还需要开发者自己控制，不过 upstream 已经做了大量的基础工作，比如对 source 的封装 ISource，对 sink 的封装 ISink，还有一个基础的 ISimpleTransform，让开发者在上层使用 processor 时更加容易，可以积木式搭建出自己想要的 pipeline。</p><p>ClickHouse 的 transformer 数据单元是 Chunk，transformer 对上游 OutPort 流过来的 Chunk 进行加工，然后输出给下游的 InPort，图连通式的流水线并行工作，让 CPU 尽量满负荷工作。</p><p>当一个 SQL 被解析成 AST 后，ClickHouse 根据 AST 构建 Query Plan，然后根据 QueryPlan 构建出 pipeline，最后由 processor 负责调度和执行。</p><p>目前，ClickHouse 新版本已经默认开启 QueryPipeline，同时这块代码也在不停的迭代。</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> ClickHouse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ClickHouse和他的朋友们 </tag>
            
            <tag> ClickHouse </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> DAG Scheduler </tag>
            
            <tag> pipeline </tag>
            
            <tag> processor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码分析 | ClickHouse和他的朋友们（3）MySQL Protocol和Write调用栈</title>
      <link href="/2020/06/08/clickhouse-and-friends-03-mysql-protocol-write-stack/"/>
      <url>/2020/06/08/clickhouse-and-friends-03-mysql-protocol-write-stack/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-06-08 19:57:10</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/06/08/clickhouse-and-friends-mysql-protocol-write-stack/">https://bohutang.me/2020/06/08/clickhouse-and-friends-mysql-protocol-write-stack/</a><br>以下为正文。</p></blockquote><p>上篇的<a href="https://dbkernel.github.io/2020/06/07/clickhouse-and-friends-02-mysql-protocol-read-stack/">MySQL Protocol 和 Read 调用</a>里介绍了 ClickHouse 一条查询语句的调用栈，本文继续介绍写的调用栈，开整。</p><h2 id="Write-请求"><a href="#Write-请求" class="headerlink" title="Write 请求"></a><strong>Write 请求</strong></h2><ol><li><p>建表:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test(a UInt8, b UInt8, c UInt8) ENGINE<span class="operator">=</span>MergeTree() <span class="keyword">PARTITION</span> <span class="keyword">BY</span> (a, b) <span class="keyword">ORDER</span> <span class="keyword">BY</span> c;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>写入数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>), (<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="调用栈分析"><a href="#调用栈分析" class="headerlink" title="调用栈分析"></a><strong>调用栈分析</strong></h2><h3 id="1-获取存储引擎-OutputStream"><a href="#1-获取存储引擎-OutputStream" class="headerlink" title="1. 获取存储引擎 OutputStream"></a>1. 获取存储引擎 OutputStream</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DB::StorageMergeTree::<span class="built_in">write</span>(std::__1::shared_ptr&lt;DB::IAST&gt; <span class="keyword">const</span>&amp;, DB::Context <span class="keyword">const</span>&amp;) StorageMergeTree.cpp:<span class="number">174</span></span><br><span class="line">DB::PushingToViewsBlockOutputStream::<span class="built_in">PushingToViewsBlockOutputStream</span>(std::__1::shared_ptr&lt;DB::IStorage&gt; <span class="keyword">const</span>&amp;, DB::Context <span class="keyword">const</span>&amp;, std::__1::shared_ptr&lt;DB::IAST&gt; <span class="keyword">const</span>&amp;, <span class="keyword">bool</span>) PushingToViewsBlockOutputStream.cpp:<span class="number">110</span></span><br><span class="line">DB::InterpreterInsertQuery::<span class="built_in">execute</span>() InterpreterInsertQuery.cpp:<span class="number">229</span></span><br><span class="line">DB::<span class="built_in">executeQueryImpl</span>(<span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *, DB::Context &amp;, <span class="keyword">bool</span>, DB::QueryProcessingStage::Enum, <span class="keyword">bool</span>, DB::ReadBuffer *) executeQuery.cpp:<span class="number">364</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">696</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">311</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">141</span></span><br></pre></td></tr></table></figure><h3 id="2-从-SQL-组装-InputStream"><a href="#2-从-SQL-组装-InputStream" class="headerlink" title="2. 从 SQL 组装 InputStream"></a>2. 从 SQL 组装 InputStream</h3><p><code>(1,1,1), (2,2,2)</code> 如何组装成 inputstream 结构呢？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DB::InputStreamFromASTInsertQuery::<span class="built_in">InputStreamFromASTInsertQuery</span>(std::__1::shared_ptr&lt;DB::IAST&gt; <span class="keyword">const</span>&amp;, DB::ReadBuffer*,</span><br><span class="line">DB::InterpreterInsertQuery::<span class="built_in">execute</span>() InterpreterInsertQuery.cpp:<span class="number">300</span></span><br><span class="line">DB::<span class="built_in">executeQueryImpl</span>(<span class="keyword">char</span> <span class="keyword">const</span>*, <span class="keyword">char</span> <span class="keyword">const</span>*, DB::Context&amp;, <span class="keyword">bool</span>, DB::QueryProcessingStage::Enum, <span class="keyword">bool</span>, DB::ReadBuffer*) executeQuery.cpp:<span class="number">386</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">313</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">150</span></span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.in = std::make_shared&lt;InputStreamFromASTInsertQuery&gt;(query_ptr, <span class="literal">nullptr</span>, query_sample_block, context, <span class="literal">nullptr</span>);</span><br><span class="line">res.in = std::make_shared&lt;NullAndDoCopyBlockInputStream&gt;(res.in, out_streams.<span class="built_in">at</span>(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>通过 NullAndDoCopyBlockInputStream 的 copyData 方法构造出 Block：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">DB::ValuesBlockInputFormat::<span class="built_in">readRow</span>(std::__1::vector&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt; &gt; &gt;&amp;, <span class="keyword">unsigned</span> <span class="keyword">long</span>) ValuesBlockInputFormat.cpp:<span class="number">93</span></span><br><span class="line">DB::ValuesBlockInputFormat::<span class="built_in">generate</span>() ValuesBlockInputFormat.cpp:<span class="number">55</span></span><br><span class="line">DB::ISource::<span class="built_in">work</span>() ISource.cpp:<span class="number">48</span></span><br><span class="line">DB::InputStreamFromInputFormat::<span class="built_in">readImpl</span>() InputStreamFromInputFormat.h:<span class="number">48</span></span><br><span class="line">DB::IBlockInputStream::<span class="built_in">read</span>() IBlockInputStream.cpp:<span class="number">57</span></span><br><span class="line">DB::InputStreamFromASTInsertQuery::<span class="built_in">readImpl</span>() InputStreamFromASTInsertQuery.h:<span class="number">31</span></span><br><span class="line">DB::IBlockInputStream::<span class="built_in">read</span>() IBlockInputStream.cpp:<span class="number">57</span></span><br><span class="line"><span class="keyword">void</span> DB::copyDataImpl&lt;DB::<span class="built_in">copyData</span>(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::atomic&lt;<span class="keyword">bool</span>&gt;*)::$_0&amp;, <span class="built_in"><span class="keyword">void</span></span> (&amp;)(DB::Block <span class="keyword">const</span>&amp;)&gt;(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, DB::<span class="built_in">copyData</span>(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::atomic&lt;<span class="keyword">bool</span>&gt;*)::$_0&amp;, <span class="built_in"><span class="keyword">void</span></span> (&amp;)(DB::Block <span class="keyword">const</span>&amp;)) copyData.cpp:<span class="number">26</span></span><br><span class="line">DB::<span class="built_in">copyData</span>(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::atomic&lt;<span class="keyword">bool</span>&gt;*) copyData.cpp:<span class="number">62</span></span><br><span class="line">DB::NullAndDoCopyBlockInputStream::<span class="built_in">readImpl</span>() NullAndDoCopyBlockInputStream.h:<span class="number">47</span></span><br><span class="line">DB::IBlockInputStream::<span class="built_in">read</span>() IBlockInputStream.cpp:<span class="number">57</span></span><br><span class="line"><span class="keyword">void</span> DB::copyDataImpl&lt;std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;&gt;(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;) copyData.cpp:<span class="number">26</span></span><br><span class="line">DB::<span class="built_in">copyData</span>(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;) copyData.cpp:<span class="number">73</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">785</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">313</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">150</span></span><br></pre></td></tr></table></figure><h3 id="3-组装-OutputStream"><a href="#3-组装-OutputStream" class="headerlink" title="3. 组装 OutputStream"></a>3. 组装 OutputStream</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DB::InterpreterInsertQuery::<span class="built_in">execute</span>() InterpreterInsertQuery.cpp:<span class="number">107</span></span><br><span class="line">DB::<span class="built_in">executeQueryImpl</span>(<span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *, DB::Context &amp;, <span class="keyword">bool</span>, DB::QueryProcessingStage::Enum, <span class="keyword">bool</span>, DB::ReadBuffer *) executeQuery.cpp:<span class="number">364</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">696</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">311</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">141</span></span><br></pre></td></tr></table></figure><p>组装顺序:</p><ol><li>NullAndDoCopyBlockInputStream</li><li>CountingBlockOutputStream</li><li>AddingDefaultBlockOutputStream</li><li>SquashingBlockOutputStream</li><li>PushingToViewsBlockOutputStream</li><li>MergeTreeBlockOutputStream</li></ol><h3 id="4-写入-OutputStream"><a href="#4-写入-OutputStream" class="headerlink" title="4. 写入 OutputStream"></a>4. 写入 OutputStream</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">DB::MergeTreeBlockOutputStream::<span class="built_in">write</span>(DB::Block <span class="keyword">const</span>&amp;) MergeTreeBlockOutputStream.cpp:<span class="number">17</span></span><br><span class="line">DB::PushingToViewsBlockOutputStream::<span class="built_in">write</span>(DB::Block <span class="keyword">const</span>&amp;) PushingToViewsBlockOutputStream.cpp:<span class="number">145</span></span><br><span class="line">DB::SquashingBlockOutputStream::<span class="built_in">finalize</span>() SquashingBlockOutputStream.cpp:<span class="number">30</span></span><br><span class="line">DB::SquashingBlockOutputStream::<span class="built_in">writeSuffix</span>() SquashingBlockOutputStream.cpp:<span class="number">50</span></span><br><span class="line">DB::AddingDefaultBlockOutputStream::<span class="built_in">writeSuffix</span>() AddingDefaultBlockOutputStream.cpp:<span class="number">25</span></span><br><span class="line">DB::CountingBlockOutputStream::<span class="built_in">writeSuffix</span>() CountingBlockOutputStream.h:<span class="number">37</span></span><br><span class="line">DB::copyDataImpl&lt;DB::<span class="built_in">copyData</span>(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::atomic&lt;<span class="keyword">bool</span>&gt;*)::&lt;<span class="built_in">lambda</span>()&gt;&amp;, <span class="built_in"><span class="keyword">void</span></span> (&amp;)(<span class="keyword">const</span> DB::Block&amp;)&gt;(DB::IBlockInputStream &amp;, DB::IBlockOutputStream &amp;, &lt;<span class="built_in">lambda</span>()&gt; &amp;, <span class="built_in"><span class="keyword">void</span></span> (&amp;)(<span class="keyword">const</span> DB::Block &amp;)) copyData.cpp:<span class="number">52</span></span><br><span class="line">DB::<span class="built_in">copyData</span>(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::atomic&lt;<span class="keyword">bool</span>&gt;*) copyData.cpp:<span class="number">138</span></span><br><span class="line">DB::NullAndDoCopyBlockInputStream::<span class="built_in">readImpl</span>() NullAndDoCopyBlockInputStream.h:<span class="number">57</span></span><br><span class="line">DB::IBlockInputStream::<span class="built_in">read</span>() IBlockInputStream.cpp:<span class="number">60</span></span><br><span class="line"><span class="keyword">void</span> DB::copyDataImpl&lt;std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;&gt;(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;) copyData.cpp:<span class="number">29</span></span><br><span class="line">DB::<span class="built_in">copyData</span>(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;) copyData.cpp:<span class="number">154</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">748</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">311</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">141</span></span><br></pre></td></tr></table></figure><p>通过 copyData 方法，让数据在 OutputStream 间层层透传，一直到 MergeTreeBlockOutputStream。</p><h3 id="5-返回-Client"><a href="#5-返回-Client" class="headerlink" title="5. 返回 Client"></a>5. 返回 Client</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DB::MySQLOutputFormat::<span class="built_in">finalize</span>() MySQLOutputFormat.cpp:<span class="number">62</span></span><br><span class="line">DB::IOutputFormat::<span class="built_in">doWriteSuffix</span>() IOutputFormat.h:<span class="number">78</span></span><br><span class="line">DB::OutputStreamToOutputFormat::<span class="built_in">writeSuffix</span>() OutputStreamToOutputFormat.cpp:<span class="number">18</span></span><br><span class="line">DB::MaterializingBlockOutputStream::<span class="built_in">writeSuffix</span>() MaterializingBlockOutputStream.h:<span class="number">22</span></span><br><span class="line"><span class="keyword">void</span> DB::copyDataImpl&lt;std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;&gt;(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;) copyData.cpp:<span class="number">52</span></span><br><span class="line">DB::<span class="built_in">copyData</span>(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;) copyData.cpp:<span class="number">154</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">748</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">311</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">141</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>), (<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>首先内核解析 SQL 语句生成 AST，根据 AST 获取 Interpreter：InterpreterInsertQuery。</p><p>其次 Interpreter 依次添加相应的 OutputStream。</p><p>然后从 InputStream 读取数据，写入到 OutputStream，stream 会层层渗透，一直写到底层的存储引擎。</p><p>最后写入到 Socket Output，返回结果。</p><p>ClickHouse 的 OutputStream 编排还是比较复杂，缺少类似 Pipeline 的调度和编排，但是由于模式比较固化，目前看还算清晰。</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> ClickHouse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> ClickHouse和他的朋友们 </tag>
            
            <tag> ClickHouse </tag>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码分析 | ClickHouse和他的朋友们（2）MySQL Protocol和Read调用栈</title>
      <link href="/2020/06/07/clickhouse-and-friends-02-mysql-protocol-read-stack/"/>
      <url>/2020/06/07/clickhouse-and-friends-02-mysql-protocol-read-stack/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-06-07 17:17:10</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/06/07/clickhouse-and-friends-mysql-protocol-read-stack/">https://bohutang.me/2020/06/07/clickhouse-and-friends-mysql-protocol-read-stack/</a><br>以下为正文。</p></blockquote><p>作为一个 OLAP 的 DBMS 来说，有 2 个端非常重要：</p><ul><li>用户如何方便的链进来，这是入口端<ul><li>ClickHouse 除了自己的 client 外，还提供了 MySQL/PG/GRPC/HTTP 等接入方式</li></ul></li><li>数据如何方便的挂上去，这是数据源端<ul><li>ClickHouse 除了自己的引擎外，还可以挂载 MySQL/Kafka 等外部数据源</li></ul></li></ul><p>这样内外互通，多条朋友多条路，以实现“数据”级的编排能力。</p><p>今天谈的是入口端的 MySQL 协议，也是本系列 ClickHouse 的第一个好朋友，用户可通过 MySQL 客户端或相关 Driver 直接链接到 ClickHouse，进行数据读写等操作。</p><p>本文通过 MySQL 的 Query 请求，借用调用栈来了解下 ClickHouse 的数据读取全过程。</p><h2 id="如何实现？"><a href="#如何实现？" class="headerlink" title="如何实现？"></a><strong>如何实现？</strong></h2><p>入口文件在:<br><a href="https://github.com/ClickHouse/ClickHouse/blob/master/src/Server/MySQLHandler.cpp">MySQLHandler.cpp</a></p><h3 id="握手协议"><a href="#握手协议" class="headerlink" title="握手协议"></a><strong>握手协议</strong></h3><ol><li>MySQLClient 发送 Greeting 数据报文到 MySQLHandler</li><li>MySQLHandler 回复一个 Greeting-Response 报文</li><li>MySQLClient 发送认证报文</li><li>MySQLHandler 对认证报文进行鉴权，并返回鉴权结果</li></ol><p>MySQL Protocol 实现在: <a href="https://github.com/ClickHouse/ClickHouse/blob/master/src/Core/MySQLProtocol.h">Core/MySQLProtocol.h</a></p><blockquote><p>最近的代码中调整为了 <a href="https://github.com/ClickHouse/ClickHouse/blob/master/src/Core/MySQL/PacketsProtocolText.h">Core/MySQL/PacketsProtocolText.h</a></p></blockquote><h3 id="Query-请求"><a href="#Query-请求" class="headerlink" title="Query 请求"></a><strong>Query 请求</strong></h3><p>当认证通过后，就可以进行正常的数据交互了。</p><ol><li><p>当 MySQLClient 发送请求:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> system.numbers LIMIT <span class="number">5</span>;</span><br></pre></td></tr></table></figure></li><li><p>MySQLHandler 的调用栈：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-&gt;MySQLHandler::comQuery -&gt; executeQuery -&gt; pipeline-&gt;execute -&gt; MySQLOutputFormat::consume</span><br></pre></td></tr></table></figure></li><li><p>MySQLClient 接收到结果</p></li></ol><p>在步骤 2 里，executeQuery(executeQuery.cpp)非常重要。</p><p>它是所有前端 Server 和 ClickHouse 内核的接入口，第一个参数是 SQL 文本(‘select 1’)，第二个参数是结果集要发送到哪里去(socket net)。</p><h2 id="调用栈分析"><a href="#调用栈分析" class="headerlink" title="调用栈分析"></a><strong>调用栈分析</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM system.numbers LIMIT 5</span><br></pre></td></tr></table></figure><h3 id="1-获取数据源"><a href="#1-获取数据源" class="headerlink" title="1. 获取数据源"></a>1. 获取数据源</h3><p>StorageSystemNumbers 数据源：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DB::StorageSystemNumbers::<span class="built_in">read</span>(std::__1::vector&lt;std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; &gt; &gt; <span class="keyword">const</span>&amp;, std::__1::shared_ptr&lt;DB::StorageInMemoryMetadata <span class="keyword">const</span>&gt; <span class="keyword">const</span>&amp;, DB::SelectQueryInfo <span class="keyword">const</span>&amp;, DB::Context <span class="keyword">const</span>&amp;, DB::QueryProcessingStage::Enum, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span>) StorageSystemNumbers.cpp:<span class="number">135</span></span><br><span class="line">DB::ReadFromStorageStep::<span class="built_in">ReadFromStorageStep</span>(std::__1::shared_ptr&lt;DB::RWLockImpl::LockHolderImpl&gt;, std::__1::shared_ptr&lt;DB::StorageInMemoryMetadata <span class="keyword">const</span>&gt;&amp;, DB::SelectQueryOptions,</span><br><span class="line">DB::InterpreterSelectQuery::<span class="built_in">executeFetchColumns</span>(DB::QueryProcessingStage::Enum, DB::QueryPlan&amp;, std::__1::shared_ptr&lt;DB::PrewhereInfo&gt; <span class="keyword">const</span>&amp;, std::__1::vector&lt;std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; &gt; &gt; <span class="keyword">const</span>&amp;) memory:<span class="number">3028</span></span><br><span class="line">DB::InterpreterSelectQuery::<span class="built_in">executeFetchColumns</span>(DB::QueryProcessingStage::Enum, DB::QueryPlan&amp;, std::__1::shared_ptr&lt;DB::PrewhereInfo&gt; <span class="keyword">const</span>&amp;, std::__1::vector&lt;std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; &gt; &gt; <span class="keyword">const</span>&amp;) InterpreterSelectQuery.cpp:<span class="number">1361</span></span><br><span class="line">DB::InterpreterSelectQuery::<span class="built_in">executeImpl</span>(DB::QueryPlan&amp;, std::__1::shared_ptr&lt;DB::IBlockInputStream&gt; <span class="keyword">const</span>&amp;, std::__1::optional&lt;DB::Pipe&gt;) InterpreterSelectQuery.cpp:<span class="number">791</span></span><br><span class="line">DB::InterpreterSelectQuery::<span class="built_in">buildQueryPlan</span>(DB::QueryPlan&amp;) InterpreterSelectQuery.cpp:<span class="number">472</span></span><br><span class="line">DB::InterpreterSelectWithUnionQuery::<span class="built_in">buildQueryPlan</span>(DB::QueryPlan&amp;) InterpreterSelectWithUnionQuery.cpp:<span class="number">183</span></span><br><span class="line">DB::InterpreterSelectWithUnionQuery::<span class="built_in">execute</span>() InterpreterSelectWithUnionQuery.cpp:<span class="number">198</span></span><br><span class="line">DB::<span class="built_in">executeQueryImpl</span>(<span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *, DB::Context &amp;, <span class="keyword">bool</span>, DB::QueryProcessingStage::Enum, <span class="keyword">bool</span>, DB::ReadBuffer *) executeQuery.cpp:<span class="number">385</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;,</span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">307</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">141</span></span><br></pre></td></tr></table></figure><p>这里最主要的是 ReadFromStorageStep 函数，从不同 storage 里获取数据源 pipe:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pipes pipes = storage-&gt;<span class="built_in">read</span>(required_columns, metadata_snapshot, query_info, *context, processing_stage, max_block_size, max_streams);</span><br></pre></td></tr></table></figure><h3 id="2-Pipeline-构造"><a href="#2-Pipeline-构造" class="headerlink" title="2. Pipeline 构造"></a>2. Pipeline 构造</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DB::LimitTransform::<span class="built_in">LimitTransform</span>(DB::Block <span class="keyword">const</span>&amp;, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">bool</span>, <span class="keyword">bool</span>, std::__1::vector&lt;DB::SortColumnDescription, std::__1::allocator&lt;DB::SortColumnDescription&gt; &gt;) LimitTransform.cpp:<span class="number">21</span></span><br><span class="line">DB::LimitStep::<span class="built_in">transformPipeline</span>(DB::QueryPipeline&amp;) memory:<span class="number">2214</span></span><br><span class="line">DB::LimitStep::<span class="built_in">transformPipeline</span>(DB::QueryPipeline&amp;) memory:<span class="number">2299</span></span><br><span class="line">DB::LimitStep::<span class="built_in">transformPipeline</span>(DB::QueryPipeline&amp;) memory:<span class="number">3570</span></span><br><span class="line">DB::LimitStep::<span class="built_in">transformPipeline</span>(DB::QueryPipeline&amp;) memory:<span class="number">4400</span></span><br><span class="line">DB::LimitStep::<span class="built_in">transformPipeline</span>(DB::QueryPipeline&amp;) LimitStep.cpp:<span class="number">33</span></span><br><span class="line">DB::ITransformingStep::<span class="built_in">updatePipeline</span>(std::__1::vector&lt;std::__1::unique_ptr&lt;DB::QueryPipeline, std::__1::default_delete&lt;DB::QueryPipeline&gt; &gt;, std::__1::allocator&lt;std::__1::unique_ptr&lt;DB::QueryPipeline, std::__1::default_delete&lt;DB::QueryPipeline&gt; &gt; &gt; &gt;) ITransformingStep.cpp:<span class="number">21</span></span><br><span class="line">DB::QueryPlan::<span class="built_in">buildQueryPipeline</span>() QueryPlan.cpp:<span class="number">154</span></span><br><span class="line">DB::InterpreterSelectWithUnionQuery::<span class="built_in">execute</span>() InterpreterSelectWithUnionQuery.cpp:<span class="number">200</span></span><br><span class="line">DB::<span class="built_in">executeQueryImpl</span>(<span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *, DB::Context &amp;, <span class="keyword">bool</span>, DB::QueryProcessingStage::Enum, <span class="keyword">bool</span>, DB::ReadBuffer *) executeQuery.cpp:<span class="number">385</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">722</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">307</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">141</span></span><br></pre></td></tr></table></figure><h3 id="3-Pipeline-执行"><a href="#3-Pipeline-执行" class="headerlink" title="3. Pipeline 执行"></a>3. Pipeline 执行</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">DB::LimitTransform::<span class="built_in">prepare</span>(std::__1::vector&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::allocator&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::vector&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::allocator&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span>&gt; &gt; <span class="keyword">const</span>&amp;) LimitTransform.cpp:<span class="number">67</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">prepareProcessor</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, std::__1::unique_lock&lt;std::__1::mutex&gt;) PipelineExecutor.cpp:<span class="number">291</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">tryAddProcessorToStackIfUpdated</span>(DB::PipelineExecutor::Edge&amp;, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, <span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">264</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">prepareProcessor</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, std::__1::unique_lock&lt;std::__1::mutex&gt;) PipelineExecutor.cpp:<span class="number">373</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">tryAddProcessorToStackIfUpdated</span>(DB::PipelineExecutor::Edge&amp;, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, <span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">264</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">prepareProcessor</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, std::__1::unique_lock&lt;std::__1::mutex&gt;) PipelineExecutor.cpp:<span class="number">373</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">tryAddProcessorToStackIfUpdated</span>(DB::PipelineExecutor::Edge&amp;, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, <span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">264</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">prepareProcessor</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, std::__1::unique_lock&lt;std::__1::mutex&gt;) PipelineExecutor.cpp:<span class="number">373</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">tryAddProcessorToStackIfUpdated</span>(DB::PipelineExecutor::Edge&amp;, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, <span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">264</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">prepareProcessor</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, std::__1::unique_lock&lt;std::__1::mutex&gt;) PipelineExecutor.cpp:<span class="number">373</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">tryAddProcessorToStackIfUpdated</span>(DB::PipelineExecutor::Edge&amp;, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, <span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">264</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">prepareProcessor</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, std::__1::unique_lock&lt;std::__1::mutex&gt;) PipelineExecutor.cpp:<span class="number">373</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">initializeExecution</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">747</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">executeImpl</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">764</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">execute</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">479</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">833</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">307</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">141</span></span><br></pre></td></tr></table></figure><h3 id="4-Output-执行发送"><a href="#4-Output-执行发送" class="headerlink" title="4. Output 执行发送"></a>4. Output 执行发送</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DB::MySQLOutputFormat::<span class="built_in">consume</span>(DB::Chunk) MySQLOutputFormat.cpp:<span class="number">53</span></span><br><span class="line">DB::IOutputFormat::<span class="built_in">work</span>() IOutputFormat.cpp:<span class="number">62</span></span><br><span class="line">DB::<span class="built_in">executeJob</span>(DB::IProcessor *) PipelineExecutor.cpp:<span class="number">155</span></span><br><span class="line"><span class="built_in"><span class="keyword">operator</span></span>() PipelineExecutor.cpp:<span class="number">172</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">executeStepImpl</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::atomic&lt;<span class="keyword">bool</span>&gt;*) PipelineExecutor.cpp:<span class="number">630</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">executeSingleThread</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">546</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">executeImpl</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">812</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">execute</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">479</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">800</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">311</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">141</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>ClickHouse 的模块化比较清晰，像乐高积木一样可以组合拼装，当我们执行:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> system.numbers LIMIT <span class="number">5</span></span><br></pre></td></tr></table></figure><p>首先内核解析 SQL 语句生成 AST，然后根据 AST 获取数据源 Source，pipeline.Add(Source)。</p><p>其次根据 AST 信息生成 QueryPlan，根据 QueryPlan 再生成相应的 Transform，pipeline.Add(LimitTransform)。</p><p>然后添加 Output Sink 作为数据发送对象，pipeline.Add(OutputSink)。</p><p>执行 pipeline, 各个 Transformer 开始工作。</p><p>ClickHouse 的 Transformer 调度系统叫做 Processor，也是决定性能的重要模块，详情见 <a href="https://bohutang.me/2020/06/11/clickhouse-and-friends-processor/">Pipeline 处理器和调度器</a>。</p><p>ClickHouse 是一辆手动挡的豪华跑车，免费拥有，海啸们！</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> ClickHouse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> ClickHouse和他的朋友们 </tag>
            
            <tag> ClickHouse </tag>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码分析 | ClickHouse和他的朋友们（1）编译、开发、测试</title>
      <link href="/2020/06/05/clickhouse-and-friends-01-development/"/>
      <url>/2020/06/05/clickhouse-and-friends-01-development/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-06-05 19:37:10</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/06/05/clickhouse-and-friends-development/">https://bohutang.me/2020/06/05/clickhouse-and-friends-development/</a><br>以下为正文。</p></blockquote><p>一次偶然的机会，和 ClickHouse 团队做了一次线下沟通，Alexey 提到 ClickHouse 的设计哲学:</p><ol><li>The product must solve actual problem</li><li>And do it better than others</li></ol><p>用工程思维解决商业问题的典范啊！</p><p>对用户来说，他们关心的不是什么天花乱坠、上天入地的高科技，只是需要一个能很好解决自己问题的方案，这在开源社区是非常难得的，靠实力“野蛮式”生长。</p><p>于是，我对这个散发着伏特加味道的利器充满了好奇，并参与到 ClickHouse 的社区中一探究竟，第一感觉是开放、友好、战斗力强(AK47 vs CK16, ClickHouse 2016 年开源)。</p><p>本文先从编译和测试入手，再到如何为社区贡献 Patch，希望对那些想参与 CK 社区的同学有所帮助。</p><h2 id="如何本地编译和测试-ClickHouse？"><a href="#如何本地编译和测试-ClickHouse？" class="headerlink" title="如何本地编译和测试 ClickHouse？"></a><strong>如何本地编译和测试 ClickHouse？</strong></h2><h3 id="源码获取"><a href="#源码获取" class="headerlink" title="源码获取"></a><strong>源码获取</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --recursive https://github.com/ClickHouse/ClickHouse</span><br></pre></td></tr></table></figure><h3 id="编译准备"><a href="#编译准备" class="headerlink" title="编译准备"></a><strong>编译准备</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install build-essential</span><br><span class="line">sudo apt-get install software-properties-common</span><br><span class="line">sudo apt-add-repository ppa:ubuntu-toolchain-r/<span class="built_in">test</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install gcc-9 g++-9 git python ninja-build</span><br><span class="line">sudo snap install cmake</span><br></pre></td></tr></table></figure><h3 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a><strong>开始编译</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ClickHouse</span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"><span class="built_in">export</span> CC=gcc-9</span><br><span class="line"><span class="built_in">export</span> CXX=g++-9</span><br><span class="line">cmake ..</span><br><span class="line">ninja</span><br></pre></td></tr></table></figure><h3 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a><strong>测试方法</strong></h3><p>ClickHouse 的测试在官方<a href="https://github.com/ClickHouse/ClickHouse/blob/master/docs/en/development/tests.md">development/tests</a>文档里有详细的介绍，这里列举 3 个常用的测试模式：</p><h4 id="1-Functional-Tests"><a href="#1-Functional-Tests" class="headerlink" title="1. Functional Tests"></a>1. Functional Tests</h4><p>功能测试，主要用于 ClickHouse 内部功能测试，方式：输入一个 sql 文件，输出一个 result，类似 MySQL 里的 mtr，<a href="https://github.com/ClickHouse/ClickHouse/tree/master/tests/queries">测试集合</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> tests</span><br><span class="line">./clickhouse-test -c <span class="string">&quot;../build/programs/clickhouse-client&quot;</span> 00001_select_1</span><br></pre></td></tr></table></figure><h4 id="2-Integration-Tests"><a href="#2-Integration-Tests" class="headerlink" title="2. Integration Tests"></a>2. Integration Tests</h4><p>集成测试，主要用于涉及第三方服务的测试，比如 MySQL/Postgres/MongoDB 等，以容器化方式编排调度(pytest)运行，<a href="https://github.com/ClickHouse/ClickHouse/tree/master/tests/integration">测试集合</a></p><p>由于涉及模块较多，集成测试环境的搭建有一定的难度，建议使用官方的 docker 镜像。比如要跑 test_mysql_protocol 下的集成测试集：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> tests/integration</span><br><span class="line">docker pull yandex/clickhouse-integration-tests-runner</span><br><span class="line">./runner --binary /your/ClickHouse/build/programs/clickhouse  --bridge-binary /your/ClickHouse/build/programs/clickhouse-odbc-bridge --configs-dir /your/ClickHouse/programs/server/ <span class="string">&#x27;test_mysql_protocol/test.py::test_java_client -ss -vv&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="3-Unit-Tests"><a href="#3-Unit-Tests" class="headerlink" title="3. Unit Tests"></a>3. Unit Tests</h4><p>单元测试，主要用于代码模块的测试，测试集在各个模块的 tests 目录，比如: <a href="https://github.com/ClickHouse/ClickHouse/tree/master/src/Core/tests">Core/tests</a></p><p>如果大家想了解某个模块是如何工作的，强烈建议去翻翻该模块的 tests 目录，比如想了解 processor 的工作机制，跟踪调试 <a href="https://github.com/ClickHouse/ClickHouse/blob/master/src/Processors/tests/processors_test.cpp">Processors/tests/</a> 即可。</p><h2 id="如何给-ClickHouse-社区提-Patch？"><a href="#如何给-ClickHouse-社区提-Patch？" class="headerlink" title="如何给 ClickHouse 社区提 Patch？"></a><strong>如何给 ClickHouse 社区提 Patch？</strong></h2><h4 id="1-fork"><a href="#1-fork" class="headerlink" title="1. fork"></a>1. fork</h4><p>首先在自己的 github 上 fork 一份 ClickHouse 代码，比如 <a href="https://github.com/BohuTANG/ClickHouse">https://github.com/BohuTANG/ClickHouse</a></p><h4 id="2-clone-到本地"><a href="#2-clone-到本地" class="headerlink" title="2. clone 到本地"></a>2. clone 到本地</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/BohuTANG/ClickHouse</span><br><span class="line">git checkout -B mysql_replica(branch名字)</span><br></pre></td></tr></table></figure><h4 id="3-创建新的分支"><a href="#3-创建新的分支" class="headerlink" title="3. 创建新的分支"></a>3. 创建新的分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -B mysql_replica(branch名字)</span><br></pre></td></tr></table></figure><h4 id="4-功能开发"><a href="#4-功能开发" class="headerlink" title="4. 功能开发"></a>4. 功能开发</h4><p>开发者可以提交一个 Draft Pull Request 到官方，github 会显示这个 Pull Request 处于 Draft 状态，官方是无法 Merge 的</p><h4 id="5-can-be-testd-标签"><a href="#5-can-be-testd-标签" class="headerlink" title="5. can be testd 标签"></a>5. can be testd 标签</h4><p>等待 Upstream 打[can be tested]标签，一旦被标记 CI 狂魔们就强势开跑，跑一轮大概需要几十个小时。<br>协助开发者发现一些代码 Style、编译以及测试等错误，这样开发者就可以在自己的分支不停的迭代、修正。<br><img src="github-ck-ci.jpeg" alt="img"></p><p>如果只是修改 typo，这个标签 Upstream 通常不会添加。</p><h4 id="6-开发完毕"><a href="#6-开发完毕" class="headerlink" title="6. 开发完毕"></a>6. 开发完毕</h4><p>开发完成，测试 OK，把 Draft 提升为正式 Pull Request，等待 Upstraem Review。</p><h4 id="7-Merge-到-Master"><a href="#7-Merge-到-Master" class="headerlink" title="7. Merge 到 Master"></a>7. Merge 到 Master</h4><p>如果 Upstream 通过，你的代码会被 Merge 到 Master，恭喜你成为 ClickHouse 贡献者</p><h4 id="8-注意事项"><a href="#8-注意事项" class="headerlink" title="8. 注意事项"></a>8. 注意事项</h4><p>ClickHouse Upstream 迭代非常快，一定要多关注 master 分支进度，尽量保持自己的分支代码与 master 同步。否则 Upstream Docker 更新，自己的 test 可能就过不了。</p><p>建议把<a href="https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/development">doc/development</a>读一遍。</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> ClickHouse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ClickHouse和他的朋友们 </tag>
            
            <tag> ClickHouse </tag>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特性介绍 | MySQL select count(*) 、count(1)、count(列) 详解（1）：概念及区别</title>
      <link href="/2020/05/06/mysql-select-count-functions-01-concepts-and-differences/"/>
      <url>/2020/05/06/mysql-select-count-functions-01-concepts-and-differences/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>本文首发于 2020-05-05 21:55:15</strong></p></blockquote><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>从接触 MySQL 开始断断续续的看过一些文章，对<code>count()</code>操作众说纷纭，其中分歧点主要在于<code>count(1)</code>和<code>count(*)</code>哪个效率高，有说<code>count(1)</code>比<code>count(*)</code>快的（<code>这种说法更普遍</code>），有说二者一样快的。个人理解这两种行为可能适用于的是不同的版本，我只关心较新的 MySQL 版本是什么行为，详见下文。</p><h3 id="二、含义"><a href="#二、含义" class="headerlink" title="二、含义"></a>二、含义</h3><p>首先，先说明一下常见<code>count()</code>操作及含义：</p><blockquote><p><code>count(*)</code>：计算包括 NULL 值在内的行数，SQL92 定义的标准统计行数的语法。</p><p><code>count(1)</code>：计算包括 NULL 值在内的行数，其中的 1 是恒真表达式。</p><p><code>count(列名)</code>：计算指定列的行数，但不包含 NULL 值。</p></blockquote><h3 id="三、具体区别"><a href="#三、具体区别" class="headerlink" title="三、具体区别"></a>三、具体区别</h3><p><a href="https://dev.mysql.com/doc/refman/5.7/en/group-by-functions.html#function_count">MySQL 手册</a>中相关描述如下：</p><blockquote><p>For transactional storage engines such as InnoDB, storing an exact row count is problematic. Multiple transactions may be occurring at the same time, each of which may affect the count.</p><p>InnoDB does not keep an internal count of rows in a table because concurrent transactions might “see” different numbers of rows at the same time. Consequently, <code>SELECT COUNT(*)</code> statements only count rows visible to the current transaction.</p><p>Prior to <code>MySQL 5.7.18</code>, InnoDB processes <code>SELECT COUNT(*)</code> statements by scanning the clustered index. As of <code>MySQL 5.7.18</code>, InnoDB processes <code>SELECT COUNT(*)</code> statements by traversing the smallest available secondary index unless an index or optimizer hint directs the optimizer to use a different index. If a secondary index is not present, the clustered index is scanned.</p><p>Processing <code>SELECT COUNT(*)</code> statements takes some time if index records are not entirely in the buffer pool. For a faster count, create a counter table and let your application update it according to the inserts and deletes it does. However, this method may not scale well in situations where thousands of concurrent transactions are initiating updates to the same counter table. If an approximate row count is sufficient, use <code>SHOW TABLE STATUS</code>.</p><p>InnoDB handles <code>SELECT COUNT(*)</code> and <code>SELECT COUNT(1)</code> operations in the same way. There is no performance difference.</p><p>For <code>MyISAM</code> tables, <code>COUNT(*)</code> is optimized to return very quickly if the SELECT retrieves from one table, no other columns are retrieved, and there is no WHERE clause. For example:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><p>This optimization only applies to MyISAM tables, because an exact row count is stored for this storage engine and can be accessed very quickly.COUNT(1) is only subject to the same optimization if the first column is defined as NOT NULL.</p></blockquote><p><strong>官方这段描述要点如下：</strong></p><blockquote><ol><li> InnoDB 是事务引擎，支持 MVCC，并发事务可能同时“看到”不同的行数，所以，<strong>InnoDB 不保留表中的行数</strong>，<code>SELECT COUNT(*)</code>语句只计算当前事务可见的行数。</li><li> 在 MySQL 5.7.18 之前，InnoDB 通过<strong>扫描聚集索引</strong>处理<code>SELECT COUNT(*)</code>语句。从 MySQL 5.7.18 开始，<code>InnoDB</code>通过<strong>遍历最小的可用二级索引</strong>来处理<code>SELECT COUNT(*)</code>语句，除非索引或优化器明确指示使用不同的索引。<strong>如果不存在二级索引，则扫描聚集索引</strong>。这样的设计单从 IO 的角度就节省了很多开销。</li><li> <strong>InnoDB 以同样的方式处理<code>SELECT COUNT(*)</code>和<code>SELECT COUNT(1)</code>操作，没有性能差异。</strong> 因此，建议使用符合 SQL 标准的<code>count(*)</code>。</li><li> 对于<code>MyISAM</code>表，由于 MyISAM 引擎存储了精确的行数，因此，如果<code>SELECT COUNT(*)</code>语句不包含 WHERE 子句，则会很快返回。这个很好理解，如果带了 where 条件，就需要扫表了。</li><li> 如果索引记录不完全在缓冲池中，则处理<code>SELECT(*)</code>语句需要一些时间。为了更快的计数，您可以创建一个计数器表，并让您的应用程序按插入和删除操作更新它。然而，这种方法在同一计数器表中启动成千上万个并发事务的情况下，可能无法很好地扩展。如果一个近似的行数足够，可以使用<code>SHOW TABLE STATUS</code>查询行数。</li></ol></blockquote><p>到这里我们明白了 <code>count(*)</code> 和 <code>count(1)</code> 本质上面其实是一样的，那么 <code>count(column)</code> 又是怎么回事呢？</p><blockquote><p><code>count(column)</code> 也是会遍历整张表，但是不同的是它会<strong>拿到 column 的值以后判断是否为空，然后再进行累加</strong>，那么如果<strong>针对主键需要解析内容</strong>，如果是<strong>二级索引需要再次根据主键获取内容，则要多一次 IO 操作</strong>，所以 <code>count(column)</code> 的性能肯定不如前两者，如果按照效率比较的话：**count(*)=count(1)&gt;count(primary key)&gt;count(非主键 column)**。</p></blockquote><h3 id="四、建议"><a href="#四、建议" class="headerlink" title="四、建议"></a>四、建议</h3><p>基于以上描述，如果要查询 innodb 存储引擎的表的总行数，有如下建议：</p><ol><li>若仅仅是想获取大概的行数，建议使用<code>show table status</code>或查询<code>information_schema.tables</code>：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use db6;</span><br><span class="line">Reading <span class="keyword">table</span> information <span class="keyword">for</span> completion <span class="keyword">of</span> <span class="keyword">table</span> <span class="keyword">and</span> <span class="keyword">column</span> names</span><br><span class="line">You can turn off this feature <span class="keyword">to</span> <span class="keyword">get</span> a quicker startup <span class="keyword">with</span> <span class="operator">-</span>A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_db6 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br><span class="line"><span class="operator">|</span> t1            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">table</span> status\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">           Name: t1</span><br><span class="line">         Engine: InnoDB</span><br><span class="line">        Version: <span class="number">10</span></span><br><span class="line">     Row_format: <span class="keyword">Dynamic</span></span><br><span class="line">           <span class="keyword">Rows</span>: <span class="number">2</span></span><br><span class="line"> Avg_row_length: <span class="number">8192</span></span><br><span class="line">    Data_length: <span class="number">16384</span></span><br><span class="line">Max_data_length: <span class="number">0</span></span><br><span class="line">   Index_length: <span class="number">0</span></span><br><span class="line">      Data_free: <span class="number">0</span></span><br><span class="line"> Auto_increment: <span class="keyword">NULL</span></span><br><span class="line">    Create_time: <span class="number">2020</span><span class="number">-04</span><span class="number">-21</span> <span class="number">12</span>:<span class="number">00</span>:<span class="number">44</span></span><br><span class="line">    Update_time: <span class="keyword">NULL</span></span><br><span class="line">     Check_time: <span class="keyword">NULL</span></span><br><span class="line">      <span class="keyword">Collation</span>: utf8mb4_general_ci</span><br><span class="line">       Checksum: <span class="keyword">NULL</span></span><br><span class="line"> Create_options:</span><br><span class="line">        Comment:</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_name <span class="operator">=</span> <span class="string">&#x27;t1&#x27;</span>\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">  TABLE_CATALOG: def</span><br><span class="line">   TABLE_SCHEMA: db6</span><br><span class="line">     TABLE_NAME: t1</span><br><span class="line">     TABLE_TYPE: BASE <span class="keyword">TABLE</span></span><br><span class="line">         ENGINE: InnoDB</span><br><span class="line">        VERSION: <span class="number">10</span></span><br><span class="line">     ROW_FORMAT: <span class="keyword">Dynamic</span></span><br><span class="line">     TABLE_ROWS: <span class="number">2</span></span><br><span class="line"> AVG_ROW_LENGTH: <span class="number">8192</span></span><br><span class="line">    DATA_LENGTH: <span class="number">16384</span></span><br><span class="line">MAX_DATA_LENGTH: <span class="number">0</span></span><br><span class="line">   INDEX_LENGTH: <span class="number">0</span></span><br><span class="line">      DATA_FREE: <span class="number">0</span></span><br><span class="line"> AUTO_INCREMENT: <span class="keyword">NULL</span></span><br><span class="line">    CREATE_TIME: <span class="number">2020</span><span class="number">-04</span><span class="number">-21</span> <span class="number">12</span>:<span class="number">00</span>:<span class="number">44</span></span><br><span class="line">    UPDATE_TIME: <span class="keyword">NULL</span></span><br><span class="line">     CHECK_TIME: <span class="keyword">NULL</span></span><br><span class="line">TABLE_COLLATION: utf8mb4_general_ci</span><br><span class="line">       CHECKSUM: <span class="keyword">NULL</span></span><br><span class="line"> CREATE_OPTIONS:</span><br><span class="line">  TABLE_COMMENT:</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ol start="2"><li>反之，如果必须要获取准确的总行数，建议：<blockquote><ol><li><p>创建一个计数器表，并让您的应用程序按插入和删除操作更新它。</p></li><li><p>若业务插入和删除相对较少，也可以考虑缓存到 redis。</p></li></ol></blockquote></li></ol><p>篇幅有限，深入验证、源码分析将在下一篇文章中介绍。</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Select </tag>
            
            <tag> Count </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>捉虫日记 | MySQL 5.7.20 try_acquire_lock_impl 异常导致mysql crash</title>
      <link href="/2020/05/06/mysql-try_acquire_lock_impl-crash-in-5720/"/>
      <url>/2020/05/06/mysql-try_acquire_lock_impl-crash-in-5720/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>本文首发于 2021-03-07 21:13:15</strong></p></blockquote><p><strong>作者：卢文双 资深数据库内核研发</strong></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>近期线上 MySQL 5.7.20 集群不定期（多则三周，短则一两天）出现主库 mysql crash、触发主从切换问题，堆栈信息如下；</p><p><img src="/2020/05/06/mysql-try_acquire_lock_impl-crash-in-5720/try_acquire_lock_impl.jpeg" alt="try_acquire_lock_impl crash 堆栈"></p><p>从堆栈信息可以明显看出，在调用 <code>try_acquire_lock_impl</code> 时触发的 crash。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>在官方 Bug 库未搜到类似问题，转而从代码库入手，搜到对应的 BUG —— <a href="https://github.com/mysql/mysql-server/commit/8bc828b982f678d6b57c1853bbe78080c8f84e84">8bc828b982f678d6b57c1853bbe78080c8f84e84</a>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">BUG<span class="comment">#26502135: MYSQLD SEGFAULTS IN</span></span><br><span class="line"></span><br><span class="line">              MDL_CONTEXT::TRY_ACQUIRE_LOCK_IMPL</span><br><span class="line"></span><br><span class="line">ANALYSIS:</span><br><span class="line">=========</span><br><span class="line">Server sometimes exited when multiple threads tried to</span><br><span class="line">acquire and release metadata locks simultaneously (<span class="keyword">for</span></span><br><span class="line">example, necessary to access a table). The same problem</span><br><span class="line">could have occurred when new objects were registered/</span><br><span class="line">deregistered <span class="keyword">in</span> Performance Schema.</span><br><span class="line"></span><br><span class="line">The problem was caused by a bug <span class="keyword">in</span> LF_HASH - our lock free</span><br><span class="line"><span class="built_in">hash</span> implementation <span class="built_in">which</span> is used by metadata locking</span><br><span class="line">subsystem <span class="keyword">in</span> 5.7 branch. In 5.5 and 5.6 we only use LF_HASH</span><br><span class="line"><span class="keyword">in</span> Performance Schema Instrumentation implementation. So</span><br><span class="line"><span class="keyword">for</span> these versions, the problem was limited to P_S.</span><br><span class="line"></span><br><span class="line">The problem was <span class="keyword">in</span> my_lfind() <span class="keyword">function</span>, <span class="built_in">which</span> searches <span class="keyword">for</span></span><br><span class="line">the specific <span class="built_in">hash</span> element by going through the elements</span><br><span class="line">list. During this search it loads information about element</span><br><span class="line">checked such as key pointer and <span class="built_in">hash</span> value into <span class="built_in">local</span></span><br><span class="line">variables. Then it confirms that they are not corrupted by</span><br><span class="line">concurrent delete operation (<span class="built_in">which</span> will <span class="built_in">set</span> pointer to 0)</span><br><span class="line">by checking <span class="keyword">if</span> element is still <span class="keyword">in</span> the list. The latter</span><br><span class="line">check did not take into account that compiler (and</span><br><span class="line">processor) can reorder reads <span class="keyword">in</span> such a way that load of key</span><br><span class="line">pointer will happen after it, making result of the check</span><br><span class="line">invalid.</span><br><span class="line"></span><br><span class="line">FIX:</span><br><span class="line">====</span><br><span class="line">This patch fixes the problem by ensuring that no such</span><br><span class="line">reordering can take place. This is achieved by using</span><br><span class="line">my_atomic_loadptr() <span class="built_in">which</span> contains compiler and processor</span><br><span class="line">memory barriers <span class="keyword">for</span> the check mentioned above and other</span><br><span class="line">similar places.</span><br><span class="line"></span><br><span class="line">The default (<span class="keyword">for</span> non-Windows systems) implementation of</span><br><span class="line">my_atomic*() relies on old __sync intrisics and implements</span><br><span class="line">my_atomic_loadptr() as read-modify operation. To avoid</span><br><span class="line">scalability/performance penalty associated with addition of</span><br><span class="line">my_atomic_loadptr()<span class="string">&#x27;s we change the my_atomic*() to use</span></span><br><span class="line"><span class="string">newer __atomic intrisics when available. This new default</span></span><br><span class="line"><span class="string">implementation doesn&#x27;</span>t have such a drawback.</span><br></pre></td></tr></table></figure><p><strong>大体含义是：</strong></p><p>当多个线程分别同时获取、释放 metadata locks 时，或者在 Performance Schema 中注册/撤销新的 object 时，可能会触发该问题，导致 mysql server crash。</p><p>该问题是 LF_HASH（Lock-Free Extensible Hash Tables） 的 BUG 引起的，那么 LF_HASH 用在什么地方呢？</p><blockquote><ol><li>在 5.5、5.6 中只用在 Performance Schema Instrumentation 模块。</li><li>在 5.7 中也用于 metadata 加锁模块。</li></ol></blockquote><p>问题出在 my_lfind() 函数中，该函数针对 cursor-&gt;prev 的判断未考虑 CAS，该 patch 通过使用 my_atomic_loadptr() 解决了该问题：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/mysys/lf_hash.c b/mysys/lf_hash.c</span><br><span class="line">index dc019b07bd9.<span class="number">.3</span>a3f665a4f1 <span class="number">100644</span></span><br><span class="line">--- a/mysys/lf_hash.c</span><br><span class="line">+++ b/mysys/lf_hash.c</span><br><span class="line">@@ <span class="number">-1</span>,<span class="number">4</span> +<span class="number">1</span>,<span class="number">4</span> @@</span><br><span class="line">-<span class="comment">/* Copyright (c) 2006, 2016, Oracle and/or its affiliates. All rights reserved.</span></span><br><span class="line"><span class="comment">+/* Copyright (c) 2006, 2017, Oracle and/or its affiliates. All rights reserved.</span></span><br><span class="line"><span class="comment">    This program is free software; you can redistribute it and/or modify</span></span><br><span class="line"><span class="comment">    it under the terms of the GNU General Public License as published by</span></span><br><span class="line"><span class="comment">@@ -83,7 +83,8 @@ retry:</span></span><br><span class="line"><span class="comment">   do &#123; /* PTR() isn&#x27;t necessary below, head is a dummy node */</span></span><br><span class="line">     cursor-&gt;curr= (LF_SLIST *)(*cursor-&gt;prev);</span><br><span class="line">     _lf_pin(pins, <span class="number">1</span>, cursor-&gt;curr);</span><br><span class="line">-  &#125; <span class="keyword">while</span> (*cursor-&gt;prev != (intptr)cursor-&gt;curr &amp;&amp; LF_BACKOFF);</span><br><span class="line">+  &#125; <span class="keyword">while</span> (<span class="built_in">my_atomic_loadptr</span>((<span class="keyword">void</span>**)cursor-&gt;prev) != cursor-&gt;curr &amp;&amp;</span><br><span class="line">+                              LF_BACKOFF);</span><br><span class="line">   <span class="keyword">for</span> (;;)</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="built_in">unlikely</span>(!cursor-&gt;curr))</span><br><span class="line">@@ <span class="number">-97</span>,<span class="number">7</span> +<span class="number">98</span>,<span class="number">7</span> @@ retry:</span><br><span class="line">     cur_hashnr= cursor-&gt;curr-&gt;hashnr;</span><br><span class="line">     cur_key= cursor-&gt;curr-&gt;key;</span><br><span class="line">     cur_keylen= cursor-&gt;curr-&gt;keylen;</span><br><span class="line">-    <span class="keyword">if</span> (*cursor-&gt;prev != (intptr)cursor-&gt;curr)</span><br><span class="line">+    <span class="keyword">if</span> (<span class="built_in">my_atomic_loadptr</span>((<span class="keyword">void</span>**)cursor-&gt;prev) != cursor-&gt;curr)</span><br><span class="line">     &#123;</span><br><span class="line">       (<span class="keyword">void</span>)LF_BACKOFF;</span><br><span class="line">       <span class="keyword">goto</span> retry;</span><br></pre></td></tr></table></figure><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>查看 change log，该问题在<a href="https://dev.mysql.com/doc/relnotes/mysql/5.7/en/news-5-7-22.html">5.7.22</a>版本修复的：</p><blockquote><p>A server exit could result from simultaneous attempts by multiple threads to register and deregister metadata Performance Schema objects, or to acquire and release metadata locks. (Bug #26502135)</p></blockquote><p><strong>升级内核版本到 5.7.29，之后巡检 1 个月，该问题未再出现，问题解决。</strong></p><p><strong>PS：</strong></p><blockquote><p>篇幅有限，在后续文章中会单独分析 MDL、LF_HASH 源码，敬请关注。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> LF_HASH </tag>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特性介绍 | MySQL 自增列详解（1）：自增列概念及使用</title>
      <link href="/2019/12/09/mysql-auto_increment-details-01-concepts-and-usage/"/>
      <url>/2019/12/09/mysql-auto_increment-details-01-concepts-and-usage/</url>
      
        <content type="html"><![CDATA[<p>一直想写一些关于自增列的文章，今天下班比较早，Let’s do this.</p><span id="more"></span><blockquote><p><strong>本文首发于 2019-12-09 19:37:10</strong></p></blockquote><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h3><p>自增列，即 AUTO_INCREMENT，可用于为新的记录生成唯一标识。</p><p><strong>要求：</strong></p><ol><li>AUTO_INCREMENT 是数据列的一种属性，只适用于整数类型数据列。</li><li>AUTO_INCREMENT 数据列必须具备 NOT NULL 属性。</li></ol><h3 id="2-使用方法"><a href="#2-使用方法" class="headerlink" title="2. 使用方法"></a>2. 使用方法</h3><h4 id="2-1-创建含自增列的表"><a href="#2-1-创建含自增列的表" class="headerlink" title="2.1. 创建含自增列的表"></a>2.1. 创建含自增列的表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 不指定 AUTO_INCREMENT 的值，则从1开始</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> t1(a <span class="type">int</span> auto_increment <span class="keyword">primary</span> key,b <span class="type">int</span>);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 手动指定 AUTO_INCREMENT 的值</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> t2(a <span class="type">int</span> auto_increment <span class="keyword">primary</span> key,b <span class="type">int</span>) AUTO_INCREMENT<span class="operator">=</span><span class="number">100</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><h4 id="2-2-插入数据"><a href="#2-2-插入数据" class="headerlink" title="2.2. 插入数据"></a>2.2. 插入数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 不指定自增列</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t1(b) <span class="keyword">values</span>(<span class="number">1</span>),(<span class="number">2</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> a <span class="operator">|</span> b    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 指定自增列</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t1(a,b) <span class="keyword">values</span>(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="2-3-如何查看表的-AUTO-INCREMENT-涨到了多少？"><a href="#2-3-如何查看表的-AUTO-INCREMENT-涨到了多少？" class="headerlink" title="2.3. 如何查看表的 AUTO_INCREMENT 涨到了多少？"></a>2.3. 如何查看表的 AUTO_INCREMENT 涨到了多少？</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span> <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> t1    <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t1` (</span><br><span class="line">  `a` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `b` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`a`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="2-4-插入数据时能否有空洞？"><a href="#2-4-插入数据时能否有空洞？" class="headerlink" title="2.4. 插入数据时能否有空洞？"></a>2.4. 插入数据时能否有空洞？</h4><p>可以的，但要注意 <code>AUTO_INCREMENT 的值一定比自增列当前最大的记录值大</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创造空洞</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t1(a,b) <span class="keyword">values</span>(<span class="number">5</span>,<span class="number">5</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> a <span class="operator">|</span> b    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span> <span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span> <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> t1    <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t1` (</span><br><span class="line">  `a` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `b` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`a`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">6</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="2-5-能否插入重复记录"><a href="#2-5-能否插入重复记录" class="headerlink" title="2.5. 能否插入重复记录"></a>2.5. 能否插入重复记录</h4><p>既然自增列是唯一记录，那么肯定不能插入重复记录。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 尝试插入重复记录</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t1(a,b) <span class="keyword">values</span>(<span class="number">5</span>,<span class="number">5</span>);</span><br><span class="line">ERROR <span class="number">1062</span> (<span class="number">23000</span>): Duplicate entry <span class="string">&#x27;5&#x27;</span> <span class="keyword">for</span> key <span class="string">&#x27;PRIMARY&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="2-6-怎么修改-AUTO-INCREMENT-的值？"><a href="#2-6-怎么修改-AUTO-INCREMENT-的值？" class="headerlink" title="2.6. 怎么修改 AUTO_INCREMENT 的值？"></a>2.6. 怎么修改 AUTO_INCREMENT 的值？</h4><p><strong>注意</strong>：AUTO_INCREMENT 不能小于当前自增列记录的最大值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 尝试将 AUTO_INCREMENT 设为10</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> t1 AUTO_INCREMENT<span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span> <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> t1    <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t1` (</span><br><span class="line">  `a` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `b` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`a`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">10</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 尝试将 AUTO_INCREMENT 设为4</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> t1 AUTO_INCREMENT<span class="operator">=</span><span class="number">4</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 由于自增列最大记录值是5，那么 AUTO_INCREMENT 不能小于5，因此该值为6</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span> <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> t1    <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t1` (</span><br><span class="line">  `a` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `b` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`a`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">6</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-问题"><a href="#3-问题" class="headerlink" title="3. 问题"></a>3. 问题</h3><h4 id="3-1-自增列是否有上限？"><a href="#3-1-自增列是否有上限？" class="headerlink" title="3.1. 自增列是否有上限？"></a>3.1. 自增列是否有上限？</h4><p><strong>由上文可见，自增列会一直增加，那是否有上限呢？</strong></p><p>上文中表 t1 的自增列是 int 类型，由下表（MySQL 5.7）可见取值范围是 -2147483648 到 2147483647（ -2<sup>31</sup> ~ 2<sup>31</sup> - 1 ）。</p><table><thead><tr><th>Type</th><th>Storage (Bytes)</th><th>Minimum Value Signed</th><th>Minimum Value Unsigned</th><th>Maximum Value Signed</th><th>Maximum Value Unsigned</th></tr></thead><tbody><tr><td><code>TINYINT</code></td><td>1</td><td>-128</td><td>0</td><td>127</td><td>255</td></tr><tr><td><code>SMALLINT</code></td><td>2</td><td>-32768</td><td>0</td><td>32767</td><td>65535</td></tr><tr><td><code>MEDIUMINT</code></td><td>3</td><td>-8388608</td><td>0</td><td>8388607</td><td>16777215</td></tr><tr><td><code>INT</code></td><td>4</td><td>-2147483648</td><td>0</td><td>2147483647</td><td>4294967295</td></tr><tr><td><code>BIGINT</code></td><td>8</td><td>-2<sup>63</sup></td><td>0</td><td>2<sup>63</sup>-1</td><td>2<sup>64</sup>-1</td></tr></tbody></table><p>验证如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span> <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> t1    <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t1` (</span><br><span class="line">  `a` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `b` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`a`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2147483644</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t1(b) <span class="keyword">values</span>(<span class="number">0</span>),(<span class="number">0</span>),(<span class="number">0</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t1(b) <span class="keyword">values</span>(<span class="number">0</span>);</span><br><span class="line">ERROR <span class="number">1062</span> (<span class="number">23000</span>): Duplicate entry <span class="string">&#x27;2147483647&#x27;</span> <span class="keyword">for</span> key <span class="string">&#x27;PRIMARY&#x27;</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span> <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> t1    <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t1` (</span><br><span class="line">  `a` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `b` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`a`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2147483647</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>这里需要补充说明下 <code>int(11)</code> 中的数字的含义：</p><blockquote><ul><li>MySQL 中整数数据类型后面的(N)指定<strong>显示宽度</strong>。</li><li>显示宽度不影响查询出来的结果。</li><li>显示宽度限制了小数点的位置(只要实际数字不超过显示宽度，这种情况下，数字显示为原样)。</li><li>显示宽度也是一个有用的工具，可以让开发人员知道应该将值填充到哪个长度。</li></ul></blockquote><h4 id="3-2-如何避免自增列超过最大值？"><a href="#3-2-如何避免自增列超过最大值？" class="headerlink" title="3.2. 如何避免自增列超过最大值？"></a>3.2. 如何避免自增列超过最大值？</h4><p>可以采用<code>无符号的 BIGINT 类型</code>（也可根据业务产生自增列的速度采用合适的类型），能极大提升自增列的范围。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> t2(a <span class="type">bigint</span> unsigned <span class="keyword">primary</span> key auto_increment,b <span class="type">int</span>);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> t2 auto_increment<span class="operator">=</span><span class="number">18446744073709551613</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> t2;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span> <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                                    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> t2    <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t2` (</span><br><span class="line">  `a` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `b` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`a`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">18446744073709551613</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t2(b) <span class="keyword">values</span>(<span class="number">0</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t2(b) <span class="keyword">values</span>(<span class="number">0</span>);</span><br><span class="line">ERROR <span class="number">1467</span> (HY000): Failed <span class="keyword">to</span> read auto<span class="operator">-</span>increment <span class="keyword">value</span> <span class="keyword">from</span> storage engine</span><br><span class="line">mysql<span class="operator">&gt;</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t2;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+------+</span></span><br><span class="line"><span class="operator">|</span> a                    <span class="operator">|</span> b    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">18446744073709551613</span> <span class="operator">|</span>    <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong><code>UNSIGNED BIGINT</code> 类型的范围究竟有多大呢？</strong></p><blockquote><p>假如每秒自增 100 万次，想要消耗完需要 <code>18446744073709551613/1000000/3600/24/365</code>=584942 年。</p></blockquote><p><strong>有的朋友会问如果自增列不是采用 BIGINT 类型，那么达到最大值后该表就无法写入，此时该怎么办呢？</strong></p><blockquote><p>一般达到最大值后再次插入数据会报错<code>ERROR 1467 (HY000): Failed to read auto-increment value from storage engine</code>，可以通过 alter table 将自增列的类型设为数值范围更大的类型（比如 BIGINT）。</p></blockquote><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h3><ol><li>AUTO_INCREMENT 列必定唯一，且仅用于整型类型。</li><li>AUTO_INCREMENT 列会持续增长，不会因 delete 自增列最大的记录而变小。</li><li>当 AUTO_INCREMENT 列达到当前类型的最大值后将无法插入数据，会报错<code>ERROR 1467 (HY000): Failed to read auto-increment value from storage engine</code>，此时将自增列改为 BIGINT 类型可解决问题。</li><li>为了避免自增列达到最大值，可将其设为 BIGINT 类型。</li><li>使用 alter table 修改 AUTO_INCREMENT 列时，其值会取<code>自增列当前最大记录值+1</code>与<code>将要设置的值</code>的最大值。</li><li>在 MySQL 5.7 中，将列设置成 AUTO_INCREMENT 之后，必须将其设置成主键/或者是主键的一部分，否则会报错<code>ERROR 1075 (42000): Incorrect table definition; there can be only one auto column and it must be defined as a key</code>。</li></ol><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> auto_increment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>引擎特性 | MySQL MEMORY(HEAP) 存储引擎导致 Slave 节点有本地事务</title>
      <link href="/2019/04/22/mysql-memory-engine-slave-has-local-transactions/"/>
      <url>/2019/04/22/mysql-memory-engine-slave-has-local-transactions/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p><strong>本文首发于 2019-04-22 20:56:52</strong></p></blockquote><p><strong>作者：卢文双 资深数据库内核研发</strong></p><h2 id="1-MEMORY-引擎简介"><a href="#1-MEMORY-引擎简介" class="headerlink" title="1. MEMORY 引擎简介"></a>1. MEMORY 引擎简介</h2><p>可能有的朋友对 MEMORY 存储引擎不太了解，首先介绍一下（以下描述来自<a href="https://dev.mysql.com/doc/refman/5.7/en/memory-storage-engine.html">官方</a>）：</p><ol><li>MEMROY 存储引擎（以前称为 HEAP）的表<strong>把表结构存放到磁盘上，而把数据放在内存中</strong>。</li><li>每个 Memory 表只实际对应一个磁盘文件，在磁盘中表现为.frm 文件。因为它的数据是放在内存中的，并且默认使用 <code>hash索引</code>（也支持 B-Tree 索引），因此 Memory 类型的表访问速度非常快（比使用 B-Tree 索引的 MyISAM 表快），但是 <code>一旦服务关闭，表中的数据就会丢失</code>。</li><li>由于 MEMRORY 表在 mysqld 重启后数据会丢失，为了获得稳定的数据源，可以在启动 mysqld 时添加 <code>--init-file</code>选项，把类似 <code>insert into ... select</code>或 <code>load data</code>的语句放进去。</li><li>MEMROY 存储引擎的典型适用场景包含如下特征：<ol><li>涉及瞬态非关键数据的操作，如会话管理或缓存。</li><li>数据可以完全放入内存而不会导致操作系统交换虚拟内存页，并且要求快速访问。</li><li>只读或以读为主的数据访问模式（有限的更新）。</li></ol></li><li>关于性能：<ol><li>在处理更新时，单线程执行和表锁开销导致的争用会限制 MEMORY 性能。</li><li>尽管 MEMORY 表在内存中进行处理，但是对于繁忙的服务器、通用查询或读/写工作负载，它们并不一定比 InnoDB 表快。特别是，执行更新所涉及的表锁定会降低多个会话中内存表的并发使用速度。</li></ol></li><li>MEMORY 表具有以下特征：<ol><li>MEMORY 表的空间以小块形式分配。表对插入使用 100%动态哈希，不需要占用额外的内存。</li><li>被删除的行并未释放，而是放在链表中，并在插入新数据时重用。</li><li>MEMORY 表使用固定长度的行存储数据。（即使是 VARCHAR 也不例外）</li><li>MEMORY 表不支持 BLOB、TEXT 列。</li><li>MEMORY 表支持 AUTO_INCREMENT 列。</li></ol></li><li>MEMORY 表是有大小限制的，主要受限于两个参数：<code> max_heap_table_size</code> 和 <code>MAX_ROWS</code>（默认情况下 <code>MAX_ROWS</code>依赖于 <code>max_heap_table_size</code>，可执行 <code>ALTER TABLE tbl_name MAX_ROWS= MAX_ROWS</code>修改 <code>MAX_ROWS</code>）。</li></ol><p><strong>问：MEMORY 表和临时表有什么区别？</strong></p><blockquote><ol><li>临时表默认使用的存储引擎是服务器指定的存储引擎（对于 5.7 是 InnoDB），由于临时表定义和数据都放在内存中，未放到磁盘，因此用 <code>show tables</code>招不到临时表。</li><li>如果临时表占用空间太大，MySQL 会将其转为磁盘存储。而对于用户创建的 MEMORY 表，则不会转为磁盘存储。</li></ol></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> temporary <span class="keyword">table</span> temp_t1(a <span class="type">int</span> <span class="keyword">primary</span> key, b <span class="type">int</span>);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_db4 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br><span class="line"><span class="operator">|</span> t1            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="2-故障分析"><a href="#2-故障分析" class="headerlink" title="2. 故障分析"></a>2. 故障分析</h2><p><strong>现象：</strong></p><p>最近碰到有用户使用 MEMORY 存储引擎，引发主从 GTID 不一致、从节点 GTID 比主节点多一条的情况。</p><p><strong>分析：</strong></p><ol><li>检查日志，确认没有发生过主从切换，也就排除了 <code>主节点有 prepare 的事务然后故障（从节点变为主）、重启导致 local commit</code>的情况。</li><li>在从节点 binlog 中找到那条本地事务，发现是 MEMORY 表的 <code>DELETE FROM</code> 。</li><li>该从节点发生过重启，根据 MEMORY 引擎的特性，确认是 MEMORY 表生成的。</li></ol><p>向用户反馈问题原因后，用户将 MEMORY 表改为了 InnoDB 表。</p><h2 id="3-疑问"><a href="#3-疑问" class="headerlink" title="3. 疑问"></a>3. 疑问</h2><h3 id="3-1-何时生成-DELETE-FROM？"><a href="#3-1-何时生成-DELETE-FROM？" class="headerlink" title="3.1. 何时生成 DELETE FROM？"></a>3.1. 何时生成 <code>DELETE FROM</code>？</h3><blockquote><p>A server’s <code>MEMORY</code> tables become empty when it is shut down and restarted. If the server is a replication master, its slaves are not aware that these tables have become empty, so you see out-of-date content if you select data from the tables on the slaves. To synchronize master and slave <code>MEMORY</code> tables, when a <code>MEMORY</code> table is used on a master for the first time since it was started, a <a href="https://dev.mysql.com/doc/refman/5.7/en/delete.html"><code>DELETE</code></a> statement is written to the master’s binary log, to empty the table on the slaves also. The slave still has outdated data in the table during the interval between the master’s restart and its first use of the table. To avoid this interval when a direct query to the slave could return stale data, use the <a href="https://dev.mysql.com/doc/refman/5.7/en/server-options.html#option_mysqld_init-file"><code>--init-file</code></a> option to populate the <code>MEMORY</code> table on the master at startup.</p></blockquote><p>这段描述的含义是：</p><blockquote><ol><li>服务器的 MEMORY 表在关闭和重新启动时会变为空。</li><li>为了防止主服务器重启、从服务器未重启导致从服务器上有过期的 MEMORY 表数据，会在重启服务器时向 binlog 写入一条 <code>DELETE FROM</code> 语句，这条语句会复制到从节点，以达到主从数据一致的目的。</li></ol></blockquote><h3 id="3-2-对于主从复制的-MySQL-集群，主或从故障重启有什么问题？"><a href="#3-2-对于主从复制的-MySQL-集群，主或从故障重启有什么问题？" class="headerlink" title="3.2. 对于主从复制的 MySQL 集群，主或从故障重启有什么问题？"></a>3.2. 对于主从复制的 MySQL 集群，主或从故障重启有什么问题？</h3><blockquote><p><strong>PS：不想看过程的朋友，请跳到最后看总结。</strong></p></blockquote><p>举例来说，集群有三个节点 A、B、C，节点 A 为主节点。</p><p><strong>情形一：MEMORY 表有数据的情况下，重启主节点、触发主从切换：</strong></p><ol><li>创建 <code>MEMORY</code> 表 <code>mdb.t1</code> ，执行 <code>insert into mdb.t1 values(1,1),(2,2),(3,3),(4,4)</code> 插入一些数据。</li><li>关闭节点 A 的 MySQL，节点 B 变为主，之后节点 A 以从节点启动，此时：</li></ol><ul><li><strong>节点 A 无数据：</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mdb.t1;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li><strong>节点 B、C 有数据：</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mdb.t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="operator">|</span> a    <span class="operator">|</span> b    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>并且，节点 A 的 GTID 为 <code>uuid_a:1-11</code>，节点 B、C 的 GTID 为 <code>uuid_a:1-10</code>，节点 A 的 binlog 比另外两个节点多一条 <code>DELTE FROM mdb.t1</code>。</p><p><strong>情形二：MEMORY 表无数据的情况下，重启主节点、触发主从切换：</strong></p><ol><li>将节点 A 切换为主节点，节点 B、C 同步了 <code>uuid_a:1-11</code> 这条事务，三个节点的 <code>mdb.t1</code> 数据为空。</li><li>关闭节点 A 的 MySQL，节点 B 变为主，之后节点 A 以从节点启动，此时，节点 A 生成了一条本地 <code>DELETE FROM</code> 事务 <code>uuid_b:1-12</code>。</li></ol><p><strong>情形三：MEMORY 表无数据的情况下，重启从节点：</strong></p><ol><li>将节点 A 切换为主节点，节点 B、C 同步了 <code>uuid_a:1-12</code> 这条事务</li><li>重启节点 A 的 MySQL，节点 A 生成一条本地 <code>DELETE FROM</code> 事务 <code>uuid_a:1-13</code>。</li></ol><p><strong>情形四：MEMORY 表有数据的情况下，重启从节点：</strong></p><ol><li>将节点 A 切换为主节点，另外两个节点同步节点 A 的本地事务，三个节点 GTID 为 <code>uuid_a:1-13</code> 。</li><li>执行 <code>INSERT</code> 语句向 <code>mdb.t1</code> 插入一些数据，三个节点 GTID 为 <code>uuid_a:1-14</code>。</li><li>重启节点 B，其生成了一条本地 <code>DELETE FROM</code> 事务 <code>uuid_b:1</code>。</li></ol><h3 id="3-3-总结"><a href="#3-3-总结" class="headerlink" title="3.3. 总结"></a>3.3. 总结</h3><ol><li>测试发现，无论什么情况下，MEMORY 存储引擎都会生成一条本地 <code>DELETE FROM</code> 事务。</li><li>在某些情况下，必须主动访问（比如 <code>SELECT</code>）MEMORY 表，才会触发生成 <code>DELETE FROM</code>。</li><li>最重要的一点，<code>在生产环境中千万不要使用MEMORY存储引擎</code>。</li></ol><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> MEMORY引擎 </tag>
            
            <tag> HEAP引擎 </tag>
            
            <tag> 本地事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特性介绍 | Linux 操作系统启动流程</title>
      <link href="/2018/09/16/process-for-starting-the-linux-os/"/>
      <url>/2018/09/16/process-for-starting-the-linux-os/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p><strong>本文首发于 2018-09-16 21:35:02</strong></p></blockquote><h1 id="总启动流程"><a href="#总启动流程" class="headerlink" title="总启动流程"></a>总启动流程</h1><blockquote><p>这部分转自：<a href="https://www.cnblogs.com/liang-io/p/9651656.html">https://www.cnblogs.com/liang-io/p/9651656.html</a></p></blockquote><p>一般来说，所有的操作系统的启动流程基本就是：</p><p><img src="linux-start-process-0-overview.jpg" alt="总启动流程"></p><p>总的来说，linux 系统启动流程可以简单总结为以下几步：</p><blockquote><ol><li> 开机 BIOS 自检，加载硬盘。</li><li> 读取 MBR,进行 MBR 引导。</li><li> grub 引导菜单(Boot Loader)。</li><li> 加载内核 kernel。</li><li> 启动 init 进程，依据 inittab 文件设定运行级别</li><li> init 进程，执行 rc.sysinit 文件。</li><li> 启动内核模块，执行不同级别的脚本程序。</li><li> 执行/etc/rc.d/rc.local</li><li> 启动 mingetty，进入系统登陆界面。</li></ol></blockquote><p>linux 系统安装时，如果要想设置开启启动项，可以：</p><blockquote><p>开机到 BIOS 提醒界面，按键 F11（Dell 服务器的做法）进入 BIOS 设置 BOOT MENU，继而设置启动项：硬盘 HD 启动，光盘 CD/DVD 启动，还是 U 盘 USB 启动。</p></blockquote><h1 id="详细流程"><a href="#详细流程" class="headerlink" title="详细流程"></a>详细流程</h1><p>下面就 linux 操作系统的启动过程做一详细解析记录。</p><h2 id="1-加载内核"><a href="#1-加载内核" class="headerlink" title="1. 加载内核"></a>1. 加载内核</h2><p>操作系统接管硬件以后，首先读入 /boot 目录下的内核文件。</p><p><img src="linux-start-process-1-load-kernel.jpg" alt="加载内核"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@bastion-IDC ~]# ll /boot/</span><br><span class="line">total 21668</span><br><span class="line">-rw-r--r--. 1 root root   105195 Nov 22  2013 config-2.6.32-431.el6.x86_64</span><br><span class="line">drwxr-xr-x. 3 root root     1024 Aug 22 16:31 efi</span><br><span class="line">drwxr-xr-x. 2 root root     1024 Aug 22 16:32 grub</span><br><span class="line">-rw-------. 1 root root 15217153 Aug 22 16:32 initramfs-2.6.32-431.el6.x86_64.img</span><br><span class="line">drwx------. 2 root root    12288 Aug 22 16:24 lost+found</span><br><span class="line">-rw-r--r--. 1 root root   193758 Nov 22  2013 symvers-2.6.32-431.el6.x86_64.gz</span><br><span class="line">-rw-r--r--. 1 root root  2518236 Nov 22  2013 System.map-2.6.32-431.el6.x86_64</span><br><span class="line">-rwxr-xr-x. 1 root root  4128368 Nov 22  2013 vmlinuz-2.6.32-431.el6.x86_64</span><br></pre></td></tr></table></figure><h2 id="2-启动初始化进程"><a href="#2-启动初始化进程" class="headerlink" title="2. 启动初始化进程"></a>2. 启动初始化进程</h2><p>内核文件加载以后，就开始运行第一个程序 /sbin/init，它的作用是初始化系统环境。</p><p><img src="linux-start-process-2-start-init.jpg" alt="启动初始化进程"></p><p>由于 init 是第一个运行的程序，它的进程编号（pid）就是 1。其他所有进程都从它衍生，都是它的子进程。</p><h2 id="3-确定运行级别"><a href="#3-确定运行级别" class="headerlink" title="3. 确定运行级别"></a>3. 确定运行级别</h2><p>许多程序需要开机启动。它们在 Windows 叫做”服务”（service），在 Linux 就叫做”守护进程”（daemon）。</p><p>init 进程的一大任务，就是去运行这些开机启动的程序。但是，不同的场合需要启动不同的程序，比如用作服务器时，需要启动 Apache，用作桌面就不需要。Linux 允许为不同的场合，分配不同的开机启动程序，这就叫做”运行级别”（runlevel）。也就是说，启动时根据”运行级别”，确定要运行哪些程序。</p><p><img src="linux-start-process-3-run-level.jpg" alt="确定运行级别"></p><p>Linux 预置七种 init 运行级别（0-6）：</p><blockquote><p>0：关机模式 （相当于 poweroff）</p><p>1：单用户模式</p><p>2：无网络支持的多用户模式</p><p>3：有网络支持的多用户模式（也就是文本模式，工作中最常用的模式）</p><p>4：保留，未使用</p><p>5：有网络支持的 X-windows 支持多用户模式（也就是桌面图形模式）</p><p>6: 重新引导系统，即重启（相当于 reboot）</p></blockquote><p>init 进程首先读取文件 <code>/etc/inittab</code>，它是运行级别的设置文件。<br>如果打开它，可以看到第一行是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@bastion-IDC ~]# cat /etc/inittab</span><br><span class="line">....</span><br><span class="line">id:3:initdefault:</span><br></pre></td></tr></table></figure><p>initdefault 的值是 3，表明系统启动时的运行级别为 3。如果需要指定其他级别，可以手动修改这个值。</p><p><strong>那么，运行级别 3 有哪些程序呢，系统怎么知道每个级别应该加载哪些程序呢？</strong></p><p>答案是每个运行级别在/etc 目录下面，都有一个对应的子目录，指定要加载的程序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/etc/rc0.d</span><br><span class="line">/etc/rc1.d</span><br><span class="line">/etc/rc2.d</span><br><span class="line">/etc/rc3.d</span><br><span class="line">/etc/rc4.d</span><br><span class="line">/etc/rc5.d</span><br><span class="line">/etc/rc6.d</span><br></pre></td></tr></table></figure><p>上面目录名中的”rc”，表示<code>run command（运行程序）</code>，最后的 d 表示<code>directory（目录）</code>。下面让我们看看 /etc/rc3.d 目录中到底指定了哪些程序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[root@bastion-IDC ~]# ll /etc/rc3.d/</span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx. 1 root root 19 Aug 22 16:30 K10saslauthd -&gt; ../init.d/saslauthd</span><br><span class="line">lrwxrwxrwx. 1 root root 18 Aug 22 16:47 K15svnserve -&gt; ../init.d/svnserve</span><br><span class="line">lrwxrwxrwx. 1 root root 15 Aug 23 16:21 K25squid -&gt; ../init.d/squid</span><br><span class="line">lrwxrwxrwx. 1 root root 19 Dec 23 13:14 K45memcached -&gt; ../init.d/memcached</span><br><span class="line">lrwxrwxrwx. 1 root root 20 Aug 22 16:30 K50netconsole -&gt; ../init.d/netconsole</span><br><span class="line">lrwxrwxrwx. 1 root root 13 Dec 21 17:45 K60nfs -&gt; ../init.d/nfs</span><br><span class="line">lrwxrwxrwx. 1 root root 20 Dec 21 17:45 K69rpcsvcgssd -&gt; ../init.d/rpcsvcgssd</span><br><span class="line">lrwxrwxrwx. 1 root root 17 Nov 24 14:45 K75ntpdate -&gt; ../init.d/ntpdate</span><br><span class="line">lrwxrwxrwx. 1 root root 20 Aug 22 16:31 K87multipathd -&gt; ../init.d/multipathd</span><br><span class="line">lrwxrwxrwx. 1 root root 21 Aug 22 16:30 K87restorecond -&gt; ../init.d/restorecond</span><br><span class="line">lrwxrwxrwx. 1 root root 15 Aug 22 16:30 K89rdisc -&gt; ../init.d/rdisc</span><br><span class="line">lrwxrwxrwx. 1 root root 22 Aug 22 16:31 S02lvm2-monitor -&gt; ../init.d/lvm2-monitor</span><br><span class="line">lrwxrwxrwx. 1 root root 16 Aug 22 16:31 S07iscsid -&gt; ../init.d/iscsid</span><br><span class="line">lrwxrwxrwx. 1 root root 19 Aug 22 16:30 S08ip6tables -&gt; ../init.d/ip6tables</span><br><span class="line">lrwxrwxrwx. 1 root root 18 Aug 22 16:30 S08iptables -&gt; ../init.d/iptables</span><br><span class="line">lrwxrwxrwx. 1 root root 17 Aug 22 16:30 S10network -&gt; ../init.d/network</span><br><span class="line">lrwxrwxrwx. 1 root root 16 Aug 22 16:31 S11auditd -&gt; ../init.d/auditd</span><br><span class="line">lrwxrwxrwx. 1 root root 17 Aug 22 16:30 S12rsyslog -&gt; ../init.d/rsyslog</span><br><span class="line">lrwxrwxrwx. 1 root root 15 Dec 21 17:45 S13iscsi -&gt; ../init.d/iscsi</span><br><span class="line">lrwxrwxrwx. 1 root root 17 Dec 21 17:45 S13rpcbind -&gt; ../init.d/rpcbind</span><br><span class="line">lrwxrwxrwx. 1 root root 17 Dec 21 17:45 S14nfslock -&gt; ../init.d/nfslock</span><br><span class="line">lrwxrwxrwx. 1 root root 19 Aug 22 16:31 S15mdmonitor -&gt; ../init.d/mdmonitor</span><br><span class="line">lrwxrwxrwx. 1 root root 17 Dec 21 17:45 S19rpcgssd -&gt; ../init.d/rpcgssd</span><br><span class="line">lrwxrwxrwx. 1 root root 26 Aug 22 16:31 S25blk-availability -&gt; ../init.d/blk-availability</span><br><span class="line">lrwxrwxrwx. 1 root root 15 Aug 22 16:30 S25netfs -&gt; ../init.d/netfs</span><br><span class="line">lrwxrwxrwx. 1 root root 19 Aug 22 16:30 S26udev-post -&gt; ../init.d/udev-post</span><br><span class="line">lrwxrwxrwx. 1 root root 18 Oct 25 11:49 S50onealert -&gt; ../init.d/onealert</span><br><span class="line">lrwxrwxrwx. 1 root root 14 Aug 22 16:31 S55sshd -&gt; ../init.d/sshd</span><br><span class="line">lrwxrwxrwx. 1 root root 16 Oct 26 09:47 S56xinetd -&gt; ../init.d/xinetd</span><br><span class="line">lrwxrwxrwx. 1 root root 17 Aug 22 16:30 S80postfix -&gt; ../init.d/postfix</span><br><span class="line">lrwxrwxrwx. 1 root root 15 Aug 22 16:30 S90crond -&gt; ../init.d/crond</span><br><span class="line">lrwxrwxrwx. 1 root root 11 Aug 22 16:30 S99local -&gt; ../rc.local</span><br></pre></td></tr></table></figure><p>可以看到：</p><blockquote><p><code>字母S表示Start</code>，也就是启动的意思（启动脚本的运行参数为 start）。</p><p>如果这个位置是<code>字母K</code>，就代表<code>Kill（关闭）</code>，即<strong>如果从其他运行级别切换过来，需要关闭的程序（启动脚本的运行参数为 stop）</strong>。</p><p>后面的两位数字表示<code>处理顺序</code>，<strong>数字越小越早处理</strong>，所以第一个启动的程序是 motd，然后是 rpcbing、nfs……数字相同时，则按照程序名的字母顺序启动，所以 rsyslog 会先于 sudo 启动。</p><p>这个目录里的所有文件（除了 README），就是启动时要加载的程序。如果想增加或删除某些程序，不建议手动修改 /etc/rcN.d 目录，最好是用一些专门命令进行管理（参考这里和这里）。</p></blockquote><h2 id="4-加载开机启动程序"><a href="#4-加载开机启动程序" class="headerlink" title="4. 加载开机启动程序"></a>4. 加载开机启动程序</h2><p>前面提到，七种预设的”运行级别”各自有一个目录，存放需要开机启动的程序。不难想到，如果多个”运行级别”需要启动同一个程序，那么这个程序的启动脚本，就会在每一个目录里都有一个拷贝。这样会造成管理上的困扰：如果要修改启动脚本，岂不是每个目录都要改一遍？</p><p>Linux 的解决办法，就是七个 <code>/etc/rcN.d</code> 目录里列出的程序，都设为链接文件，指向另外一个目录 <code>/etc/init.d</code>，真正的启动脚本都统一放在这个目录中。init 进程逐一加载开机启动程序，其实就是运行这个目录里的启动脚本。</p><p><img src="linux-start-process-4-initd.jpg" alt="加载开机启动程序"></p><p>下面就是链接文件真正的指向：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@bastion-IDC ~]# ls -l /etc/rc3.d</span><br><span class="line">lrwxrwxrwx. 1 root root 10 Aug 22 16:30 /etc/rc3.d -&gt; rc.d/rc3.d</span><br></pre></td></tr></table></figure><p>这样做的另一个好处，就是如果你要手动关闭或重启某个进程，直接到目录 /etc/init.d 中寻找启动脚本即可。</p><p>比如，我要重启 iptables 服务器，就运行下面的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@bastion-IDC ~]# /etc/init.d/iptables restart</span><br></pre></td></tr></table></figure><p>/etc/init.d 这个目录名最后一个字母 d，是 directory 的意思，表示这是一个目录，用来与程序 /etc/init 区分。</p><h2 id="5-用户登录"><a href="#5-用户登录" class="headerlink" title="5. 用户登录"></a>5. 用户登录</h2><p>开机启动程序加载完毕以后，就要让用户登录了。</p><p><img src="linux-start-process-5-user-login.jpg" alt="用户登录"></p><p>一般来说，用户的登录方式有三种：命令行登录、ssh 登录、图形界面登录。这三种情况，都有自己的方式对用户进行认证。</p><blockquote><p>1）<strong>命令行登录</strong>：init 进程调用 getty 程序（意为 get teletype），让用户输入用户名和密码。输入完成后，再调用 login 程序，核对密码（Debian 还会再多运行一个身份核对程序/etc/pam.d/login）。如果密码正确，就从文件 /etc/passwd 读取该用户指定的 shell，然后启动这个 shell。</p><p>2）<strong>ssh 登录</strong>：这时系统调用 sshd 程序（Debian 还会再运行/etc/pam.d/ssh ），取代 getty 和 login，然后启动 shell。</p><p>3）<strong>图形界面登录</strong>：init 进程调用显示管理器，Gnome 图形界面对应的显示管理器为 gdm（GNOME Display Manager），然后用户输入用户名和密码。如果密码正确，就读取/etc/gdm3/Xsession，启动用户的会话。</p></blockquote><h2 id="6-进入-login-shell"><a href="#6-进入-login-shell" class="headerlink" title="6. 进入 login shell"></a>6. 进入 login shell</h2><p>所谓 shell，简单说就是命令行界面，让用户可以直接与操作系统对话。用户登录时打开的 shell，就叫做 login shell。</p><p><img src="linux-start-process-6-login-shell.jpg" alt="进入 login shell"></p><p>Linux 默认的 shell 是 Bash，它会读入一系列的配置文件。上一步的三种情况，在这一步的处理，也存在差异。</p><ol><li><strong>命令行登录</strong>：首先读入 <code>/etc/profile</code>，这是对所有用户都有效的配置；然后依次寻找下面三个文件，这是针对当前用户的配置。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~/.bash_profile</span><br><span class="line">~/.bash_login</span><br><span class="line">~/.profile</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，<strong>这三个文件只要有一个存在，就不再读入后面的文件了</strong>。比如，要是 <code>~/.bash_profile</code> 存在，就不会再读入后面两个文件了。</p></blockquote><ol start="2"><li><strong>ssh 登录</strong>：与第一种情况完全相同。</li><li><strong>图形界面登录</strong>：只加载 <code>/etc/profile</code> 和 <code>~/.profile</code>。也就是说，<code>~/.bash_profile</code> 不管有没有，都不会运行。</li></ol><h2 id="7-打开-non-login-shell"><a href="#7-打开-non-login-shell" class="headerlink" title="7. 打开 non-login shell"></a>7. 打开 non-login shell</h2><p>老实说，上一步完成以后，Linux 的启动过程就算结束了，用户已经可以看到命令行提示符或者图形界面了。但是，为了内容的完整，必须再介绍一下这一步。</p><p>用户进入操作系统以后，常常会再手动开启一个 shell。这个 shell 就叫做 <code>non-login shell</code>，意思是它不同于登录时出现的那个 shell，不读取<code>/etc/profile</code>和<code>.profile</code>等配置文件。</p><p><img src="linux-start-process-7-non-login-shell.jpg" alt="打开 non-login shell"></p><p>non-login shell 的重要性，不仅在于它是用户最常接触的那个 shell，还在于它会读入用户自己的 bash 配置文件 <code>~/.bashrc</code>。大多数时候，我们对于 bash 的定制，都是写在这个文件里面的。</p><p>你也许会问，<strong>要是不进入 non-login shell，岂不是.bashrc 就不会运行了，因此 bash 也就不能完成定制了？</strong></p><p>事实上，Debian 已经考虑到这个问题了，请打开文件 <code>~/.profile</code>，可以看到下面的代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$BASH_VERSION</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">　　<span class="keyword">if</span> [ -f <span class="string">&quot;<span class="variable">$HOME</span>/.bashrc&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">　　　　. <span class="string">&quot;<span class="variable">$HOME</span>/.bashrc&quot;</span></span><br><span class="line">　　<span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>上面代码先判断变量 <code>$BASH_VERSION</code> 是否有值，然后判断主目录下是否存在 .bashrc 文件，如果存在就运行该文件。</p><p>第三行开头的那个点，是 source 命令的简写形式，表示运行某个文件，写成”source ~/.bashrc”也是可以的。</p><p>因此，只要运行<code>～/.profile</code>文件，<code>～/.bashrc</code>文件就会连带运行。但是上一节的第一种情况提到过，如果存在<code>～/.bash_profile</code>文件，那么有可能不会运行<code>～/.profile</code>文件。解决这个问题很简单，把下面代码写入<code>.bash_profile</code>就行了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -f ~/.profile ]; <span class="keyword">then</span></span><br><span class="line">　　. ~/.profile</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>这样一来，不管是哪种情况，<code>.bashrc</code>都会执行，用户的设置可以放心地都写入这个文件了。</p><p>Bash 的设置之所以如此繁琐，是由于历史原因造成的。早期的时候，计算机运行速度很慢，载入配置文件需要很长时间，Bash 的作者只好把配置文件分成了几个部分，阶段性载入。<strong>系统的通用设置放在 /etc/profile，用户个人的、需要被所有子进程继承的设置放在.profile，不需要被继承的设置放在.bashrc。</strong></p><p>顺便提一下，除了 Linux 以外， Mac OS X 使用的 shell 也是 Bash。但是，它只加载.bash_profile，然后在.bash_profile 里面调用.bashrc。而且，不管是 ssh 登录，还是在图形界面里启动 shell 窗口，都是如此。</p><h1 id="附：启动流程的思维导图"><a href="#附：启动流程的思维导图" class="headerlink" title="附：启动流程的思维导图"></a>附：启动流程的思维导图</h1><blockquote><p>图片转自：<a href="https://mm.edrawsoft.cn/template/12597">https://mm.edrawsoft.cn/template/12597</a></p></blockquote><p><img src="linux-start-process-mind-mapping.jpg" alt="Linux启动流程思维导图"></p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实用工具 | Linux 定时任务 crontab 命令详解</title>
      <link href="/2016/11/23/description-of-the-crontab-command/"/>
      <url>/2016/11/23/description-of-the-crontab-command/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p><strong>本文首发于 2016-11-23 10:24:45</strong></p></blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Linux 下的任务调度分为两类：<strong>系统任务调度</strong>和<strong>用户任务调度</strong>。Linux 系统任务是由 <code>cron (crond)</code> 这个系统服务来控制的，这个系统服务是默认启动的。用户自己设置的计划任务则使用 <code>crontab</code> 命令。</p><h2 id="cron-配置文件"><a href="#cron-配置文件" class="headerlink" title="cron 配置文件"></a>cron 配置文件</h2><p>在 Ubuntu/Debian 中，配置文件路径为 <code>/etc/crontab</code>（CentOS 也类似），其内容为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/crontab: system-wide crontab</span></span><br><span class="line"><span class="comment"># Unlike any other crontab you don&#x27;t have to run the `crontab&#x27;</span></span><br><span class="line"><span class="comment"># command to install the new version when you edit this file</span></span><br><span class="line"><span class="comment"># and files in /etc/cron.d. These files also have username fields,</span></span><br><span class="line"><span class="comment"># that none of the other crontabs do.</span></span><br><span class="line"></span><br><span class="line">SHELL=/bin/sh</span><br><span class="line">PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example of job definition:</span></span><br><span class="line"><span class="comment"># .---------------- minute (0 - 59)</span></span><br><span class="line"><span class="comment"># |  .------------- hour (0 - 23)</span></span><br><span class="line"><span class="comment"># |  |  .---------- day of month (1 - 31)</span></span><br><span class="line"><span class="comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="comment"># |  |  |  |  |</span></span><br><span class="line"><span class="comment"># *  *  *  *  * user-name command to be executed</span></span><br><span class="line">17 ** * *root    <span class="built_in">cd</span> / &amp;&amp; run-parts --report /etc/cron.hourly</span><br><span class="line">25 6* * *root<span class="built_in">test</span> -x /usr/sbin/anacron || ( <span class="built_in">cd</span> / &amp;&amp; run-parts --report /etc/cron.daily )</span><br><span class="line">47 6* * 7root<span class="built_in">test</span> -x /usr/sbin/anacron || ( <span class="built_in">cd</span> / &amp;&amp; run-parts --report /etc/cron.weekly )</span><br><span class="line">52 61 * *root<span class="built_in">test</span> -x /usr/sbin/anacron || ( <span class="built_in">cd</span> / &amp;&amp; run-parts --report /etc/cron.monthly )</span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li><code>SHELL</code> 环境变量用于指定系统要使用的 shell，此处为<code>/bin/sh</code>。</li><li><code>PATH</code> 环境变量指定了系统执行命令的路径。</li><li>也可以添加<code>MAILTO</code>变量，如果指定，则表示 crond 的任务执行信息将通过电子邮件发送给指定的用户。</li><li>其他部分在后文详细讲述。</li></ul><p>用户定期要执行的工作，比如用户数据备份、定时邮件提醒等，都可以使用 crontab 工具来定制自己的计划任务。所有<code>非root用户</code>定义的 crontab 文件都被保存在 <code>/var/spool/cron</code> 目录中，其文件名与用户名一致。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /var/spool/cron/crontabs/admin</span><br></pre></td></tr></table></figure><p>除此之外，还有两个文件<code>/etc/cron.deny</code>和<code>/etc/cron.allow</code>，前者中可列出不允许哪些用户使用 crontab 命令，后者中可列出允许哪些用户使用 crontab 命令。</p><h2 id="crontab-文件含义"><a href="#crontab-文件含义" class="headerlink" title="crontab 文件含义"></a>crontab 文件含义</h2><p>用户所建立的 crontab 文件中，每一行都代表一项任务，每行的每个字段代表一项设置，它的格式共分为六个字段，前五段是时间设定段，第六段是要执行的命令段，格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minute hour day month week <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p>各字段含义如下：</p><ul><li>minute：表示分钟，可以是从 0 到 59 之间的任何整数。</li><li>hour：表示小时，可以是从 0 到 23 之间的任何整数。</li><li>day：表示日期，可以是从 1 到 31 之间的任何整数。</li><li>month：表示月份，可以是从 1 到 12 之间的任何整数。</li><li>week：表示星期几，可以是从 0 到 7 之间的任何整数，这里的 0 或 7 代表星期日。</li><li>command：要执行的命令，可以是系统命令，也可以是自己编写的脚本文件。</li></ul><p>在以上各个字段中，还可以使用以下特殊字符：</p><ul><li><code>星号(*)</code>：代表所有可能的值，例如 month 字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。</li><li><code>逗号(,)</code>：可以用逗号隔开的值指定一个列表范围，例如：<code>1,2,5,7,8,9</code> 。</li><li><code>中杠(-)</code>：可以用整数之间的中杠表示一个整数范围，例如：<code>2-6</code> 表示<code>2,3,4,5,6</code> 。</li><li><code>正斜线(/)</code>：可以用正斜线指定时间的间隔频率，例如：<code>0-23/2</code>表示每两小时执行一次。同时正斜线可以和星号一起使用，例如：<code>*/10</code>，如果用在 minute 字段，表示<strong>每十分钟执行一次</strong>。</li></ul><h2 id="crontab-命令详解"><a href="#crontab-命令详解" class="headerlink" title="crontab 命令详解"></a>crontab 命令详解</h2><p><strong>命令格式：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">usage:crontab [-u user] file</span><br><span class="line">crontab [ -u user ] [ -i ] &#123; -e | -l | -r &#125;</span><br><span class="line">(default operation is replace, per 1003.2)</span><br><span class="line">-e(edit user<span class="string">&#x27;s crontab)</span></span><br><span class="line"><span class="string">-l(list user&#x27;</span>s crontab)</span><br><span class="line">-r(delete user<span class="string">&#x27;s crontab)</span></span><br><span class="line"><span class="string">-i(prompt before deleting user&#x27;</span>s crontab)</span><br></pre></td></tr></table></figure><ul><li>-u user：用于设定某个用户的 crontab 服务。</li><li>file: file 为命令文件名，表示将 file 作为 crontab 的任务列表文件并载入 crontab ；如果在命令行中没有指定这个文件，crontab 命令将接受标准输入（键盘）上键入的命令，并将它们载入 crontab 。</li><li>-e：编辑某个用户的 crontab 文件内容，如不指定用户则表示当前用户。</li><li>-l：显示某个用户的 crontab 文件内容，如不指定用户则表示当前用户。</li><li>-r：从 /var/spool/cron 目录中删除某个用户的 crontab 文件，如不指定用户，则默认删除当前用户 crontab 文件。</li><li>-i：在删除用户的 crontab 文件时给确认提示。</li></ul><h2 id="crontab-注意事项"><a href="#crontab-注意事项" class="headerlink" title="crontab 注意事项"></a>crontab 注意事项</h2><ol><li>crontab 有 2 种编辑方式：<strong>直接编辑/etc/crontab 文件</strong>与<strong>crontab –e</strong>，其中<code>/etc/crontab</code>里的计划任务是<strong>系统的计划任务</strong>，而<strong>用户的计划任务</strong>需要通过<code>crontab –e</code>来编辑。</li><li>每次编辑完某个用户的 cron 设置后，cron 自动在 /var/spool/cron 下生成一个与此用户同名的文件，此用户的 cron 信息都记录在这个文件中，<code>这个文件是不可以直接编辑的，只可以用 crontab -e 来编辑</code>。</li><li>crontab 中的 command 尽量使用绝对路径，否则会经常因为路径错误导致任务无法执行。</li><li>新创建的 cron job 不会马上执行，至少要等 2 分钟才能执行，可重启 cron 来立即执行。</li><li><code>%</code> 在 crontab 文件中表示<code>换行</code>，因此假如脚本或命令含有<code>%</code>，需要使用<code>\%</code>来进行转义。</li><li><code>crontab -e</code>的默认编辑器是 nano ，如需使用 vim，可在<code>/etc/profile</code>或<code>~/.bashrc</code>中添加 <code>export EDITOR=vi</code> 来解决。</li></ol><h2 id="crontab-配置示例"><a href="#crontab-配置示例" class="headerlink" title="crontab 配置示例"></a>crontab 配置示例</h2><ul><li>每分钟执行 1 次 command（因 cron 默认每 1 分钟扫描一次，因此全为<code>*</code>即可）：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * * <span class="built_in">command</span></span><br></pre></td></tr></table></figure><ul><li>每小时的第 3 和第 15 分钟执行 command ：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 * * * * <span class="built_in">command</span></span><br></pre></td></tr></table></figure><ul><li>每天上午 8-11 点的第 3 和 15 分钟执行 command ：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 8-11 * * * <span class="built_in">command</span></span><br></pre></td></tr></table></figure><ul><li>每隔 2 天的上午 8-11 点的第 3 和 15 分钟执行 command ：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 8-11 */2 * * <span class="built_in">command</span></span><br></pre></td></tr></table></figure><ul><li>每个星期一的上午 8 点到 11 点的第 3 和第 15 分钟执行 command ：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 8-11 * * 1 <span class="built_in">command</span></span><br></pre></td></tr></table></figure><ul><li>每晚的 21:30 分重启 smb ：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 21 * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure><ul><li>每月 1、10、22 日的 4:45 重启 smb ：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">45 4 1,10,22 * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure><ul><li>每周六、周日的 1:10 重启 smb ：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 1 * * 6,0 /etc/init.d/smb restart</span><br></pre></td></tr></table></figure><ul><li>每天 18:00 至 23:00 之间每隔 30 分钟重启 smb ：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0,30 18-23 * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure><ul><li>每隔 1 小时重启 smb ：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* */1 * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure><ul><li>晚上 23 点到早上 7 点之间，每隔 1 小时重启 smb ：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* 23-7/1 * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure><ul><li>每月的 4 号与每周一到周三的 11 点重启 smb ：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 11 4 * mon-wed /etc/init.d/smb restart</span><br></pre></td></tr></table></figure><ul><li>每小时执行<code>/etc/cron.hourly</code>目录内的脚本：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 1 * * * root run-parts /etc/cron.hourly</span><br></pre></td></tr></table></figure><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> crontab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特性分析 | GreenPlum 的并行查询优化策略详解</title>
      <link href="/2016/11/21/greenplum-parallel-query-optimization-strategy/"/>
      <url>/2016/11/21/greenplum-parallel-query-optimization-strategy/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><strong>作者：卢文双 高级数据库内核研发</strong></p><blockquote><p><strong>本文首发于 2016-11-21 09:43:07</strong></p></blockquote><h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p>GreenPlum 采用 Share Nothing 的架构，良好的发挥了廉价 PC 的作用。自此 I/O 不在是 DW(data warehouse) 的瓶颈，相反网络的压力会大很多。但是 GreenPlum 的查询优化策略能够避免尽量少的网络交换。对于初次接触 GreenPlum 的人来说，肯定耳目一新。</p><p><img src="/2016/11/21/greenplum-parallel-query-optimization-strategy/greenplum-architecture.jpg" alt="GreenPlum 架构"></p><h1 id="查询优化器"><a href="#查询优化器" class="headerlink" title="查询优化器"></a>查询优化器</h1><p>GreenPlum 的 master 节点负责 SQL 解析和执行计划的生成，具体来说，查询优化器会将 SQL 解析成每个节点（segments）要执行的物理执行计划。</p><p>GreenPlum 采用的是基于成本的优化策略：如果有多条执行路径，会评估执行代价，找出代价最小、最有效率的一条。</p><p>不像传统的查询优化器，GreenPlum 的查询优化器必须全局的考虑整个集群，在每个候选的执行计划中考虑到节点间移动数据的开销。比如有 join，那么 join 是在各个节点分别进行的（每个节点只和自身数据做 join），所以它的查询很快。</p><p>查询计划包括了一些传统的操作，比如：扫描、Join、排序、聚合等等。</p><p><strong>GreenPlum 中有三种数据的移动操作：</strong></p><ul><li><code>Broadcast Motion (N:N)</code>：广播数据。每个节点向其他节点广播需要发送的数据。</li><li><code>Redistribute Motion (N:N)</code>：重新分布数据。利用 join 列数据的 hash 值不同，将筛选后的数据在其他 segment 重新分布。</li><li><code>Gather Motion (N:1)</code>：聚合汇总数据。每个节点将 join 后的数据发到一个单节点上，通常是发到主节点 master 。</li></ul><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> d.<span class="operator">*</span>,j.customer_id <span class="keyword">from</span> data d <span class="keyword">join</span>  jd1 j <span class="keyword">on</span> d.partner_id<span class="operator">=</span>j.partner_id <span class="keyword">where</span> j.gmt_modified<span class="operator">&gt;</span> <span class="built_in">current_date</span> <span class="number">-80</span>;</span><br><span class="line">                                       QUERY PLAN</span><br><span class="line"><span class="comment">----------------------------------------------------------------------------------------</span></span><br><span class="line"> Gather Motion <span class="number">88</span>:<span class="number">1</span>  (slice2)  (cost<span class="operator">=</span><span class="number">3.01</span>.<span class="number">.939</span><span class="number">.49</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">2717</span> width<span class="operator">=</span><span class="number">59</span>)</span><br><span class="line">   <span class="operator">-</span><span class="operator">&gt;</span>  Hash <span class="keyword">Join</span>  (cost<span class="operator">=</span><span class="number">3.01</span>.<span class="number">.939</span><span class="number">.49</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">2717</span> width<span class="operator">=</span><span class="number">59</span>)</span><br><span class="line">         Hash Cond: d.partner_id::text <span class="operator">=</span> j.partner_id::text</span><br><span class="line">         <span class="operator">-</span><span class="operator">&gt;</span>  Seq Scan <span class="keyword">on</span> data d  (cost<span class="operator">=</span><span class="number">0.00</span>.<span class="number">.260</span><span class="number">.74</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">20374</span> width<span class="operator">=</span><span class="number">50</span>)</span><br><span class="line">         <span class="operator">-</span><span class="operator">&gt;</span>  Hash  (cost<span class="operator">=</span><span class="number">1.91</span>.<span class="number">.1</span><span class="number">.91</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">88</span> width<span class="operator">=</span><span class="number">26</span>)</span><br><span class="line">               <span class="operator">-</span><span class="operator">&gt;</span>  Broadcast Motion <span class="number">88</span>:<span class="number">88</span>  (slice1)  (cost<span class="operator">=</span><span class="number">0.00</span>.<span class="number">.1</span><span class="number">.91</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">88</span> width<span class="operator">=</span><span class="number">26</span>)</span><br><span class="line">                     <span class="operator">-</span><span class="operator">&gt;</span>  Seq Scan <span class="keyword">on</span> jd1 j  (cost<span class="operator">=</span><span class="number">0.00</span>.<span class="number">.1</span><span class="number">.02</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">1</span> width<span class="operator">=</span><span class="number">26</span>)</span><br><span class="line">                           <span class="keyword">Filter</span>: gmt_modified <span class="operator">&gt;</span> (<span class="string">&#x27;now&#x27;</span>::text::<span class="type">date</span> <span class="operator">-</span> <span class="number">80</span>)</span><br></pre></td></tr></table></figure><p><strong>执行计划需要自下而上分析：</strong></p><ol><li>在各个节点扫描自己的 <code>jd1</code> 表数据，按照条件过滤生成数据（记为 <code>rs</code>）。</li><li>各节点将自己生成的 <code>rs</code> 依次发送到其他节点。（<code>Broadcast Motion (N:N)</code>）</li><li>每个节点上的 <code>data</code> 表的数据，和各自节点上收到的 <code>rs</code> 进行 join，这样能保证本机数据只和本机数据做 join 。</li><li>各节点将 join 后的结果发送给 master(<code>Gather Motion (N:1)</code>) 。</li></ol><p>由上面的执行过程可以看出， GreenPlum 将 rs 给每个含有 data 表数据的节点都发了一份。</p><p><strong>问：如果 <code>rs</code> 很大或者压根就没有过滤条件，会有什么问题？如何处理？</strong></p><p>比如本例中的表 <code>jd1</code> 和表 <code>data</code>的数据行数如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">=</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> jd1;</span><br><span class="line"> count</span><br><span class="line"><span class="comment">-------</span></span><br><span class="line">    <span class="number">20</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">=</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> data;</span><br><span class="line"> count</span><br><span class="line"><span class="comment">--------</span></span><br><span class="line"> <span class="number">113367</span></span><br></pre></td></tr></table></figure><p>如果 <code>rs</code> 很大的话，广播数据时网络就会成为瓶颈。GreenPlum 的优化器很聪明，它是将<strong>小表</strong>广播到各个 segment 上，极大的降低网络开销。从这个例子能看出统计信息对于生成好的查询计划是何等重要。</p><h2 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h2><p>下面看一个复杂点的例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    c_custkey, c_name,</span><br><span class="line">    <span class="built_in">sum</span>(l_extendedprice <span class="operator">*</span> (<span class="number">1</span> <span class="operator">-</span> <span class="number">1</span>_discount)) <span class="keyword">as</span> revenue,</span><br><span class="line">    c_acctbal, n_name, c_address, c_phone, c_comment</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    customer, orders, lineitem, nation</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    c_custkey <span class="operator">=</span> o_custkey</span><br><span class="line"><span class="keyword">and</span> <span class="number">1</span>_orderkey <span class="operator">=</span> o_orderkey</span><br><span class="line"><span class="keyword">and</span> o_orderdate <span class="operator">&gt;=</span> <span class="type">date</span> <span class="string">&#x27;1994-08-01&#x27;</span></span><br><span class="line"><span class="keyword">and</span> o_orderdate <span class="operator">&lt;</span> <span class="type">date</span> <span class="string">&#x27;1994-08-0l&#x27;</span></span><br><span class="line">                  <span class="operator">+</span> <span class="type">interval</span> <span class="string">&#x27;3 month&#x27;</span></span><br><span class="line"><span class="keyword">and</span> l_returnflag <span class="operator">=</span> <span class="string">&#x27;R&#x27;</span></span><br><span class="line"><span class="keyword">and</span> c_nationkey <span class="operator">=</span> n_nationkey</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    c_custkey, c_name, c_acctbal,</span><br><span class="line">    c_phone, n_name, c_address, c_comment</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">    revenue <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><p>执行计划如下：</p><p><img src="/2016/11/21/greenplum-parallel-query-optimization-strategy/greenplum-hashjoin-plan.jpeg" alt="GreenPlum HashJoin 执行计划"></p><ol><li>各个节点上同时扫描各自的 nation 表数据，将各 segment 上的 nation 数据向其他节点广播（<code>Broadcast Motion (N:N)</code>）。</li><li>各个节点上同时扫描各自 customer 数据，和收到的 nation 数据 join 生成 <code>RS-CN</code> 。</li><li>各个 segment 同时扫描自己 orders 表数据，过滤数据生成 <code>RS-O</code> 。</li><li>各个 segment 同时扫描自己 lineitem 表数据，过滤生成 <code>RS-L</code> 。</li><li>各个 segment 同时将各自 <code>RS-O</code> 和 <code>RS-L</code> 进行 join，生成 <code>RS-OL</code>。注意此过程不需要 <code>Redistribute Motion (N:N)</code> 重新分布数据，因为 orders 和 lineitem 的 distribute column 都是 orderkey，这就保证了各自需要 join 的对象都是在各自的机器上，所以 n 个节点就开始并行 join 了。</li><li>各个节点将自己在步骤 5 生成的 <code>RS-OL</code> 按照 cust-key 在所有节点间重新分布数据（<code>Redistribute Motion (N:N)</code>，可以按照 hash 和 range 在节点间来重新分布数据，默认是 hash），这样每个节点都会有自己的 <code>RS-OL</code> 。</li><li>各个节点将自己在步骤 2 生成的 <code>RS-CN</code> 和自己节点上的 <code>RS-OL</code> 数据进行 join，又是本机只和本机的数据进行 join 。</li><li>聚合，排序，发往主节点 master 。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>Greenplum 如何处理和优化一张大表和小表的 join?</strong></p><blockquote><p>Greenplum 是选择将小表广播数据，而不是将大表广播。</p></blockquote><p><strong>举例说明：</strong></p><p>表 A 有 10 亿条数据（<code>empno&lt;pk&gt;,deptno,ename</code>），表 B 有 500 条数据（<code>deptno&lt;pk&gt;,dname,loc</code>）</p><p>表 A 与表 B join on deptno</p><p>集群有 11 个节点：1 个 master，10 个 segment</p><p>按照正常的主键列 hash 分布，每个 segment 节点上只会有 1/10 的表 A 和 1/10 的表 B。</p><p>此时 GreenPlum 会<strong>让所有节点给其他节点发送各自所拥有的小表 B 的 1/10 的数据</strong>，这样就保证了 10 个节点上，每个节点都有一份完整的表 B 的数据。此时，每个节点上 1/10 的 A 只需要和自己节点上的 B 进行 join 就 OK。所以 GreenPlum 并行处理能力惊人的原因就在这里。</p><p>最终所有节点会将 join 的结果都发给主节点 master。</p><p>由该例可见统计信息十分重要，GreenPlum 通过统计信息来确定将哪张表进行（<code>Broadcast Motion (N:N)</code>）。</p><p>另外，实际使用中还会出现<strong>列值倾斜</strong>的情况，比如 A 没有按照主键来 hash 分布，而是人为指定按照 deptno 的 hash 在各个节点上分布数据。若 A 中 80%的数据都是 sales（deptno=10）部门的，此时 10 个节点中，就会有一个节点上拥有了 10 亿 ×80% 的数据，就算是将表 B 广播到其他节点 也无济于事，因为<strong>计算的压力都集中在一台机器</strong>了。所以，<strong>必须选择合适的列进行 hash 分布</strong>。</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> GreenPlum </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PostgreSQL </tag>
            
            <tag> GreenPlum </tag>
            
            <tag> 并行查询 </tag>
            
            <tag> 优化器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>问题定位 | PostgreSQL 报错 requested WAL segment has already been removed</title>
      <link href="/2016/04/25/postgresql-error-wal-segment-has-already-been-removed/"/>
      <url>/2016/04/25/postgresql-error-wal-segment-has-already-been-removed/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p><strong>本文首发于 2016-04-25 20:59:52</strong></p></blockquote><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在使用配置了热备的 PostgreSQL 数据库时，在执行大量事务时，尤其是一个需要插入几千万条数据的 insert 事务时（典型的做法是持续 <code>insert into t select * from t;</code>），后台 csv log 中报错如下：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2015</span>-<span class="number">07</span>-<span class="number">01</span> <span class="number">13</span>:<span class="number">25</span>:<span class="number">29</span><span class="variable">.430</span> CST,,,<span class="number">27738</span>,,<span class="number">51</span>d112c8<span class="variable">.6c5a</span>,<span class="number">1</span>,,<span class="number">2015</span>-<span class="number">07</span>-<span class="number">01</span> <span class="number">13</span>:<span class="number">25</span>:<span class="number">28</span> CST,,<span class="number">0</span>,LOG,<span class="number">00000</span>,<span class="string">&quot;streaming replication successfully connected to primary&quot;</span>,,,,,,,,<span class="string">&quot;libpqrcv_connect, libpqwalreceiver.c:171&quot;</span>,<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="number">2015</span>-<span class="number">07</span>-<span class="number">01</span> <span class="number">13</span>:<span class="number">25</span>:<span class="number">29</span><span class="variable">.430</span> CST,,,<span class="number">27738</span>,,<span class="number">51</span>d112c8<span class="variable">.6c5a</span>,<span class="number">2</span>,,<span class="number">2015</span>-<span class="number">07</span>-<span class="number">01</span> <span class="number">13</span>:<span class="number">25</span>:<span class="number">28</span> CST,,<span class="number">0</span>,FATAL,XX000,<span class="string">&quot;could not receive data from WAL stream:FATAL:  requested WAL segment 0000000800002A0000000000 has already been removed</span></span><br><span class="line"><span class="string">&quot;</span>,,,,,,,,<span class="string">&quot;libpqrcv_receive, libpqwalreceiver.c:389&quot;</span>,<span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>根据报错信息分析，推测是主库大事务产生了大量 xlog，这是因为 PostgreSQL 在执行事务过程中，直到提交时才会发送到备库。</p><p>由于该事务需要执行的时间过长，超过了 checkpoint 的默认间隔，所以导致有的 xlog 还未发送到备库却被 remove 掉了。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>要解决该问题，一般可用的方案有：</p><h2 id="方法一：调大参数-wal-keep-segments-的值"><a href="#方法一：调大参数-wal-keep-segments-的值" class="headerlink" title="方法一：调大参数 wal_keep_segments 的值"></a>方法一：调大参数 wal_keep_segments 的值</h2><p>将 GUC 参数 <code>wal_keep_segments</code> 设大一些，比如设置为 2000，而每个 segment 默认值为 16MB，就相当于有 32000MB，那么，最多可保存 30GB 的 xlog ，超过则删除最早的 xlog 。</p><p>不过，<strong>该方法并不能从根本上解决该问题</strong>。毕竟，在生产环境中或 TPCC 等测试灌数时，如果某条事务需要插入几十亿条记录，有可能还是会出现该问题。</p><h2 id="方法二：启用归档"><a href="#方法二：启用归档" class="headerlink" title="方法二：启用归档"></a>方法二：启用归档</h2><p>归档，就是将未发送到备库的 xlog 备份到某个目录下，待重启数据库时再将其恢复到备库中去。</p><p>GUC 参数设置示例如下：</p><ul><li>主库的 postgresql.conf 文件中：</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wal_level</span> = hot_standby</span><br><span class="line"><span class="attr">archive_mode</span> = <span class="literal">on</span></span><br><span class="line"><span class="attr">archive_command</span> = <span class="string">&#x27;rsync -zaq %p postgres@pg-slave:/var/lib/pgsql/wal_restore/%f &amp;&amp; test ! -f /var/lib/pgsql/backup/wal_archive/%f &amp;&amp; cp %p /var/lib/pgsql/backup/wal_archive/&#x27;</span></span><br><span class="line"><span class="attr">archive_timeout</span> = <span class="number">300</span></span><br><span class="line"><span class="attr">max_wal_senders</span> = <span class="number">5</span></span><br><span class="line"><span class="attr">wal_keep_segments</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>备库的 postgresql.conf 文件中：</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wal_level</span> = hot_standby</span><br><span class="line"><span class="attr">archive_mode</span> = <span class="literal">on</span></span><br><span class="line"><span class="attr">archive_command</span> = <span class="string">&#x27;test ! -f /var/lib/pgsql/backup/wal_archive/%f &amp;&amp; cp -i %p /var/lib/pgsql/backup/wal_archive/%f &lt; /dev/null&#x27;</span></span><br><span class="line"><span class="attr">hot_standby</span> = <span class="literal">on</span></span><br><span class="line"><span class="attr">wal_keep_segments</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>备库的 recovery.conf 文件中：</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">standby_mode</span> = <span class="string">&#x27;on&#x27;</span></span><br><span class="line"><span class="attr">primary_conninfo</span> = <span class="string">&#x27;host=pg-master port=5432 user=replicator&#x27;</span></span><br><span class="line"><span class="attr">restore_command</span> = <span class="string">&#x27;cp /var/lib/psql/wal_restore/%f %p&#x27;</span></span><br><span class="line"><span class="attr">archive_cleanup_command</span> = <span class="string">&#x27;pg_archivecleanup /var/lib/pgsql/wal_restore/ %r&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="方法三：启用-replication-slot（PG-9-4-开始支持）"><a href="#方法三：启用-replication-slot（PG-9-4-开始支持）" class="headerlink" title="方法三：启用 replication slot（PG 9.4 开始支持）"></a>方法三：启用 replication slot（PG 9.4 开始支持）</h2><p><strong>该方法是根本解决方法，不会造成 xlog 的丢失</strong>。也就是说，在 xlog 被拷贝到从库之前，主库不会删除。</p><p><strong>启用方法：</strong></p><ol><li>在 postgresql.conf 中添加：</li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">max_replication_slots</span> = <span class="number">2000</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在拷贝到备库之前，主库要创建一个 slot：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">postgres<span class="operator">=</span># <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> pg_create_physical_replication_slot(<span class="string">&#x27;node_a_slot&#x27;</span>);</span><br><span class="line">  slot_name  <span class="operator">|</span> xlog_position</span><br><span class="line"><span class="comment">-------------+---------------</span></span><br><span class="line"> node_a_slot <span class="operator">|</span></span><br><span class="line"></span><br><span class="line">postgres<span class="operator">=</span># <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> pg_replication_slots;</span><br><span class="line">  slot_name  <span class="operator">|</span> slot_type <span class="operator">|</span> datoid <span class="operator">|</span> database <span class="operator">|</span> active <span class="operator">|</span> xmin <span class="operator">|</span> restart_lsn</span><br><span class="line"><span class="comment">-------------+-----------+--------+----------+--------+------+-------------</span></span><br><span class="line"> node_a_slot <span class="operator">|</span> physical  <span class="operator">|</span>        <span class="operator">|</span>          <span class="operator">|</span> f      <span class="operator">|</span>      <span class="operator">|</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>在备库的 recovery.conf 文件中添加一行：</li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">standby_mode</span> = <span class="string">&#x27;on&#x27;</span></span><br><span class="line"><span class="attr">primary_conninfo</span> = <span class="string">&#x27;host=192.168.4.225 port=19000 user=wslu password=xxxx&#x27;</span></span><br><span class="line"><span class="attr">primary_slot_name</span> = <span class="string">&#x27;node_a_slot&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.postgresql.org/docs/9.4/static/runtime-config-replication.html">https://www.postgresql.org/docs/9.4/static/runtime-config-replication.html</a></p><p><a href="https://www.postgresql.org/docs/9.4/static/warm-standby.html#CASCADING-REPLICATION">https://www.postgresql.org/docs/9.4/static/warm-standby.html#CASCADING-REPLICATION</a><br><a href="http://blog.2ndquadrant.com/postgresql-9-4-slots/">http://blog.2ndquadrant.com/postgresql-9-4-slots/</a></p><p><a href="http://grokbase.com/t/postgresql/pgsql-general/13654jchy3/trouble-with-replication">http://grokbase.com/t/postgresql/pgsql-general/13654jchy3/trouble-with-replication</a></p><p><a href="http://stackoverflow.com/questions/28201475/how-do-i-fix-a-postgresql-9-3-slave-that-cannot-keep-up-with-the-master">http://stackoverflow.com/questions/28201475/how-do-i-fix-a-postgresql-9-3-slave-that-cannot-keep-up-with-the-master</a></p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> PostgreSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PostgreSQL </tag>
            
            <tag> 问题定位 </tag>
            
            <tag> WAL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码分析 | 使用 gcov 和 lcov 测试 PostgreSQL 代码覆盖率</title>
      <link href="/2016/03/30/test-postgresql-code-coverage-using-gcov-and-lcov/"/>
      <url>/2016/03/30/test-postgresql-code-coverage-using-gcov-and-lcov/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p><strong>本文首发于 2016-03-30 15:34:34</strong></p></blockquote><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>通常我们评判一个 test case 好坏的标准之一是代码的覆盖率，一个好的 test case 应该覆盖到所有的代码。</p><p>那么问题来了，我们<strong>怎么知道这个 test case 有没有覆盖到所有的代码呢？</strong></p><p>以 PostgreSQL 为例，我们看看如何检测 C 语言程序的代码覆盖率。</p><p>C 代码覆盖率测试，需要用到 gcc 的配套工具<code>gcov</code>，还有一个可视化工具<code>lcov</code>。</p><h1 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h1><p>首先需要安装依赖 gcov 和 lcov 。</p><p>gcov 在 gcc 包中已经包含了，lcov 是 ltp 的一个 gcov 扩展插件，用来产生 HTML 报告。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install lcov</span><br></pre></td></tr></table></figure><h1 id="2-编译、安装-PG"><a href="#2-编译、安装-PG" class="headerlink" title="2. 编译、安装 PG"></a>2. 编译、安装 PG</h1><h2 id="2-1-编译选项介绍"><a href="#2-1-编译选项介绍" class="headerlink" title="2.1. 编译选项介绍"></a>2.1. 编译选项介绍</h2><p>首先介绍一下 PostgreSQL 的编译选项 <code>--enable-coverage</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--enable-coverage       build with coverage testing instrumentation</span><br></pre></td></tr></table></figure><p>这个编译项对应 gcc 的两个参数：<code>-fprofile-arcs</code> 和 <code>-ftest-coverage</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># enable code coverage if --enable-coverage</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="string">&quot;<span class="variable">$enable_coverage</span>&quot;</span> = yes; <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">test</span> <span class="string">&quot;<span class="variable">$GCC</span>&quot;</span> = yes; <span class="keyword">then</span></span><br><span class="line">    CFLAGS=<span class="string">&quot;<span class="variable">$CFLAGS</span> -fprofile-arcs -ftest-coverage&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    as_fn_error $? <span class="string">&quot;--enable-coverage is supported only when using GCC&quot;</span> <span class="string">&quot;<span class="variable">$LINENO</span>&quot;</span> 5</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>通过<code>man gcc</code>查看这两个参数的含义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">-fprofile-arcs</span><br><span class="line">           Add code so that program flow arcs are instrumented.  During execution the program records how many times each branch and call is executed and how many times it is taken or returns.  When</span><br><span class="line">           the compiled program exits it saves this data to a file called auxname.gcda for each source file.  The data may be used for profile-directed optimizations (-fbranch-probabilities), or for</span><br><span class="line">           test coverage analysis (-ftest-coverage).  Each object file&#x27;s auxname is generated from the name of the output file, if explicitly specified and it is not the final executable, otherwise</span><br><span class="line">           it is the basename of the source file.  In both cases any suffix is removed (e.g. foo.gcda for input file dir/foo.c, or dir/foo.gcda for output file specified as -o dir/foo.o).</span><br><span class="line"></span><br><span class="line">--coverage</span><br><span class="line">           This option is used to compile and link code instrumented for coverage analysis.  The option is a synonym for -fprofile-arcs -ftest-coverage (when compiling) and -lgcov (when linking).</span><br><span class="line">           See the documentation for those options for more details.</span><br><span class="line"></span><br><span class="line">           *   Compile the source files with -fprofile-arcs plus optimization and code generation options.  For test coverage analysis, use the additional -ftest-coverage option.  You do not need to</span><br><span class="line">               profile every source file in a program.</span><br><span class="line"></span><br><span class="line">           *   Link your object files with -lgcov or -fprofile-arcs (the latter implies the former).</span><br><span class="line"></span><br><span class="line">           *   Run the program on a representative workload to generate the arc profile information.  This may be repeated any number of times.  You can run concurrent instances of your program, and</span><br><span class="line">               provided that the file system supports locking, the data files will be correctly updated.  Also &quot;fork&quot; calls are detected and correctly handled (double counting will not happen).</span><br><span class="line"></span><br><span class="line">           *   For profile-directed optimizations, compile the source files again with the same optimization and code generation options plus -fbranch-probabilities.</span><br><span class="line"></span><br><span class="line">           *   For test coverage analysis, use gcov to produce human readable information from the .gcno and .gcda files.  Refer to the gcov documentation for further information.</span><br><span class="line"></span><br><span class="line">           With -fprofile-arcs, for each function of your program GCC creates a program flow graph, then finds a spanning tree for the graph.  Only arcs that are not on the spanning tree have to be</span><br><span class="line">           instrumented: the compiler adds code to count the number of times that these arcs are executed.  When an arc is the only exit or only entrance to a block, the instrumentation code can be</span><br><span class="line">           added to the block; otherwise, a new basic block must be created to hold the instrumentation code.</span><br><span class="line"></span><br><span class="line">-ftest-coverage</span><br><span class="line">           Produce a notes file that the gcov code-coverage utility can use to show program coverage.  Each source file&#x27;s note file is called auxname.gcno.  Refer to the -fprofile-arcs option above</span><br><span class="line">           for a description of auxname and instructions on how to generate test coverage data.  Coverage data matches the source files more closely if you do not optimize.</span><br></pre></td></tr></table></figure><p><strong>-fprofile-arcs</strong>：</p><blockquote><p><code>-fprofile-arcs</code> 用于产生 .c 文件对应的 .gcda 文件，.gcda 文件可以被用于 profile 驱动的优化，或者结合 gcov 来做代码覆盖分析。</p><p>编译时尽量不要使用 -O 优化，这样代码覆盖数据 .gcda 才能尽可能和代码接近。</p><p>当代码被调用时，.gcda 文件中对应的计数器会被修改，记录代码被调用的次数。</p></blockquote><p><strong>-ftest-coverage</strong>：</p><blockquote><p><code>-ftest-coverage</code> 这个选项用于产生 .c 文件的 .gcno 文件。这个文件生成后不会被修改。结合 .gcda，可以分析测试代码覆盖率。</p></blockquote><h2 id="2-2-编译安装"><a href="#2-2-编译安装" class="headerlink" title="2.2. 编译安装"></a>2.2. 编译安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/opt/pgsql9.4.4 --with-pgport=1921 --with-perl --with-python --with-tcl --with-openssl --with-pam --with-ldap --with-libxml --with-libxslt --enable-thread-safety --enable-debug --enable-dtrace --enable-coverage</span><br><span class="line"></span><br><span class="line">gmake world &amp;&amp; gmake install-world</span><br></pre></td></tr></table></figure><p>安装好后，我们会发现在源码目录中多了一些.gcda 和.gcno 的文件，每个.c 文件都会对应这两个文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">postgres@wslu-&gt; ll</span><br><span class="line">total 1.3M</span><br><span class="line">-rw-r--r-- 1 postgres postgres  22K Jun 10 03:29 gistbuildbuffers.c</span><br><span class="line">-rw------- 1 postgres postgres 1.6K Sep  7 14:42 gistbuildbuffers.gcda</span><br><span class="line">-rw-r--r-- 1 postgres postgres  15K Sep  7 14:38 gistbuildbuffers.gcno</span><br><span class="line">-rw-r--r-- 1 postgres postgres  70K Sep  7 14:38 gistbuildbuffers.o</span><br><span class="line">-rw-r--r-- 1 postgres postgres  37K Jun 10 03:29 gistbuild.c</span><br><span class="line">-rw------- 1 postgres postgres 2.2K Sep  7 14:42 gistbuild.gcda</span><br><span class="line">-rw-r--r-- 1 postgres postgres  20K Sep  7 14:38 gistbuild.gcno</span><br><span class="line">-rw-r--r-- 1 postgres postgres  92K Sep  7 14:38 gistbuild.o</span><br><span class="line">-rw-r--r-- 1 postgres postgres  43K Jun 10 03:29 gist.c</span><br><span class="line">-rw------- 1 postgres postgres 3.1K Sep  7 14:42 gist.gcda</span><br><span class="line">-rw-r--r-- 1 postgres postgres  29K Sep  7 14:38 gist.gcno</span><br><span class="line">-rw-r--r-- 1 postgres postgres  16K Jun 10 03:29 gistget.c</span><br><span class="line">-rw------- 1 postgres postgres 1.3K Sep  7 14:42 gistget.gcda</span><br><span class="line">-rw-r--r-- 1 postgres postgres  13K Sep  7 14:38 gistget.gcno</span><br><span class="line">-rw-r--r-- 1 postgres postgres  74K Sep  7 14:38 gistget.o</span><br><span class="line">-rw-r--r-- 1 postgres postgres 101K Sep  7 14:38 gist.o</span><br><span class="line">-rw-r--r-- 1 postgres postgres  39K Jun 10 03:29 gistproc.c</span><br><span class="line">-rw------- 1 postgres postgres 3.1K Sep  7 14:42 gistproc.gcda</span><br><span class="line">-rw-r--r-- 1 postgres postgres  31K Sep  7 14:38 gistproc.gcno</span><br><span class="line">-rw-r--r-- 1 postgres postgres  79K Sep  7 14:38 gistproc.o</span><br><span class="line">-rw-r--r-- 1 postgres postgres 9.1K Jun 10 03:29 gistscan.c</span><br><span class="line">-rw------- 1 postgres postgres  848 Sep  7 14:42 gistscan.gcda</span><br><span class="line">-rw-r--r-- 1 postgres postgres 6.7K Sep  7 14:38 gistscan.gcno</span><br><span class="line">-rw-r--r-- 1 postgres postgres  60K Sep  7 14:38 gistscan.o</span><br><span class="line">-rw-r--r-- 1 postgres postgres  24K Jun 10 03:29 gistsplit.c</span><br><span class="line">-rw------- 1 postgres postgres 1.5K Sep  7 14:42 gistsplit.gcda</span><br><span class="line">-rw-r--r-- 1 postgres postgres  15K Sep  7 14:38 gistsplit.gcno</span><br><span class="line">-rw-r--r-- 1 postgres postgres  68K Sep  7 14:38 gistsplit.o</span><br><span class="line">-rw-r--r-- 1 postgres postgres  21K Jun 10 03:29 gistutil.c</span><br><span class="line">-rw------- 1 postgres postgres 2.2K Sep  7 14:42 gistutil.gcda</span><br><span class="line">-rw-r--r-- 1 postgres postgres  20K Sep  7 14:38 gistutil.gcno</span><br><span class="line">-rw-r--r-- 1 postgres postgres  84K Sep  7 14:38 gistutil.o</span><br><span class="line">-rw-r--r-- 1 postgres postgres 7.1K Jun 10 03:29 gistvacuum.c</span><br><span class="line">-rw------- 1 postgres postgres  784 Sep  7 14:42 gistvacuum.gcda</span><br><span class="line">-rw-r--r-- 1 postgres postgres 7.3K Sep  7 14:38 gistvacuum.gcno</span><br><span class="line">-rw-r--r-- 1 postgres postgres  56K Sep  7 14:38 gistvacuum.o</span><br><span class="line">-rw-r--r-- 1 postgres postgres  14K Jun 10 03:29 gistxlog.c</span><br><span class="line">-rw------- 1 postgres postgres 1.2K Sep  7 14:42 gistxlog.gcda</span><br><span class="line">-rw-r--r-- 1 postgres postgres  12K Sep  7 14:38 gistxlog.gcno</span><br><span class="line">-rw-r--r-- 1 postgres postgres  50K Sep  7 14:38 gistxlog.o</span><br><span class="line">-rw-r--r-- 1 postgres postgres  538 Jun 10 03:29 Makefile</span><br><span class="line">-rw-r--r-- 1 postgres postgres  357 Sep  7 14:38 objfiles.txt</span><br><span class="line">-rw-r--r-- 1 postgres postgres  20K Jun 10 03:29 README</span><br><span class="line"></span><br><span class="line">postgres@wslu-&gt; <span class="built_in">pwd</span></span><br><span class="line">/opt/soft_bak/postgresql-9.4.4/src/backend/access/gist</span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><p>源码文件目录的权限需要改为数据库启动用户的权限，否则无法修改 .gcda 的值，也就无法获取代码被调用的次数了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@wslu-&gt; chown -R postgres:postgres /opt/soft_bak/postgresql-9.4.4</span><br></pre></td></tr></table></figure><p>接下来我们看看文件的变化，以 dbsize.c 中的两个获取 pg_database_size 的 C 函数为例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">postgres@wslu-&gt; ls -la|grep dbsize</span><br><span class="line">-rw-r--r--  1 postgres postgres  19342 Jun 10 03:29 dbsize.c</span><br><span class="line">-rw-------  1 postgres postgres   2664 Sep  7 15:01 dbsize.gcda</span><br><span class="line">-rw-r--r--  1 postgres postgres  23272 Sep  7 14:38 dbsize.gcno</span><br><span class="line">-rw-r--r--  1 postgres postgres  89624 Sep  7 14:38 dbsize.o</span><br></pre></td></tr></table></figure><p>调用一次：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">postgres@wslu-&gt; psql</span><br><span class="line">psql (9.4.4)</span><br><span class="line">Type <span class="string">&quot;help&quot;</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line">postgres=<span class="comment"># select pg_database_size(oid) from pg_database;</span></span><br><span class="line"> pg_database_size</span><br><span class="line">------------------</span><br><span class="line">          6898180</span><br><span class="line">          6889988</span><br><span class="line">         24742560</span><br><span class="line">          6898180</span><br><span class="line">          6898180</span><br><span class="line">          6898180</span><br><span class="line">(6 rows)</span><br><span class="line">postgres=<span class="comment"># \q</span></span><br></pre></td></tr></table></figure><p>再次查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">postgres@wslu-&gt; ls -la|grep dbsize</span><br><span class="line">-rw-r--r--  1 postgres postgres  19342 Jun 10 03:29 dbsize.c</span><br><span class="line">-rw-------  1 postgres postgres   2664 Sep  7 15:12 dbsize.gcda</span><br><span class="line">-rw-r--r--  1 postgres postgres  23272 Sep  7 14:38 dbsize.gcno</span><br><span class="line">-rw-r--r--  1 postgres postgres  89624 Sep  7 14:38 dbsize.o</span><br></pre></td></tr></table></figure><p>dbsize.gcda 文件的修改时间发送了变化，说明刚才我们调用 pg_database_size(oid) 时，调用了 dbsize.c 中的代码。对应的行计数器会发生变化。</p><h1 id="3-生成-HTML-报告"><a href="#3-生成-HTML-报告" class="headerlink" title="3. 生成 HTML 报告"></a>3. 生成 HTML 报告</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir html</span><br><span class="line">$ <span class="built_in">cd</span> html</span><br><span class="line"></span><br><span class="line">$ lcov --directory /opt/soft_bak/postgresql-9.4.4 --capture --output-file ./app.info</span><br><span class="line"><span class="comment"># 如果你不需要所有的代码，修改以上目录即可，譬如只看 contrib 下面的代码覆盖率。</span></span><br><span class="line"></span><br><span class="line">$ genhtml ./app.info</span><br><span class="line">postgres@wslu-&gt; ll</span><br><span class="line">total 3.7M</span><br><span class="line">drwxrwxr-x 12 postgres postgres 4.0K Sep  7 15:02 access</span><br><span class="line">-rw-rw-r--  1 postgres postgres  141 Sep  7 15:02 amber.png</span><br><span class="line">-rw-rw-r--  1 postgres postgres 3.4M Sep  7 15:02 app.info</span><br><span class="line">drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 bootstrap</span><br><span class="line">drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 catalog</span><br><span class="line">drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 commands</span><br><span class="line">-rw-rw-r--  1 postgres postgres  141 Sep  7 15:02 emerald.png</span><br><span class="line">drwxrwxr-x  2 postgres postgres  12K Sep  7 15:02 executor</span><br><span class="line">drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 foreign</span><br><span class="line">-rw-rw-r--  1 postgres postgres 9.7K Sep  7 15:02 gcov.css</span><br><span class="line">-rw-rw-r--  1 postgres postgres  167 Sep  7 15:02 glass.png</span><br><span class="line">-rw-rw-r--  1 postgres postgres  57K Sep  7 15:02 index.html</span><br><span class="line">-rw-rw-r--  1 postgres postgres  57K Sep  7 15:02 index-sort-f.html</span><br><span class="line">-rw-rw-r--  1 postgres postgres  57K Sep  7 15:02 index-sort-l.html</span><br><span class="line">drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 lib</span><br><span class="line">drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 libpq</span><br><span class="line">drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 main</span><br><span class="line">drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 nodes</span><br><span class="line">drwxrwxr-x  3 postgres postgres 4.0K Sep  7 15:02 opt</span><br><span class="line">drwxrwxr-x  7 postgres postgres 4.0K Sep  7 15:02 optimizer</span><br><span class="line">drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 parser</span><br><span class="line">drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 port</span><br><span class="line">drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 postmaster</span><br><span class="line">drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 regex</span><br><span class="line">drwxrwxr-x  3 postgres postgres 4.0K Sep  7 15:02 replication</span><br><span class="line">drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 rewrite</span><br><span class="line">-rw-rw-r--  1 postgres postgres  141 Sep  7 15:02 ruby.png</span><br><span class="line">drwxrwxr-x  3 postgres postgres 4.0K Sep  7 15:02 snowball</span><br><span class="line">-rw-rw-r--  1 postgres postgres  141 Sep  7 15:02 snow.png</span><br><span class="line">drwxrwxr-x 10 postgres postgres 4.0K Sep  7 15:02 storage</span><br><span class="line">drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 tcop</span><br><span class="line">drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 tsearch</span><br><span class="line">-rw-rw-r--  1 postgres postgres  117 Sep  7 15:02 updown.png</span><br><span class="line">drwxrwxr-x  3 postgres postgres 4.0K Sep  7 15:02 usr</span><br><span class="line">drwxrwxr-x 14 postgres postgres 4.0K Sep  7 15:02 utils</span><br></pre></td></tr></table></figure><h1 id="4-查看报告"><a href="#4-查看报告" class="headerlink" title="4. 查看报告"></a>4. 查看报告</h1><p>浏览器中打开 <code>index.html</code> 即可查看。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>PostgreSQL 其实已经在 Makefile 提供了生成代码覆盖 HTML 的 target 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@wslu postgresql-9.4.4]<span class="comment"># make coverage-html</span></span><br></pre></td></tr></table></figure><p>产生的 html 目录如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@wslu postgresql-9.4.4]<span class="comment"># cd coverage</span></span><br><span class="line">[root@wslu coverage]<span class="comment"># ll</span></span><br><span class="line">total 224</span><br><span class="line">-rw-r--r--  1 root root   141 Sep  7 19:17 amber.png</span><br><span class="line">-rw-r--r--  1 root root   141 Sep  7 19:17 emerald.png</span><br><span class="line">-rw-r--r--  1 root root  9893 Sep  7 19:17 gcov.css</span><br><span class="line">-rw-r--r--  1 root root   167 Sep  7 19:17 glass.png</span><br><span class="line">-rw-r--r--  1 root root 58737 Sep  7 19:18 index.html</span><br><span class="line">-rw-r--r--  1 root root 58730 Sep  7 19:18 index-sort-f.html</span><br><span class="line">-rw-r--r--  1 root root 58730 Sep  7 19:18 index-sort-l.html</span><br><span class="line">-rw-r--r--  1 root root   141 Sep  7 19:17 ruby.png</span><br><span class="line">-rw-r--r--  1 root root   141 Sep  7 19:17 snow.png</span><br><span class="line">drwxr-xr-x 11 root root  4096 Sep  7 19:18 src</span><br><span class="line">-rw-r--r--  1 root root   117 Sep  7 19:17 updown.png</span><br><span class="line">drwxr-xr-x  3 root root  4096 Sep  7 19:18 usr</span><br></pre></td></tr></table></figure><p>每次对代码改动后，执行完 <code>make check</code> 或其他回归测试手段后，就可以执行 <code>make coverage-html</code> 了。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://magustest.com/blog/whiteboxtesting/using-gcov-lcov/">Magus Test Archive</a></li><li><a href="http://ltp.sourceforge.net/coverage/lcov.php">lcov</a></li><li><a href="http://ltp.sourceforge.net/coverage/lcov/readme.php">lcov readme</a></li><li><a href="https://github.com/linux-test-project/ltp">GitHub - linux-test-project/ltp: Linux Test Project http://linux-test-project.github.io/</a></li><li><a href="https://gcc.gnu.org/onlinedocs/gcc/Gcov.html">Gcov (Using the GNU Compiler Collection (GCC))</a></li><li><a href="https://wiki.postgresql.org/wiki/CodeCoverage">CodeCoverage - PostgreSQL wiki</a></li><li><a href="http://www.postgresql.org/docs/devel/static/regress-coverage.html">PostgreSQL: Documentation: devel: 33.5. Test Coverage Examination</a></li></ol><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> PostgreSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PostgreSQL </tag>
            
            <tag> gcov </tag>
            
            <tag> lcov </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码分析 | PostgreSQL 回归测试详解</title>
      <link href="/2016/03/30/postgresql-regression-test-details/"/>
      <url>/2016/03/30/postgresql-regression-test-details/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p><strong>本文首发于 2016-03-30 15:29:35</strong></p></blockquote><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>回归测试是 PostgreSQL 的测试方法之一。</p><p>回归测试，需要事先定义好测试脚本（通常是 SQL 脚本，放在 sql 目录中），同时定义好调用执行测试脚本的预期正确输出文件（通常放在 expected 目录中)。</p><p>测试使用 <code>make check</code> 或 <code>make installcheck</code> 进行，它会通过 <code>pg_regress</code> 程序调用 sql 目录中的 SQL，并收集输出结果（通常放到 results 目录中），最后 pg_regress 会对 expected 目录和 results 目录中的文件使用 diff 进行一一比较。</p><p>如果比较发现文件内容不一致，会将不一致的结果输出到 <code>regression.diffs</code> 文件中，并返回这个 TEST CASE failed。</p><p>但是这种测试方法实际上有一些需要注意的地方，例如我们使用不同的本地化设置，时区可能得到的结果和期望的结果就不一样。另外有些不可预知的结果，例如随机值，数据的顺序，执行计划和优化器相关参数有关。这些因素都可能导致测试结果和预期不一致，那么我们就需要人为去修复这种 failed。</p><p>PostgreSQL 的主代码测试文件在 <code>src/test/regress</code> 目录中。</p><p>这个目录的结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">postgres@digoal-&gt; ll -rt</span><br><span class="line">total 1.2M</span><br><span class="line">-rw-r--r-- 1 postgres postgres  579 Jun 10 03:29 standby_schedule <span class="comment"># 测试standby的调度配置, 其实就是调度sql里的文件名</span></span><br><span class="line">-rw-r--r-- 1 postgres postgres 2.3K Jun 10 03:29 serial_schedule <span class="comment"># 串行测试的调度配置</span></span><br><span class="line">-rw-r--r-- 1 postgres postgres  937 Jun 10 03:29 resultmap <span class="comment"># 不同的测试平台的结果映射文件，因为不同平台某些测试结果可能不相同，所以一个expected文件不能支持所有的平台。例如浮点数测试。</span></span><br><span class="line">-rwxr-xr-x 1 postgres postgres 4.4K Jun 10 03:29 regressplans.sh</span><br><span class="line">-rw-r--r-- 1 postgres postgres  20K Jun 10 03:29 regress.c</span><br><span class="line">-rw-r--r-- 1 postgres postgres  159 Jun 10 03:29 README</span><br><span class="line">-rw-r--r-- 1 postgres postgres 2.7K Jun 10 03:29 pg_regress_main.c</span><br><span class="line">-rw-r--r-- 1 postgres postgres 1.6K Jun 10 03:29 pg_regress.h</span><br><span class="line">-rw-r--r-- 1 postgres postgres  69K Jun 10 03:29 pg_regress.c</span><br><span class="line">-rw-r--r-- 1 postgres postgres 3.6K Jun 10 03:29 parallel_schedule <span class="comment"># 并行测试的调度配置</span></span><br><span class="line">-rw-r--r-- 1 postgres postgres  624 Jun 10 03:29 Makefile</span><br><span class="line">-rw-r--r-- 1 postgres postgres 5.6K Jun 10 03:29 GNUmakefile</span><br><span class="line">drwxrwxrwx 2 postgres postgres 4.0K Jun 10 03:38 output</span><br><span class="line">drwxrwxrwx 2 postgres postgres 4.0K Jun 10 03:38 input</span><br><span class="line">drwxrwxrwx 2 postgres postgres 4.0K Jun 10 03:38 data   一些测试数据</span><br><span class="line">drwxrwxrwx 2 postgres postgres 4.0K Sep  7 14:51 sql <span class="comment"># 测试用到的SQL</span></span><br><span class="line">drwxrwxr-x 2 postgres postgres 4.0K Sep  7 14:52 results <span class="comment"># 通过pg_regress调用sql目录中的脚本，得到的结果</span></span><br><span class="line">drwxrwxrwx 2 postgres postgres 4.0K Sep  7 14:51 expected <span class="comment"># 执行sql目录中的文件对应的正确返回结果</span></span><br></pre></td></tr></table></figure><p>上层目录结构如下，其中包含了一些其他的测试目标，例如隔离级别的测试，本地化测试，性能测试，线程安全测试。等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">postgres@digoal-&gt; <span class="built_in">cd</span> /opt/soft_bak/postgresql-9.4.4/src/<span class="built_in">test</span></span><br><span class="line">postgres@digoal-&gt; ll</span><br><span class="line">total 36K</span><br><span class="line">drwxrwxrwx  2 postgres postgres 4.0K Jun 10 03:38 examples</span><br><span class="line">drwxrwxrwx  4 postgres postgres 4.0K Jun 10 03:41 isolation</span><br><span class="line">drwxrwxrwx  6 postgres postgres 4.0K Jun 10 03:38 locale</span><br><span class="line">-rw-r--r--  1 postgres postgres  389 Jun 10 03:29 Makefile</span><br><span class="line">drwxrwxrwx  4 postgres postgres 4.0K Jun 10 03:38 mb</span><br><span class="line">drwxrwxrwx  4 postgres postgres 4.0K Jun 10 03:38 performance</span><br><span class="line">drwxrwxrwx  2 postgres postgres 4.0K Jun 10 03:38 perl</span><br><span class="line">drwxrwxrwx 10 postgres postgres 4.0K Sep  7 19:17 regress</span><br><span class="line">drwxrwxrwx  2 postgres postgres 4.0K Jun 10 03:38 thread</span><br></pre></td></tr></table></figure><p>接下来我们看看 PostgreSQL 的回归测试程序 pg_regress 的用法，它不会安装到 PGHOME/bin 中，只在 src/test/regress 中存在。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> src/<span class="built_in">test</span>/regress</span><br><span class="line">$ src/<span class="built_in">test</span>/regress/pg_regress --<span class="built_in">help</span></span><br><span class="line">PostgreSQL regression <span class="built_in">test</span> driver</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  pg_regress [OPTION]... [EXTRA-TEST]...</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  --config-auth=DATADIR     update authentication settings <span class="keyword">for</span> DATADIR</span><br><span class="line">  --create-role=ROLE        create the specified role before testing</span><br><span class="line">  --dbname=DB               use database DB (default <span class="string">&quot;regression&quot;</span>)</span><br><span class="line">  --debug                   turn on debug mode <span class="keyword">in</span> programs that are run</span><br><span class="line">  --dlpath=DIR              look <span class="keyword">for</span> dynamic libraries <span class="keyword">in</span> DIR</span><br><span class="line">  --encoding=ENCODING       use ENCODING as the encoding</span><br><span class="line">  --inputdir=DIR            take input files from DIR (default <span class="string">&quot;.&quot;</span>)</span><br><span class="line">  --launcher=CMD            use CMD as launcher of psql</span><br><span class="line">  --load-extension=EXT      load the named extension before running the</span><br><span class="line">                            tests; can appear multiple <span class="built_in">times</span></span><br><span class="line">  --load-language=LANG      load the named language before running the</span><br><span class="line">                            tests; can appear multiple <span class="built_in">times</span></span><br><span class="line">  --max-connections=N       maximum number of concurrent connections</span><br><span class="line">                            (default is 0, meaning unlimited)</span><br><span class="line">  --outputdir=DIR           place output files <span class="keyword">in</span> DIR (default <span class="string">&quot;.&quot;</span>)</span><br><span class="line">  --schedule=FILE           use <span class="built_in">test</span> ordering schedule from FILE</span><br><span class="line">                            (can be used multiple <span class="built_in">times</span> to concatenate)</span><br><span class="line">  --temp-install=DIR        create a temporary installation <span class="keyword">in</span> DIR</span><br><span class="line">  --use-existing            use an existing installation</span><br><span class="line"></span><br><span class="line">Options <span class="keyword">for</span> <span class="string">&quot;temp-install&quot;</span> mode:</span><br><span class="line">  --extra-install=DIR       additional directory to install (e.g., contrib)</span><br><span class="line">  --no-locale               use C locale</span><br><span class="line">  --port=PORT               start postmaster on PORT</span><br><span class="line">  --temp-config=FILE        append contents of FILE to temporary config</span><br><span class="line">  --top-builddir=DIR        (relative) path to top level build directory</span><br><span class="line"></span><br><span class="line">Options <span class="keyword">for</span> using an existing installation:</span><br><span class="line">  --host=HOST               use postmaster running on HOST</span><br><span class="line">  --port=PORT               use postmaster running at PORT</span><br><span class="line">  --user=USER               connect as USER</span><br><span class="line">  --psqldir=DIR             use psql <span class="keyword">in</span> DIR (default: configured bindir)</span><br><span class="line"></span><br><span class="line">The <span class="built_in">exit</span> status is 0 <span class="keyword">if</span> all tests passed, 1 <span class="keyword">if</span> some tests failed, and 2</span><br><span class="line"><span class="keyword">if</span> the tests could not be run <span class="keyword">for</span> some reason.</span><br><span class="line"></span><br><span class="line">Report bugs to &lt;pgsql-bugs@postgresql.org&gt;.</span><br></pre></td></tr></table></figure><h2 id="回归测试用法"><a href="#回归测试用法" class="headerlink" title="回归测试用法"></a>回归测试用法</h2><p>在 PostgreSQL 源码根目录，或者源码的 regress 目录中执行如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make check <span class="comment"># 测试时需要初始化数据库集群</span></span><br><span class="line">make installcheck <span class="comment"># 使用以及启动的数据库集群测试，不需要初始化数据库集群</span></span><br></pre></td></tr></table></figure><p>以下同时测试主代码以及 contrib 的代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make check-world</span><br><span class="line">make installcheck-world</span><br></pre></td></tr></table></figure><p>如果要使用自定义的 diff 参数，可以设置一个环境变量，例如：<code>make check PG_REGRESS_DIFF_OPTS=&#39;-u&#39;</code>。</p><p>同时我们还可以使用不同的 LOCALE 进行测试。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make check LANG=de_DE.utf8</span><br><span class="line">make check NO_LOCALE=1</span><br><span class="line">make check LANG=C ENCODING=EUC_JP</span><br></pre></td></tr></table></figure><p>当我们要测试调度中不包含的测试 SQL 时，可以使用 <code>EXTRA_TESTS</code> 参数，至于这些脚本为什么默认不包含在调度中，可能是因为这些 SQL 脚本可能对平台的依赖比较严重，所以没有放到默认的测试中。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make check EXTRA_TESTS=collate.linux.utf8 LANG=en_US.utf8</span><br><span class="line">make check EXTRA_TESTS=numeric_big</span><br></pre></td></tr></table></figure><p>接下来我们看看调度文件以及 sql 脚本目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">postgres@digoal-&gt; <span class="built_in">pwd</span></span><br><span class="line">/opt/soft_bak/postgresql-9.4.4/src/<span class="built_in">test</span>/regress</span><br><span class="line">postgres@digoal-&gt; less serial_schedule</span><br><span class="line"><span class="comment"># src/test/regress/serial_schedule</span></span><br><span class="line"><span class="comment"># This should probably be in an order similar to parallel_schedule.</span></span><br><span class="line"><span class="built_in">test</span>: tablespace</span><br><span class="line"><span class="built_in">test</span>: boolean</span><br><span class="line"><span class="built_in">test</span>: char</span><br><span class="line"><span class="built_in">test</span>: name</span><br><span class="line"><span class="built_in">test</span>: varchar</span><br><span class="line"><span class="built_in">test</span>: text</span><br><span class="line"><span class="built_in">test</span>: int2</span><br><span class="line"><span class="built_in">test</span>: int4</span><br><span class="line"><span class="built_in">test</span>: int8</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>并行调度：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">postgres@digoal-&gt; less parallel_schedule</span><br><span class="line"><span class="comment"># ----------</span></span><br><span class="line"><span class="comment"># src/test/regress/parallel_schedule</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By convention, we put no more than twenty tests in any one parallel group;</span></span><br><span class="line"><span class="comment"># this limits the number of connections needed to run the tests.</span></span><br><span class="line"><span class="comment"># ----------</span></span><br><span class="line"><span class="comment"># run tablespace by itself, and first, because it forces a checkpoint;</span></span><br><span class="line"><span class="comment"># we&#x27;d prefer not to have checkpoints later in the tests because that</span></span><br><span class="line"><span class="comment"># interferes with crash-recovery testing.</span></span><br><span class="line"><span class="built_in">test</span>: tablespace</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------</span></span><br><span class="line"><span class="comment"># The first group of parallel tests</span></span><br><span class="line"><span class="comment"># ----------</span></span><br><span class="line"><span class="built_in">test</span>: boolean char name varchar text int2 int4 int8 oid float4 float8 bit numeric txid uuid enum money rangetypes pg_lsn regproc</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>调度文件的 test: 后面跟的就是 sql 目录下的文件名(不含 .sql 后缀)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">postgres@digoal-&gt; less sql/</span><br><span class="line">total 1940</span><br><span class="line">drwxrwxrwx  2 postgres postgres   4096 Sep  7 14:51 ./</span><br><span class="line">drwxrwxrwx 10 postgres postgres   4096 Sep  7 22:34 ../</span><br><span class="line">-rw-r--r--  1 postgres postgres   2237 Jun 10 03:29 abstime.sql</span><br><span class="line">-rw-r--r--  1 postgres postgres   4097 Jun 10 03:29 advisory_lock.sql</span><br><span class="line">-rw-r--r--  1 postgres postgres  20295 Jun 10 03:29 aggregates.sql</span><br><span class="line">-rw-r--r--  1 postgres postgres  24882 Jun 10 03:29 alter_generic.sql</span><br><span class="line">-rw-r--r--  1 postgres postgres  54461 Jun 10 03:29 alter_table.sql</span><br><span class="line">-rw-r--r--  1 postgres postgres  17244 Jun 10 03:29 arrays.sql</span><br><span class="line">-rw-r--r--  1 postgres postgres    594 Jun 10 03:29 async.sql</span><br><span class="line">-rw-r--r--  1 postgres postgres   1365 Jun 10 03:29 bitmapops.sql</span><br><span class="line">-rw-r--r--  1 postgres postgres   6406 Jun 10 03:29 bit.sql</span><br><span class="line">-rw-r--r--  1 postgres postgres   4164 Jun 10 03:29 boolean.sql</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>所以前面提到的 EXTRA_TESTS 实际上也是 sql 目录中的文件名(不带 .sql 后缀)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make check EXTRA_TESTS=collate.linux.utf8 LANG=en_US.utf8</span><br><span class="line">make check EXTRA_TESTS=numeric_big</span><br></pre></td></tr></table></figure><p>来实际的试一下吧：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">postgres@digoal-&gt; <span class="built_in">pwd</span></span><br><span class="line">/opt/soft_bak/postgresql-9.4.4/src/<span class="built_in">test</span>/regress</span><br><span class="line">postgres@digoal-&gt; make installcheck-parallel  //并行测试，使用已经开启的现有的数据库集群</span><br><span class="line">make -C ../../../src/port all</span><br><span class="line">......</span><br><span class="line">../../../src/<span class="built_in">test</span>/regress/pg_regress --inputdir=. --psqldir=<span class="string">&#x27;/opt/pgsql9.4.4/bin&#x27;</span>    --dlpath=.  --schedule=./parallel_schedule</span><br><span class="line">(using postmaster on /data01/pg_root_1921, port 1921)</span><br><span class="line">============== dropping database <span class="string">&quot;regression&quot;</span>         ==============</span><br><span class="line">DROP DATABASE</span><br><span class="line">============== creating database <span class="string">&quot;regression&quot;</span>         ==============</span><br><span class="line">CREATE DATABASE</span><br><span class="line">ALTER DATABASE</span><br><span class="line">============== running regression <span class="built_in">test</span> queries        ==============</span><br><span class="line"><span class="built_in">test</span> tablespace               ... ok</span><br><span class="line">......</span><br><span class="line">parallel group (19 tests):  <span class="built_in">limit</span> conversion sequence returning without_oid polymorphism copy2 xml prepare plancache rowtypes temp domain with truncate largeobject rangefuncs alter_table plpgsql</span><br><span class="line">     plancache                ... ok</span><br><span class="line">     <span class="built_in">limit</span>                    ... ok</span><br><span class="line">     plpgsql                  ... ok</span><br><span class="line">     copy2                    ... ok</span><br><span class="line">     temp                     ... ok</span><br><span class="line">     domain                   ... ok</span><br><span class="line">     rangefuncs               ... FAILED</span><br><span class="line">     prepare                  ... ok</span><br><span class="line">     without_oid              ... ok</span><br><span class="line">     conversion               ... ok</span><br><span class="line">     truncate                 ... ok</span><br><span class="line">     alter_table              ... ok</span><br><span class="line">     sequence                 ... ok</span><br><span class="line">     polymorphism             ... FAILED</span><br><span class="line">     rowtypes                 ... ok</span><br><span class="line">     returning                ... ok</span><br><span class="line">     largeobject              ... ok</span><br><span class="line">     with                     ... FAILED</span><br><span class="line">     xml                      ... ok</span><br><span class="line"><span class="built_in">test</span> stats                    ... ok</span><br><span class="line">......</span><br><span class="line">=========================</span><br><span class="line"> 22 of 145 tests failed.</span><br><span class="line">=========================</span><br><span class="line"></span><br><span class="line">The differences that caused some tests to fail can be viewed <span class="keyword">in</span> the</span><br><span class="line">file <span class="string">&quot;/opt/soft_bak/postgresql-9.4.4/src/test/regress/regression.diffs&quot;</span>.  A copy of the <span class="built_in">test</span> summary that you see</span><br><span class="line">above is saved <span class="keyword">in</span> the file <span class="string">&quot;/opt/soft_bak/postgresql-9.4.4/src/test/regress/regression.out&quot;</span>.</span><br><span class="line"></span><br><span class="line">make: *** [installcheck-parallel] Error 1</span><br></pre></td></tr></table></figure><p>有些测试失败了，diff 文件已经输出到 <code>/opt/soft_bak/postgresql-9.4.4/src/test/regress/regression.diffs</code>，我们可以查看一下看看为什么测试结果和预期结果不一致。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">postgres@digoal-&gt; less regression.diffs</span><br><span class="line">*** /opt/soft_bak/postgresql-9.4.4/src/<span class="built_in">test</span>/regress/expected/pg_lsn.out 2015-06-10 03:29:38.000000000 +0800</span><br><span class="line">--- /opt/soft_bak/postgresql-9.4.4/src/<span class="built_in">test</span>/regress/results/pg_lsn.out  2015-09-07 22:45:04.413922536 +0800</span><br><span class="line">***************</span><br><span class="line">*** 72,92 ****</span><br><span class="line">         generate_series(1, 5) k</span><br><span class="line">    WHERE i &lt;= 10 AND j &gt; 0 AND j &lt;= 10</span><br><span class="line">    ORDER BY f;</span><br><span class="line">!                                 QUERY PLAN</span><br><span class="line">! --------------------------------------------------------------------------</span><br><span class="line">!  Sort</span><br><span class="line">!    Sort Key: (((((i.i)::text || <span class="string">&#x27;/&#x27;</span>::text) || (j.j)::text))::pg_lsn)</span><br><span class="line">!    -&gt;  HashAggregate</span><br><span class="line">!          Group Key: ((((i.i)::text || <span class="string">&#x27;/&#x27;</span>::text) || (j.j)::text))::pg_lsn</span><br><span class="line">           -&gt;  Nested Loop</span><br><span class="line">                 -&gt;  Function Scan on generate_series k</span><br><span class="line">!                -&gt;  Materialize</span><br><span class="line">!                      -&gt;  Nested Loop</span><br><span class="line">!                            -&gt;  Function Scan on generate_series j</span><br><span class="line">!                                  Filter: ((j &gt; 0) AND (j &lt;= 10))</span><br><span class="line">!                            -&gt;  Function Scan on generate_series i</span><br><span class="line">!                                  Filter: (i &lt;= 10)</span><br><span class="line">! (12 rows)</span><br><span class="line"></span><br><span class="line">  SELECT DISTINCT (i || <span class="string">&#x27;/&#x27;</span> || j)::pg_lsn f</span><br><span class="line">    FROM generate_series(1, 10) i,</span><br><span class="line">--- 72,90 ----</span><br><span class="line">         generate_series(1, 5) k</span><br><span class="line">    WHERE i &lt;= 10 AND j &gt; 0 AND j &lt;= 10</span><br><span class="line">    ORDER BY f;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>对于主代码，如果我们需要自定义测试 SQL，我们可以修改 <code>regress/sql</code> 目录下的文件，或者新增文件。同时修改 <code>regress/expected</code> 目录下的对应期望文件，或者现在期望文件。</p><p>如果是新增文件的情况，我们还需要修改调度文件 <code>regress/serial_schedule和regress/parallel_schedule</code>，把测试加入调度。</p><p>最后，再以 <code>ltree</code> 插件为例，看看如何配置一个外加插件的回归测试。</p><p>ltree 的源码目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">postgres@digoal-&gt; <span class="built_in">cd</span> contrib/</span><br><span class="line">postgres@digoal-&gt; <span class="built_in">cd</span> ltree/</span><br><span class="line">postgres@digoal-&gt; ll -rt</span><br><span class="line">total 1.1M</span><br><span class="line">-rw-r--r-- 1 postgres postgres  517 Jun 10 03:29 Makefile</span><br><span class="line">-rw-r--r-- 1 postgres postgres 2.4K Jun 10 03:29 ltxtquery_op.c</span><br><span class="line">-rw-r--r-- 1 postgres postgres  11K Jun 10 03:29 ltxtquery_io.c</span><br><span class="line">-rw-r--r-- 1 postgres postgres 7.9K Jun 10 03:29 ltree--unpackaged--1.0.sql</span><br><span class="line">-rw-r--r-- 1 postgres postgres  994 Jun 10 03:29 ltreetest.sql</span><br><span class="line">-rw-r--r-- 1 postgres postgres  13K Jun 10 03:29 ltree_op.c</span><br><span class="line">-rw-r--r-- 1 postgres postgres 6.9K Jun 10 03:29 _ltree_op.c</span><br><span class="line">-rw-r--r-- 1 postgres postgres  14K Jun 10 03:29 ltree_io.c</span><br><span class="line">-rw-r--r-- 1 postgres postgres 7.3K Jun 10 03:29 ltree.h</span><br><span class="line">-rw-r--r-- 1 postgres postgres  16K Jun 10 03:29 ltree_gist.c</span><br><span class="line">-rw-r--r-- 1 postgres postgres  13K Jun 10 03:29 _ltree_gist.c</span><br><span class="line">-rw-r--r-- 1 postgres postgres  155 Jun 10 03:29 ltree.control</span><br><span class="line">-rw-r--r-- 1 postgres postgres  18K Jun 10 03:29 ltree--1.0.sql</span><br><span class="line">-rw-r--r-- 1 postgres postgres 7.1K Jun 10 03:29 lquery_op.c</span><br><span class="line">-rw-r--r-- 1 postgres postgres  263 Jun 10 03:29 crc32.h</span><br><span class="line">-rw-r--r-- 1 postgres postgres 4.1K Jun 10 03:29 crc32.c</span><br><span class="line">drwxrwxrwx 2 postgres postgres 4.0K Jun 10 03:38 sql</span><br><span class="line">drwxrwxrwx 2 postgres postgres 4.0K Jun 10 03:38 expected</span><br><span class="line">drwxrwxrwx 2 postgres postgres 4.0K Jun 10 03:38 data</span><br></pre></td></tr></table></figure><p>contrib/ltree 的 Makefile 如下（在这里配置回归测试的调度，用到变量 REGRESS，对应 sql 目录中的脚本文件名）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># contrib/ltree/Makefile</span></span><br><span class="line"></span><br><span class="line">MODULE_big = ltree</span><br><span class="line">OBJS =  ltree_io.o ltree_op.o lquery_op.o _ltree_op.o crc32.o \</span><br><span class="line">        ltxtquery_io.o ltxtquery_op.o ltree_gist.o _ltree_gist.o</span><br><span class="line">PG_CPPFLAGS = -DLOWER_NODE</span><br><span class="line"></span><br><span class="line">EXTENSION = ltree</span><br><span class="line">DATA = ltree--1.0.sql ltree--unpackaged--1.0.sql</span><br><span class="line"></span><br><span class="line">REGRESS = ltree</span><br><span class="line"></span><br><span class="line">ifdef USE_PGXS</span><br><span class="line">PG_CONFIG = pg_config</span><br><span class="line">PGXS := $(shell $(PG_CONFIG) --pgxs)</span><br><span class="line">include $(PGXS)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">subdir = contrib/ltree</span><br><span class="line">top_builddir = ../..</span><br><span class="line">include $(top_builddir)/src/Makefile.global</span><br><span class="line">include $(top_srcdir)/contrib/contrib-global.mk</span><br><span class="line">endif</span><br></pre></td></tr></table></figure><p>其中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include $(PGXS)</span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include $(top_builddir)/src/Makefile.global</span><br></pre></td></tr></table></figure><p>都指向了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src/makefiles/pgxs.mk</span><br></pre></td></tr></table></figure><p>这个 makefile 中会用到回归测试相关的两个变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#   REGRESS -- list of regression test cases (without suffix)</span></span><br><span class="line"><span class="comment">#   REGRESS_OPTS -- additional switches to pass to pg_regress</span></span><br></pre></td></tr></table></figure><p>引用 <code>src/makefiles/pgxs.mk</code> 的部分内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">ifdef REGRESS</span><br><span class="line"></span><br><span class="line"><span class="comment"># Select database to use for running the tests</span></span><br><span class="line">ifneq ($(USE_MODULE_DB),)</span><br><span class="line">  REGRESS_OPTS += --dbname=$(CONTRIB_TESTDB_MODULE)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  REGRESS_OPTS += --dbname=$(CONTRIB_TESTDB)</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line"><span class="comment"># where to find psql for running the tests</span></span><br><span class="line">PSQLDIR = $(bindir)</span><br><span class="line"></span><br><span class="line"><span class="comment"># When doing a VPATH build, must copy over the data files so that the</span></span><br><span class="line"><span class="comment"># driver script can find them.  We have to use an absolute path for</span></span><br><span class="line"><span class="comment"># the targets, because otherwise make will try to locate the missing</span></span><br><span class="line"><span class="comment"># files using VPATH, and will find them in $(srcdir), but the point</span></span><br><span class="line"><span class="comment"># here is that we want to copy them from $(srcdir) to the build</span></span><br><span class="line"><span class="comment"># directory.</span></span><br><span class="line"></span><br><span class="line">ifdef VPATH</span><br><span class="line">abs_builddir := $(shell <span class="built_in">pwd</span>)</span><br><span class="line">test_files_src := $(wildcard $(srcdir)/data/*.data)</span><br><span class="line">test_files_build := $(patsubst $(srcdir)/%, $(abs_builddir)/%, $(test_files_src))</span><br><span class="line"></span><br><span class="line">all: $(test_files_build)</span><br><span class="line">$(test_files_build): $(abs_builddir)/%: $(srcdir)/%</span><br><span class="line">        $(MKDIR_P) $(dir <span class="variable">$@</span>)</span><br><span class="line">        ln -s $&lt; <span class="variable">$@</span></span><br><span class="line">endif <span class="comment"># VPATH</span></span><br><span class="line"></span><br><span class="line">.PHONY: submake</span><br><span class="line">submake:</span><br><span class="line">ifndef PGXS</span><br><span class="line">        $(MAKE) -C $(top_builddir)/src/<span class="built_in">test</span>/regress pg_regress$(X)</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line"><span class="comment"># against installed postmaster</span></span><br><span class="line">installcheck: submake $(REGRESS_PREP)</span><br><span class="line">        $(pg_regress_installcheck) $(REGRESS_OPTS) $(REGRESS)</span><br><span class="line"></span><br><span class="line">ifdef PGXS</span><br><span class="line">check:</span><br><span class="line">        @<span class="built_in">echo</span> <span class="string">&#x27;&quot;$(MAKE) check&quot; is not supported.&#x27;</span></span><br><span class="line">        @<span class="built_in">echo</span> <span class="string">&#x27;Do &quot;$(MAKE) install&quot;, then &quot;$(MAKE) installcheck&quot; instead.&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">check: all submake $(REGRESS_PREP)</span><br><span class="line">        $(pg_regress_check) --extra-install=$(subdir) $(REGRESS_OPTS) $(REGRESS)</span><br><span class="line">endif</span><br><span class="line">endif <span class="comment"># REGRESS</span></span><br></pre></td></tr></table></figure><p>这里用到了 ltree 中 Makefile 中定义的 subdir 和 REGRESS 变量，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">top_builddir = ../..</span><br><span class="line">subdir = contrib/ltree</span><br><span class="line">REGRESS = ltree</span><br></pre></td></tr></table></figure><p>所以我们在 contrib/ltree 中执行 make check 会执行：(指 PGXS 未定义时)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(pg_regress_check) --extra-install=$(subdir) $(REGRESS_OPTS) $(REGRESS)</span><br></pre></td></tr></table></figure><p>pg_regress_check 这个变量在 <code>src/Makefile.global</code> 中定义了，其实就是 pg_regress 命令的调用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">src/Makefile.global</span><br><span class="line">src/Makefile.global:srcdir = .</span><br><span class="line">pg_regress_locale_flags = $(<span class="keyword">if</span> $(ENCODING),--encoding=$(ENCODING)) $(NOLOCALE)</span><br><span class="line">pg_regress_check = $(top_builddir)/src/<span class="built_in">test</span>/regress/pg_regress --inputdir=$(srcdir) --temp-install=./tmp_check --top-builddir=$(top_builddir) $(pg_regress_locale_flags) $(EXTRA_REGRESS_OPTS)</span><br></pre></td></tr></table></figure><p>在 contrib/ltree 中执行 make check 最终执行的是(没有定义的变量直接忽略)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../../src/<span class="built_in">test</span>/regress/pg_regress --inputdir=. --temp-install=./tmp_check --top-builddir=../.. --extra-install=contrib/ltree ltree</span><br></pre></td></tr></table></figure><p>我们可以直接到 ltree 的源码目录测试这条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@digoal ~]<span class="comment"># chown -R postgres:postgres /opt/soft_bak/postgresql-9.4.4</span></span><br><span class="line">[root@digoal ~]<span class="comment"># su - postgres</span></span><br><span class="line">postgres@digoal-&gt; <span class="built_in">cd</span> /opt/soft_bak/postgresql-9.4.4/contrib/ltree/</span><br><span class="line">postgres@digoal-&gt; ../../src/<span class="built_in">test</span>/regress/pg_regress --inputdir=. --temp-install=./tmp_check --top-builddir=../.. --extra-install=contrib/ltree ltree</span><br><span class="line">============== removing existing temp installation    ==============</span><br><span class="line">============== creating temporary installation        ==============</span><br><span class="line">============== initializing database system           ==============</span><br><span class="line">============== starting postmaster                    ==============</span><br><span class="line">running on port 57636 with PID 27852</span><br><span class="line">============== creating database <span class="string">&quot;regression&quot;</span>         ==============</span><br><span class="line">CREATE DATABASE</span><br><span class="line">ALTER DATABASE</span><br><span class="line">============== running regression <span class="built_in">test</span> queries        ==============</span><br><span class="line"><span class="built_in">test</span> ltree                    ... ok</span><br><span class="line">============== shutting down postmaster               ==============</span><br><span class="line">============== removing temporary installation        ==============</span><br><span class="line"></span><br><span class="line">=====================</span><br><span class="line"> All 1 tests passed.</span><br><span class="line">=====================</span><br></pre></td></tr></table></figure><p>另外一种测试时 installcheck，和 check 不同的是，installcheck 不需要初始化数据库，是在我们开启了数据库集群的情况下的测试。</p><p>同样的方法，我们可以发现它调用的是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(pg_regress_installcheck) $(REGRESS_OPTS) $(REGRESS)</span><br></pre></td></tr></table></figure><p>通过 src/Makefile.global 的定义：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pg_regress_installcheck = $(top_builddir)/src/<span class="built_in">test</span>/regress/pg_regress --inputdir=$(srcdir) --psqldir=<span class="string">&#x27;$(PSQLDIR)&#x27;</span> $(pg_regress_locale_flags) $(EXTRA_REGRESS_OPTS)</span><br><span class="line">bindir := $(shell $(PG_CONFIG) --bindir)</span><br></pre></td></tr></table></figure><p>以及 src/makefiles/pgxs.mk</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PSQLDIR = $(bindir)</span><br></pre></td></tr></table></figure><p>最终转换为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../../src/<span class="built_in">test</span>/regress/pg_regress --inputdir=. --psqldir=<span class="string">&#x27;/opt/pgsql/bin&#x27;</span> ltree</span><br></pre></td></tr></table></figure><p>启动数据库后，就可以进行测试了。同样需要注意(PGPORT PGHOST PGDATABASE PGUSER 等)环境变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">postgres@digoal-&gt; pg_ctl start</span><br><span class="line">postgres@digoal-&gt; <span class="built_in">pwd</span></span><br><span class="line">/opt/soft_bak/postgresql-9.4.4/contrib/ltree</span><br><span class="line">postgres@digoal-&gt; ../../src/<span class="built_in">test</span>/regress/pg_regress --inputdir=. --psqldir=<span class="string">&#x27;/opt/pgsql/bin&#x27;</span> ltree</span><br><span class="line">(using postmaster on /data01/pg_root_1921, port 1921)</span><br><span class="line">============== dropping database <span class="string">&quot;regression&quot;</span>         ==============</span><br><span class="line">DROP DATABASE</span><br><span class="line">============== creating database <span class="string">&quot;regression&quot;</span>         ==============</span><br><span class="line">CREATE DATABASE</span><br><span class="line">ALTER DATABASE</span><br><span class="line">============== running regression <span class="built_in">test</span> queries        ==============</span><br><span class="line"><span class="built_in">test</span> ltree                    ... ok</span><br><span class="line"></span><br><span class="line">=====================</span><br><span class="line"> All 1 tests passed.</span><br><span class="line">=====================</span><br></pre></td></tr></table></figure><p>所以插件的回归测试配置也很简单，同样需要 sql, expected 目录，以及通过配置 Makefile 来指定需要回归测试的 sql 脚本。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://www.postgresql.org/docs/devel/static/regress-run.html">http://www.postgresql.org/docs/devel/static/regress-run.html</a></li><li><a href="http://www.postgresql.org/docs/devel/static/regress-variant.html">http://www.postgresql.org/docs/devel/static/regress-variant.html</a></li></ol><p>各种 Makefile</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">src/Makefile.global</span><br><span class="line">src/Makefile</span><br><span class="line">src/makefiles/pgxs.mk</span><br><span class="line">contrib/contrib-global.mk</span><br><span class="line">contrib/xx/Makefile</span><br><span class="line">......</span><br></pre></td></tr></table></figure><blockquote><p>本文转自：<a href="https://github.com/digoal/blog/blob/master/201509/20150907_04.md">https://github.com/digoal/blog/blob/master/201509/20150907_04.md</a></p></blockquote><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> PostgreSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> PostgreSQL </tag>
            
            <tag> 回归测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最佳实践 | 源码编译安装配置 Postgres-XC 集群并用 pg_basebackup 配置 Datanode 热备</title>
      <link href="/2016/03/15/how-to-install-postgres-xc-on-linux/"/>
      <url>/2016/03/15/how-to-install-postgres-xc-on-linux/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p><strong>本文首发于 2016-03-15 19:56:52</strong></p></blockquote><p>注意：本篇文章成文时 Postgres-XC 还未改名为 Postgres-X2 。</p><h1 id="1-下载源码"><a href="#1-下载源码" class="headerlink" title="1. 下载源码"></a>1. 下载源码</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:postgres-x2/postgres-x2.git</span><br></pre></td></tr></table></figure><h1 id="2-安装依赖"><a href="#2-安装依赖" class="headerlink" title="2. 安装依赖"></a>2. 安装依赖</h1><p><strong>对于 Ubuntu/Debian：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y git-core</span><br><span class="line">apt-get install -y gcc g++</span><br><span class="line">apt-get install -y ccache</span><br><span class="line">apt-get install -y libreadline-dev</span><br><span class="line">apt-get install -y bison flex</span><br><span class="line">apt-get install -y zlib1g-dev</span><br><span class="line">apt-get install -y openssl libssl-dev</span><br><span class="line">apt-get install -y libpam-dev</span><br><span class="line">apt-get install -y libcurl4-dev</span><br><span class="line">apt-get install -y libbz2-dev</span><br><span class="line">apt-get install -y python-dev</span><br><span class="line">apt-get install -y ssh</span><br><span class="line"></span><br><span class="line">apt-get install -y libcurl4-dev</span><br><span class="line">Package libcurl4-dev is a virtual package provided by:</span><br><span class="line">libcurl4-openssl-dev 7.38.0-4+deb8u2</span><br><span class="line">libcurl4-nss-dev 7.38.0-4+deb8u2</span><br><span class="line">libcurl4-gnutls-dev 7.38.0-4+deb8u2</span><br><span class="line"></span><br><span class="line">apt-get install -y python-pip</span><br><span class="line"></span><br><span class="line">pip install lockfile</span><br><span class="line">pip install paramiko</span><br><span class="line">pip install setuptools</span><br><span class="line">pip install epydoc</span><br><span class="line">pip install psi</span><br><span class="line"></span><br><span class="line">Note: debian8 required pip install --pre psi</span><br></pre></td></tr></table></figure><p><strong>对于 CentOS：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">yum install –y git.x86_64</span><br><span class="line">yum install –y gcc.x86_64 gcc-c++.x86_64</span><br><span class="line">yum install –y ccache.x86_64</span><br><span class="line">yum install readline.x86_64 readline-devel.x86_64</span><br><span class="line">yum install bison.x86_64 bison-devel.x86_64</span><br><span class="line">yum install flex.x86_64 flex-devel.x86_64</span><br><span class="line">yum install zlib.x86_64 zlib-devel.x86_64</span><br><span class="line">yum install -y openssl.x86_64 openssl-devel.x86_64</span><br><span class="line">yum install -y pam.x86_64 pam-devel.x86_64</span><br><span class="line">yum install –y libcurl.x86_64 libcurl-devel.x86_64</span><br><span class="line">yum install bzip2-libs.x86_64 bzip2.x86_64 bzip2-devel.x86_64</span><br><span class="line">yum install libssh2.x86_64 libssh2-devel.x86_64</span><br><span class="line">yum install python-devel.x86_64</span><br><span class="line">yum install -y python-pip.noarch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接着执行：</span></span><br><span class="line">pip install lockfile</span><br><span class="line">pip install paramiko</span><br><span class="line">pip install setuptools</span><br><span class="line">pip install epydoc</span><br><span class="line">pip install psi</span><br><span class="line"><span class="comment"># 或者执行：</span></span><br><span class="line">yum install python-lockfile.noarch</span><br><span class="line">yum install python-PSI.x86_64</span><br><span class="line">yum install python-paramiko.noarch</span><br><span class="line">yum install python-setuptools.noarch</span><br><span class="line">yum install epydoc.noarch</span><br></pre></td></tr></table></figure><h1 id="3-编译安装"><a href="#3-编译安装" class="headerlink" title="3. 编译安装"></a>3. 编译安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> postgres-x2</span><br><span class="line">$ ./configure --prefix=/home/wslu/pgsql --enable-debug <span class="comment">#其中--prefix指定编绎完成后将要安装的路径，必须使用全路径，wslu为使用者。</span></span><br><span class="line">$ make <span class="comment">#执行编绎</span></span><br><span class="line">$ make install <span class="comment">#执行安装</span></span><br></pre></td></tr></table></figure><h1 id="4-初始化、启动"><a href="#4-初始化、启动" class="headerlink" title="4. 初始化、启动"></a>4. 初始化、启动</h1><h2 id="4-1-初始化-GTM"><a href="#4-1-初始化-GTM" class="headerlink" title="4.1. 初始化 GTM"></a>4.1. 初始化 GTM</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/wslu/pgsql</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置PTAH变量</span></span><br><span class="line">$ <span class="built_in">export</span> PATH=/home/user/pgsql/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment">#使用初始化gtm命令initgtm</span></span><br><span class="line">$ ./bin/initgtm -Z gtm -D data/gtm/</span><br></pre></td></tr></table></figure><h2 id="4-2-初始化数据库节点"><a href="#4-2-初始化数据库节点" class="headerlink" title="4.2. 初始化数据库节点"></a>4.2. 初始化数据库节点</h2><p>初始化所有数据库节点（CO、DN）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用初始化db命令initdb</span></span><br><span class="line">$ ./bin/initdb -U wslu -A trust --locale=C -D data/co1   <span class="comment"># -U 使用者 -D 数据目录/节点</span></span><br><span class="line">$ ./bin/initdb -U wslu -A trust --locale=C -D data/co2</span><br><span class="line">$ ./bin/initdb -U wslu -A trust --locale=C -D data/dn1</span><br><span class="line">$ ./bin/initdb -U wslu -A trust --locale=C -D data/dn2</span><br><span class="line">$ ./bin/initdb -U wslu -A trust --locale=C -D data/dn3</span><br></pre></td></tr></table></figure><h2 id="4-3-编辑配置文件"><a href="#4-3-编辑配置文件" class="headerlink" title="4.3. 编辑配置文件"></a>4.3. 编辑配置文件</h2><p>编辑 data/co1/postgresql.conf：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认值</span></span><br><span class="line"><span class="attr">gtm_port</span> = <span class="number">6666</span></span><br><span class="line"><span class="comment"># pgxc_node_name 不能重复</span></span><br><span class="line"><span class="attr">pgxc_node_name</span> = co1</span><br></pre></td></tr></table></figure><p>编辑 data/co2/postgresql.conf：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gtm_port</span> = <span class="number">6666</span></span><br><span class="line"><span class="attr">pgxc_node_name</span> = co2</span><br></pre></td></tr></table></figure><p>编辑 data/dn1/postgresql.conf：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gtm_port</span> = <span class="number">6666</span></span><br><span class="line"><span class="attr">pgxc_node_name</span> = dn1</span><br></pre></td></tr></table></figure><p>编辑 data/dn2/postgresql.conf：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gtm_port</span> = <span class="number">6666</span></span><br><span class="line"><span class="attr">pgxc_node_name</span> = dn2</span><br></pre></td></tr></table></figure><p>编辑 data/dn2/postgresql.conf：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gtm_port</span> = <span class="number">6666</span></span><br><span class="line"><span class="attr">pgxc_node_name</span> = dn3</span><br></pre></td></tr></table></figure><h2 id="4-4-启动服务"><a href="#4-4-启动服务" class="headerlink" title="4.4. 启动服务"></a>4.4. 启动服务</h2><p>依次启动 gtm、datanode、coordinator：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./bin/gtm_ctl start -S gtm -D data/gtm -l data/gtm/gtm.log  //启动gtm（由于切换为相对路径后找不到对应的文件夹，所以创建日志会失败）</span></span><br><span class="line">$ ./bin/gtm_ctl start -Z gtm -D data/gtm -l gtm.log  //启动gtm</span><br><span class="line"><span class="comment"># vim data/gtm/gtm.log # 使用日志查看gtm是否启动</span></span><br><span class="line"></span><br><span class="line">$ ./bin/pg_ctl start -Z datanode -D data/dn1 -l data/dn1/postgresql.log  -o <span class="string">&quot;-p 24071&quot;</span>   //启动datanode dn1， DN1_PORT=24071   根据需要自由设置</span><br><span class="line"><span class="comment"># vim data/dn1/postgresql.log # 同样使用日志查看是否启动</span></span><br><span class="line"></span><br><span class="line">$ ./bin/pg_ctl start -Z datanode -D data/dn2 -l data/dn2/postgresql.log  -o <span class="string">&quot;-p 24072&quot;</span>  //启动 dn2， DN2_PORT=24072</span><br><span class="line">$ ./bin/pg_ctl start -Z datanode -D data/dn3 -l data/dn3/postgresql.log  -o <span class="string">&quot;-p 24073&quot;</span>  //启动 dn3， DN3_PORT=24073</span><br><span class="line"></span><br><span class="line">$ ./bin/pg_ctl start -Z coordinator -D data/co1 -l data/co1/postgresql.log  -o <span class="string">&quot;-p 24076&quot;</span>   //启动 coordinator co1， CO1_PORT=24076</span><br><span class="line">$ ./bin/pg_ctl start -Z coordinator -D data/co2 -l data/co2/postgresql.log  -o <span class="string">&quot;-p 24077&quot;</span>   //启动 co2， CO2_PORT= 24077</span><br></pre></td></tr></table></figure><h1 id="5-配置集群节点"><a href="#5-配置集群节点" class="headerlink" title="5. 配置集群节点"></a>5. 配置集群节点</h1><p>指定动态库位置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> LD_LIBRARY_PATH=/home/wslu/pgsql/lib:<span class="variable">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure><p>配置集群节点：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 进入co1创建节点，co1_port<span class="operator">=</span><span class="number">24076</span></span><br><span class="line">$ .<span class="operator">/</span>bin<span class="operator">/</span>psql <span class="operator">-</span>p <span class="number">24076</span> postgres postgres</span><br><span class="line"></span><br><span class="line"> <span class="keyword">CREATE</span> NODE dn1 <span class="keyword">WITH</span> (HOST <span class="operator">=</span> <span class="string">&#x27;localhost&#x27;</span>, type <span class="operator">=</span> <span class="string">&#x27;datanode&#x27;</span>, PORT <span class="operator">=</span> <span class="number">24071</span>, id <span class="operator">=</span> <span class="number">1</span>, content <span class="operator">=</span> <span class="number">1</span>); <span class="operator">/</span><span class="operator">/</span>在协调器上注册节点，各端口号与上面一致</span><br><span class="line"> <span class="keyword">CREATE</span> NODE dn2 <span class="keyword">WITH</span> (HOST <span class="operator">=</span> <span class="string">&#x27;localhost&#x27;</span>, type <span class="operator">=</span> <span class="string">&#x27;datanode&#x27;</span>, PORT <span class="operator">=</span> <span class="number">24072</span>, id <span class="operator">=</span> <span class="number">2</span>, content <span class="operator">=</span> <span class="number">2</span>);</span><br><span class="line"> <span class="keyword">CREATE</span> NODE dn3 <span class="keyword">WITH</span> (HOST <span class="operator">=</span> <span class="string">&#x27;localhost&#x27;</span>, type <span class="operator">=</span> <span class="string">&#x27;datanode&#x27;</span>, PORT <span class="operator">=</span> <span class="number">24073</span>, id <span class="operator">=</span> <span class="number">3</span>, content <span class="operator">=</span> <span class="number">3</span>);</span><br><span class="line"> <span class="keyword">CREATE</span> NODE co1 <span class="keyword">WITH</span> (HOST <span class="operator">=</span> <span class="string">&#x27;localhost&#x27;</span>, type <span class="operator">=</span> <span class="string">&#x27;coordinator&#x27;</span>, PORT <span class="operator">=</span> <span class="number">24076</span>, id <span class="operator">=</span> <span class="number">4</span>, content <span class="operator">=</span> <span class="number">4</span>);</span><br><span class="line"> <span class="keyword">CREATE</span> NODE co2 <span class="keyword">WITH</span> (HOST <span class="operator">=</span> <span class="string">&#x27;localhost&#x27;</span>, type <span class="operator">=</span> <span class="string">&#x27;coordinator&#x27;</span>, PORT <span class="operator">=</span> <span class="number">24077</span>, id <span class="operator">=</span> <span class="number">5</span>, content <span class="operator">=</span> <span class="number">5</span>);</span><br><span class="line"> <span class="keyword">SELECT</span> pgxc_pool_reload();</span><br></pre></td></tr></table></figure><p>至此，集群配置完成。</p><h1 id="6-常见操作"><a href="#6-常见操作" class="headerlink" title="6. 常见操作"></a>6. 常见操作</h1><h2 id="6-1-停止集群"><a href="#6-1-停止集群" class="headerlink" title="6.1. 停止集群"></a>6.1. 停止集群</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/pg_ctl stop -D data/co1 -m immediate</span><br><span class="line">$ ./bin/pg_ctl stop -D data/co2 -m immediate</span><br><span class="line">$ ./bin/pg_ctl stop -D data/dn1 -m immediate</span><br><span class="line">$ ./bin/pg_ctl stop -D data/dn2 -m immediate</span><br><span class="line">$ ./bin/pg_ctl stop -D data/dn3 -m immediate</span><br><span class="line">$ ./bin/gtm_ctl stop -Z gtm -D data/gtm</span><br><span class="line">$ rm -f data/gtm/register.node</span><br></pre></td></tr></table></figure><h2 id="6-2-启动集群"><a href="#6-2-启动集群" class="headerlink" title="6.2. 启动集群"></a>6.2. 启动集群</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/gtm_ctl start -Z gtm -D data/gtm -p ./bin -l data/gtm/gtm.log</span><br><span class="line">$ ./bin/pg_ctl start -l data/dn1/postgresql.log -Z datanode -D data/dn1 -o <span class="string">&quot;-p 24071&quot;</span></span><br><span class="line">$ ./bin/pg_ctl start -l data/dn2/postgresql.log -Z datanode -D data/dn2 -o <span class="string">&quot;-p 24072&quot;</span></span><br><span class="line">$ ./bin/pg_ctl start -l data/dn3/postgresql.log -Z datanode -D data/dn3 -o <span class="string">&quot;-p 24073&quot;</span></span><br><span class="line">$ ./bin/pg_ctl start -l data/co1/postgresql.log -Z coordinator -D data/co1 -o <span class="string">&quot;-p 24076&quot;</span></span><br><span class="line">$ ./bin/pg_ctl start -l data/co2/postgresql.log -Z coordinator -D data/co2 -o <span class="string">&quot;-p 24077&quot;</span></span><br></pre></td></tr></table></figure><h2 id="6-3-清理数据"><a href="#6-3-清理数据" class="headerlink" title="6.3. 清理数据"></a>6.3. 清理数据</h2><p>如需清除数据，请先停止服务器集群，然后清除数据存储目录:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/pg_ctl stop -D data/co1 -m immediate</span><br><span class="line">$ ./bin/pg_ctl stop -D data/co2 -m immediate</span><br><span class="line">$ ./bin/pg_ctl stop -D data/dn1 -m immediate</span><br><span class="line">$ ./bin/pg_ctl stop -D data/dn2 -m immediate</span><br><span class="line">$ ./bin/pg_ctl stop -D data/dn3 -m immediate</span><br><span class="line">$ ./bin/gtm_ctl stop -Z gtm -D data/gtm</span><br><span class="line">$ rm -f data/gtm/register.node</span><br><span class="line">$ rm -rf data</span><br></pre></td></tr></table></figure><h1 id="7-配置-Datanode-热备"><a href="#7-配置-Datanode-热备" class="headerlink" title="7. 配置 Datanode 热备"></a>7. 配置 Datanode 热备</h1><h2 id="7-1-修改所有-CO-和-DN-的-pg-hba-conf"><a href="#7-1-修改所有-CO-和-DN-的-pg-hba-conf" class="headerlink" title="7.1. 修改所有 CO 和 DN 的 pg_hba.conf"></a>7.1. 修改所有 CO 和 DN 的 pg_hba.conf</h2><p>将下面两行的注释去掉：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ vi data/co1/pg_hba.conf</span><br><span class="line">host    replication     wslu        127.0.0.1/32            trust</span><br><span class="line">host    replication     wslu        ::1/128                 trust</span><br><span class="line"></span><br><span class="line">$ vi data/co2/pg_hba.conf</span><br><span class="line">host    replication     wslu        127.0.0.1/32            trust</span><br><span class="line">host    replication     wslu        ::1/128                 trust</span><br><span class="line"></span><br><span class="line">$ vi data/dn1/pg_hba.conf</span><br><span class="line">host    replication     wslu        127.0.0.1/32            trust</span><br><span class="line">host    replication     wslu        ::1/128                 trust</span><br><span class="line"></span><br><span class="line">$ vi data/dn2/pg_hba.conf</span><br><span class="line">host    replication     wslu        127.0.0.1/32            trust</span><br><span class="line">host    replication     wslu        ::1/128                 trust</span><br><span class="line"></span><br><span class="line">$ vi data/dn3/pg_hba.conf</span><br><span class="line">host    replication     wslu        127.0.0.1/32            trust</span><br><span class="line">host    replication     wslu        ::1/128                 trust</span><br></pre></td></tr></table></figure><p>此处为了测试方便，将校验方式设为 trust；实际生产中要改为 md5，即根据账户密码验证。</p><h2 id="7-2-修改所有-CO-和-DN-的-postgresql-conf"><a href="#7-2-修改所有-CO-和-DN-的-postgresql-conf" class="headerlink" title="7.2. 修改所有 CO 和 DN 的 postgresql.conf"></a>7.2. 修改所有 CO 和 DN 的 postgresql.conf</h2><p>添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">$ vi data/co1/postgresql.conf</span><br><span class="line">listen_addresses = <span class="string">&#x27;*&#x27;</span></span><br><span class="line">log_line_prefix = <span class="string">&#x27;%t:%r:%u@%d:[%p]: &#x27;</span></span><br><span class="line"><span class="comment">#logging_collector = on</span></span><br><span class="line">port = 24076</span><br><span class="line">wal_level = archive</span><br><span class="line"></span><br><span class="line">$ vi data/co2/postgresql.conf</span><br><span class="line">listen_addresses = <span class="string">&#x27;*&#x27;</span></span><br><span class="line">log_line_prefix = <span class="string">&#x27;%t:%r:%u@%d:[%p]: &#x27;</span></span><br><span class="line"><span class="comment">#logging_collector = on</span></span><br><span class="line">port = 24077</span><br><span class="line">wal_level = archive</span><br><span class="line"></span><br><span class="line">$ vi data/dn1/postgresql.conf</span><br><span class="line">hot_standby = on</span><br><span class="line"><span class="comment">#logging_collector = on</span></span><br><span class="line">listen_addresses = <span class="string">&#x27;*&#x27;</span></span><br><span class="line">log_line_prefix = <span class="string">&#x27;%t:%r:%u@%d:[%p]: &#x27;</span></span><br><span class="line">wal_keep_segments = 10</span><br><span class="line">wal_level = hot_standby</span><br><span class="line">max_wal_senders = 5</span><br><span class="line">include_if_exists = <span class="string">&#x27;synchronous_standby_names.conf&#x27;</span></span><br><span class="line">port = 24071</span><br><span class="line"></span><br><span class="line">$ vi data/dn2/postgresql.conf</span><br><span class="line">hot_standby = on</span><br><span class="line"><span class="comment">#logging_collector = on</span></span><br><span class="line">listen_addresses = <span class="string">&#x27;*&#x27;</span></span><br><span class="line">log_line_prefix = <span class="string">&#x27;%t:%r:%u@%d:[%p]: &#x27;</span></span><br><span class="line">wal_keep_segments = 10</span><br><span class="line">wal_level = hot_standby</span><br><span class="line">max_wal_senders = 5</span><br><span class="line">include_if_exists = <span class="string">&#x27;synchronous_standby_names.conf&#x27;</span></span><br><span class="line">port = 24072</span><br><span class="line"></span><br><span class="line">$ vi data/dn3/postgresql.conf</span><br><span class="line">hot_standby = on</span><br><span class="line"><span class="comment">#logging_collector = on</span></span><br><span class="line">listen_addresses = <span class="string">&#x27;*&#x27;</span></span><br><span class="line">log_line_prefix = <span class="string">&#x27;%t:%r:%u@%d:[%p]: &#x27;</span></span><br><span class="line">wal_keep_segments = 10</span><br><span class="line">wal_level = hot_standby</span><br><span class="line">max_wal_senders = 5</span><br><span class="line">include_if_exists = <span class="string">&#x27;synchronous_standby_names.conf&#x27;</span></span><br><span class="line">port = 24073</span><br></pre></td></tr></table></figure><h2 id="7-3-创建备-DN"><a href="#7-3-创建备-DN" class="headerlink" title="7.3. 创建备 DN"></a>7.3. 创建备 DN</h2><p>在数据库集群开启的前提下执行下列指令，以创建备 Datanode 目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pg_basebackup -D data/dn1s -Fp -Xs -v -P -h localhost -p 24071 -U wslu</span><br><span class="line">$ pg_basebackup -D data/dn2s -Fp -Xs -v -P -h localhost -p 24072 -U wslu</span><br><span class="line">$ pg_basebackup -D data/dn3s -Fp -Xs -v -P -h localhost -p 24073 -U wslu</span><br></pre></td></tr></table></figure><h2 id="7-4-在所有备-DN-新建-recovery-conf"><a href="#7-4-在所有备-DN-新建-recovery-conf" class="headerlink" title="7.4. 在所有备 DN 新建 recovery.conf"></a>7.4. 在所有备 DN 新建 recovery.conf</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ vi dn1s/recovery.conf</span><br><span class="line">standby_mode = <span class="string">&#x27;on&#x27;</span></span><br><span class="line">primary_conninfo = <span class="string">&#x27;user=wslu host=localhost port=24071 sslmode=disable sslcompression=1&#x27;</span></span><br><span class="line"></span><br><span class="line">$ vi dn2s/recovery.conf</span><br><span class="line">standby_mode = <span class="string">&#x27;on&#x27;</span></span><br><span class="line">primary_conninfo = <span class="string">&#x27;user=wslu host=localhost port=24072 sslmode=disable sslcompression=1&#x27;</span></span><br><span class="line"></span><br><span class="line">$ vi dn3s/recovery.conf</span><br><span class="line">standby_mode = <span class="string">&#x27;on&#x27;</span></span><br><span class="line">primary_conninfo = <span class="string">&#x27;user=wslu host=localhost port=24073 sslmode=disable sslcompression=1&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="7-5-在所有主-DN-新建-synchronous-standby-names-conf"><a href="#7-5-在所有主-DN-新建-synchronous-standby-names-conf" class="headerlink" title="7.5. 在所有主 DN 新建 synchronous_standby_names.conf"></a>7.5. 在所有主 DN 新建 synchronous_standby_names.conf</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi data/dn1/synchronous_standby_names.conf</span><br><span class="line">synchronous_standby_names=<span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="7-6-在所有-CO-添加备-DN-节点"><a href="#7-6-在所有-CO-添加备-DN-节点" class="headerlink" title="7.6. 在所有 CO 添加备 DN 节点"></a>7.6. 在所有 CO 添加备 DN 节点</h2><p>这里以 co1 为例，co2 也要执行同样操作（ 对于支持热备的其他 pg 商用数据库，类型不是 datanode 而是 standby）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ .<span class="operator">/</span>bin<span class="operator">/</span>psql <span class="operator">-</span>p <span class="number">24076</span> postgres postgres    <span class="operator">/</span><span class="operator">/</span>进入co1创建节点，co1_port<span class="operator">=</span><span class="number">24076</span></span><br><span class="line"> <span class="keyword">CREATE</span> NODE dn1s <span class="keyword">WITH</span> (HOST <span class="operator">=</span> <span class="string">&#x27;localhost&#x27;</span>, type <span class="operator">=</span> <span class="string">&#x27;datanode&#x27;</span>, PORT <span class="operator">=</span> <span class="number">34071</span>, id <span class="operator">=</span> <span class="number">6</span>, content <span class="operator">=</span> <span class="number">1</span>); <span class="operator">/</span><span class="operator">/</span>在协调器上注册节点，各端口号与上面一致</span><br><span class="line"> <span class="keyword">CREATE</span> NODE dn2s <span class="keyword">WITH</span> (HOST <span class="operator">=</span> <span class="string">&#x27;localhost&#x27;</span>, type <span class="operator">=</span> <span class="string">&#x27;datanode&#x27;</span>, PORT <span class="operator">=</span> <span class="number">34072</span>, id <span class="operator">=</span> <span class="number">7</span>, content <span class="operator">=</span> <span class="number">2</span>);</span><br><span class="line"> <span class="keyword">CREATE</span> NODE dn3s <span class="keyword">WITH</span> (HOST <span class="operator">=</span> <span class="string">&#x27;localhost&#x27;</span>, type <span class="operator">=</span> <span class="string">&#x27;datanode&#x27;</span>, PORT <span class="operator">=</span> <span class="number">34073</span>, id <span class="operator">=</span> <span class="number">8</span>, content <span class="operator">=</span> <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="7-7-启动所有备-DN-服务"><a href="#7-7-启动所有备-DN-服务" class="headerlink" title="7.7. 启动所有备 DN 服务"></a>7.7. 启动所有备 DN 服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./bin/pg_ctl start -D data/dn1s -l data/dn1s/postgresql.log  -o <span class="string">&quot;-p 34071&quot;</span></span><br><span class="line">./bin/pg_ctl start -D data/dn2s -l data/dn2s/postgresql.log  -o <span class="string">&quot;-p 34072&quot;</span></span><br><span class="line">./bin/pg_ctl start -D data/dn3s -l data/dn3s/postgresql.log  -o <span class="string">&quot;-p 34073&quot;</span></span><br></pre></td></tr></table></figure><p>相应的，停止所有备 DN 节点服务的指令为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./bin/pg_ctl stop -D data/dn1s -m immediate</span><br><span class="line">./bin/pg_ctl stop -D data/dn2s -m immediate</span><br><span class="line">./bin/pg_ctl stop -D data/dn3s -m immediate</span><br></pre></td></tr></table></figure><h1 id="8-Q-amp-A"><a href="#8-Q-amp-A" class="headerlink" title="8. Q&amp;A"></a>8. Q&amp;A</h1><h2 id="8-1-如何提升备-DN-为主-DN"><a href="#8-1-如何提升备-DN-为主-DN" class="headerlink" title="8.1. 如何提升备 DN 为主 DN"></a>8.1. 如何提升备 DN 为主 DN</h2><p>我并未实现成功，但参照其他 PostgreSQL 的分布式数据库，步骤如下：</p><ol><li>杀掉主 DN 进程，在备 DN 的目录下创建一个触发文件（例如：promote）文件。</li><li>通过 <code>kill -SIGUSR1 备DN进程号</code> 指令给备 DN 的 postmaster 进程发送一个 SIGUSR1 信号。</li><li>在主 CO 执行类似 <code>alter node dn1s with(promote);</code> 的指令。</li><li>退出 psql，再重新连入 psql。</li><li>此时，备 DN 就作为主 DN 运行了，可执行 DDL、DML 等所有操作。</li></ol><h2 id="8-2-当备-DN-挂掉时，如何关闭主备-DN-之间的数据同步"><a href="#8-2-当备-DN-挂掉时，如何关闭主备-DN-之间的数据同步" class="headerlink" title="8.2. 当备 DN 挂掉时，如何关闭主备 DN 之间的数据同步"></a>8.2. 当备 DN 挂掉时，如何关闭主备 DN 之间的数据同步</h2><p>也就是关闭 walsender 和 walreciever。</p><p>这就涉及到源码级别了，一般做两步：</p><ol><li>将主 DN 状态改为 <code>OutSync</code>（别的数据库的做法）。</li><li>在代码中将 <code>SyncRepStandbyNames</code> 设为 <code>&quot;&quot;</code>。</li></ol><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>本教程关于配置备 DN 的描述只能对各个 DN 的数据做备份，并未成功实现某个 DN 挂掉了自动切换到备 DN。</p><p>另外，我并未在 Postgres-XC（现在 github 改名为了 Postgres-X2）源码的回归测试中看到如何在 pgxc_nodes 系统表创建备 DN 节点。</p><p>不过，GreenPlum（以 PostgreSQL 为基础开发的分布式数据库）有此功能，可做参考。</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Postgres-X2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> PostgreSQL </tag>
            
            <tag> Postgres-X2 </tag>
            
            <tag> Postgres-XC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特性分析 | GreenPlum Primary/Mirror 同步机制</title>
      <link href="/2016/01/21/greenplum-primary-mirror-sync-mechanism/"/>
      <url>/2016/01/21/greenplum-primary-mirror-sync-mechanism/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p><strong>本文首发于 2016-01-21 20:02:26</strong></p></blockquote><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>PostgreSQL 主备同步机制是通过流复制实现，其原理见 <a href="http://mysql.taobao.org/monthly/2015/10/04/">PG 主备流复制机制</a>。</p><p>Greenplum 是基于 PostgreSQL 开发的，它的主备也是通过流复制实现，但是 <strong>Segment 节点中的 Primary 和 Mirror 之间的数据同步是基于文件级别的同步实现的</strong>。</p><p><code>为什么Primary和Mirror不能再使用流复制实现呢？</code></p><blockquote><p>主要有两个原因:</p><ol><li> <code>Append Only</code> 表不写 WAL 日志，所以 Append Only 表的数据就不能通过 XLOG 发送到 Mirror 再 Apply 。</li><li> <code>pg_control</code>等文件也是不写 WAL 日志，也只能通过文件方式同步到 Mirror 。</li></ol></blockquote><h2 id="GreenPlum-总体结构"><a href="#GreenPlum-总体结构" class="headerlink" title="GreenPlum 总体结构"></a>GreenPlum 总体结构</h2><p>Greenplum 的架构采用了 MPP 无共享体系。在 MPP 系统中，每个数据节点有自己的 CPU、磁盘和内存(Share nothing)，每个节点内的 CPU 不能访问另一个节点的内存。节点之间的信息交互是通过节点互联网络实现的，这个过程一般称为<strong>数据重分配</strong>(Data Redistribution)。</p><p>Master 负责协调整个集群 ，一个数据节点可以配置多个节点实例(Segment Instances)，节点实例并行处理查询(SQL)。</p><p><img src="greenplum-architecture-overview.jpg" alt="GreenPlum 总体架构"></p><h2 id="Primary-和-Mirror-同步机制"><a href="#Primary-和-Mirror-同步机制" class="headerlink" title="Primary 和 Mirror 同步机制"></a>Primary 和 Mirror 同步机制</h2><p>Primary 和 Mirror 同步的内容主要有两部分，即<strong>文件</strong>和<strong>数据</strong>。之所以 Primary 和 Mirror 要同步文件，是 Primary 和 Mirror 之间可以自动 failover，只有两者保持同步才能相互替代。如果只把数据同步过去，<code>pg_control、pg_clog、pg_subtrans</code> 没有同步，那么从 Primary 切换到 Mirror 会出现问题。</p><p>Master 和 slave 却不用担心这些问题，Append Only 表的数据只会存在 Segment，所以 <strong>WAL 日志足够保持 Master 和 slave 同步</strong>(只要是流复制，pg_control、pg_clog、pg_subtrans 这些文件 Slave 会自动更新，无需从 Master 同步)。</p><h3 id="1-数据同步"><a href="#1-数据同步" class="headerlink" title="1. 数据同步"></a>1. 数据同步</h3><p>当 Master 向 Primary 下发执行计划后，Primary 开始执行，如果是 DML 操作，那么 Primary 会产生 XLOG 及更新 page。会在 <code>SlruPhysicalWritePage</code> 函数中(写数据页)产生<code>FileRepOperationOpen、FileRepOperationWrite、FileRepOperationFlush、FileRepOperationClose</code>等指令消息(消息中包含具体要更新的文件 page 及内容)，通过 <code>primary sender</code> 进程向 Mirror 发送 Message，然后 Mirror 的 <code>mirror consumer</code> 等进程解析消息，执行变更。XLOG 通过<code>XLogWrite</code>函数(写 XLOG)执行同样的操作，把 XLOG 更新同步过去。</p><h3 id="2-文件同步"><a href="#2-文件同步" class="headerlink" title="2. 文件同步"></a>2. 文件同步</h3><p>Primary 会有个 <code>recovery</code> 进程，这个进程会循环把 Primary 的 <code>pg_control、pg_clog、pg_subtrans</code> 等文件覆盖到 Mirror。同时检查 XLOG 是否一致，如果不一致以 Primary 为主，对 Mirror 进行覆盖。除了把 Primary 部分文件同步到 Mirror 之外，<code>recovery</code> 进程还会将 Mirror 上面的临时文件删掉。</p><p><img src="greenplum-primary-mirror-sync.jpg" alt="GreenPlum 主从同步机制"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Primary 和 Mirror 同步数据的时候，Primary 对于每一次写 page 都会通过消息发送到 Mirror，如果 Primary 大量的更新 page，那么 Primary 和 Mirror 同步将有可能成为瓶颈。</p><blockquote><p>本文转自：<a href="http://mysql.taobao.org/monthly/2016/01/02/">http://mysql.taobao.org/monthly/2016/01/02/</a></p></blockquote><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> GreenPlum </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PostgreSQL </tag>
            
            <tag> GreenPlum </tag>
            
            <tag> 主从同步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最佳实践 | CentOS 和 Ubuntu 下安装配置 GreenPlum 数据库集群 - 源码 &amp; 安装包</title>
      <link href="/2016/01/14/how-to-install-greenplum-on-linux/"/>
      <url>/2016/01/14/how-to-install-greenplum-on-linux/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p><strong>本文首发于 2016-01-14 19:55:08</strong></p></blockquote><p>本文介绍如何在 CentOS/RedHat、Ubuntu/Debian 下通过安装包方式和源码方式安装配置 GreenPlum 集群。</p><h1 id="1-安装步骤"><a href="#1-安装步骤" class="headerlink" title="1. 安装步骤"></a>1. 安装步骤</h1><h2 id="1-1-规划"><a href="#1-1-规划" class="headerlink" title="1.1. 规划"></a>1.1. 规划</h2><blockquote><p>192.168.4.93（h93） 1 个主 master 2 个主 segment、2 个镜像 segment</p><p>192.168.4.94（h94） 1 个备 master 2 个主 segment、2 个镜像 segment</p></blockquote><p>安装在<code>/home/wslu/gp/gpsql</code>目录下。</p><blockquote><p><strong>注意：</strong> 如无特殊说明，本文后续步骤需要在 h93 和 h94 都执行。</p></blockquote><h2 id="1-2-安装依赖"><a href="#1-2-安装依赖" class="headerlink" title="1.2. 安装依赖"></a>1.2. 安装依赖</h2><p>按如下方式在在 h93 和 h94 安装依赖。</p><p><strong>对于 Ubuntu/Debian：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y git-core</span><br><span class="line">apt-get install -y gcc g++</span><br><span class="line">apt-get install -y ccache</span><br><span class="line">apt-get install -y libreadline-dev</span><br><span class="line">apt-get install -y bison flex</span><br><span class="line">apt-get install -y zlib1g-dev</span><br><span class="line">apt-get install -y openssl libssl-dev</span><br><span class="line">apt-get install -y libpam-dev</span><br><span class="line">apt-get install -y libcurl4-dev</span><br><span class="line">apt-get install -y libbz2-dev</span><br><span class="line">apt-get install -y python-dev</span><br><span class="line">apt-get install -y ssh</span><br><span class="line"></span><br><span class="line">apt-get install -y libcurl4-dev</span><br><span class="line">Package libcurl4-dev is a virtual package provided by:</span><br><span class="line">libcurl4-openssl-dev 7.38.0-4+deb8u2</span><br><span class="line">libcurl4-nss-dev 7.38.0-4+deb8u2</span><br><span class="line">libcurl4-gnutls-dev 7.38.0-4+deb8u2</span><br><span class="line"></span><br><span class="line">apt-get install -y python-pip</span><br><span class="line"></span><br><span class="line">pip install lockfile</span><br><span class="line">pip install paramiko</span><br><span class="line">pip install setuptools</span><br><span class="line">pip install epydoc</span><br><span class="line">pip install psi</span><br><span class="line"></span><br><span class="line">Note: debian8 required pip install --pre psi</span><br></pre></td></tr></table></figure><p><strong>对于 CentOS：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">yum install –y git.x86_64</span><br><span class="line">yum install –y gcc.x86_64 gcc-c++.x86_64</span><br><span class="line">yum install –y ccache.x86_64</span><br><span class="line">yum install readline.x86_64 readline-devel.x86_64</span><br><span class="line">yum install bison.x86_64 bison-devel.x86_64</span><br><span class="line">yum install flex.x86_64 flex-devel.x86_64</span><br><span class="line">yum install zlib.x86_64 zlib-devel.x86_64</span><br><span class="line">yum install -y openssl.x86_64 openssl-devel.x86_64</span><br><span class="line">yum install -y pam.x86_64 pam-devel.x86_64</span><br><span class="line">yum install –y libcurl.x86_64 libcurl-devel.x86_64</span><br><span class="line">yum install bzip2-libs.x86_64 bzip2.x86_64 bzip2-devel.x86_64</span><br><span class="line">yum install libssh2.x86_64 libssh2-devel.x86_64</span><br><span class="line">yum install python-devel.x86_64</span><br><span class="line">yum install -y python-pip.noarch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接着执行：</span></span><br><span class="line">pip install lockfile</span><br><span class="line">pip install paramiko</span><br><span class="line">pip install setuptools</span><br><span class="line">pip install epydoc</span><br><span class="line">pip install psi</span><br><span class="line"><span class="comment"># 或者执行：</span></span><br><span class="line">yum install python-lockfile.noarch</span><br><span class="line">yum install python-PSI.x86_64</span><br><span class="line">yum install python-paramiko.noarch</span><br><span class="line">yum install python-setuptools.noarch</span><br><span class="line">yum install epydoc.noarch</span><br></pre></td></tr></table></figure><h2 id="1-3-安装包方式安装"><a href="#1-3-安装包方式安装" class="headerlink" title="1.3. 安装包方式安装"></a>1.3. 安装包方式安装</h2><ol><li>从官网下载<code>greenplum-db-4.3.6.1-build-2-RHEL5-x86_64.zip</code>。</li><li>解压：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip greenplum-db-4.3.6.1-build-2-RHEL5-x86_64.zip</span><br></pre></td></tr></table></figure><ol start="3"><li>以普通用户安装：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./greenplum-db-4.3.6.1-build-2-RHEL5-x86_64.bin</span><br><span class="line">安装路径选择 /home/wslu/gp/gpsql</span><br></pre></td></tr></table></figure><h2 id="1-4-源码安装"><a href="#1-4-源码安装" class="headerlink" title="1.4. 源码安装"></a>1.4. 源码安装</h2><h3 id="1-4-1-克隆源码"><a href="#1-4-1-克隆源码" class="headerlink" title="1.4.1. 克隆源码"></a>1.4.1. 克隆源码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /home/wslu/gp/greenplum</span><br><span class="line">$ <span class="built_in">cd</span> /home/wslu/gp/greenplum</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/greenplum-db/gpdb.</span><br></pre></td></tr></table></figure><h3 id="1-4-2-编译安装"><a href="#1-4-2-编译安装" class="headerlink" title="1.4.2. 编译安装"></a>1.4.2. 编译安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/wslu/gp/greenplum</span><br><span class="line">$ CFLAGS+=<span class="string">&quot;-O2&quot;</span> ./configure--prefix=/home/wslu/gp/gpsql --enable-debug --enable-depend --enable-cassert</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure><p>安装时如果遇到某些 python 包（lockfile、 paramiko、PSI 等）找不到，可以参考 <a href="https://github.com/apache/incubator-hawq">HAWQ</a> 项目，将 <code>&lt;hawq_src&gt;/tools/bin/pythonSrc/</code> 下所有的压缩包拷贝到<code>/home/wslu/gp/greenplum/gpMgmt/bin/pythonSrc/ext/</code> 中，然后再 <code>make install</code> 即可。</p><p>至此集群源码编译完成。</p><h2 id="1-5-设置参数"><a href="#1-5-设置参数" class="headerlink" title="1.5. 设置参数"></a>1.5. 设置参数</h2><h3 id="1-5-1-设置操作系统参数"><a href="#1-5-1-设置操作系统参数" class="headerlink" title="1.5.1. 设置操作系统参数"></a>1.5.1. 设置操作系统参数</h3><ol><li>关闭防火墙。</li><li>加速 SSH 连接：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i <span class="string">&#x27;s/^GSS/#&amp;/g&#x27;</span> /etc/ssh/sshd_config <span class="comment"># 用来加速SSH连接的</span></span><br><span class="line">service sshd restart</span><br></pre></td></tr></table></figure><ol start="3"><li>设置内核和内存方面的参数：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置内核参数, 并在启动时生效</span></span><br><span class="line">sysctl -p - &gt;&gt;/etc/sysctl.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string"># configurations</span></span><br><span class="line"><span class="string">kernel.sysrq=1</span></span><br><span class="line"><span class="string">kernel.core_pattern=core</span></span><br><span class="line"><span class="string">kernel.core_uses_pid=1</span></span><br><span class="line"><span class="string">kernel.msgmnb=65536</span></span><br><span class="line"><span class="string">kernel.msgmax=65536</span></span><br><span class="line"><span class="string">kernel.msgmni=2048</span></span><br><span class="line"><span class="string">kernel.sem=25600 3200000 10000 14200</span></span><br><span class="line"><span class="string">net.ipv4.tcp_syncookies=1</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward=0</span></span><br><span class="line"><span class="string">net.ipv4.conf.default.accept_source_route=0</span></span><br><span class="line"><span class="string">net.ipv4.tcp_tw_recycle=1</span></span><br><span class="line"><span class="string">net.ipv4.tcp_max_syn_backlog=4096</span></span><br><span class="line"><span class="string">net.ipv4.conf.all.arp_filter=1</span></span><br><span class="line"><span class="string">net.ipv4.ip_local_port_range=1025 65535</span></span><br><span class="line"><span class="string">net.core.netdev_max_backlog=10000</span></span><br><span class="line"><span class="string">net.core.rmem_max=2097152</span></span><br><span class="line"><span class="string">net.core.wmem_max=2097152</span></span><br><span class="line"><span class="string">vm.overcommit_memory=1</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><ol start="4"><li>可以参考官方推荐设置共享内存相关参数：</li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi /etc/sysctl.conf</span></span><br><span class="line"><span class="attr">kernel.shmmax</span> = <span class="number">500000000</span></span><br><span class="line"><span class="attr">kernel.shmmni</span> = <span class="number">4096</span></span><br><span class="line"><span class="attr">kernel.shmall</span> = <span class="number">4000000000</span></span><br><span class="line"><span class="attr">kernel.sem</span> = <span class="number">250</span> <span class="number">512000</span> <span class="number">100</span> <span class="number">2048</span></span><br><span class="line"><span class="attr">kernel.sysrq</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">kernel.core_uses_pid</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">kernel.msgmnb</span> = <span class="number">65536</span></span><br><span class="line"><span class="attr">kernel.msgmax</span> = <span class="number">65536</span></span><br><span class="line"><span class="attr">kernel.msgmni</span> = <span class="number">2048</span></span><br><span class="line"><span class="attr">net.ipv4.tcp_syncookies</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">net.ipv4.ip_forward</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">net.ipv4.conf.default.accept_source_route</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">net.ipv4.tcp_tw_recycle</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">net.ipv4.tcp_max_syn_backlog</span> = <span class="number">4096</span></span><br><span class="line"><span class="attr">net.ipv4.conf.all.arp_filter</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">net.ipv4.ip_local_port_range</span> = <span class="number">1025</span> <span class="number">65535</span></span><br><span class="line"><span class="attr">net.core.netdev_max_backlog</span> = <span class="number">10000</span></span><br><span class="line"><span class="attr">net.core.rmem_max</span> = <span class="number">2097152</span></span><br><span class="line"><span class="attr">net.core.wmem_max</span> = <span class="number">2097152</span></span><br><span class="line"><span class="attr">vm.overcommit_memory</span> = <span class="number">2</span></span><br></pre></td></tr></table></figure><ol start="5"><li>设置文件读写相关参数：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置limits</span></span><br><span class="line">cat &gt;&gt;/etc/security/limits.d/greenplum.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string"># GreenPlum configurations</span></span><br><span class="line"><span class="string">* soft nofile 65536</span></span><br><span class="line"><span class="string">* hard nofile 65536</span></span><br><span class="line"><span class="string">* soft nproc 131072</span></span><br><span class="line"><span class="string">* hard nproc 131072</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h3 id="1-5-2-设置数据库相关参数"><a href="#1-5-2-设置数据库相关参数" class="headerlink" title="1.5.2. 设置数据库相关参数"></a>1.5.2. 设置数据库相关参数</h3><p>GUC 参数设置示例（需要根据机器配置调整）：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">work_mem</span>=<span class="number">1</span>GB</span><br><span class="line"><span class="attr">shared_buffers</span>=<span class="number">2</span>GB</span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">500</span></span><br><span class="line"><span class="attr">max_pool_size</span>=<span class="number">2000</span></span><br><span class="line"><span class="attr">enable_mergejoin</span>=<span class="literal">off</span></span><br><span class="line"><span class="attr">enable_nestloop</span>=<span class="literal">off</span></span><br><span class="line"><span class="attr">max_prepared_transactions</span>=<span class="number">50</span></span><br><span class="line"><span class="attr">autovacuum</span>=<span class="literal">off</span></span><br><span class="line"><span class="attr">interconnect_setup_timeout</span>=<span class="number">1200</span></span><br></pre></td></tr></table></figure><h2 id="1-6-demo-集群"><a href="#1-6-demo-集群" class="headerlink" title="1.6. demo 集群"></a>1.6. demo 集群</h2><blockquote><p><strong>提示：</strong> 如果不想用 demo 集群，可以直接跳过本小节。</p></blockquote><p>安装完成后，可以使用如下指令创建 demo 集群（在本机创建包含 3 个 segment，3 个 segment-mirror，1 个 master 的集群）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/wslu/gp/gpsql</span><br><span class="line">$ <span class="built_in">source</span> greenplum_path.sh</span><br><span class="line">$ gpssh-exkeys –h localhost</span><br><span class="line">$ <span class="built_in">cd</span> gpAux/gpdemo</span><br><span class="line">$ make cluster</span><br><span class="line">$ <span class="built_in">source</span> gpdemo-env.sh</span><br></pre></td></tr></table></figure><h2 id="1-7-设置环境变量"><a href="#1-7-设置环境变量" class="headerlink" title="1.7. 设置环境变量"></a>1.7. 设置环境变量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> gpsql/greenplum_path.sh</span><br><span class="line">$ <span class="built_in">export</span> MASTER_DATA_DIRECTORY=/home/wslu/gp/gpsql/data/master/gpseg-1</span><br></pre></td></tr></table></figure><h2 id="1-8-交换-SSH-密钥"><a href="#1-8-交换-SSH-密钥" class="headerlink" title="1.8. 交换 SSH 密钥"></a>1.8. 交换 SSH 密钥</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gpssh-exkeys –h h93</span><br><span class="line">gpssh-exkeys –h h94</span><br></pre></td></tr></table></figure><h2 id="1-9-初始化集群"><a href="#1-9-初始化集群" class="headerlink" title="1.9. 初始化集群"></a>1.9. 初始化集群</h2><ol><li>在 h93 和 h94 执行下述指令，以创建数据目录：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir gpsql/data/primary gpsql/data/mirror gpsql/data/master –p</span><br></pre></td></tr></table></figure><ol start="2"><li>在 h93 创建配置文件 <code>configs/gpinitsystem_config</code>，内容如下：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ARRAY_NAME=<span class="string">&quot;EMC Greenplum DW&quot;</span></span><br><span class="line">SEG_PREFIX=gpseg</span><br><span class="line">PORT_BASE=40000</span><br><span class="line"><span class="built_in">declare</span> -a DATA_DIRECTORY=(/home/wslu/gp/gpsql/data/primary /home/wslu/gp/gpsql/data/primary)</span><br><span class="line">MASTER_HOSTNAME=h93</span><br><span class="line">MASTER_DIRECTORY=/home/wslu/gp/gpsql/data/master</span><br><span class="line">MASTER_PORT=5432</span><br><span class="line">TRUSTED_SHELL=ssh</span><br><span class="line">CHECK_POINT_SEGMENTS=8</span><br><span class="line">ENCODING=UNICODE</span><br><span class="line">MIRROR_PORT_BASE=50000</span><br><span class="line">REPLICATION_PORT_BASE=41000</span><br><span class="line">MIRROR_REPLICATION_PORT_BASE=51000</span><br><span class="line"><span class="built_in">declare</span> -a MIRROR_DATA_DIRECTORY=(/home/wslu/gp/gpsql/data/mirror /home/wslu/gp/gpsql/data/mirror)</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：configs 目录是我自己创建的、便于保存自定义配置文件的目录。该步骤的目的是创建一个初始化时要用的配置文件，并没有路径的要求。</p></blockquote><ol start="3"><li>在 h93 创建配置文件 <code>configs/hostfile_gpinitsystem</code>，内容如下：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">h93</span><br><span class="line">h94</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：configs 目录是我自己创建的、便于保存自定义配置文件的目录。该步骤的目的是创建一个初始化时要用的配置文件，并没有路径的要求。</p></blockquote><ol start="4"><li>在 h93 执行下述指令初始化集群：</li></ol><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line">[wslu@h93 gpsql]$ gpinitsystem -c configs/gpinitsystem_config -h configs/hostfile_gpinitsystem –a</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">03</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Checking configuration parameters, please <span class="keyword">wait</span>...</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">03</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Reading Greenplum configuration file configs/gpinitsystem_config</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">03</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Locale has <span class="keyword">not</span> been set in configs/gpinitsystem_config, will set to <span class="keyword">default</span> value</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">03</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Locale set to en_US<span class="variable">.utf8</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">03</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-No DATABASE_NAME set, will exit following template1 updates</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">03</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-MASTER_MAX_CONNECT <span class="keyword">not</span> set, will set to <span class="keyword">default</span> value <span class="number">250</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">03</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Checking configuration parameters, Completed</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">04</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Commencing multi-home checks, please <span class="keyword">wait</span>...</span><br><span class="line">..</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">05</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Configuring build <span class="keyword">for</span> standard array</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">05</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Commencing multi-home checks, Completed</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">05</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Building primary segment <span class="keyword">instance</span> array, please <span class="keyword">wait</span>...</span><br><span class="line">....</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">08</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Building group mirror array <span class="keyword">type</span> , please <span class="keyword">wait</span>...</span><br><span class="line">....</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">12</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Checking Master host</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">12</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Checking <span class="keyword">new</span> segment hosts, please <span class="keyword">wait</span>...</span><br><span class="line">........</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">28</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Checking <span class="keyword">new</span> segment hosts, Completed</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">28</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Greenplum Database Creation Parameters</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">28</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:---------------------------------------</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">28</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Master Configuration</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">28</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:---------------------------------------</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">28</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Master <span class="keyword">instance</span> name       = EMC Greenplum DW</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">28</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Master hostname            = h93</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">28</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Master port                = <span class="number">5432</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">28</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Master <span class="keyword">instance</span> dir        = /home/wslu/gp/gpsql/data/master/gpseg-<span class="number">1</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">28</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Master LOCALE              = en_US<span class="variable">.utf8</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Greenplum segment prefix   = gpseg</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Master Database            =</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Master connections         = <span class="number">250</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Master buffers             = <span class="number">128000</span>kB</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Segment connections        = <span class="number">750</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Segment buffers            = <span class="number">128000</span>kB</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Checkpoint segments        = <span class="number">8</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Encoding                   = UNICODE</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Postgres param file        = Off</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Initdb to be used          = /home/wslu/gp/gpsql/bin/initdb</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-GP_LIBRARY_PATH is         = /home/wslu/gp/gpsql/lib</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Ulimit check               = Passed</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Array host connect <span class="keyword">type</span>    = Single hostname per node</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Master IP address [<span class="number">1</span>]      = ::<span class="number">1</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Master IP address [<span class="number">2</span>]      = <span class="number">192</span><span class="variable">.168</span><span class="variable">.4</span><span class="variable">.93</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Master IP address [<span class="number">3</span>]      = fe80::<span class="number">225</span>:<span class="number">90</span>ff:fe3b:<span class="number">86</span>c2</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Standby Master             = Not Configured</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Primary segment #          = <span class="number">2</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Total Database segments    = <span class="number">4</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Trusted shell              = ssh</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Number segment hosts       = <span class="number">2</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Mirror port base           = <span class="number">50000</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Replicaton port base       = <span class="number">41000</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Mirror replicaton port base= <span class="number">51000</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Mirror segment #           = <span class="number">2</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Mirroring <span class="keyword">config</span>           = ON</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Mirroring <span class="keyword">type</span>             = Group</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:----------------------------------------</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Greenplum Primary Segment Configuration</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:----------------------------------------</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-h93      /home/wslu/gp/gpsql/data/primary/gpseg0        <span class="number">40000</span>          <span class="number">2</span>          <span class="number">0</span>       <span class="number">41000</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-h93      /home/wslu/gp/gpsql/data/primary/gpseg1        <span class="number">40001</span>          <span class="number">3</span>          <span class="number">1</span>       <span class="number">41001</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-h94      /home/wslu/gp/gpsql/data/primary/gpseg2        <span class="number">40000</span>          <span class="number">4</span>          <span class="number">2</span>       <span class="number">41000</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-h94      /home/wslu/gp/gpsql/data/primary/gpseg3        <span class="number">40001</span>          <span class="number">5</span>          <span class="number">3</span>       <span class="number">41001</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:---------------------------------------</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Greenplum Mirror Segment Configuration</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:---------------------------------------</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-h94      /home/wslu/gp/gpsql/data/mirror/gpseg0          <span class="number">50000</span>          <span class="number">6</span>          <span class="number">0</span>       <span class="number">51000</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-h94      /home/wslu/gp/gpsql/data/mirror/gpseg1          <span class="number">50001</span>          <span class="number">7</span>          <span class="number">1</span>       <span class="number">51001</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-h93      /home/wslu/gp/gpsql/data/mirror/gpseg2          <span class="number">50000</span>          <span class="number">8</span>          <span class="number">2</span>       <span class="number">51000</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">29</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-h93      /home/wslu/gp/gpsql/data/mirror/gpseg3          <span class="number">50001</span>          <span class="number">9</span>          <span class="number">3</span>       <span class="number">51001</span></span><br><span class="line">Continue <span class="keyword">with</span> Greenplum creation Yy/Nn&gt;</span><br><span class="line">y</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">30</span>:<span class="number">32</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Building the Master <span class="keyword">instance</span> database, please <span class="keyword">wait</span>...</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">31</span>:<span class="number">08</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Starting the Master in admin mode</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">32</span>:<span class="number">01</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Commencing parallel build of primary segment instances</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">32</span>:<span class="number">01</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Spawning parallel processes    batch [<span class="number">1</span>], please <span class="keyword">wait</span>...</span><br><span class="line">....</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">32</span>:<span class="number">02</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Waiting <span class="keyword">for</span> parallel processes batch [<span class="number">1</span>], please <span class="keyword">wait</span>...</span><br><span class="line">...........................................................</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">01</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:------------------------------------------------</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">01</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Parallel process exit status</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">01</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:------------------------------------------------</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">01</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Total processes marked as completed           = <span class="number">4</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">01</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Total processes marked as killed              = <span class="number">0</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">01</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Total processes marked as failed              = <span class="number">0</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">01</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:------------------------------------------------</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">01</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Commencing parallel build of mirror segment instances</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">01</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Spawning parallel processes    batch [<span class="number">1</span>], please <span class="keyword">wait</span>...</span><br><span class="line">....</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">01</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Waiting <span class="keyword">for</span> parallel processes batch [<span class="number">1</span>], please <span class="keyword">wait</span>...</span><br><span class="line">.........................................</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">43</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:------------------------------------------------</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">43</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Parallel process exit status</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">43</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:------------------------------------------------</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">43</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Total processes marked as completed           = <span class="number">4</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">43</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Total processes marked as killed              = <span class="number">0</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">43</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Total processes marked as failed              = <span class="number">0</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">43</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:------------------------------------------------</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">43</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Deleting distributed backout files</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">43</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Removing back out file</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">43</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-No errors generated from parallel processes</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">43</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Restarting the Greenplum <span class="keyword">instance</span> in production mode</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">43</span>:<span class="number">001932</span> gpstop:h93:wslu-[INFO]:-Starting gpstop <span class="keyword">with</span> args: -a -i -m -d /home/wslu/gp/gpsql/data/master/gpseg-<span class="number">1</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">43</span>:<span class="number">001932</span> gpstop:h93:wslu-[INFO]:-Gathering information <span class="keyword">and</span> validating the environment...</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">43</span>:<span class="number">001932</span> gpstop:h93:wslu-[INFO]:-Obtaining Greenplum Master catalog information</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">43</span>:<span class="number">001932</span> gpstop:h93:wslu-[INFO]:-Obtaining Segment details from master...</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">43</span>:<span class="number">001932</span> gpstop:h93:wslu-[INFO]:-Greenplum Version: &#x27;postgres (Greenplum Database) <span class="number">4</span><span class="variable">.3</span><span class="variable">.99</span><span class="variable">.00</span> build dev&#x27;</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">43</span>:<span class="number">001932</span> gpstop:h93:wslu-[INFO]:-There are <span class="number">0</span> connections to the database</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">43</span>:<span class="number">001932</span> gpstop:h93:wslu-[INFO]:-Commencing Master <span class="keyword">instance</span> shutdown <span class="keyword">with</span> mode=&#x27;immediate&#x27;</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">43</span>:<span class="number">001932</span> gpstop:h93:wslu-[INFO]:-Master host=h93</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">43</span>:<span class="number">001932</span> gpstop:h93:wslu-[INFO]:-Commencing Master <span class="keyword">instance</span> shutdown <span class="keyword">with</span> mode=immediate</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">43</span>:<span class="number">001932</span> gpstop:h93:wslu-[INFO]:-Master segment <span class="keyword">instance</span> directory=/home/wslu/gp/gpsql/data/master/gpseg-<span class="number">1</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">44</span>:<span class="number">001932</span> gpstop:h93:wslu-[INFO]:-Attempting forceful termination of any leftover master process</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">44</span>:<span class="number">001932</span> gpstop:h93:wslu-[INFO]:-Terminating processes <span class="keyword">for</span> segment /home/wslu/gp/gpsql/data/master/gpseg-<span class="number">1</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">45</span>:<span class="number">002019</span> gpstart:h93:wslu-[INFO]:-Starting gpstart <span class="keyword">with</span> args: -a -d /home/wslu/gp/gpsql/data/master/gpseg-<span class="number">1</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">45</span>:<span class="number">002019</span> gpstart:h93:wslu-[INFO]:-Gathering information <span class="keyword">and</span> validating the environment...</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">45</span>:<span class="number">002019</span> gpstart:h93:wslu-[INFO]:-Greenplum Binary Version: &#x27;postgres (Greenplum Database) <span class="number">4</span><span class="variable">.3</span><span class="variable">.99</span><span class="variable">.00</span> build dev&#x27;</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">45</span>:<span class="number">002019</span> gpstart:h93:wslu-[INFO]:-Greenplum Catalog Version: &#x27;<span class="number">300701081</span>&#x27;</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">45</span>:<span class="number">002019</span> gpstart:h93:wslu-[INFO]:-Starting Master <span class="keyword">instance</span> in admin mode</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">46</span>:<span class="number">002019</span> gpstart:h93:wslu-[INFO]:-Obtaining Greenplum Master catalog information</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">46</span>:<span class="number">002019</span> gpstart:h93:wslu-[INFO]:-Obtaining Segment details from master...</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">46</span>:<span class="number">002019</span> gpstart:h93:wslu-[INFO]:-Setting <span class="keyword">new</span> master era</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">46</span>:<span class="number">002019</span> gpstart:h93:wslu-[INFO]:-Master Started...</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">46</span>:<span class="number">002019</span> gpstart:h93:wslu-[INFO]:-Shutting down master</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">47</span>:<span class="number">002019</span> gpstart:h93:wslu-[INFO]:-Commencing parallel primary <span class="keyword">and</span> mirror segment <span class="keyword">instance</span> startup, please <span class="keyword">wait</span>...</span><br><span class="line">........</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">55</span>:<span class="number">002019</span> gpstart:h93:wslu-[INFO]:-Process results...</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">55</span>:<span class="number">002019</span> gpstart:h93:wslu-[INFO]:-----------------------------------------------------</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">55</span>:<span class="number">002019</span> gpstart:h93:wslu-[INFO]:-   Successful segment starts                                            = <span class="number">8</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">55</span>:<span class="number">002019</span> gpstart:h93:wslu-[INFO]:-   Failed segment starts                                                = <span class="number">0</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">55</span>:<span class="number">002019</span> gpstart:h93:wslu-[INFO]:-   Skipped segment starts (segments are marked down in configuration)   = <span class="number">0</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">55</span>:<span class="number">002019</span> gpstart:h93:wslu-[INFO]:-----------------------------------------------------</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">55</span>:<span class="number">002019</span> gpstart:h93:wslu-[INFO]:-</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">55</span>:<span class="number">002019</span> gpstart:h93:wslu-[INFO]:-Successfully started <span class="number">8</span> of <span class="number">8</span> segment instances</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">55</span>:<span class="number">002019</span> gpstart:h93:wslu-[INFO]:-----------------------------------------------------</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">55</span>:<span class="number">002019</span> gpstart:h93:wslu-[INFO]:-Starting Master <span class="keyword">instance</span> h93 directory /home/wslu/gp/gpsql/data/master/gpseg-<span class="number">1</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">56</span>:<span class="number">002019</span> gpstart:h93:wslu-[INFO]:-Command pg_ctl reports Master h93 <span class="keyword">instance</span> active</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">56</span>:<span class="number">002019</span> gpstart:h93:wslu-[INFO]:-No standby master configured.  skipping...</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">56</span>:<span class="number">002019</span> gpstart:h93:wslu-[INFO]:-Database successfully started</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">59</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Completed restart of Greenplum <span class="keyword">instance</span> in production mode</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">33</span>:<span class="number">59</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Loading gp_toolkit...</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">34</span>:<span class="number">02</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Scanning utility log file <span class="keyword">for</span> any warning messages</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">34</span>:<span class="number">02</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Log file scan check passed</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">34</span>:<span class="number">02</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Greenplum Database <span class="keyword">instance</span> successfully created</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">34</span>:<span class="number">02</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-------------------------------------------------------</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">34</span>:<span class="number">02</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-To complete the environment configuration, please</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">34</span>:<span class="number">02</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-update wslu <span class="variable">.bashrc</span> file <span class="keyword">with</span> the following</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">34</span>:<span class="number">02</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-<span class="number">1</span>. Ensure that the greenplum_path<span class="variable">.sh</span> file is sourced</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">34</span>:<span class="number">02</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-<span class="number">2</span>. Add <span class="string">&quot;export MASTER_DATA_DIRECTORY=/home/wslu/gp/gpsql/data/master/gpseg-1&quot;</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">34</span>:<span class="number">02</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-   to access the Greenplum scripts <span class="keyword">for</span> <span class="keyword">this</span> <span class="keyword">instance</span>:</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">34</span>:<span class="number">02</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-   <span class="keyword">or</span>, <span class="keyword">use</span> -d /home/wslu/gp/gpsql/data/master/gpseg-<span class="number">1</span> option <span class="keyword">for</span> the Greenplum scripts</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">34</span>:<span class="number">02</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-   Example gpstate -d /home/wslu/gp/gpsql/data/master/gpseg-<span class="number">1</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">34</span>:<span class="number">02</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Script log file = /home/wslu/gpAdminLogs/gpinitsystem_20160114<span class="variable">.log</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">34</span>:<span class="number">02</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-To remove <span class="keyword">instance</span>, run gpdeletesystem utility</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">34</span>:<span class="number">02</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-To initialize a Standby Master Segment <span class="keyword">for</span> <span class="keyword">this</span> Greenplum <span class="keyword">instance</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">34</span>:<span class="number">02</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Review options <span class="keyword">for</span> gpinitstandby</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">34</span>:<span class="number">02</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-------------------------------------------------------</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">34</span>:<span class="number">02</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-The Master /home/wslu/gp/gpsql/data/master/gpseg-<span class="number">1</span>/pg_hba<span class="variable">.conf</span> post gpinitsystem</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">34</span>:<span class="number">02</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-has been configured to allow all hosts <span class="keyword">within</span> <span class="keyword">this</span> <span class="keyword">new</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">34</span>:<span class="number">02</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-array to intercommunicate. Any hosts external to <span class="keyword">this</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">34</span>:<span class="number">02</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-<span class="keyword">new</span> array must be explicitly added to <span class="keyword">this</span> file</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">34</span>:<span class="number">02</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-Refer to the Greenplum Admin support guide which is</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">34</span>:<span class="number">02</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-located in the /home/wslu/gp/gpsql/docs directory</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">34</span>:<span class="number">02</span>:<span class="number">005980</span> gpinitsystem:h93:wslu-[INFO]:-------------------------------------------------------</span><br></pre></td></tr></table></figure><ol start="5"><li>查看目录结构：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[wslu@h93 gpsql]$ ls data</span><br><span class="line">master  mirror  primary</span><br><span class="line">[wslu@h93 gpsql]$ ls data/master/</span><br><span class="line">gpseg-1</span><br><span class="line">[wslu@h93 gpsql]$ ls data/mirror/</span><br><span class="line">gpseg2  gpseg3</span><br><span class="line">[wslu@h93 gpsql]$ ls data/primary/</span><br><span class="line">gpseg0  gpseg1</span><br><span class="line">[wslu@h93 gpsql]$</span><br><span class="line"></span><br><span class="line">[wslu@h94 gpsql]$ ls data/</span><br><span class="line">master  mirror  primary</span><br><span class="line">[wslu@h94 gpsql]$ ls data/master/</span><br><span class="line">[wslu@h94 gpsql]$ ls data/primary/</span><br><span class="line">gpseg2  gpseg3</span><br><span class="line">[wslu@h94 gpsql]$ ls data/mirror/</span><br><span class="line">gpseg0  gpseg1</span><br><span class="line">[wslu@h94 gpsql]$</span><br></pre></td></tr></table></figure><ol start="6"><li>在 h94 初始化备 master（主备 master 必须在不同主机，如果要配置单机多节点，则不能配置备 master。这是因为目前主备 master 必须在相同目录，所以必然不同主机。如果端口不是 5432，那么需要指定 PGPORT）：</li></ol><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[wslu@h93 gpsql]$ PGPORT=<span class="number">5432</span> PGDATABASE=postgres gpinitstandby -s h94</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">40</span>:<span class="number">47</span>:<span class="number">003933</span> gpinitstandby:h93:wslu-[INFO]:-Validating environment <span class="keyword">and</span> parameters <span class="keyword">for</span> standby initialization...</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">40</span>:<span class="number">47</span>:<span class="number">003933</span> gpinitstandby:h93:wslu-[INFO]:-Checking <span class="keyword">for</span> filespace directory /home/wslu/gp/gpsql/data/master/gpseg-<span class="number">1</span> on h94</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">40</span>:<span class="number">47</span>:<span class="number">003933</span> gpinitstandby:h93:wslu-[INFO]:------------------------------------------------------</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">40</span>:<span class="number">47</span>:<span class="number">003933</span> gpinitstandby:h93:wslu-[INFO]:-Greenplum standby master initialization parameters</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">40</span>:<span class="number">47</span>:<span class="number">003933</span> gpinitstandby:h93:wslu-[INFO]:------------------------------------------------------</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">40</span>:<span class="number">47</span>:<span class="number">003933</span> gpinitstandby:h93:wslu-[INFO]:-Greenplum master hostname               = h93</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">40</span>:<span class="number">47</span>:<span class="number">003933</span> gpinitstandby:h93:wslu-[INFO]:-Greenplum master data directory         = /home/wslu/gp/gpsql/data/master/gpseg-<span class="number">1</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">40</span>:<span class="number">47</span>:<span class="number">003933</span> gpinitstandby:h93:wslu-[INFO]:-Greenplum master port                   = <span class="number">5432</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">40</span>:<span class="number">47</span>:<span class="number">003933</span> gpinitstandby:h93:wslu-[INFO]:-Greenplum standby master hostname       = h94</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">40</span>:<span class="number">47</span>:<span class="number">003933</span> gpinitstandby:h93:wslu-[INFO]:-Greenplum standby master port           = <span class="number">5432</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">40</span>:<span class="number">47</span>:<span class="number">003933</span> gpinitstandby:h93:wslu-[INFO]:-Greenplum standby master data directory = /home/wslu/gp/gpsql/data/master/gpseg-<span class="number">1</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">40</span>:<span class="number">47</span>:<span class="number">003933</span> gpinitstandby:h93:wslu-[INFO]:-Greenplum update system catalog         = On</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">40</span>:<span class="number">47</span>:<span class="number">003933</span> gpinitstandby:h93:wslu-[INFO]:------------------------------------------------------</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">40</span>:<span class="number">47</span>:<span class="number">003933</span> gpinitstandby:h93:wslu-[INFO]:- Filespace locations</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">40</span>:<span class="number">47</span>:<span class="number">003933</span> gpinitstandby:h93:wslu-[INFO]:------------------------------------------------------</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">40</span>:<span class="number">47</span>:<span class="number">003933</span> gpinitstandby:h93:wslu-[INFO]:-pg_system -&gt; /home/wslu/gp/gpsql/data/master/gpseg-<span class="number">1</span></span><br><span class="line">Do you want to <span class="keyword">continue</span> <span class="keyword">with</span> standby master initialization? Yy|Nn (<span class="keyword">default</span>=N):</span><br><span class="line">&gt; y</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">40</span>:<span class="number">53</span>:<span class="number">003933</span> gpinitstandby:h93:wslu-[INFO]:-Syncing Greenplum Database extensions to standby</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">40</span>:<span class="number">53</span>:<span class="number">003933</span> gpinitstandby:h93:wslu-[INFO]:-The packages on h94 are consistent.</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">40</span>:<span class="number">53</span>:<span class="number">003933</span> gpinitstandby:h93:wslu-[INFO]:-Adding standby master to catalog...</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">40</span>:<span class="number">53</span>:<span class="number">003933</span> gpinitstandby:h93:wslu-[INFO]:-Database catalog updated successfully.</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">40</span>:<span class="number">54</span>:<span class="number">003933</span> gpinitstandby:h93:wslu-[INFO]:-Updating pg_hba<span class="variable">.conf</span> file...</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">41</span>:<span class="number">00</span>:<span class="number">003933</span> gpinitstandby:h93:wslu-[INFO]:-pg_hba<span class="variable">.conf</span> files updated successfully.</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">41</span>:<span class="number">09</span>:<span class="number">003933</span> gpinitstandby:h93:wslu-[INFO]:-Updating filespace flat files...</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">41</span>:<span class="number">09</span>:<span class="number">003933</span> gpinitstandby:h93:wslu-[INFO]:-Filespace flat file updated successfully.</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">41</span>:<span class="number">10</span>:<span class="number">003933</span> gpinitstandby:h93:wslu-[INFO]:-Starting standby master</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">41</span>:<span class="number">10</span>:<span class="number">003933</span> gpinitstandby:h93:wslu-[INFO]:-Checking <span class="keyword">if</span> standby master is running on host: h94  in directory: /home/wslu/gp/gpsql/data/master/gpseg-<span class="number">1</span></span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">41</span>:<span class="number">11</span>:<span class="number">003933</span> gpinitstandby:h93:wslu-[INFO]:-Cleaning up pg_hba<span class="variable">.conf</span> backup files...</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">41</span>:<span class="number">17</span>:<span class="number">003933</span> gpinitstandby:h93:wslu-[INFO]:-Backup files of pg_hba<span class="variable">.conf</span> cleaned up successfully.</span><br><span class="line"><span class="number">20160114</span>:<span class="number">14</span>:<span class="number">41</span>:<span class="number">17</span>:<span class="number">003933</span> gpinitstandby:h93:wslu-[INFO]:-Successfully created standby master on h94</span><br></pre></td></tr></table></figure><ol start="7"><li>此时，h94 的 data/master 目录就不为空了：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ [wslu@h94 gpsql]$ ls data/master/</span><br><span class="line">gpseg-1</span><br></pre></td></tr></table></figure><h2 id="1-10-测试"><a href="#1-10-测试" class="headerlink" title="1.10. 测试"></a>1.10. 测试</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[wslu<span class="variable">@h93</span> gpsql]$ psql <span class="operator">-</span>p <span class="number">5432</span> postgres</span><br><span class="line">psql (<span class="number">8.3</span>devel)</span><br><span class="line">Type &quot;help&quot; <span class="keyword">for</span> help.</span><br><span class="line"></span><br><span class="line">postgres<span class="operator">=</span>#</span><br><span class="line">postgres<span class="operator">=</span>#</span><br><span class="line">postgres<span class="operator">=</span># \db</span><br><span class="line">        List <span class="keyword">of</span> tablespaces</span><br><span class="line">    Name    <span class="operator">|</span> Owner <span class="operator">|</span> Filespae Name</span><br><span class="line"><span class="comment">------------+-------+---------------</span></span><br><span class="line"> pg_default <span class="operator">|</span> wslu  <span class="operator">|</span> pg_system</span><br><span class="line"> pg_global  <span class="operator">|</span> wslu  <span class="operator">|</span> pg_system</span><br><span class="line">(<span class="number">2</span> <span class="keyword">rows</span>)</span><br></pre></td></tr></table></figure><p>至此，集群完成了初始化。</p><h2 id="1-11-补充：如何将所有节点部署在一台主机？"><a href="#1-11-补充：如何将所有节点部署在一台主机？" class="headerlink" title="1.11. 补充：如何将所有节点部署在一台主机？"></a>1.11. 补充：如何将所有节点部署在一台主机？</h2><p>如果要将所有节点配置在一台主机，比如：在 h93 配置 2 个主 segment、2 个镜像 segment、1 个 master，只需要把<code>hostfile_config</code>中的 h94 删掉，然后在 h93 删除 <code>data/primary，data/mirror，data/master</code> 目录下的内容，重新初始化即可。</p><h1 id="2-GreenPlum-常用指令"><a href="#2-GreenPlum-常用指令" class="headerlink" title="2. GreenPlum 常用指令"></a>2. GreenPlum 常用指令</h1><p><strong>说明：</strong> 每次使用集群的任何指令前，必须执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> greenplum-path.sh</span><br><span class="line">$ exportMASTER_DATA_DIRECTORY=/home/wslu/gp/gpsql/data/master/gpseg-1</span><br></pre></td></tr></table></figure><p>下文不再赘述。</p><h2 id="2-1-启动集群"><a href="#2-1-启动集群" class="headerlink" title="2.1. 启动集群"></a>2.1. 启动集群</h2><p>手动启动集群：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gpstart –a</span><br></pre></td></tr></table></figure><h2 id="2-2-停止集群"><a href="#2-2-停止集群" class="headerlink" title="2.2. 停止集群"></a>2.2. 停止集群</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gpstop –a</span><br></pre></td></tr></table></figure><h2 id="2-3-重启集群"><a href="#2-3-重启集群" class="headerlink" title="2.3. 重启集群"></a>2.3. 重启集群</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gpstop –a –r</span><br></pre></td></tr></table></figure><h2 id="2-4-查看集群状态"><a href="#2-4-查看集群状态" class="headerlink" title="2.4. 查看集群状态"></a>2.4. 查看集群状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gpstate –m | -e</span><br></pre></td></tr></table></figure><h2 id="2-5-reload-配置文件"><a href="#2-5-reload-配置文件" class="headerlink" title="2.5. reload 配置文件"></a>2.5. reload 配置文件</h2><p>在不停止集群情况下，若配置文件发生变更，reload 配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gpstop –u</span><br></pre></td></tr></table></figure><h2 id="2-6-维护模式下启动-master"><a href="#2-6-维护模式下启动-master" class="headerlink" title="2.6. 维护模式下启动 master"></a>2.6. 维护模式下启动 master</h2><p>仅仅启动 master 来执行维护管理任务，不会影响 segment 中的数据。例如，在维护模式下你可以仅连接 master 实例的数据库并且编辑系统表设置。</p><ol><li>以维护模式启动 master：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gpstart –m</span><br></pre></td></tr></table></figure><ol start="2"><li>维护模式下连接 master 来维护系统表。例如：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ PGOPTIONS=<span class="string">&#x27;-c gp_session_role=utility&#x27;</span> psql template1</span><br></pre></td></tr></table></figure><ol start="3"><li>完成管理任务后，使 master 关闭工具模式。然后，重启进入正常模式：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gpstop -m</span><br></pre></td></tr></table></figure><h2 id="2-7-访问数据库"><a href="#2-7-访问数据库" class="headerlink" title="2.7. 访问数据库"></a>2.7. 访问数据库</h2><p>可以使用 psql 连接集群：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> [wslu<span class="variable">@h93</span> gpsql]$ psql <span class="operator">-</span>p <span class="number">5432</span> postgres</span><br><span class="line">psql (<span class="number">8.3</span>devel)</span><br><span class="line">Type &quot;help&quot; <span class="keyword">for</span> help.</span><br><span class="line"></span><br><span class="line">postgres<span class="operator">=</span>#</span><br></pre></td></tr></table></figure><h2 id="2-8-GUC-参数配置"><a href="#2-8-GUC-参数配置" class="headerlink" title="2.8. GUC 参数配置"></a>2.8. GUC 参数配置</h2><p><strong>使用 gpconfig 设置 guc 参数：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gpconfig -c gp_vmem_protect_limit -v4096MB</span><br></pre></td></tr></table></figure><p>gpconfig 可以设置 master 和所有 segment 的 guc 参数，也可以使用 <code>--masteronly</code> 参数只设置 master 的参数。设置完 guc 参数后需要根据 guc 参数类型决定重启集群或 reload 配置文件。</p><p><strong>显示 guc 参数：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ psql –c ‘showstatement_mem;’ 或 gpconfig –show statement_mem</span><br><span class="line">$ psql –c ‘show all;’ 或 gpconfig –l</span><br></pre></td></tr></table></figure><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> GreenPlum </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> PostgreSQL </tag>
            
            <tag> GreenPlum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实用工具 | PostgreSQL 数据库压力测试工具 pgbench 使用示例</title>
      <link href="/2015/12/23/example-of-postgresql-pgbench/"/>
      <url>/2015/12/23/example-of-postgresql-pgbench/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p><strong>本文首发于 2015-12-23 21:04:17</strong></p></blockquote><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>PG 数据库提供了一款轻量级的压力测试工具叫 <code>pgbench</code>，其实就是一个编译好后的扩展性的可执行文件。</p><p><strong>测试环境：</strong></p><blockquote><p>CentOS 5.7 in VMWare 8.0</p><p>PG：9.1.2</p></blockquote><p><strong>数据库参数：</strong></p><blockquote><p>max_connection=100</p><p>其他默认</p><p><strong>注意：</strong> 本文只为说明 <code>pgbench</code> 的使用方法，因此，并未对数据库参数调优。</p></blockquote><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>进入源码安装包，编译、安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> postgresql-9.1.2/contrib/pgbench/</span><br><span class="line">make all</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>安装完毕以后可以在 bin 文件夹下看到新生成的 pgbench 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ll <span class="variable">$PGHOME</span>/bin/pgbench</span><br><span class="line">-rwxr-xr-x. 1 postgres postgres 50203 Jul  8 20:28 pgbench</span><br></pre></td></tr></table></figure><h1 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[postgres@localhost  bin]$ pgbench --<span class="built_in">help</span></span><br><span class="line">pgbench is a benchmarking tool <span class="keyword">for</span> PostgreSQL.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  pgbench [OPTIONS]... [DBNAME]</span><br><span class="line"></span><br><span class="line">Initialization options:</span><br><span class="line">  -i           invokes initialization mode</span><br><span class="line">  -F NUM       fill factor</span><br><span class="line">  -s NUM       scaling factor</span><br><span class="line"></span><br><span class="line">Benchmarking options:</span><br><span class="line">  -c NUM       number of concurrent database clients (default: 1)</span><br><span class="line">  -C           establish new connection <span class="keyword">for</span> each transaction</span><br><span class="line">  -D VARNAME=VALUE</span><br><span class="line">               define variable <span class="keyword">for</span> use by custom script</span><br><span class="line">  -f FILENAME  <span class="built_in">read</span> transaction script from FILENAME</span><br><span class="line">  -j NUM       number of threads (default: 1)</span><br><span class="line">  -l           write transaction <span class="built_in">times</span> to <span class="built_in">log</span> file</span><br><span class="line">  -M &#123;simple|extended|prepared&#125;</span><br><span class="line">               protocol <span class="keyword">for</span> submitting queries to server (default: simple)</span><br><span class="line">  -n           <span class="keyword">do</span> not run VACUUM before tests</span><br><span class="line">  -N           <span class="keyword">do</span> not update tables <span class="string">&quot;pgbench_tellers&quot;</span> and <span class="string">&quot;pgbench_branches&quot;</span></span><br><span class="line">  -r           report average latency per <span class="built_in">command</span></span><br><span class="line">  -s NUM       report this scale factor <span class="keyword">in</span> output</span><br><span class="line">  -S           perform SELECT-only transactions</span><br><span class="line">  -t NUM       number of transactions each client runs (default: 10)</span><br><span class="line">  -T NUM       duration of benchmark <span class="built_in">test</span> <span class="keyword">in</span> seconds</span><br><span class="line">  -v           vacuum all four standard tables before tests</span><br><span class="line"></span><br><span class="line">Common options:</span><br><span class="line">  -d           <span class="built_in">print</span> debugging output</span><br><span class="line">  -h HOSTNAME  database server host or socket directory</span><br><span class="line">  -p PORT      database server port number</span><br><span class="line">  -U USERNAME  connect as specified database user</span><br><span class="line">  --<span class="built_in">help</span>       show this <span class="built_in">help</span>, <span class="keyword">then</span> <span class="built_in">exit</span></span><br><span class="line">  --version    output version information, <span class="keyword">then</span> <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>部分参数中文含义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">-c, --client=NUM</span><br><span class="line">数据库客户端数量, 可以理解为数据库会话数量(postgres进程数), 默认为1</span><br><span class="line"></span><br><span class="line">-C, --connect</span><br><span class="line">每个事务创建一个连接,由于PG使用进程模型, 可以测试频繁Kill/Create进程的性能表现</span><br><span class="line"></span><br><span class="line">-j, --jobs=NUM</span><br><span class="line">pgbench的工作线程数</span><br><span class="line"></span><br><span class="line">-T, --time=NUM</span><br><span class="line">以秒为单位的压测时长</span><br><span class="line"></span><br><span class="line">-v, --vacuum-all</span><br><span class="line">每次测试前执行vacuum命令, 避免&quot;垃圾&quot;空间的影响</span><br><span class="line"></span><br><span class="line">-M, --protocol=simple|extended|prepared</span><br><span class="line">提交查询命令到服务器使用的协议, simple是默认选项, prepared是类似绑定</span><br><span class="line"></span><br><span class="line">-r, --report-latencies</span><br><span class="line">报告每条命令(SQL语句)的平均延时</span><br><span class="line"></span><br><span class="line">-S, --select-only</span><br><span class="line">只执行查询语句</span><br></pre></td></tr></table></figure><h1 id="初始化测试数据"><a href="#初始化测试数据" class="headerlink" title="初始化测试数据"></a>初始化测试数据</h1><p>初始化数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[postgres@localhost  ~]$ pgbench -i pgbench</span><br><span class="line">creating tables...</span><br><span class="line">10000 tuples <span class="keyword">done</span>.</span><br><span class="line">20000 tuples <span class="keyword">done</span>.</span><br><span class="line">30000 tuples <span class="keyword">done</span>.</span><br><span class="line">40000 tuples <span class="keyword">done</span>.</span><br><span class="line">50000 tuples <span class="keyword">done</span>.</span><br><span class="line">60000 tuples <span class="keyword">done</span>.</span><br><span class="line">70000 tuples <span class="keyword">done</span>.</span><br><span class="line">80000 tuples <span class="keyword">done</span>.</span><br><span class="line">90000 tuples <span class="keyword">done</span>.</span><br><span class="line">100000 tuples <span class="keyword">done</span>.</span><br><span class="line"><span class="built_in">set</span> primary key...</span><br><span class="line">NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index <span class="string">&quot;pgbench_branches_pkey&quot;</span> <span class="keyword">for</span> table <span class="string">&quot;pgbench_branches&quot;</span></span><br><span class="line">NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index <span class="string">&quot;pgbench_tellers_pkey&quot;</span> <span class="keyword">for</span> table <span class="string">&quot;pgbench_tellers&quot;</span></span><br><span class="line">NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index <span class="string">&quot;pgbench_accounts_pkey&quot;</span> <span class="keyword">for</span> table <span class="string">&quot;pgbench_accounts&quot;</span></span><br><span class="line">vacuum...done.</span><br></pre></td></tr></table></figure><p>查看表数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[postgres<span class="variable">@localhost</span>  <span class="operator">~</span>]$ psql <span class="operator">-</span>d pgbench</span><br><span class="line">psql (<span class="number">9.1</span><span class="number">.2</span>)</span><br><span class="line">Type &quot;help&quot; <span class="keyword">for</span> help.</span><br><span class="line"></span><br><span class="line">pgbench<span class="operator">=</span># <span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> pgbench_accounts;</span><br><span class="line"> count</span><br><span class="line"><span class="comment">--------</span></span><br><span class="line"> <span class="number">100000</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br><span class="line"></span><br><span class="line">pgbench<span class="operator">=</span># <span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> pgbench_branches;</span><br><span class="line"> count</span><br><span class="line"><span class="comment">-------</span></span><br><span class="line">     <span class="number">1</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br><span class="line"></span><br><span class="line">pgbench<span class="operator">=</span># <span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> pgbench_history;</span><br><span class="line"> count</span><br><span class="line"><span class="comment">-------</span></span><br><span class="line">     <span class="number">0</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br><span class="line"></span><br><span class="line">pgbench<span class="operator">=</span># <span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> pgbench_tellers;</span><br><span class="line"> count</span><br><span class="line"><span class="comment">-------</span></span><br><span class="line">    <span class="number">10</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br></pre></td></tr></table></figure><p>查看表结构：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">pgbench<span class="operator">=</span># \d<span class="operator">+</span> pgbench_accounts</span><br><span class="line">                <span class="keyword">Table</span> &quot;public.pgbench_accounts&quot;</span><br><span class="line">  <span class="keyword">Column</span>  <span class="operator">|</span>     Type      <span class="operator">|</span> Modifiers <span class="operator">|</span> Storage  <span class="operator">|</span> Description</span><br><span class="line"><span class="comment">----------+---------------+-----------+----------+-------------</span></span><br><span class="line"> aid      <span class="operator">|</span> <span class="type">integer</span>       <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>  <span class="operator">|</span> plain    <span class="operator">|</span></span><br><span class="line"> bid      <span class="operator">|</span> <span class="type">integer</span>       <span class="operator">|</span>           <span class="operator">|</span> plain    <span class="operator">|</span></span><br><span class="line"> abalance <span class="operator">|</span> <span class="type">integer</span>       <span class="operator">|</span>           <span class="operator">|</span> plain    <span class="operator">|</span></span><br><span class="line"> filler   <span class="operator">|</span> <span class="type">character</span>(<span class="number">84</span>) <span class="operator">|</span>           <span class="operator">|</span> extended <span class="operator">|</span></span><br><span class="line">Indexes:</span><br><span class="line">    &quot;pgbench_accounts_pkey&quot; <span class="keyword">PRIMARY</span> KEY, btree (aid)</span><br><span class="line">Has OIDs: <span class="keyword">no</span></span><br><span class="line">Options: fillfactor<span class="operator">=</span><span class="number">100</span></span><br><span class="line"></span><br><span class="line">pgbench<span class="operator">=</span># \d<span class="operator">+</span> pgbench_branches</span><br><span class="line">                <span class="keyword">Table</span> &quot;public.pgbench_branches&quot;</span><br><span class="line">  <span class="keyword">Column</span>  <span class="operator">|</span>     Type      <span class="operator">|</span> Modifiers <span class="operator">|</span> Storage  <span class="operator">|</span> Description</span><br><span class="line"><span class="comment">----------+---------------+-----------+----------+-------------</span></span><br><span class="line"> bid      <span class="operator">|</span> <span class="type">integer</span>       <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>  <span class="operator">|</span> plain    <span class="operator">|</span></span><br><span class="line"> bbalance <span class="operator">|</span> <span class="type">integer</span>       <span class="operator">|</span>           <span class="operator">|</span> plain    <span class="operator">|</span></span><br><span class="line"> filler   <span class="operator">|</span> <span class="type">character</span>(<span class="number">88</span>) <span class="operator">|</span>           <span class="operator">|</span> extended <span class="operator">|</span></span><br><span class="line">Indexes:</span><br><span class="line">    &quot;pgbench_branches_pkey&quot; <span class="keyword">PRIMARY</span> KEY, btree (bid)</span><br><span class="line">Has OIDs: <span class="keyword">no</span></span><br><span class="line">Options: fillfactor<span class="operator">=</span><span class="number">100</span></span><br><span class="line"></span><br><span class="line">pgbench<span class="operator">=</span># \d<span class="operator">+</span> pgbench_history</span><br><span class="line">                      <span class="keyword">Table</span> &quot;public.pgbench_history&quot;</span><br><span class="line"> <span class="keyword">Column</span> <span class="operator">|</span>            Type             <span class="operator">|</span> Modifiers <span class="operator">|</span> Storage  <span class="operator">|</span> Description</span><br><span class="line"><span class="comment">--------+-----------------------------+-----------+----------+-------------</span></span><br><span class="line"> tid    <span class="operator">|</span> <span class="type">integer</span>                     <span class="operator">|</span>           <span class="operator">|</span> plain    <span class="operator">|</span></span><br><span class="line"> bid    <span class="operator">|</span> <span class="type">integer</span>                     <span class="operator">|</span>           <span class="operator">|</span> plain    <span class="operator">|</span></span><br><span class="line"> aid    <span class="operator">|</span> <span class="type">integer</span>                     <span class="operator">|</span>           <span class="operator">|</span> plain    <span class="operator">|</span></span><br><span class="line"> delta  <span class="operator">|</span> <span class="type">integer</span>                     <span class="operator">|</span>           <span class="operator">|</span> plain    <span class="operator">|</span></span><br><span class="line"> mtime  <span class="operator">|</span> <span class="type">timestamp</span> <span class="keyword">without</span> <span class="type">time</span> zone <span class="operator">|</span>           <span class="operator">|</span> plain    <span class="operator">|</span></span><br><span class="line"> filler <span class="operator">|</span> <span class="type">character</span>(<span class="number">22</span>)               <span class="operator">|</span>           <span class="operator">|</span> extended <span class="operator">|</span></span><br><span class="line">Has OIDs: <span class="keyword">no</span></span><br><span class="line"></span><br><span class="line">pgbench<span class="operator">=</span># \d<span class="operator">+</span> pgbench_tellers</span><br><span class="line">                <span class="keyword">Table</span> &quot;public.pgbench_tellers&quot;</span><br><span class="line">  <span class="keyword">Column</span>  <span class="operator">|</span>     Type      <span class="operator">|</span> Modifiers <span class="operator">|</span> Storage  <span class="operator">|</span> Description</span><br><span class="line"><span class="comment">----------+---------------+-----------+----------+-------------</span></span><br><span class="line"> tid      <span class="operator">|</span> <span class="type">integer</span>       <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>  <span class="operator">|</span> plain    <span class="operator">|</span></span><br><span class="line"> bid      <span class="operator">|</span> <span class="type">integer</span>       <span class="operator">|</span>           <span class="operator">|</span> plain    <span class="operator">|</span></span><br><span class="line"> tbalance <span class="operator">|</span> <span class="type">integer</span>       <span class="operator">|</span>           <span class="operator">|</span> plain    <span class="operator">|</span></span><br><span class="line"> filler   <span class="operator">|</span> <span class="type">character</span>(<span class="number">84</span>) <span class="operator">|</span>           <span class="operator">|</span> extended <span class="operator">|</span></span><br><span class="line">Indexes:</span><br><span class="line">    &quot;pgbench_tellers_pkey&quot; <span class="keyword">PRIMARY</span> KEY, btree (tid)</span><br><span class="line">Has OIDs: <span class="keyword">no</span></span><br><span class="line">Options: fillfactor<span class="operator">=</span><span class="number">100</span></span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><ol><li>这里使用的是默认的参数值，<code>-s</code>参数时可指定测试数据的数据量，<code>-f</code>可以指定测试的脚本，这里用的是默认脚本。</li><li>不要在生产的库上做，新建一个测试库（当生产上有同名的测试表时将被重置）。</li></ol><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="1-个-session"><a href="#1-个-session" class="headerlink" title="1 个 session"></a>1 个 session</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[postgres@localhost  ~]$ nohup pgbench -c 1 -T 20 -r pgbench &gt; file.out  2&gt;&amp;1</span><br><span class="line">[postgres@localhost  ~]$ more file.out</span><br><span class="line">nohup: ignoring input</span><br><span class="line">starting vacuum...end.</span><br><span class="line">transaction <span class="built_in">type</span>: TPC-B (sort of)</span><br><span class="line">scaling factor: 1</span><br><span class="line">query mode: simple</span><br><span class="line">number of clients: 1</span><br><span class="line">number of threads: 1</span><br><span class="line">duration: 20 s</span><br><span class="line">number of transactions actually processed: 12496                                                                                     tps = 624.747958 (including connections establishing)                                                                                tps = 625.375564 (excluding connections establishing)</span><br><span class="line">statement latencies <span class="keyword">in</span> milliseconds:</span><br><span class="line">        0.005299        \<span class="built_in">set</span> nbranches 1 * :scale</span><br><span class="line">        0.000619        \<span class="built_in">set</span> ntellers 10 * :scale</span><br><span class="line">        0.000492        \<span class="built_in">set</span> naccounts 100000 * :scale</span><br><span class="line">        0.000700        \setrandom aid 1 :naccounts</span><br><span class="line">        0.000400        \setrandom bid 1 :nbranches</span><br><span class="line">        0.000453        \setrandom tid 1 :ntellers</span><br><span class="line">        0.000430        \setrandom delta -5000 5000</span><br><span class="line">        0.050707        BEGIN;</span><br><span class="line">        0.200909        UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;</span><br><span class="line">        0.098718        SELECT abalance FROM pgbench_accounts WHERE aid = :aid;</span><br><span class="line">        0.111621        UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;</span><br><span class="line">        0.107297        UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;</span><br><span class="line">        0.095156        INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);</span><br><span class="line">        0.919101        END;</span><br></pre></td></tr></table></figure><h2 id="2-50-个-session"><a href="#2-50-个-session" class="headerlink" title="2. 50 个 session"></a>2. 50 个 session</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[postgres@localhost  ~]<span class="variable">$nohup</span> pgbench -c 50 -T 20 -r pgbench &gt; file.out  2&gt;&amp;1</span><br><span class="line">[postgres@localhost  ~]$ more file.out</span><br><span class="line">nohup: ignoring input</span><br><span class="line">starting vacuum...end.</span><br><span class="line">transaction <span class="built_in">type</span>: TPC-B (sort of)</span><br><span class="line">scaling factor: 1</span><br><span class="line">query mode: simple</span><br><span class="line">number of clients: 50</span><br><span class="line">number of threads: 1</span><br><span class="line">duration: 20 s</span><br><span class="line">number of transactions actually processed: 7504                                                                                      tps = 370.510431 (including connections establishing)                                                                               tps = 377.964565 (excluding connections establishing)</span><br><span class="line">statement latencies <span class="keyword">in</span> milliseconds:</span><br><span class="line">        0.004291        \<span class="built_in">set</span> nbranches 1 * :scale</span><br><span class="line">        0.000769        \<span class="built_in">set</span> ntellers 10 * :scale</span><br><span class="line">        0.000955        \<span class="built_in">set</span> naccounts 100000 * :scale</span><br><span class="line">        0.000865        \setrandom aid 1 :naccounts</span><br><span class="line">        0.000513        \setrandom bid 1 :nbranches</span><br><span class="line">        0.000580        \setrandom tid 1 :ntellers</span><br><span class="line">        0.000522        \setrandom delta -5000 5000</span><br><span class="line">        0.604671        BEGIN;</span><br><span class="line">        1.480723        UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;</span><br><span class="line">        0.401148        SELECT abalance FROM pgbench_accounts WHERE aid = :aid;</span><br><span class="line">        104.713566      UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;</span><br><span class="line">        21.562787       UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;</span><br><span class="line">        0.412209        INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);</span><br><span class="line">        2.243497        END;</span><br></pre></td></tr></table></figure><h2 id="3-100-个-session"><a href="#3-100-个-session" class="headerlink" title="3. 100 个 session"></a>3. 100 个 session</h2><p>超过 100 个会报错，因为数据库当前设置最大 session 是 100。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[postgres@localhost  ~]$ nohup pgbench -c 100 -T 20 -r pgbench&gt; file.out  2&gt;&amp;1</span><br><span class="line">[postgres@localhost  ~]$ more file.out</span><br><span class="line">nohup: ignoring input</span><br><span class="line">starting vacuum...end.</span><br><span class="line">transaction <span class="built_in">type</span>: TPC-B (sort of)</span><br><span class="line">scaling factor: 1</span><br><span class="line">query mode: simple</span><br><span class="line">number of clients: 100</span><br><span class="line">number of threads: 1</span><br><span class="line">duration: 20 s</span><br><span class="line">number of transactions actually processed: 6032                                                                                      tps = 292.556692 (including connections establishing)                                                                                tps = 305.595090 (excluding connections establishing)</span><br><span class="line">statement latencies <span class="keyword">in</span> milliseconds:</span><br><span class="line">        0.004508        \<span class="built_in">set</span> nbranches 1 * :scale</span><br><span class="line">        0.000787        \<span class="built_in">set</span> ntellers 10 * :scale</span><br><span class="line">        0.000879        \<span class="built_in">set</span> naccounts 100000 * :scale</span><br><span class="line">        0.001620        \setrandom aid 1 :naccounts</span><br><span class="line">        0.000485        \setrandom bid 1 :nbranches</span><br><span class="line">        0.000561        \setrandom tid 1 :ntellers</span><br><span class="line">        0.000656        \setrandom delta -5000 5000</span><br><span class="line">        3.660809        BEGIN;</span><br><span class="line">        4.198062        UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;</span><br><span class="line">        1.727076        SELECT abalance FROM pgbench_accounts WHERE aid = :aid;</span><br><span class="line">        281.955832      UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;</span><br><span class="line">        27.054125       UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;</span><br><span class="line">        0.524155        INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);</span><br><span class="line">        2.710619        END;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.postgresql.org/docs/9.1/static/pgbench.html">http://www.postgresql.org/docs/9.1/static/pgbench.html</a></p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> PostgreSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PostgreSQL </tag>
            
            <tag> pgbench </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特性分析 | PostgreSQL Primary/Standby 主备流复制机制</title>
      <link href="/2015/11/21/postgresql-primary-standby-streaming-replication/"/>
      <url>/2015/11/21/postgresql-primary-standby-streaming-replication/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p><strong>本文首发于 2015-11-21 20:02:26</strong></p></blockquote><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>PostgreSQL 在 9.0 之后引入了主备流复制机制，通过流复制，备库不断的从主库同步相应的数据，并在备库 apply 每个 <code>WAL record</code>，这里的流复制每次传输单位是 WAL 日志的 record 。而 PostgreSQL 9.0 之前提供的方法是主库写完一个 WAL 日志文件后，才把 WAL 日志文件传送到备库，这样的方式导致主备延迟特别大。同时，PostgreSQL 9.0 之后提供了 <code>Hot Standby</code>，备库在应用 <code>WAL record</code> 的同时也能够提供只读服务，大大提升了用户体验。</p><h2 id="主备总体结构"><a href="#主备总体结构" class="headerlink" title="主备总体结构"></a>主备总体结构</h2><p>PostgreSQL 主备流复制的核心部分由 <code>walsender</code>，<code>walreceiver</code> 和 <code>startup</code> 三个进程组成。</p><p><strong>walsender 进程是用来发送 WAL 日志记录的</strong>，执行顺序如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PostgresMain</span>()-&gt;<span class="built_in">exec_replication_command</span>()-&gt;<span class="built_in">StartReplication</span>()-&gt;<span class="built_in">WalSndLoop</span>()-&gt;<span class="built_in">XLogSendPhysical</span>()</span><br></pre></td></tr></table></figure><p><strong>walreceiver 进程是用来接收 WAL 日志记录的</strong>，执行顺序如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sigusr1_handler</span>()-&gt;<span class="built_in">StartWalReceiver</span>()-&gt;<span class="built_in">AuxiliaryProcessMain</span>()-&gt;<span class="built_in">WalReceiverMain</span>()-&gt;<span class="built_in">walrcv_receive</span>()</span><br></pre></td></tr></table></figure><p><strong>startup 进程是用来 apply 日志的</strong>，执行顺序如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PostmasterMain</span>()-&gt;<span class="built_in">StartupDataBase</span>()-&gt;<span class="built_in">AuxiliaryProcessMain</span>()-&gt;<span class="built_in">StartupProcessMain</span>()-&gt;<span class="built_in">StartupXLOG</span>()</span><br></pre></td></tr></table></figure><p><img src="postgresql-primary-standby-architecture.jpg" alt="PostgreSQL 主备总体框架"></p><h2 id="walsender-和-walreceiver-进程流复制过程"><a href="#walsender-和-walreceiver-进程流复制过程" class="headerlink" title="walsender 和 walreceiver 进程流复制过程"></a>walsender 和 walreceiver 进程流复制过程</h2><p><strong>walsender 和 walreceiver 交互主要分为以下几个步骤：</strong></p><ol><li>walreceiver 启动后通过 <code>recovery.conf</code> 文件中的 <code>primary_conninfo</code> 参数信息连向主库，主库通过连接参数 <code>replication=true</code> 启动 walsender 进程；</li><li>walreceiver 执行 <code>identify_system</code> 命令，获取主库 <code>systemid/timeline/xlogpos</code> 等信息，执行 <code>TIMELINE_HISTORY</code> 命令拉取 history 文件；</li><li>执行 <code>wal_startstreaming</code> 开始启动流复制，通过 <code>walrcv_receive</code> 获取 WAL 日志，期间也会回应主库发过来的心跳信息(接收位点、flush 位点、apply 位点)，向主库发送 feedback 信息(最老的事务 id)，避免 vacuum 删掉备库正在使用的记录；</li><li>执行 <code>walrcv_endstreaming</code> 结束流复制，等待 startup 进程更新 <code>receiveStart</code> 和 <code>receiveStartTLI</code>，一旦更新，进入步骤 2。</li></ol><p><img src="postgresql-stream-replication-process.jpg" alt="PostgreSQL 流复制过程"></p><h2 id="walreceiver-和-startup-进程"><a href="#walreceiver-和-startup-进程" class="headerlink" title="walreceiver 和 startup 进程"></a>walreceiver 和 startup 进程</h2><p>startup 进程进入 standby 模式和 apply 日志主要过程：</p><ol><li>读取 <code>pg_control</code> 文件，找到 redo 位点；读取 <code>recovery.conf</code>，如果配置 <code>standby_mode=on</code> 则进入 standby 模式。</li><li>如果是 Hot Standby 需要初始化 clog、subtrans、事务环境等。初始化 redo 资源管理器，比如 <code>Heap、Heap2、Database、XLOG</code> 等。</li><li>读取 WAL record，如果 record 不存在需要调用 <code>XLogPageRead-&gt;WaitForWALToBecomeAvailable-&gt;RequestXLogStreaming</code> 唤醒 <code>walreceiver从walsender</code> 获取 WAL record。</li><li>对读取的 WAL record 进行 redo，通过 <code>record-&gt;xl_rmid</code> 信息，调用相应的 redo 资源管理器进行 redo 操作。比如 <code>heap_redo</code> 的 <code>XLOG_HEAP_INSERT</code> 操作，就是通过 record 的信息在 buffer page 中增加一个 record：</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">MemSet</span>((<span class="keyword">char</span> *) htup, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(HeapTupleHeaderData));</span><br><span class="line"> <span class="comment">/* PG73FORMAT: get bitmap [+ padding] [+ oid] + data */</span></span><br><span class="line"> <span class="built_in">memcpy</span>((<span class="keyword">char</span> *) htup + <span class="built_in">offsetof</span>(HeapTupleHeaderData, t_bits),</span><br><span class="line">    (<span class="keyword">char</span> *) xlrec + SizeOfHeapInsert + SizeOfHeapHeader,</span><br><span class="line">    newlen);</span><br><span class="line"> newlen += <span class="built_in">offsetof</span>(HeapTupleHeaderData, t_bits);</span><br><span class="line"> htup-&gt;t_infomask2 = xlhdr.t_infomask2;</span><br><span class="line"> htup-&gt;t_infomask = xlhdr.t_infomask;</span><br><span class="line"> htup-&gt;t_hoff = xlhdr.t_hoff;</span><br><span class="line"> <span class="built_in">HeapTupleHeaderSetXmin</span>(htup, record-&gt;xl_xid);</span><br><span class="line"> <span class="built_in">HeapTupleHeaderSetCmin</span>(htup, FirstCommandId);</span><br><span class="line"> htup-&gt;t_ctid = xlrec-&gt;target.tid;</span><br><span class="line"></span><br><span class="line"> offnum = <span class="built_in">PageAddItem</span>(page, (Item) htup, newlen, offnum, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line"> <span class="keyword">if</span> (offnum == InvalidOffsetNumber)</span><br><span class="line"> <span class="built_in">elog</span>(PANIC, <span class="string">&quot;heap_insert_redo: failed to add tuple&quot;</span>);</span><br><span class="line"></span><br><span class="line"> freespace = <span class="built_in">PageGetHeapFreeSpace</span>(page);<span class="comment">/* needed to update FSM below */</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">PageSetLSN</span>(page, lsn);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (xlrec-&gt;flags &amp; XLOG_HEAP_ALL_VISIBLE_CLEARED)</span><br><span class="line"> <span class="built_in">PageClearAllVisible</span>(page);</span><br><span class="line"></span><br><span class="line"> <span class="built_in">MarkBufferDirty</span>(buffer);</span><br></pre></td></tr></table></figure><p>还有部分 redo 操作(vacuum 产生的 record)需要检查在 Hot Standby 模式下的查询冲突，比如某些 tuples 需要 remove，而存在正在执行的 query 可能读到这些 tuples，这样就会破坏事务隔离级别。通过函数 <code>ResolveRecoveryConflictWithSnapshot</code> 检测冲突，如果发生冲突，那么就把这个 query 所在的进程 kill 掉。</p><ol start="5"><li>检查一致性，如果一致了，Hot Standby 模式可以接受用户只读查询；更新共享内存中 <code>XLogCtlData</code> 的 apply 位点和时间线；如果恢复到时间点，时间线或者事务 id 需要检查是否恢复到当前目标；</li><li>回到步骤 3，读取 next WAL record 。</li></ol><p><img src="postgresql-standby-mode-and-apply-log.jpg" alt="PostgreSQL standby 模式和 apply 日志过程"></p><blockquote><p>本文转自：<a href="http://mysql.taobao.org/monthly/2015/10/04/">http://mysql.taobao.org/monthly/2015/10/04/</a></p></blockquote><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> PostgreSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PostgreSQL </tag>
            
            <tag> 主从同步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应用案例 | PostgreSQL libpq 网络库接口操作数据库示例</title>
      <link href="/2015/11/12/example-of-postgresql-libpq/"/>
      <url>/2015/11/12/example-of-postgresql-libpq/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p><strong>本文首发于 2015-11-12 09:23:46</strong></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文成文较早，测试程序验证的是 PostgreSQL 9.3 版本的 libpq，理论上，对其他版本也应该适用。</p><p>关于 libpq 各个函数接口的说明，参考：<a href="http://www.postgres.cn/docs/9.3/libpq.html">http://www.postgres.cn/docs/9.3/libpq.html</a></p><h1 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * testlibpq.c</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      Test the C version of libpq, the PostgreSQL frontend library.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libpq-fe.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span></span></span><br><span class="line"><span class="function"><span class="title">exit_nicely</span><span class="params">(PGconn *conn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">PQfinish</span>(conn);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *conninfo;</span><br><span class="line">    PGconn     *conn;</span><br><span class="line">    PGresult   *res;</span><br><span class="line">    <span class="keyword">int</span>         nFields;</span><br><span class="line">    <span class="keyword">int</span>         i,</span><br><span class="line">                j;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * If the user supplies a parameter on the command line, use it as the</span></span><br><span class="line"><span class="comment">     * conninfo string; otherwise default to setting dbname=postgres and using</span></span><br><span class="line"><span class="comment">     * environment variables or defaults for all other connection parameters.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (argc &gt; <span class="number">1</span>)</span><br><span class="line">        conninfo = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        conninfo = <span class="string">&quot;dbname = postgres&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Make a connection to the database */</span></span><br><span class="line">    conn = <span class="built_in">PQconnectdb</span>(conninfo);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check to see that the backend connection was successfully made */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">PQstatus</span>(conn) != CONNECTION_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Connection to database failed: %s&quot;</span>,</span><br><span class="line">                <span class="built_in">PQerrorMessage</span>(conn));</span><br><span class="line">        <span class="built_in">exit_nicely</span>(conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Our test case here involves using a cursor, for which we must be inside</span></span><br><span class="line"><span class="comment">     * a transaction block.  We could do the whole thing with a single</span></span><br><span class="line"><span class="comment">     * PQexec() of &quot;select * from pg_database&quot;, but that&#x27;s too trivial to make</span></span><br><span class="line"><span class="comment">     * a good example.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Start a transaction block */</span></span><br><span class="line">    res = <span class="built_in">PQexec</span>(conn, <span class="string">&quot;BEGIN&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">PQresultStatus</span>(res) != PGRES_COMMAND_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;BEGIN command failed: %s&quot;</span>, <span class="built_in">PQerrorMessage</span>(conn));</span><br><span class="line">        <span class="built_in">PQclear</span>(res);</span><br><span class="line">        <span class="built_in">exit_nicely</span>(conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Should PQclear PGresult whenever it is no longer needed to avoid memory</span></span><br><span class="line"><span class="comment">     * leaks</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">PQclear</span>(res);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Fetch rows from pg_database, the system catalog of databases</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    res = <span class="built_in">PQexec</span>(conn, <span class="string">&quot;DECLARE myportal CURSOR FOR select * from pg_database&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">PQresultStatus</span>(res) != PGRES_COMMAND_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;DECLARE CURSOR failed: %s&quot;</span>, <span class="built_in">PQerrorMessage</span>(conn));</span><br><span class="line">        <span class="built_in">PQclear</span>(res);</span><br><span class="line">        <span class="built_in">exit_nicely</span>(conn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">PQclear</span>(res);</span><br><span class="line"></span><br><span class="line">    res = <span class="built_in">PQexec</span>(conn, <span class="string">&quot;FETCH ALL in myportal&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">PQresultStatus</span>(res) != PGRES_TUPLES_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;FETCH ALL failed: %s&quot;</span>, <span class="built_in">PQerrorMessage</span>(conn));</span><br><span class="line">        <span class="built_in">PQclear</span>(res);</span><br><span class="line">        <span class="built_in">exit_nicely</span>(conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* first, print out the attribute names */</span></span><br><span class="line">    nFields = <span class="built_in">PQnfields</span>(res);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nFields; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%-15s&quot;</span>, <span class="built_in">PQfname</span>(res, i));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* next, print out the rows */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">PQntuples</span>(res); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; nFields; j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%-15s&quot;</span>, <span class="built_in">PQgetvalue</span>(res, i, j));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PQclear</span>(res);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* close the portal ... we don&#x27;t bother to check for errors ... */</span></span><br><span class="line">    res = <span class="built_in">PQexec</span>(conn, <span class="string">&quot;CLOSE myportal&quot;</span>);</span><br><span class="line">    <span class="built_in">PQclear</span>(res);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* end the transaction */</span></span><br><span class="line">    res = <span class="built_in">PQexec</span>(conn, <span class="string">&quot;END&quot;</span>);</span><br><span class="line">    <span class="built_in">PQclear</span>(res);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* close the connection to the database and cleanup */</span></span><br><span class="line">    <span class="built_in">PQfinish</span>(conn);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * testlibpq2.c</span></span><br><span class="line"><span class="comment"> *      Test of the asynchronous notification interface</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Start this program, then from psql in another window do</span></span><br><span class="line"><span class="comment"> *   NOTIFY TBL2;</span></span><br><span class="line"><span class="comment"> * Repeat four times to get this program to exit.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Or, if you want to get fancy, try this:</span></span><br><span class="line"><span class="comment"> * populate a database with the following commands</span></span><br><span class="line"><span class="comment"> * (provided in src/test/examples/testlibpq2.sql):</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   CREATE TABLE TBL1 (i int4);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   CREATE TABLE TBL2 (i int4);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   CREATE RULE r1 AS ON INSERT TO TBL1 DO</span></span><br><span class="line"><span class="comment"> *     (INSERT INTO TBL2 VALUES (new.i); NOTIFY TBL2);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * and do this four times:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   INSERT INTO TBL1 VALUES (10);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libpq-fe.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span></span></span><br><span class="line"><span class="function"><span class="title">exit_nicely</span><span class="params">(PGconn *conn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">PQfinish</span>(conn);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *conninfo;</span><br><span class="line">    PGconn     *conn;</span><br><span class="line">    PGresult   *res;</span><br><span class="line">    PGnotify   *notify;</span><br><span class="line">    <span class="keyword">int</span>         nnotifies;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * If the user supplies a parameter on the command line, use it as the</span></span><br><span class="line"><span class="comment">     * conninfo string; otherwise default to setting dbname=postgres and using</span></span><br><span class="line"><span class="comment">     * environment variables or defaults for all other connection parameters.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (argc &gt; <span class="number">1</span>)</span><br><span class="line">        conninfo = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        conninfo = <span class="string">&quot;dbname = postgres&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Make a connection to the database */</span></span><br><span class="line">    conn = <span class="built_in">PQconnectdb</span>(conninfo);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check to see that the backend connection was successfully made */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">PQstatus</span>(conn) != CONNECTION_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Connection to database failed: %s&quot;</span>,</span><br><span class="line">                <span class="built_in">PQerrorMessage</span>(conn));</span><br><span class="line">        <span class="built_in">exit_nicely</span>(conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Issue LISTEN command to enable notifications from the rule&#x27;s NOTIFY.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    res = <span class="built_in">PQexec</span>(conn, <span class="string">&quot;LISTEN TBL2&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">PQresultStatus</span>(res) != PGRES_COMMAND_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;LISTEN command failed: %s&quot;</span>, <span class="built_in">PQerrorMessage</span>(conn));</span><br><span class="line">        <span class="built_in">PQclear</span>(res);</span><br><span class="line">        <span class="built_in">exit_nicely</span>(conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * should PQclear PGresult whenever it is no longer needed to avoid memory</span></span><br><span class="line"><span class="comment">     * leaks</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">PQclear</span>(res);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Quit after four notifies are received. */</span></span><br><span class="line">    nnotifies = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (nnotifies &lt; <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Sleep until something happens on the connection.  We use select(2)</span></span><br><span class="line"><span class="comment">         * to wait for input, but you could also use poll() or similar</span></span><br><span class="line"><span class="comment">         * facilities.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span>         sock;</span><br><span class="line">        fd_set      input_mask;</span><br><span class="line"></span><br><span class="line">        sock = <span class="built_in">PQsocket</span>(conn);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sock &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;              <span class="comment">/* shouldn&#x27;t happen */</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">FD_ZERO</span>(&amp;input_mask);</span><br><span class="line">        <span class="built_in">FD_SET</span>(sock, &amp;input_mask);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">select</span>(sock + <span class="number">1</span>, &amp;input_mask, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;select() failed: %s\n&quot;</span>, <span class="built_in">strerror</span>(errno));</span><br><span class="line">            <span class="built_in">exit_nicely</span>(conn);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Now check for input */</span></span><br><span class="line">        <span class="built_in">PQconsumeInput</span>(conn);</span><br><span class="line">        <span class="keyword">while</span> ((notify = <span class="built_in">PQnotifies</span>(conn)) != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(stderr,</span><br><span class="line">                    <span class="string">&quot;ASYNC NOTIFY of &#x27;%s&#x27; received from backend PID %d\n&quot;</span>,</span><br><span class="line">                    notify-&gt;relname, notify-&gt;be_pid);</span><br><span class="line">            <span class="built_in">PQfreemem</span>(notify);</span><br><span class="line">            nnotifies++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Done.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* close the connection to the database and cleanup */</span></span><br><span class="line">    <span class="built_in">PQfinish</span>(conn);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3"></a>示例 3</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * testlibpq3.c</span></span><br><span class="line"><span class="comment"> *      Test out-of-line parameters and binary I/O.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Before running this, populate a database with the following commands</span></span><br><span class="line"><span class="comment"> * (provided in src/test/examples/testlibpq3.sql):</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * CREATE TABLE test1 (i int4, t text, b bytea);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * INSERT INTO test1 values (1, &#x27;joe&#x27;&#x27;s place&#x27;, &#x27;\\000\\001\\002\\003\\004&#x27;);</span></span><br><span class="line"><span class="comment"> * INSERT INTO test1 values (2, &#x27;ho there&#x27;, &#x27;\\004\\003\\002\\001\\000&#x27;);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The expected output is:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * tuple 0: got</span></span><br><span class="line"><span class="comment"> *  i = (4 bytes) 1</span></span><br><span class="line"><span class="comment"> *  t = (11 bytes) &#x27;joe&#x27;s place&#x27;</span></span><br><span class="line"><span class="comment"> *  b = (5 bytes) \000\001\002\003\004</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * tuple 0: got</span></span><br><span class="line"><span class="comment"> *  i = (4 bytes) 2</span></span><br><span class="line"><span class="comment"> *  t = (8 bytes) &#x27;ho there&#x27;</span></span><br><span class="line"><span class="comment"> *  b = (5 bytes) \004\003\002\001\000</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libpq-fe.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* for ntohl/htonl */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span></span></span><br><span class="line"><span class="function"><span class="title">exit_nicely</span><span class="params">(PGconn *conn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">PQfinish</span>(conn);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This function prints a query result that is a binary-format fetch from</span></span><br><span class="line"><span class="comment"> * a table defined as in the comment above.  We split it out because the</span></span><br><span class="line"><span class="comment"> * main() function uses it twice.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span></span></span><br><span class="line"><span class="function"><span class="title">show_binary_results</span><span class="params">(PGresult *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>         i,</span><br><span class="line">                j;</span><br><span class="line">    <span class="keyword">int</span>         i_fnum,</span><br><span class="line">                t_fnum,</span><br><span class="line">                b_fnum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Use PQfnumber to avoid assumptions about field order in result */</span></span><br><span class="line">    i_fnum = <span class="built_in">PQfnumber</span>(res, <span class="string">&quot;i&quot;</span>);</span><br><span class="line">    t_fnum = <span class="built_in">PQfnumber</span>(res, <span class="string">&quot;t&quot;</span>);</span><br><span class="line">    b_fnum = <span class="built_in">PQfnumber</span>(res, <span class="string">&quot;b&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">PQntuples</span>(res); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span>       *iptr;</span><br><span class="line">        <span class="keyword">char</span>       *tptr;</span><br><span class="line">        <span class="keyword">char</span>       *bptr;</span><br><span class="line">        <span class="keyword">int</span>         blen;</span><br><span class="line">        <span class="keyword">int</span>         ival;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Get the field values (we ignore possibility they are null!) */</span></span><br><span class="line">        iptr = <span class="built_in">PQgetvalue</span>(res, i, i_fnum);</span><br><span class="line">        tptr = <span class="built_in">PQgetvalue</span>(res, i, t_fnum);</span><br><span class="line">        bptr = <span class="built_in">PQgetvalue</span>(res, i, b_fnum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * The binary representation of INT4 is in network byte order, which</span></span><br><span class="line"><span class="comment">         * we&#x27;d better coerce to the local byte order.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ival = <span class="built_in">ntohl</span>(*((<span class="keyword">uint32_t</span> *) iptr));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * The binary representation of TEXT is, well, text, and since libpq</span></span><br><span class="line"><span class="comment">         * was nice enough to append a zero byte to it, it&#x27;ll work just fine</span></span><br><span class="line"><span class="comment">         * as a C string.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * The binary representation of BYTEA is a bunch of bytes, which could</span></span><br><span class="line"><span class="comment">         * include embedded nulls so we have to pay attention to field length.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        blen = <span class="built_in">PQgetlength</span>(res, i, b_fnum);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;tuple %d: got\n&quot;</span>, i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; i = (%d bytes) %d\n&quot;</span>,</span><br><span class="line">               <span class="built_in">PQgetlength</span>(res, i, i_fnum), ival);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; t = (%d bytes) &#x27;%s&#x27;\n&quot;</span>,</span><br><span class="line">               <span class="built_in">PQgetlength</span>(res, i, t_fnum), tptr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; b = (%d bytes) &quot;</span>, blen);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; blen; j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\\%03o&quot;</span>, bptr[j]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *conninfo;</span><br><span class="line">    PGconn     *conn;</span><br><span class="line">    PGresult   *res;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *paramValues[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span>         paramLengths[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span>         paramFormats[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">uint32_t</span>    binaryIntVal;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * If the user supplies a parameter on the command line, use it as the</span></span><br><span class="line"><span class="comment">     * conninfo string; otherwise default to setting dbname=postgres and using</span></span><br><span class="line"><span class="comment">     * environment variables or defaults for all other connection parameters.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (argc &gt; <span class="number">1</span>)</span><br><span class="line">        conninfo = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        conninfo = <span class="string">&quot;dbname = postgres&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Make a connection to the database */</span></span><br><span class="line">    conn = <span class="built_in">PQconnectdb</span>(conninfo);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check to see that the backend connection was successfully made */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">PQstatus</span>(conn) != CONNECTION_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Connection to database failed: %s&quot;</span>,</span><br><span class="line">                <span class="built_in">PQerrorMessage</span>(conn));</span><br><span class="line">        <span class="built_in">exit_nicely</span>(conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * The point of this program is to illustrate use of PQexecParams() with</span></span><br><span class="line"><span class="comment">     * out-of-line parameters, as well as binary transmission of data.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * This first example transmits the parameters as text, but receives the</span></span><br><span class="line"><span class="comment">     * results in binary format.  By using out-of-line parameters we can</span></span><br><span class="line"><span class="comment">     * avoid a lot of tedious mucking about with quoting and escaping, even</span></span><br><span class="line"><span class="comment">     * though the data is text.  Notice how we don&#x27;t have to do anything</span></span><br><span class="line"><span class="comment">     * special with the quote mark in the parameter value.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Here is our out-of-line parameter value */</span></span><br><span class="line">    paramValues[<span class="number">0</span>] = <span class="string">&quot;joe&#x27;s place&quot;</span>;</span><br><span class="line"></span><br><span class="line">    res = <span class="built_in">PQexecParams</span>(conn,</span><br><span class="line">                       <span class="string">&quot;SELECT * FROM test1 WHERE t = $1&quot;</span>,</span><br><span class="line">                       <span class="number">1</span>,       <span class="comment">/* one param */</span></span><br><span class="line">                       <span class="literal">NULL</span>,    <span class="comment">/* let the backend deduce param type */</span></span><br><span class="line">                       paramValues,</span><br><span class="line">                       <span class="literal">NULL</span>,    <span class="comment">/* don&#x27;t need param lengths since text */</span></span><br><span class="line">                       <span class="literal">NULL</span>,    <span class="comment">/* default to all text params */</span></span><br><span class="line">                       <span class="number">1</span>);      <span class="comment">/* ask for binary results */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">PQresultStatus</span>(res) != PGRES_TUPLES_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;SELECT failed: %s&quot;</span>, <span class="built_in">PQerrorMessage</span>(conn));</span><br><span class="line">        <span class="built_in">PQclear</span>(res);</span><br><span class="line">        <span class="built_in">exit_nicely</span>(conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">show_binary_results</span>(res);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PQclear</span>(res);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * In this second example we transmit an integer parameter in binary</span></span><br><span class="line"><span class="comment">     * form, and again retrieve the results in binary form.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Although we tell PQexecParams we are letting the backend deduce</span></span><br><span class="line"><span class="comment">     * parameter type, we really force the decision by casting the parameter</span></span><br><span class="line"><span class="comment">     * symbol in the query text.  This is a good safety measure when sending</span></span><br><span class="line"><span class="comment">     * binary parameters.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Convert integer value &quot;2&quot; to network byte order */</span></span><br><span class="line">    binaryIntVal = <span class="built_in">htonl</span>((<span class="keyword">uint32_t</span>) <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Set up parameter arrays for PQexecParams */</span></span><br><span class="line">    paramValues[<span class="number">0</span>] = (<span class="keyword">char</span> *) &amp;binaryIntVal;</span><br><span class="line">    paramLengths[<span class="number">0</span>] = <span class="built_in"><span class="keyword">sizeof</span></span>(binaryIntVal);</span><br><span class="line">    paramFormats[<span class="number">0</span>] = <span class="number">1</span>;        <span class="comment">/* binary */</span></span><br><span class="line"></span><br><span class="line">    res = <span class="built_in">PQexecParams</span>(conn,</span><br><span class="line">                       <span class="string">&quot;SELECT * FROM test1 WHERE i = $1::int4&quot;</span>,</span><br><span class="line">                       <span class="number">1</span>,       <span class="comment">/* one param */</span></span><br><span class="line">                       <span class="literal">NULL</span>,    <span class="comment">/* let the backend deduce param type */</span></span><br><span class="line">                       paramValues,</span><br><span class="line">                       paramLengths,</span><br><span class="line">                       paramFormats,</span><br><span class="line">                       <span class="number">1</span>);      <span class="comment">/* ask for binary results */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">PQresultStatus</span>(res) != PGRES_TUPLES_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;SELECT failed: %s&quot;</span>, <span class="built_in">PQerrorMessage</span>(conn));</span><br><span class="line">        <span class="built_in">PQclear</span>(res);</span><br><span class="line">        <span class="built_in">exit_nicely</span>(conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">show_binary_results</span>(res);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PQclear</span>(res);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* close the connection to the database and cleanup */</span></span><br><span class="line">    <span class="built_in">PQfinish</span>(conn);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> PostgreSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> PostgreSQL </tag>
            
            <tag> libpq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特性介绍 | PostgreSQL 的依赖约束详解 - 系统表 pg_depend &amp; pg_constraint</title>
      <link href="/2015/11/04/postgresql-dependency-constraint-details/"/>
      <url>/2015/11/04/postgresql-dependency-constraint-details/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p><strong>本文首发于 2015-11-04 15:28:08</strong></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文成文较早，依赖的是 PostgreSQL 9.3 版本，后续内核版本可能不兼容，但核心原理是相通的，可做参考。</p><h1 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h1><h2 id="pg-depend"><a href="#pg-depend" class="headerlink" title="pg_depend"></a>pg_depend</h2><p>pg_depend 是 postgres 的一张系统表，用来记录数据库对象之间的依赖关系，除了常见的主外键，还有其他一些内部依赖关系，可以通过这个系统表呈现出来。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">postgres<span class="operator">=</span># \d<span class="operator">+</span> pg_depend</span><br><span class="line">                       <span class="keyword">Table</span> &quot;pg_catalog.pg_depend&quot;</span><br><span class="line">   <span class="keyword">Column</span>    <span class="operator">|</span>  Type   <span class="operator">|</span> Modifiers <span class="operator">|</span> Storage <span class="operator">|</span> Stats target <span class="operator">|</span> Description</span><br><span class="line"><span class="comment">-------------+---------+-----------+---------+--------------+-------------</span></span><br><span class="line"> classid     <span class="operator">|</span> oid     <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>  <span class="operator">|</span> plain   <span class="operator">|</span>              <span class="operator">|</span> 系统OID</span><br><span class="line"> objid       <span class="operator">|</span> oid     <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>  <span class="operator">|</span> plain   <span class="operator">|</span>              <span class="operator">|</span> 对象OID</span><br><span class="line"> objsubid    <span class="operator">|</span> <span class="type">integer</span> <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>  <span class="operator">|</span> plain   <span class="operator">|</span>              <span class="operator">|</span></span><br><span class="line"> refclassid  <span class="operator">|</span> oid     <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>  <span class="operator">|</span> plain   <span class="operator">|</span>              <span class="operator">|</span> 引用系统OID</span><br><span class="line"> refobjid    <span class="operator">|</span> oid     <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>  <span class="operator">|</span> plain   <span class="operator">|</span>              <span class="operator">|</span> 引用对象ID</span><br><span class="line"> refobjsubid <span class="operator">|</span> <span class="type">integer</span> <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>  <span class="operator">|</span> plain   <span class="operator">|</span>              <span class="operator">|</span></span><br><span class="line"> deptype     <span class="operator">|</span> &quot;char&quot;  <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>  <span class="operator">|</span> plain   <span class="operator">|</span>              <span class="operator">|</span> pg_depend类型</span><br><span class="line">Indexes:</span><br><span class="line">    &quot;pg_depend_depender_index&quot; btree (classid, objid, objsubid)</span><br><span class="line">    &quot;pg_depend_reference_index&quot; btree (refclassid, refobjid, refobjsubid)</span><br><span class="line">Has OIDs: <span class="keyword">no</span></span><br></pre></td></tr></table></figure><blockquote><p>OID 是 Object Identifier 的缩写，是对象 ID 的意思，因为是无符号的 4 字节类型，表示范围不够大，所以一般不用做主键使用，仅用在系统内部，比如系统表等应用。可以与一些整型数字进行转换。与之相关的系统参数是 <code>default_with_oids</code> ，默认是 off 。</p></blockquote><p><code>pg_depend.deptype</code> 字段自 9.1 版本之后多了一个 extension 的类型，目前类型有：</p><blockquote><ul><li><code>DEPENDENCY_NORMAL (n)</code> ：普通的依赖对象，如表与 schema 的关系。</li><li><code>DEPENDENCY_AUTO (a)</code> ：自动的依赖对象，如主键约束。</li><li><code>DEPENDENCY_INTERNAL (i)</code> ：内部的依赖对象，通常是对象本身。</li><li><code>DEPENDENCY_EXTENSION (e)</code> ：9.1 新增的的扩展依赖。</li><li><code>DEPENDENCY_PIN (p)</code> ：系统内置的依赖。</li></ul></blockquote><h2 id="pg-constraint"><a href="#pg-constraint" class="headerlink" title="pg_constraint"></a>pg_constraint</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">postgres<span class="operator">=</span># \d pg_constraint</span><br><span class="line">     <span class="keyword">Table</span> &quot;pg_catalog.pg_constraint&quot;</span><br><span class="line">    <span class="keyword">Column</span>     <span class="operator">|</span>     Type     <span class="operator">|</span> Modifiers</span><br><span class="line"><span class="comment">---------------+--------------+-----------</span></span><br><span class="line"> conname       <span class="operator">|</span> name         <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>        <span class="comment">-- 约束名</span></span><br><span class="line"> connamespace  <span class="operator">|</span> oid          <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>        <span class="comment">-- 约束所在命名空间的OID</span></span><br><span class="line"> contype       <span class="operator">|</span> &quot;char&quot;       <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>        <span class="comment">-- 约束类型</span></span><br><span class="line"> condeferrable <span class="operator">|</span> <span class="type">boolean</span>      <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>        <span class="comment">-- 约束是否可以推迟</span></span><br><span class="line"> condeferred   <span class="operator">|</span> <span class="type">boolean</span>      <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>        <span class="comment">-- 缺省情况下，约束是否可以推迟</span></span><br><span class="line"> convalidated  <span class="operator">|</span> <span class="type">boolean</span>      <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>        <span class="comment">-- 约束是否经过验证</span></span><br><span class="line"> conrelid      <span class="operator">|</span> oid          <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>        <span class="comment">-- 约束所在的表的OID</span></span><br><span class="line"> contypid      <span class="operator">|</span> oid          <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>        <span class="comment">-- 约束所在的域的OID</span></span><br><span class="line"> conindid      <span class="operator">|</span> oid          <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>        <span class="comment">-- 如果是唯一、主键、外键或排除约束，则为支持这个约束的索引；否则为0</span></span><br><span class="line"> confrelid     <span class="operator">|</span> oid          <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>        <span class="comment">-- 如果是外键，则为参考的表；否则为 0</span></span><br><span class="line"> confupdtype   <span class="operator">|</span> &quot;char&quot;       <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>        <span class="comment">-- 外键更新操作代码</span></span><br><span class="line"> confdeltype   <span class="operator">|</span> &quot;char&quot;       <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>        <span class="comment">-- 外键删除操作代码</span></span><br><span class="line"> confmatchtype <span class="operator">|</span> &quot;char&quot;       <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>        <span class="comment">-- 外键匹配类型</span></span><br><span class="line"> conislocal    <span class="operator">|</span> <span class="type">boolean</span>      <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line"> coninhcount   <span class="operator">|</span> <span class="type">integer</span>      <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>        <span class="comment">-- 约束直接继承祖先的数量</span></span><br><span class="line"> connoinherit  <span class="operator">|</span> <span class="type">boolean</span>      <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line"> conkey        <span class="operator">|</span> <span class="type">smallint</span>[]   <span class="operator">|</span>         <span class="comment">-- 如果是表约束（包含外键，但是不包含约束触发器），则是约束字段的列表</span></span><br><span class="line"> confkey       <span class="operator">|</span> <span class="type">smallint</span>[]   <span class="operator">|</span>         <span class="comment">-- 如果是一个外键，是参考的字段的列表</span></span><br><span class="line"> conpfeqop     <span class="operator">|</span> oid[]        <span class="operator">|</span>         <span class="comment">-- 如果是一个外键，是PK = FK比较的相等操作符的列表</span></span><br><span class="line"> conppeqop     <span class="operator">|</span> oid[]        <span class="operator">|</span>        <span class="comment">-- 如果是一个外键，是PK = PK比较的相等操作符的列表</span></span><br><span class="line"> conffeqop     <span class="operator">|</span> oid[]        <span class="operator">|</span>         <span class="comment">-- 如果是一个外键，是FK = FK比较的相等操作符的列表</span></span><br><span class="line"> conexclop     <span class="operator">|</span> oid[]        <span class="operator">|</span>         <span class="comment">-- 如果是一个排除约束，是每个字段排除操作符的列表</span></span><br><span class="line"> conbin        <span class="operator">|</span> pg_node_tree <span class="operator">|</span>         <span class="comment">-- 如果是一个检查约束，那就是其表达式的内部形式</span></span><br><span class="line"> consrc        <span class="operator">|</span> text         <span class="operator">|</span>         <span class="comment">-- 如果是检查约束，则是表达式的人类可读形式</span></span><br><span class="line">Indexes:</span><br><span class="line">    &quot;pg_constraint_oid_index&quot; <span class="keyword">UNIQUE</span>, btree (oid)</span><br><span class="line">    &quot;pg_constraint_conname_nsp_index&quot; btree (conname, connamespace)</span><br><span class="line">    &quot;pg_constraint_conrelid_index&quot; btree (conrelid)</span><br><span class="line">    &quot;pg_constraint_contypid_index&quot; btree (contypid)</span><br></pre></td></tr></table></figure><h1 id="查询依赖关系的-SQL"><a href="#查询依赖关系的-SQL" class="headerlink" title="查询依赖关系的 SQL"></a>查询依赖关系的 SQL</h1><p>如下 SQL 可以列出系统和用户对象的各种依赖关系：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> classid::regclass <span class="keyword">AS</span> &quot;depender object class&quot;,</span><br><span class="line">    <span class="keyword">CASE</span> classid</span><br><span class="line">        <span class="keyword">WHEN</span> <span class="string">&#x27;pg_class&#x27;</span>::regclass <span class="keyword">THEN</span> objid::regclass::text</span><br><span class="line">        <span class="keyword">WHEN</span> <span class="string">&#x27;pg_type&#x27;</span>::regclass <span class="keyword">THEN</span> objid::regtype::text</span><br><span class="line">        <span class="keyword">WHEN</span> <span class="string">&#x27;pg_proc&#x27;</span>::regclass <span class="keyword">THEN</span> objid::regprocedure::text</span><br><span class="line">        <span class="keyword">ELSE</span> objid::text</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">AS</span> &quot;depender object identity&quot;,</span><br><span class="line">    objsubid,</span><br><span class="line">    refclassid::regclass <span class="keyword">AS</span> &quot;referenced object class&quot;,</span><br><span class="line">    <span class="keyword">CASE</span> refclassid</span><br><span class="line">        <span class="keyword">WHEN</span> <span class="string">&#x27;pg_class&#x27;</span>::regclass <span class="keyword">THEN</span> refobjid::regclass::text</span><br><span class="line">        <span class="keyword">WHEN</span> <span class="string">&#x27;pg_type&#x27;</span>::regclass <span class="keyword">THEN</span> refobjid::regtype::text</span><br><span class="line">        <span class="keyword">WHEN</span> <span class="string">&#x27;pg_proc&#x27;</span>::regclass <span class="keyword">THEN</span> refobjid::regprocedure::text</span><br><span class="line">        <span class="keyword">ELSE</span> refobjid::text</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">AS</span> &quot;referenced object identity&quot;,</span><br><span class="line">    refobjsubid,</span><br><span class="line">    <span class="keyword">CASE</span> deptype</span><br><span class="line">        <span class="keyword">WHEN</span> <span class="string">&#x27;p&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;pinned&#x27;</span></span><br><span class="line">        <span class="keyword">WHEN</span> <span class="string">&#x27;i&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;internal&#x27;</span></span><br><span class="line">        <span class="keyword">WHEN</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;automatic&#x27;</span></span><br><span class="line">        <span class="keyword">WHEN</span> <span class="string">&#x27;n&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;normal&#x27;</span></span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">AS</span> &quot;dependency type&quot;</span><br><span class="line"><span class="keyword">FROM</span> pg_catalog.pg_depend <span class="keyword">WHERE</span> (objid <span class="operator">&gt;=</span> <span class="number">16384</span> <span class="keyword">OR</span> refobjid <span class="operator">&gt;=</span> <span class="number">16384</span>);</span><br></pre></td></tr></table></figure><blockquote><p>我通常喜欢在 where 后面加个条件 <code>and deptype &lt;&gt;&#39;i&#39;</code> ，以排除 internal 依赖。</p></blockquote><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p><strong>创建一张表：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">postgres<span class="operator">=</span># <span class="keyword">create</span> <span class="keyword">table</span> tbl_parent(id <span class="type">int</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span></span><br></pre></td></tr></table></figure><p><strong>执行查询依赖关系的 SQL：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">postgres<span class="operator">=</span># 执行上面的<span class="keyword">SQL</span>;</span><br><span class="line"> depender object class <span class="operator">|</span> depender object <span class="keyword">identity</span> <span class="operator">|</span> objsubid <span class="operator">|</span> referenced object class <span class="operator">|</span> referenced object <span class="keyword">identity</span> <span class="operator">|</span> refobjsubid <span class="operator">|</span> dependency type</span><br><span class="line"><span class="comment">-----------------------+--------------------------+----------+-------------------------+------------- pg_class              | tbl_parent               |        0 | pg_namespace            | 2200                       |           0 | normal</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br></pre></td></tr></table></figure><blockquote><p>看起来只是建了个表，没有约束，实际上该表是建立在 schema 下面的，因此只依赖于 schema 。</p></blockquote><p>添加主键约束：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">postgres<span class="operator">=</span># <span class="keyword">alter</span> <span class="keyword">table</span> tbl_parent <span class="keyword">add</span> <span class="keyword">primary</span> key(id);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span></span><br><span class="line"> depender object class <span class="operator">|</span> depender object <span class="keyword">identity</span> <span class="operator">|</span> objsubid <span class="operator">|</span> referenced object class <span class="operator">|</span> referenced object <span class="keyword">identity</span> <span class="operator">|</span> refobjsubid <span class="operator">|</span> dependency type</span><br><span class="line"><span class="comment">-----------------------+--------------------------+----------+-------------------------+------- pg_class              | tbl_parent               |        0 | pg_namespace            | 2200                       |           0 | normal</span></span><br><span class="line"> pg_constraint         <span class="operator">|</span> <span class="number">16469</span>                    <span class="operator">|</span>        <span class="number">0</span> <span class="operator">|</span> pg_class                <span class="operator">|</span> tbl_parent                 <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span> automatic</span><br><span class="line">(<span class="number">2</span> <span class="keyword">rows</span>)</span><br></pre></td></tr></table></figure><blockquote><p>约束类型变为了<code>automatic</code>，表明这个主键约束是依赖于表上的，是自动模式，详细信息可以在系统表 <code>pg_constrant</code> 里面查询。</p></blockquote><p>正常情况下用户删除有依赖关系的对象时，会提示需要先删除依赖的对象。但是如果通过系统表删除有依赖关系的对象时，若操作有误，就会导致异常。例如：下面的操作就会导致报错<code>cache lookup failed for constraint</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">postgres<span class="operator">=</span># <span class="keyword">select</span> oid,conname,connamespace,contype <span class="keyword">from</span> pg_constraint <span class="keyword">where</span> conname <span class="keyword">like</span> <span class="string">&#x27;tbl_parent%&#x27;</span>;</span><br><span class="line">  oid  <span class="operator">|</span>     conname     <span class="operator">|</span> connamespace <span class="operator">|</span> contype</span><br><span class="line"><span class="comment">-------+-----------------+--------------+---------</span></span><br><span class="line"> <span class="number">16469</span> <span class="operator">|</span> tbl_parent_pkey <span class="operator">|</span>         <span class="number">2200</span> <span class="operator">|</span> p</span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br><span class="line"></span><br><span class="line">postgres<span class="operator">=</span># <span class="keyword">delete</span> <span class="keyword">from</span> pg_constraint <span class="keyword">where</span> conname <span class="keyword">like</span> <span class="string">&#x27;tbl_parent%&#x27;</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="number">1</span></span><br><span class="line">postgres<span class="operator">=</span># <span class="keyword">select</span> oid,conname,connamespace,contype <span class="keyword">from</span> pg_constraint <span class="keyword">where</span> conname <span class="keyword">like</span> <span class="string">&#x27;tbl_parent%&#x27;</span>;</span><br><span class="line"> oid <span class="operator">|</span> conname <span class="operator">|</span> connamespace <span class="operator">|</span> contype</span><br><span class="line"><span class="comment">-----+---------+--------------+---------</span></span><br><span class="line">(<span class="number">0</span> <span class="keyword">rows</span>)</span><br><span class="line"></span><br><span class="line">postgres<span class="operator">=</span># <span class="keyword">drop</span> <span class="keyword">table</span> tbl_parent;</span><br><span class="line">ERROR:  cache lookup failed <span class="keyword">for</span> <span class="keyword">constraint</span> <span class="number">16469</span>   <span class="comment">--16496是约束的OID</span></span><br><span class="line">postgres<span class="operator">=</span>#</span><br></pre></td></tr></table></figure><p>之所以出现该报错，是因为手动把约束对象删除了，但在 pg_depend 里却仍然存在依赖关系，因此，删除该表时，由于找不到最里层的依赖对象而报错。</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> PostgreSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PostgreSQL </tag>
            
            <tag> pg_depend </tag>
            
            <tag> pg_constraint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序人生 | C 语言编译器对内存空间的分配原则</title>
      <link href="/2015/05/04/c-compiler-memory-allocation-principles/"/>
      <url>/2015/05/04/c-compiler-memory-allocation-principles/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p><strong>本文首发于 2015-05-04 14:50:16</strong></p></blockquote><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>一个由 C/C++ 编译的程序占用的内存分为以下几个部分：</p><ol><li><strong>栈区（stack）</strong>：由编译器自动分配、释放，存放函数的参数值、局部变量的值等，其操作方式类似于数据结构中的栈。一般大家常说的堆栈和栈是一样的，就是栈(stack)，而说 堆 时才是堆 heap 。</li><li><strong>堆区（heap）</strong>：一般由程序员分配释放，若程序员不释放，程序结束时由 OS 回收。注意<code>它与数据结构中的堆是两回事，分配方式倒是类似于链表</code>。</li><li><strong>全局区（静态区，static）</strong>：全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。程序结束后由系统释放。</li><li><strong>文字常量区</strong>：常量字符串就是放在这里的。程序结束后由系统释放。</li><li><strong>程序代码区</strong>：存放函数体的二进制代码。</li></ol><p>举例来说：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>; <span class="comment">// 全局初始化区</span></span><br><span class="line"><span class="keyword">char</span> *p1; <span class="comment">// 全局未初始化区</span></span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> b; <span class="comment">// 栈</span></span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">&quot;abc&quot;</span>; <span class="comment">// 栈</span></span><br><span class="line"><span class="keyword">char</span> *p2; <span class="comment">// 栈</span></span><br><span class="line"><span class="keyword">char</span> *p3 = <span class="string">&quot;123456&quot;</span>; <span class="comment">// 123456\0 在常量区，p3在栈上。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> c =<span class="number">0</span>； <span class="comment">// 全局（静态）初始化区</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分配的 10 个和 20 个字节的区域就在堆区。</span></span><br><span class="line">p1 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">10</span>);</span><br><span class="line">p2 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(p1, <span class="string">&quot;123456&quot;</span>); <span class="comment">// 123456\0 放在常量区，编译器可能会将它与p3所指向的&quot;123456&quot;优化成同一个位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在函数体中定义的变量通常是在栈上，用 malloc, calloc, realloc 等分配内存的函数分配得到的就是在堆上。</p><p>在所有函数体外定义的是全局量，加了 static 修饰符后不管在哪里都存放在全局区（静态区），在所有函数体外定义的 static 变量表示在该文件中有效，不能 extern 到别的文件使用，在函数体内定义的 static 表示只在该函数体内有效。</p><p>函数中的”123456”这样的字符串存放在常量区。</p><p>还有就是函数调用时会在栈上有一系列的保留现场及传递参数的操作。</p><h1 id="关于堆和栈"><a href="#关于堆和栈" class="headerlink" title="关于堆和栈"></a>关于堆和栈</h1><h2 id="1-内存分配方面"><a href="#1-内存分配方面" class="headerlink" title="1. 内存分配方面"></a>1. 内存分配方面</h2><p><strong>堆：</strong> 一般由程序员分配释放，若程序员不释放，程序结束时可能由 OS 回收。它与数据结构中的堆是两回事，分配方式是类似于链表。可能用到的关键字如下：new、malloc、delete、free 等等。</p><p><strong>栈：</strong> 由编译器(Compiler)自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。当一个函数调用完返回后它会释放该函数中所有的栈空间。</p><h2 id="2-申请方式"><a href="#2-申请方式" class="headerlink" title="2. 申请方式"></a>2. 申请方式</h2><p><strong>栈（stack）：</strong></p><p>由系统自动分配。例如，声明在函数中一个局部变量 <code>int b;</code>，系统自动在栈中为 b 开辟空间。</p><p><strong>堆（heap）：</strong></p><p>需要程序员自己申请，并指明大小。</p><p>在 C 中 malloc 函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p1 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>在 C++中用 new 运算符：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p2 = (<span class="keyword">char</span> *)<span class="keyword">new</span> <span class="built_in"><span class="keyword">char</span></span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>但注意 p1、p2 本身是在栈中的。</p><h2 id="3-申请后系统的响应"><a href="#3-申请后系统的响应" class="headerlink" title="3. 申请后系统的响应"></a>3. 申请后系统的响应</h2><p><strong>栈：</strong> 只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示<code>栈溢出</code>。</p><p><strong>堆：</strong> 首先应该知道操作系统有一个记录空闲内存地址的链表，当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序。对于大多数系统，<strong>会在这块内存空间中的首地址处记录本次分配的大小</strong>，这样代码中的 delete 语句才能正确的释放本内存空间。另外，由于找到的堆结点的大小不一定正好等于申请的大小，<strong>系统会自动的将多余的那部分重新放入空闲链表中</strong>。</p><h2 id="4-申请大小的限制"><a href="#4-申请大小的限制" class="headerlink" title="4. 申请大小的限制"></a>4. 申请大小的限制</h2><p><strong>栈：</strong></p><ul><li>在 Windows 下，栈是向低地址扩展的数据结构，是一块连续的内存的区域。这句话的意思是<strong>栈顶的地址</strong>和<strong>栈的最大容量</strong>是系统预先规定好的，在 Windows 下，栈的大小一般是 2M，如果申请的空间超过栈的剩余空间时，将提示 overflow。因此，能从栈获得的空间较小。</li><li>栈不够用的情况一般是程序中分配了大量数组和递归函数层次太深。</li><li>当一个函数调用完返回后它会释放该函数中所有的栈空间。</li></ul><p><strong>堆：</strong></p><ul><li>堆是向高地址扩展的数据结构，是不连续的内存区域。这是由于系统是用链表来存储的空闲内存地址的，自然是不连续的，而链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的虚拟内存。由此可见，堆获得的空间比较灵活，也比较大。</li></ul><h2 id="5-申请效率的比较"><a href="#5-申请效率的比较" class="headerlink" title="5. 申请效率的比较"></a>5. 申请效率的比较</h2><p><strong>栈</strong>由系统自动分配，速度较快。但程序员是无法控制的。</p><p><strong>堆</strong>是由 malloc 分配的内存，一般速度比较慢，而且<strong>容易产生内存碎片</strong>，不过用起来最方便。</p><h2 id="6-堆和栈中的存储内容"><a href="#6-堆和栈中的存储内容" class="headerlink" title="6. 堆和栈中的存储内容"></a>6. 堆和栈中的存储内容</h2><p><strong>栈：</strong></p><ul><li>在函数调用时，第一个进栈的是主函数后的下一条指令（函数调用语句的下一条可执行语句）的地址，然后是函数的各个参数（在大多数的 C 编译器中，参数是由右往左入栈的），然后是函数中的局部变量。注意静态变量是不入栈的。</li><li>当本次函数调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的地址，也就是主函数中的下一条指令，程序由该点继续运行。</li></ul><p><strong>堆：</strong></p><ul><li>一般是在堆的头部用一个字节存放堆的大小。堆中的具体内容有程序员安排。</li></ul><h2 id="7-存取效率方面"><a href="#7-存取效率方面" class="headerlink" title="7. 存取效率方面"></a>7. 存取效率方面</h2><p><strong>堆：</strong> <code>char *s1 = &quot;Hellow Word&quot;；</code>是在<strong>编译时</strong>就确定的；</p><p><strong>栈：</strong><code>char s1[] = &quot;Hellow Word&quot;；</code>是在<strong>运行时</strong>赋值的；<strong>用数组比用指针速度要快一些，因为指针在底层汇编中需要用<code>edx寄存器</code>中转一下，而数组在栈上直接读取。</strong></p><p><strong>在栈上存取数据比通过指针在堆上存取数据快些。</strong></p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> gcc </tag>
            
            <tag> 编译器 </tag>
            
            <tag> 内存分配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序人生 | unix 网络编程之 getaddrinfo 函数详解及使用举例</title>
      <link href="/2015/01/03/unix-getaddrinfo-function-detailed-usage/"/>
      <url>/2015/01/03/unix-getaddrinfo-function-detailed-usage/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p><strong>本文首发于 2015-01-03 21:04:36</strong></p></blockquote><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>IPv4 中使用 <code>gethostbyname()</code> 函数完成<strong>主机名到地址解析</strong>，这个函数仅仅支持 IPv4 ，且不允许调用者指定所需地址类型的任何信息，返回的结构只包含了用于存储 IPv4 地址的空间。</p><p>IPv6 中引入了<code>getaddrinfo()</code>的新 API，它是协议无关的，既可用于 IPv4 也可用于 IPv6 。</p><p><code>getaddrinfo</code>函数能够处理<strong>名字到地址</strong>以及<strong>服务到端口</strong>这两种转换，返回的是一个<code>addrinfo</code>的结构（列表）指针而不是一个地址清单。这些<code>addrinfo</code>结构随后可由 socket 函数直接使用。</p><p><code>getaddrinfo</code>函数把协议相关性安全隐藏在这个库函数内部。应用程序只要处理由 getaddrinfo 函数填写的套接口地址结构。该函数在 POSIX 规范中定义了。</p><h1 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h1><p><strong>包含头文件：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>函数原型：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getaddrinfo</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *hostname, <span class="keyword">const</span> <span class="keyword">char</span> *service, <span class="keyword">const</span> struct addrinfo *hints, struct addrinfo **result )</span></span>;</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><code>hostname</code>: 一个主机名或者地址串(IPv4 的点分十进制串或者 IPv6 的 16 进制串)。</li><li><code>service</code>：服务名可以是十进制的端口号，也可以是已定义的服务名称，如 ftp、http 等。</li><li><code>hints</code>：可以是一个空指针，也可以是一个指向某个 addrinfo 结构体的指针，调用者在这个结构中填入关于期望返回的信息类型的暗示。</li><li><code>result</code>：本函数通过 result 指针参数返回一个指向 addrinfo 结构体链表的指针。</li></ul><p><strong>返回值：</strong></p><p>0：成功；非 0：出错。</p><h1 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h1><p>在<code>getaddrinfo</code>函数之前通常需要对以下 6 个参数进行以下设置：<code>nodename、servname、hints的ai_flags、ai_family、ai_socktype、ai_protocol</code>。</p><p>在 6 项参数中，对函数影响最大的是<code>nodename，sername</code>和<code>hints.ai_flag</code>，而<code>ai_family</code>只是有地址为 v4 地址或 v6 地址的区别。<code>ai_protocol</code>一般为 0 不作改动。</p><p><strong>getaddrinfo 在实际使用中的几种常用参数设置：</strong></p><p>一般情况下，client/server 编程中，server 端调用<code>bind</code>（如果面向连接的还需要<code>listen</code>）；client 则无需调用<code>bind</code>函数，解析地址后直接<code>connect</code>（面向连接）或直接发送数据（无连接）。因此，比较常见的情况有：</p><ol><li>通常服务器端在调用<code>getaddrinfo</code>之前，<code>ai_flags</code>设置<code>AI_PASSIVE</code>，用于<code>bind</code>；主机名<code>nodename</code>通常会设置为 NULL，返回通配地址<code>[::]</code>。</li><li>客户端调用<code>getaddrinfo</code>时，<code>ai_flags</code>一般不设置<code>AI_PASSIVE</code>，但是主机名<code>nodename</code>和服务名<code>servname</code>（更愿意称之为端口）则应该不为空。</li><li>当然，即使不设置<code>AI_PASSIVE</code>，取出的地址也并非不可以被 bind，很多程序中<code>ai_flags</code>直接设置为 0，即 3 个标志位都不设置，这种情况下只要 hostname 和 servname 设置的没有问题就可以正确 bind。</li></ol><p>上述情况只是简单的 client/server 中的使用，但实际在使用 getaddrinfo 和查阅国外开源代码的时候，曾遇到一些将 servname（即端口）设为 NULL 的情况（当然，此时 nodename 必不为 NULL，否则调用 getaddrinfo 会报错）。</p><h1 id="使用须知"><a href="#使用须知" class="headerlink" title="使用须知"></a>使用须知</h1><p>1）如果本函数返回成功，那么由 result 参数指向的变量已被填入一个指针，它指向的是由其中的<code>ai_next</code>成员串联起来的<code>addrinfo</code>结构链表。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span></span></span><br><span class="line"><span class="class">&#123;</span> 　　　　　　　</span><br><span class="line"><span class="keyword">int</span> ai_flags;</span><br><span class="line"><span class="keyword">int</span> ai_family;</span><br><span class="line"><span class="keyword">int</span> ai_socktype;</span><br><span class="line"><span class="keyword">int</span> ai_protocol;</span><br><span class="line"><span class="keyword">size_t</span> ai_addrlen;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> *<span class="title">ai_addr</span>;</span> <span class="comment">/* 我认为这个成员是这个函数最大的便利。 */</span></span><br><span class="line"><span class="keyword">char</span> *ai_canonname;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span> *<span class="title">ai_next</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中，sockaddr 结构体为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在linux环境下，结构体<span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span>在/<span class="title">usr</span>/<span class="title">include</span>/<span class="title">linux</span>/<span class="title">socket</span>.<span class="title">h</span>中定义，具体如下：</span></span><br><span class="line"><span class="class"><span class="title">typedef</span> <span class="title">unsigned</span> <span class="title">short</span> <span class="title">sa_family_t</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> &#123;</span></span><br><span class="line">        <span class="keyword">sa_family_t</span>     sa_family;    <span class="comment">/* address family, AF_xxx       */</span></span><br><span class="line">        <span class="keyword">char</span>            sa_data[<span class="number">14</span>];    <span class="comment">/* 14 bytes of protocol address */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而且，<code>sockaddr</code>一般要转换为<code>sockaddr_in</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">　　<span class="keyword">short</span> <span class="keyword">int</span> sin_family;</span><br><span class="line">　　<span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> sin_port;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">sin_addr</span>;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> sin_zero[<span class="number">8</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）可以导致返回多个 addrinfo 结构的情形有以下 2 个：</p><blockquote><ol><li> 如果与 hostname 参数关联的地址有多个，那么适用于所请求地址簇的每个地址都返回一个对应的结构。</li><li> 如果 service 参数指定的服务支持多个套接口类型，那么每个套接口类型都可能返回一个对应的结构，具体取决于 hints 结构的 ai_socktype 成员。</li></ol></blockquote><p>举例来说：如果指定的服务既支持 TCP 也支持 UDP，那么调用者可以把<code>hints</code>结构中的<code>ai_socktype</code>成员设置成<code>SOCK_DGRAM</code>，使得返回的仅仅是适用于数据报套接口的信息。</p><p>3）我们必须先分配一个 hints 结构，把它清零后填写需要的字段，再调用 getaddrinfo，然后遍历一个链表逐个尝试每个返回地址。</p><p>4）<strong>getaddrinfo 解决了把主机名和服务名转换成套接口地址结构的问题</strong>。</p><p>5）如果 getaddrinfo 出错，那么返回一个非 0 的错误值。输出出错信息，不要用 perror，而应该用<code>gai_strerror</code>，该函数原型为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">gai_strerror</span><span class="params">( <span class="keyword">int</span> error )</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>该函数以<code>getaddrinfo</code>返回的非 0 错误值的名字和含义为他的唯一参数，返回一个指向对应的出错信息串的指针。</p></blockquote><p>6）<strong>由 getaddrinfo 返回的所有存储空间都是动态获取的，这些存储空间必须通过调用<code>freeaddrinfo</code>返回给系统</strong>，该函数原型为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">freeaddrinfo</span><span class="params">( struct addrinfo *ai )</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p><code>ai</code>参数应指向由<code>getaddrinfo</code>返回的第一个 addrinfo 结构。</p></blockquote><p>这个链表中的所有结构以及它们指向的任何动态存储空间都被释放掉。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="1-根据主机名获取-IP-地址"><a href="#1-根据主机名获取-IP-地址" class="headerlink" title="1. 根据主机名获取 IP 地址"></a>1. 根据主机名获取 IP 地址</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Usag: ./a.out hostname|ip\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span> <span class="title">hints</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span> *<span class="title">res</span>, *<span class="title">cur</span>;</span></span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> *<span class="title">addr</span>;</span></span><br><span class="line">    <span class="keyword">char</span> ipbuf[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(&amp;hints, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(struct addrinfo));</span><br><span class="line">    hints.ai_family = AF_INET; <span class="comment">/* Allow IPv4 */</span></span><br><span class="line">    hints.ai_flags = AI_PASSIVE; <span class="comment">/* For wildcard IP address */</span></span><br><span class="line">    hints.ai_protocol = <span class="number">0</span>; <span class="comment">/* Any protocol */</span></span><br><span class="line">    hints.ai_socktype = SOCK_DGRAM;</span><br><span class="line">ret = <span class="built_in">getaddrinfo</span>(argv[<span class="number">1</span>], <span class="literal">NULL</span>,&amp;hints,&amp;res);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(stderr, <span class="string">&quot;%s\n&quot;</span>, <span class="built_in">gai_strerror</span>(ret));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (cur = res; cur != <span class="literal">NULL</span>; cur = cur-&gt;ai_next) &#123;</span><br><span class="line">        addr = (struct sockaddr_in *)cur-&gt;ai_addr;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ip: %s\n&quot;</span>, <span class="built_in">inet_ntop</span>(AF_INET, &amp;addr-&gt;sin_addr, ipbuf, <span class="number">16</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;port: %d\n&quot;</span>, <span class="built_in">inet_ntop</span>(AF_INET, &amp;addr-&gt;sin_port, (<span class="keyword">void</span> *)&amp;port, <span class="number">2</span>));</span><br><span class="line"><span class="comment">//printf(&quot;port: %d\n&quot;, ntohs(addr-&gt;sin_port));</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">freeaddrinfo</span>(res);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-根据主机名和端口号获取地址信息"><a href="#2-根据主机名和端口号获取地址信息" class="headerlink" title="2. 根据主机名和端口号获取地址信息"></a>2. 根据主机名和端口号获取地址信息</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span> *<span class="title">ailist</span>, *<span class="title">aip</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span> <span class="title">hint</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> *<span class="title">sinp</span>;</span></span><br><span class="line"><span class="keyword">char</span> *hostname = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> buf[INET_ADDRSTRLEN];</span><br><span class="line"><span class="keyword">char</span> *server = <span class="string">&quot;6543&quot;</span>; <span class="comment">/* 这是服务端口号 */</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *addr;</span><br><span class="line"><span class="keyword">int</span> ilRc;</span><br><span class="line">hint.ai_family = AF_UNSPEC; <span class="comment">/* hint 的限定设置 */</span></span><br><span class="line">hint.ai_socktype = <span class="number">0</span>; <span class="comment">/* 这里可是设置 socket type . 比如 SOCK——DGRAM */</span></span><br><span class="line">hint.ai_flags = AI_PASSIVE; <span class="comment">/* flags 的标志很多 。常用的有AI_CANONNAME; */</span></span><br><span class="line">hint.ai_protocol = <span class="number">0</span>; <span class="comment">/* 设置协议 一般为0，默认 */</span></span><br><span class="line">hint.ai_addrlen = <span class="number">0</span>; <span class="comment">/* 下面不可以设置，为0，或者为NULL */</span></span><br><span class="line">hint.ai_canonname = <span class="literal">NULL</span>;</span><br><span class="line">hint.ai_addr = <span class="literal">NULL</span>;</span><br><span class="line">hint.ai_next = <span class="literal">NULL</span>;</span><br><span class="line">ilRc = <span class="built_in">getaddrinfo</span>(hostname, server, &amp;hint, &amp;ailist);</span><br><span class="line"><span class="keyword">if</span> (ilRc &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str_error = %s\n&quot;</span>, <span class="built_in">gai_strerror</span>(errno));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 显示获取的信息 */</span></span><br><span class="line"><span class="keyword">for</span> (aip = ailist; aip != <span class="literal">NULL</span>; aip = aip-&gt;ai_next)</span><br><span class="line">&#123;</span><br><span class="line">sinp = (struct sockaddr_in *)aip-&gt;ai_addr;</span><br><span class="line">addr = <span class="built_in">inet_ntop</span>(AF_INET, &amp;sinp-&gt;sin_addr, buf, INET_ADDRSTRLEN);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; addr = %s, port = %d\n&quot;</span>, addr?addr:<span class="string">&quot;unknow &quot;</span>, <span class="built_in">ntohs</span>(sinp-&gt;sin_port));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-由内核分配随机端口（再也不担心端口被占了）"><a href="#3-由内核分配随机端口（再也不担心端口被占了）" class="headerlink" title="3. 由内核分配随机端口（再也不担心端口被占了）"></a>3. 由内核分配随机端口（再也不担心端口被占了）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_CONN_COUNT 10</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">define</span> INVALID_SOCKET (~0)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> motionListenPort = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> motion_sock = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>err;</span><br><span class="line"><span class="keyword">int</span>maxconn;</span><br><span class="line"><span class="keyword">char</span> familyDesc[<span class="number">32</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_storage</span> <span class="title">motion_sock_addr</span>;</span></span><br><span class="line"><span class="keyword">socklen_t</span> alen;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span> *<span class="title">addrs</span> =</span> <span class="literal">NULL</span>, *addr, hints;</span><br><span class="line"><span class="keyword">int</span> ret;</span><br><span class="line"><span class="keyword">int</span> tries = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(&amp;hints, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(struct addrinfo));</span><br><span class="line">    hints.ai_family = AF_INET; <span class="comment">/* Allow IPv4 */</span></span><br><span class="line">    hints.ai_flags = AI_PASSIVE; <span class="comment">/* For wildcard IP address */</span></span><br><span class="line">    hints.ai_protocol = <span class="number">0</span>; <span class="comment">/* Any protocol */</span></span><br><span class="line">    hints.ai_socktype = SOCK_STREAM;</span><br><span class="line">ret = <span class="built_in">getaddrinfo</span>(<span class="literal">NULL</span>, <span class="string">&quot;0&quot;</span>, &amp;hints, &amp;addrs);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(stderr, <span class="string">&quot;%s\n&quot;</span>, <span class="built_in">gai_strerror</span>(ret));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (addr = addrs; addr != <span class="literal">NULL</span>; addr = addr-&gt;ai_next) &#123;</span><br><span class="line"><span class="comment">/* Create the socket. */</span></span><br><span class="line"><span class="keyword">if</span> ((motion_sock = <span class="built_in">socket</span>(addr-&gt;ai_family, SOCK_STREAM, <span class="number">0</span>)) == INVALID_SOCKET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Error:could not create socket for the motion\n&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Bind it to a kernel assigned port on localhost and get the assigned port via getsockname(). */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">bind</span>(motion_sock, addr-&gt;ai_addr, addr-&gt;ai_addrlen) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Error: could not bind socket for the motion\n&quot;</span>);</span><br><span class="line"><span class="built_in">close</span>(motion_sock);</span><br><span class="line">motion_sock = INVALID_SOCKET;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alen = <span class="built_in"><span class="keyword">sizeof</span></span>(motion_sock_addr);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">getsockname</span>(motion_sock, (struct sockaddr *) &amp;(motion_sock_addr), &amp;alen) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(stderr, <span class="string">&quot;could not get address of socket for the motion\n&quot;</span>);</span><br><span class="line"><span class="built_in">close</span>(motion_sock);</span><br><span class="line">motion_sock = INVALID_SOCKET;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Resolve the motion listen port. */</span></span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span>(motion_sock_addr.ss_family)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> AF_INET:</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> *<span class="title">motion_addr</span> =</span> (struct sockaddr_in *) &amp;motion_sock_addr;</span><br><span class="line">motionListenPort = <span class="built_in">ntohs</span>(motion_addr-&gt;sin_port);</span><br><span class="line"><span class="built_in">strcpy</span>(familyDesc, <span class="string">&quot;IPv4&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(stdout, <span class="string">&quot;motionListenPort=%d, familyDesc = %s\n&quot;</span>, motionListenPort, familyDesc);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> AF_INET6:</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in6</span> *<span class="title">motion_addr</span> =</span> (struct sockaddr_in6 *) &amp;motion_sock_addr;</span><br><span class="line">motionListenPort = <span class="built_in">ntohs</span>(motion_addr-&gt;sin6_port);</span><br><span class="line"><span class="built_in">strcpy</span>(familyDesc, <span class="string">&quot;IPv6&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(stdout, <span class="string">&quot;motionListenPort=%d, familyDesc = %s\n&quot;</span>, motionListenPort, familyDesc);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Error:unrecognized address family \&quot;%d\&quot; for the motion\n&quot;</span>, motion_sock_addr.ss_family);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 监听 */</span></span><br><span class="line">maxconn = MAX_CONN_COUNT;</span><br><span class="line">err = <span class="built_in">listen</span>(motion_sock, maxconn);</span><br><span class="line"><span class="keyword">if</span> (err &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(stderr, <span class="string">&quot;could not listen on socket for the motion\n&quot;</span>);</span><br><span class="line"><span class="built_in">close</span>(motion_sock);</span><br><span class="line">motion_sock = INVALID_SOCKET;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (motion_sock == INVALID_SOCKET)</span><br><span class="line"><span class="keyword">goto</span> listen_failed;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* XXXXXXsocket通信过程 */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">freeaddrinfo</span>(addrs);</span><br><span class="line"><span class="built_in">close</span>(motion_sock);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">listen_failed:</span><br><span class="line"><span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Error: failed to listen for the motion\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (addrs)</span><br><span class="line"><span class="built_in">freeaddrinfo</span>(addrs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (motion_sock != INVALID_SOCKET)</span><br><span class="line"><span class="built_in">close</span>(motion_sock);</span><br><span class="line">motion_sock = INVALID_SOCKET;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-使用-ioctl-获取指定网卡-IP-地址"><a href="#4-使用-ioctl-获取指定网卡-IP-地址" class="headerlink" title="4. 使用 ioctl 获取指定网卡 IP 地址"></a>4. 使用 ioctl 获取指定网卡 IP 地址</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ETH_NAME<span class="meta-string">&quot;eth0&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sock;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">sin</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ifreq</span> <span class="title">ifr</span>;</span></span><br><span class="line">sock = <span class="built_in">socket</span>(AF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (sock == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;socket&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">strncpy</span>(ifr.ifr_name, ETH_NAME, IFNAMSIZ);</span><br><span class="line">ifr.ifr_name[IFNAMSIZ - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">ioctl</span>(sock, SIOCGIFADDR, &amp;ifr) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;ioctl&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(&amp;sin, &amp;ifr.ifr_addr, <span class="built_in"><span class="keyword">sizeof</span></span>(sin));</span><br><span class="line"><span class="built_in">fprintf</span>(stdout, <span class="string">&quot;eth0: %s\n&quot;</span>, <span class="built_in">inet_ntoa</span>(sin.sin_addr));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-使用-ping-指令，根据-hostname-获取-ip-地址"><a href="#5-使用-ping-指令，根据-hostname-获取-ip-地址" class="headerlink" title="5. 使用 ping 指令，根据 hostname 获取 ip 地址"></a>5. 使用 ping 指令，根据 hostname 获取 ip 地址</h2><p>本例未用 getaddrinfo，而是采用 shell 指令方法（不推荐）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;net/if.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;net/if_arp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用ping指令，根据hostname获取ip地址</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getIpAddrByHostname</span><span class="params">(<span class="keyword">char</span> *hostname, <span class="keyword">char</span>* ip_addr, <span class="keyword">size_t</span> ip_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> command[<span class="number">256</span>];</span><br><span class="line">FILE *f;</span><br><span class="line"><span class="keyword">char</span> *ip_pos;</span><br><span class="line"></span><br><span class="line"><span class="built_in">snprintf</span>(command, <span class="number">256</span>, <span class="string">&quot;ping -c1 %s | head -n 1 | sed &#x27;s/^[^(]*(\\([^)]*\\).*$/\\1/&#x27;&quot;</span>, hostname);</span><br><span class="line"><span class="built_in">fprintf</span>(stdout, <span class="string">&quot;%s\n&quot;</span>, command);</span><br><span class="line"><span class="keyword">if</span> ((f = <span class="built_in">popen</span>(command, <span class="string">&quot;r&quot;</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(stderr, <span class="string">&quot;could not open the command, \&quot;%s\&quot;, %s\n&quot;</span>, command, <span class="built_in">strerror</span>(errno));</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fgets</span>(ip_addr, ip_size, f);</span><br><span class="line"><span class="built_in">fclose</span>(f);</span><br><span class="line"></span><br><span class="line">ip_pos = ip_addr;</span><br><span class="line"><span class="keyword">for</span> (;*ip_pos &amp;&amp; *ip_pos!= <span class="string">&#x27;\n&#x27;</span>; ip_pos++);</span><br><span class="line">*ip_pos = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> addr[<span class="number">64</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">getIpAddrByHostname</span>(<span class="string">&quot;localhost&quot;</span>, addr, INET_ADDRSTRLEN);</span><br><span class="line"><span class="built_in">fprintf</span>(stdout, <span class="string">&quot;localhost: %s\n&quot;</span>, addr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> APUE </tag>
            
            <tag> C语言 </tag>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序人生 | Linux Daemon 程序设计示例</title>
      <link href="/2014/08/08/example-of-linux-daemon-program-design/"/>
      <url>/2014/08/08/example-of-linux-daemon-program-design/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p><strong>本文首发于 2014-08-08 17:55:32</strong></p></blockquote><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>daemon 程序，又称为守护进程，通常在系统后台长时间运行，由于没有控制终端而无法与前台交互。daemon 程序一般作为系统服务使用，Linux 系统中运行着很多这样的守护进程，如 iptables，nfs，ypbind，dhcpd 等。</p><h1 id="daemon-程序设计步骤"><a href="#daemon-程序设计步骤" class="headerlink" title="daemon 程序设计步骤"></a>daemon 程序设计步骤</h1><ol><li>程序运行后调用 fork，并让父进程退出。子进程获得一个新的进程 ID，但继承了父进程的进程组 ID。</li><li>调用 setsid 创建一个新的 session，使自己成为新 session 和新进程组的 leader，并使进程没有控制终端(tty)。</li><li>设置文件创建 mask 为 0，避免创建文件时权限的影响。</li><li>关闭不需要的打开文件描述符。因为 daemon 程序在后台执行，不需要于终端交互，通常就关闭 STDIN、STDOUT 和 STDERR。其它根据实际情况处理。</li><li>daemon 无法输出信息，可以使用 SYSLOG 或自己的日志系统进行日志处理。（可选）</li><li>编写管理 daemon 的 SHELL 脚本，使用 service 对 daemon 进行管理和监控。（可选）</li></ol><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="daemon-程序源码"><a href="#daemon-程序源码" class="headerlink" title="daemon 程序源码"></a>daemon 程序源码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里使用自己的日志系统，当然也可以使用SYSLOG。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGBUFSZ 256     <span class="comment">/*log buffer size*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGFILE  <span class="meta-string">&quot;/var/log/wsiod.log&quot;</span>  <span class="comment">/*log filename*/</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wsio_logit</span><span class="params">(<span class="keyword">char</span> * func, <span class="keyword">char</span> *msg, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        <span class="keyword">char</span> prtbuf[LOGBUFSZ];</span><br><span class="line">        <span class="keyword">int</span> save_errno;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">tm</span>;</span></span><br><span class="line">        <span class="keyword">time_t</span> current_time;</span><br><span class="line">        <span class="keyword">int</span> fd_log;</span><br><span class="line"></span><br><span class="line">        save_errno = errno;</span><br><span class="line">        <span class="built_in">va_start</span> (args, msg);</span><br><span class="line">        (<span class="keyword">void</span>) <span class="built_in">time</span> (¤t_time);            <span class="comment">/* Get current time */</span></span><br><span class="line">        tm = <span class="built_in">localtime</span> (¤t_time);</span><br><span class="line">        <span class="built_in">sprintf</span> (prtbuf, <span class="string">&quot;%02d/%02d %02d:%02d:%02d %s &quot;</span>, tm-&gt;tm_mon+<span class="number">1</span>,</span><br><span class="line">                    tm-&gt;tm_mday, tm-&gt;tm_hour, tm-&gt;tm_min, tm-&gt;tm_sec, func);</span><br><span class="line">        <span class="built_in">vsprintf</span> (prtbuf+<span class="built_in">strlen</span>(prtbuf), msg, args);</span><br><span class="line">        <span class="built_in">va_end</span> (args);</span><br><span class="line">        fd_log = <span class="built_in">open</span> (LOGFILE, O_WRONLY | O_CREAT | O_APPEND, <span class="number">0664</span>);</span><br><span class="line">        <span class="built_in">write</span> (fd_log, prtbuf, <span class="built_in">strlen</span>(prtbuf));</span><br><span class="line">        <span class="built_in">close</span> (fd_log);</span><br><span class="line">        errno = save_errno;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">init_daemon</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">pid_t</span> pid;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* parent exits , child continues */</span></span><br><span class="line">  <span class="keyword">if</span>((pid = fork()) &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(pid != <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setsid</span>(); <span class="comment">/* become session leader */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;= <span class="number">2</span>;++i) <span class="comment">/* close STDOUT, STDIN, STDERR, */</span></span><br><span class="line">    <span class="built_in">close</span>(i);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">umask</span>(<span class="number">0</span>); <span class="comment">/* clear file mode creation mask */</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sig_term</span><span class="params">(<span class="keyword">int</span> signo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(signo == SIGTERM)  <span class="comment">/* catched signal sent by kill(1) command */</span></span><br><span class="line">  &#123;</span><br><span class="line">     <span class="built_in">wsio_logit</span>(<span class="string">&quot;&quot;</span>, <span class="string">&quot;wsiod stopped/n&quot;</span>);</span><br><span class="line">     <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">　&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* main program of daemon */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">init_daemon</span>() == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;can&#x27;t fork self/n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">wsio_logit</span>(<span class="string">&quot;&quot;</span>, <span class="string">&quot;wsiod started/n&quot;</span>);</span><br><span class="line">  <span class="built_in">signal</span>(SIGTERM, sig_term); <span class="comment">/* arrange to catch the signal */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// Do what you want here</span></span><br><span class="line">    … …</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="daemon-程序管理脚本"><a href="#daemon-程序管理脚本" class="headerlink" title="daemon 程序管理脚本"></a>daemon 程序管理脚本</h2><p>daemon 程序可以使用 service 工具进行管理，包括启动、停止、查看状态等，但前题是需要编写一个如下的简单 SHELL 脚本，比如 <code>/etc/init.d/wsiod</code> ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># wsiod         This shell script takes care of starting and stopping wsiod.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># chkconfig: 35 65 35</span></span><br><span class="line"><span class="comment"># description: wsiod is web servce I/O server, which is used to access files on remote hosts.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Source function library.</span></span><br><span class="line">. /etc/rc.d/init.d/<span class="built_in">functions</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Source networking configuration.</span></span><br><span class="line">. /etc/sysconfig/network</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check that networking is up.</span></span><br><span class="line">[ <span class="variable">$&#123;NETWORKING&#125;</span> = <span class="string">&quot;no&quot;</span> ] &amp;&amp; <span class="built_in">exit</span> 0</span><br><span class="line"></span><br><span class="line">RETVAL=0</span><br><span class="line">prog=<span class="string">&quot;wsiod&quot;</span></span><br><span class="line">WSIOARGS=<span class="string">&quot;-h <span class="variable">$HOSTNAME</span> -p 80 -t STANDALONE -k -c -d&quot;</span></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">        <span class="comment"># Start daemons.</span></span><br><span class="line">        <span class="built_in">echo</span> -n $<span class="string">&quot;Starting <span class="variable">$prog</span>: &quot;</span></span><br><span class="line">        daemon /usr/<span class="built_in">local</span>/bin/wsiod <span class="variable">$&#123;WSIOARGS&#125;</span></span><br><span class="line">        RETVAL=$?</span><br><span class="line">        <span class="built_in">echo</span></span><br><span class="line">        [ <span class="variable">$RETVAL</span> -eq 0 ] &amp;&amp; touch /var/lock/subsys/wsiod</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$RETVAL</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">        <span class="comment"># Stop daemons.</span></span><br><span class="line">        <span class="built_in">echo</span> -n $<span class="string">&quot;Shutting down <span class="variable">$prog</span>: &quot;</span></span><br><span class="line">        killproc wsiod</span><br><span class="line">        RETVAL=$?</span><br><span class="line">        <span class="built_in">echo</span></span><br><span class="line">        [ <span class="variable">$RETVAL</span> -eq 0 ] &amp;&amp; rm -f /var/lock/subsys/wsiod</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$RETVAL</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># See how we were called.</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">  start)</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">  stop)</span><br><span class="line">        stop</span><br><span class="line">        ;;</span><br><span class="line">  restart|reload)</span><br><span class="line">        stop</span><br><span class="line">        start</span><br><span class="line">        RETVAL=$?</span><br><span class="line">        ;;</span><br><span class="line">  status)</span><br><span class="line">        status wsiod</span><br><span class="line">        RETVAL=$?</span><br><span class="line">        ;;</span><br><span class="line">  *)</span><br><span class="line">        <span class="built_in">echo</span> $<span class="string">&quot;Usage: <span class="variable">$0</span> &#123;start|stop|restart|status&#125;&quot;</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> <span class="variable">$RETVAL</span></span><br></pre></td></tr></table></figure><h2 id="daemon-程序指令"><a href="#daemon-程序指令" class="headerlink" title="daemon 程序指令"></a>daemon 程序指令</h2><p>由上述脚本可知，该 daemon 程序支持的指令有 start|stop|restart|reload|status ，以启动 daemon 程序为例，指令为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/wsiod start</span><br></pre></td></tr></table></figure><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> C语言 </tag>
            
            <tag> shell </tag>
            
            <tag> daemon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统运维 | Ubuntu 下安装配置samba 服务的详细过程</title>
      <link href="/2014/08/05/how-to-install-configure-samba-service-in-ubuntu/"/>
      <url>/2014/08/05/how-to-install-configure-samba-service-in-ubuntu/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p><strong>本文首发于 2014-08-05 10:14:48</strong></p></blockquote><h1 id="1-Samba-作用"><a href="#1-Samba-作用" class="headerlink" title="1. Samba 作用"></a>1. Samba 作用</h1><p>Samba 的主要任务就是实现 Linux 系统和 Windows 系统之间的资源共享。我们现在是要在 Linux 下配置 Samba，让 Windows 的用户可以访问你的 PC。</p><p>当然，也可用于 VMWare 虚拟机与宿主机之间的资源共享。</p><h1 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h1><p>我是在 ubuntu 上实现的，所以我只需在配置好 ubuntu 的更新源之后，在终端中使用一下两句命令，就可以安装 Samba 的软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install smaba</span><br><span class="line">sudo apt-get install smbfs</span><br></pre></td></tr></table></figure><h1 id="3-Samba-服务的构成"><a href="#3-Samba-服务的构成" class="headerlink" title="3. Samba 服务的构成"></a>3. Samba 服务的构成</h1><p>Samba 的核心是两个守护进程<code>smbd</code>和<code>nmbd</code> 。它们的配置信息都保存在<code>/etc/samba/smb.conf</code>里面。</p><p>其中<code>smbd</code>处理 Samba 软件与 Linux 协商，<code>nmbd</code>使其他主机能浏览 Linux 服务器。</p><h1 id="4-Samba-配置文件"><a href="#4-Samba-配置文件" class="headerlink" title="4. Samba 配置文件"></a>4. Samba 配置文件</h1><p>配置文件为<code>/etc/samba/smb.conf</code>，如果担心改了之后有问题，可以先备份一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/samba/smb.conf /etc/samba/smb_conf_backup</span><br></pre></td></tr></table></figure><p><strong>一个完整的 Samba 配置文件包含两部分：</strong></p><ul><li>Samba Global Settings 全局参数设置<blockquote><p>该部分由<code>[global]段</code>来完成配置，主要是设置整体的规则。其中参数<code>workgroup</code>比较特殊，用于提供<code>NT域名或者工作组名</code>，需要根据实际情况修改：</p></blockquote></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workgroup=mygroup</span><br></pre></td></tr></table></figure><ul><li>Share Definitions 共享定义<blockquote><p>有很多段，都用<code>[]标志</code>开始的，需要根据实际情况修改。</p></blockquote></li></ul><p><strong>语法说明：</strong></p><ul><li>每个部分有消息头和参数构成，消息头用<code>[]</code>表示，如<code>[global]</code>就是一个消息头。</li><li>参数的结构形式是<code>parameter=value</code>。</li><li>注释用 <code>#</code> 表示，这个和 shell 脚本有点像。</li><li>有一些配置前面有 <code>;</code> ，这个表示这一行的配置可以更改，如需修改，则要去掉<code>;</code>，配置才可能生效。</li></ul><h1 id="5-示例"><a href="#5-示例" class="headerlink" title="5. 示例"></a>5. 示例</h1><h2 id="5-1-设置共享目录"><a href="#5-1-设置共享目录" class="headerlink" title="5.1. 设置共享目录"></a>5.1. 设置共享目录</h2><p>假定共享目录为<code>/home/share/samba</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /home/share/samba</span><br><span class="line">sudo chmod 777 /home/share/samba</span><br></pre></td></tr></table></figure><h2 id="5-2-修改配置文件"><a href="#5-2-修改配置文件" class="headerlink" title="5.2. 修改配置文件"></a>5.2. 修改配置文件</h2><p>修改 global 段：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line">    <span class="attr">workgroup</span> = WORKGROUP</span><br><span class="line">    display <span class="attr">charset</span> = UTF-<span class="number">8</span></span><br><span class="line">    unix <span class="attr">charset</span> = UTF-<span class="number">8</span></span><br><span class="line">    dos <span class="attr">charset</span> = cp936</span><br></pre></td></tr></table></figure><p>添加 Share 段：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Share]</span></span><br><span class="line">    <span class="attr">comment</span> = Shared Folder with username and password</span><br><span class="line">    <span class="attr">path</span> = /home/share/samba</span><br><span class="line">    <span class="attr">public</span> = <span class="literal">yes</span></span><br><span class="line">    <span class="attr">writable</span> = <span class="literal">no</span></span><br><span class="line">    valid <span class="attr">users</span> = user</span><br><span class="line">    create <span class="attr">mask</span> = <span class="number">0300</span></span><br><span class="line">    directory <span class="attr">mask</span> = <span class="number">0300</span></span><br><span class="line">    force <span class="attr">user</span> = nobody</span><br><span class="line">    force <span class="attr">group</span> = nogroup</span><br><span class="line">    <span class="attr">available</span> = <span class="literal">yes</span></span><br><span class="line">    <span class="attr">browseable</span> = <span class="literal">yes</span></span><br></pre></td></tr></table></figure><p>搜索到 security 配置项，修改为：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security</span> = user</span><br><span class="line">username <span class="attr">map</span> = /etc/samba/smbusers</span><br></pre></td></tr></table></figure><p>保存并关闭配置文件。</p><h2 id="5-3-添加-Samba-用户"><a href="#5-3-添加-Samba-用户" class="headerlink" title="5.3. 添加 Samba 用户"></a>5.3. 添加 Samba 用户</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd user <span class="comment">#增加了一个叫做user的用户</span></span><br><span class="line">sudo smbpasswd user <span class="comment">#修改user的对samba服务的密码，系统会提示输入密码</span></span><br></pre></td></tr></table></figure><h2 id="5-4-重启服务"><a href="#5-4-重启服务" class="headerlink" title="5.4. 重启服务"></a>5.4. 重启服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/samba restart</span><br></pre></td></tr></table></figure><h2 id="5-5-使用"><a href="#5-5-使用" class="headerlink" title="5.5. 使用"></a>5.5. 使用</h2><ul><li><p>在 windows 系统下使用</p><ul><li>方法一：在 IE 地址栏中输入：<code>\\你的IP</code>，然后回车，可能要求你输入用户名和密码（第 5.3 小节设定的）。</li><li>方法二：在<code>网上邻居</code>中新建<code>邻居</code>，在路径中输入: <code>\\你的IP\Share</code>，然后点击下一步完成（可能会要求输入用户名和密码）。</li></ul></li><li><p>在 Linux 下访问：在终端中挂载文件系统</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -t smbfs -o username=user,password=123456 //218.*.*.*/Share /mnt</span><br></pre></td></tr></table></figure><blockquote><p>其中，<code>-t参数</code>指示了文件系统的类型，<code>username</code>是用户名，<code>password</code>是密码，<code>218.*.*.*</code>是你的 IP，<code>Share</code>是在配置文件中已经指明的段名，<code>/mnt</code>是要挂载到的文件夹。</p></blockquote><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 系统运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序人生 | 我的《C陷阱与缺陷》读书笔记</title>
      <link href="/2014/08/04/c-traps-and-pitfalls-reading-notes/"/>
      <url>/2014/08/04/c-traps-and-pitfalls-reading-notes/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p><strong>本文首发于 2014-08-04 17:56:55</strong></p></blockquote><h1 id="第一章-词法“陷阱”"><a href="#第一章-词法“陷阱”" class="headerlink" title="第一章 词法“陷阱”"></a>第一章 词法“陷阱”</h1><h2 id="1-不同于"><a href="#1-不同于" class="headerlink" title="1. =不同于=="></a>1. =不同于==</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(x = y)</span><br><span class="line">         <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>实际上是将 y 赋给 x，再检查 x 是否为 0。</p><p>如果真的是这样预期，那么应该改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>((x = y) != <span class="number">0</span>)</span><br><span class="line">         <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h2 id="2-amp-和-不同于-amp-amp-和"><a href="#2-amp-和-不同于-amp-amp-和" class="headerlink" title="2. &amp;和| 不同于 &amp;&amp; 和 ||"></a>2. &amp;和| 不同于 &amp;&amp; 和 ||</h2><h2 id="3-词法分析中的“贪心法”"><a href="#3-词法分析中的“贪心法”" class="headerlink" title="3. 词法分析中的“贪心法”"></a>3. 词法分析中的“贪心法”</h2><p>编译器将程序分解成符号的方法是：从左到有一个一个字符的读入，如果该字符可能组成一个符号，那么再读入下一个字符，判断已经读入的两个字符组成的字符床是否可能是一个符号的组成部分；如果可能，继续读入下一个字符，重复上述判断，直到读入的字符组成的字符串已不再可能组成一个有意义的符号。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y = x<span class="comment">/*p; 会被解析为：/* 注释符号</span></span><br></pre></td></tr></table></figure><h2 id="4-整型常量"><a href="#4-整型常量" class="headerlink" title="4. 整型常量"></a>4. 整型常量</h2><p>010(八进制数) 不同于 10（十进制）。</p><h2 id="5-字符与字符串"><a href="#5-字符与字符串" class="headerlink" title="5. 字符与字符串"></a>5. 字符与字符串</h2><p>首先是单引号与双引号的区别：</p><ul><li>用单引号括起来的一个字符表示一个整数（ASCII 码），而双引号括起来表示一个指针。</li></ul><h1 id="第二章-语法“陷阱”"><a href="#第二章-语法“陷阱”" class="headerlink" title="第二章 语法“陷阱”"></a>第二章 语法“陷阱”</h1><h2 id="1-理解函数声明"><a href="#1-理解函数声明" class="headerlink" title="1. 理解函数声明"></a>1. 理解函数声明</h2><p>弄懂<code>(*(void(*)())0)();</code> //首地址为 0 的函数。</p><p><code>float (*h)()</code>: h 是一个指向返回值为浮点型的函数的指针</p><p>所以，<code>(float (*)())</code> 表示一个“指向返回值为浮点型的函数的指针”的类型转换符。</p><p><code>fp()</code>: 是<code>(*fp)( )</code>的简写。</p><p><code>*fp()</code>: 是 <code>*( (*fp) ( ) )</code>的简写。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">( *<span class="number">0</span> )( );</span><br></pre></td></tr></table></figure><p>虽然上式编译器不认，但可以把 0 转换为指向“返回值为 void 的”函数的指针，所以 0 可变为： <code>( void(*) ( ) ) 0</code> ，代入<code>(*0)()</code>，得到：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(*( <span class="built_in"><span class="keyword">void</span></span>(*) ( ) ) <span class="number">0</span>) ( )</span><br></pre></td></tr></table></figure><p>该式子用等价于：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span>  <span class="params">( *func )</span> <span class="params">( )</span></span>;</span><br><span class="line">( *( func ) <span class="number">0</span> ) ( );</span><br></pre></td></tr></table></figure><p>类似的，signal.h 中对 signal 函数的声明：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*<span class="keyword">sighandler_t</span>)</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">sighandler_t</span> <span class="title">signal</span><span class="params">(<span class="keyword">int</span> signum, <span class="keyword">sighandler_t</span> handler)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="2-运算符优先级的问题"><a href="#2-运算符优先级的问题" class="headerlink" title="2. 运算符优先级的问题"></a>2. 运算符优先级的问题</h2><table><thead><tr><th>优先级</th><th>运算符</th><th>名称或含义</th><th>使用形式</th><th>结合方向</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>[]</td><td>数组下标</td><td>数组名[常量表达式]</td><td>左到右</td><td></td></tr><tr><td>1</td><td>()</td><td>圆括号</td><td>(表达式) 函数名(形参表)</td><td>左到右</td><td></td></tr><tr><td>1</td><td>.</td><td>成员选择（对象）</td><td>对象.成员名</td><td>左到右</td><td></td></tr><tr><td>1</td><td>-&gt;</td><td>成员选择（指针）</td><td>对象指针-&gt;成员名</td><td>左到右</td><td></td></tr><tr><td>2</td><td>-</td><td>负号运算符</td><td>-表达式</td><td>右到左</td><td>单目运算符</td></tr><tr><td>2</td><td>(类型)</td><td>强制类型转换</td><td>(数据类型)表达式</td><td>右到左</td><td></td></tr><tr><td>2</td><td>++</td><td>自增运算符</td><td>++变量名 变量名++</td><td>右到左</td><td>单目运算符</td></tr><tr><td>2</td><td>–</td><td>自减运算符</td><td>–变量名 变量名–</td><td>右到左</td><td>单目运算符</td></tr><tr><td>2</td><td>*</td><td>取值运算符</td><td>*指针变量</td><td>右到左</td><td>单目运算符</td></tr><tr><td>2</td><td>&amp;</td><td>取地址运算符</td><td>&amp;变量名</td><td>右到左</td><td>单目运算符</td></tr><tr><td>2</td><td>!</td><td>逻辑非运算符</td><td>!表达式</td><td>右到左</td><td>单目运算符</td></tr><tr><td>2</td><td>~</td><td>按位取反运算符</td><td>~表达式</td><td>右到左</td><td>单目运算符</td></tr><tr><td>2</td><td>sizeof</td><td>长度运算符</td><td>sizeof(表达式)</td><td>右到左</td><td></td></tr><tr><td>3</td><td>/</td><td>除</td><td>表达式 / 表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>3</td><td>*</td><td>乘</td><td>表达式*表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>3</td><td>%</td><td>余数（取模）</td><td>整型表达式%整型表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>4</td><td>+</td><td>加</td><td>表达式+表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>4</td><td>-</td><td>减</td><td>表达式-表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>5</td><td>&lt;&lt;</td><td>左移</td><td>变量&lt;&lt;表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>5</td><td>&gt;&gt;</td><td>右移</td><td>变量&gt;&gt;表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>6</td><td>&gt;</td><td>大于</td><td>表达式&gt;表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>6</td><td>&gt;=</td><td>大于等于</td><td>表达式&gt;=表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>6</td><td>&lt;</td><td>小于</td><td>表达式&lt;表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>6</td><td>&lt;=</td><td>小于等于</td><td>表达式&lt;=表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>7</td><td>==</td><td>等于</td><td>表达式==表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>7</td><td>!=</td><td>不等于</td><td>表达式!= 表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>8</td><td>&amp;</td><td>按位与</td><td>表达式&amp;表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>9</td><td>^</td><td>按位异或</td><td>表达式^表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>10</td><td>|</td><td>按位或</td><td>表达式|表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>11</td><td>&amp;&amp;</td><td>逻辑与</td><td>表达式&amp;&amp;表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>12</td><td>||</td><td>逻辑或</td><td>表达式||表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>13</td><td>?:</td><td>条件运算符</td><td>表达式 1? 表达式 2: 表达式 3</td><td>右到左</td><td>三目运算符</td></tr><tr><td>14</td><td>=</td><td>赋值运算符</td><td>变量=表达式</td><td>右到左</td><td></td></tr><tr><td>14</td><td>/=</td><td>除后赋值</td><td>变量/=表达式</td><td>右到左</td><td></td></tr><tr><td>14</td><td>*=</td><td>乘后赋值</td><td>变量*=表达式</td><td>右到左</td><td></td></tr><tr><td>14</td><td>%=</td><td>取模后赋值</td><td>变量%=表达式</td><td>右到左</td><td></td></tr><tr><td>14</td><td>+=</td><td>加后赋值</td><td>变量+=表达式</td><td>右到左</td><td></td></tr><tr><td>14</td><td>-=</td><td>减后赋值</td><td>变量-=表达式</td><td>右到左</td><td></td></tr><tr><td>14</td><td>&lt;&lt;=</td><td>左移后赋值</td><td>变量&lt;&lt;=表达式</td><td>右到左</td><td></td></tr><tr><td>14</td><td>&gt;&gt;=</td><td>右移后赋值</td><td>变量&gt;&gt;=表达式</td><td>右到左</td><td></td></tr><tr><td>14</td><td>&amp;=</td><td>按位与后赋值</td><td>变量&amp;=表达式</td><td>右到左</td><td></td></tr><tr><td>14</td><td>^=</td><td>按位异或后赋值</td><td>变量^=表达式</td><td>右到左</td><td></td></tr><tr><td>14</td><td>|=</td><td>按位或后赋值</td><td>变量|=表达式</td><td>右到左</td><td></td></tr><tr><td>15</td><td>,</td><td>逗号运算符</td><td>表达式,表达式,…</td><td>左到右</td><td></td></tr></tbody></table><h2 id="3-其他"><a href="#3-其他" class="headerlink" title="3. 其他"></a>3. 其他</h2><p>主要是别多写分号，switch 别忘了 break，别写空 else 分支。</p><h1 id="第三章-语义“陷阱”"><a href="#第三章-语义“陷阱”" class="headerlink" title="第三章 语义“陷阱”"></a>第三章 语义“陷阱”</h1><h2 id="1-指针与数组"><a href="#1-指针与数组" class="headerlink" title="1. 指针与数组"></a>1. 指针与数组</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Int p[<span class="number">4</span>];</span><br><span class="line">    Double x;</span><br><span class="line">&#125;b[<span class="number">17</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> calendar[<span class="number">12</span>][<span class="number">31</span>];</span><br><span class="line"><span class="built_in"><span class="keyword">int</span></span> (*p)[<span class="number">31</span>];</span><br><span class="line"><span class="built_in"><span class="keyword">sizeof</span></span>(calendar):<span class="number">12</span>*<span class="number">31</span>=<span class="number">372</span></span><br><span class="line"></span><br><span class="line">calendar[<span class="number">0</span>] <span class="comment">// 指向该一维数组，对应*p</span></span><br><span class="line">calendar[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">......</span><br><span class="line">calendar[<span class="number">0</span>][<span class="number">30</span>]</span><br><span class="line">calendar[<span class="number">1</span>] <span class="comment">// 指向该一维数组，对应*(p+1)</span></span><br><span class="line">calendar[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">......</span><br><span class="line">calendar[<span class="number">1</span>][<span class="number">30</span>]</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">calendar[<span class="number">11</span>] <span class="comment">// 指向该一维数组，对应*(p+11)</span></span><br><span class="line">calendar[<span class="number">11</span>][<span class="number">0</span>]</span><br><span class="line">......</span><br><span class="line">calendar[<span class="number">11</span>][<span class="number">30</span>]</span><br></pre></td></tr></table></figure><h2 id="2-内存分配"><a href="#2-内存分配" class="headerlink" title="2. 内存分配"></a>2. 内存分配</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">free</span>(r);</span><br></pre></td></tr></table></figure><p>用 malloc 显式分配的空间，不会再退出本函数后自动释放掉，而是会等程序员显式释放后才消失。</p><p>注意检查，malloc 分配的内存可能失败。</p><p>C 语言中会自动地将作为函数参数的数组声明转换为对应的指针声明，如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strlen</span><span class="params">(<span class="keyword">char</span> s[ ])</span></span>&#123; &#125;等价于<span class="function"><span class="keyword">int</span> <span class="title">strlen</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123; &#125;</span><br><span class="line">但在其他情形下不会自动转换，也就是说不等价，如：</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span> hello[ ];和<span class="keyword">extern</span> <span class="keyword">char</span> *hello;完全不同。</span><br></pre></td></tr></table></figure><p><strong>边界计算</strong></p><p>自己实现一个 memcpy 函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">memcpy</span><span class="params">(<span class="keyword">char</span> *dest, <span class="keyword">const</span> <span class="keyword">char</span> *source, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>( --k &gt;= <span class="number">0</span> )</span><br><span class="line">        *dest++ = *source++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点是：操作时一定要知道操作数据的长度。</p><p><strong>整数溢出</strong></p><ul><li>两个有符号整数相加会发生溢出。</li><li>两个无符号整数相加不会发生溢出。</li><li>一个有符号和一个无符号整数相加，因为有符号被自动转换成无符号，所以也不会溢出。</li></ul><h1 id="第四章-连接"><a href="#第四章-连接" class="headerlink" title="第四章 连接"></a>第四章 连接</h1><p>编译器一般每次只处理一个文件。编译器的责任是把 C 源程序翻译成对连接器有意义的形式。</p><p>许多系统中的连接器是独立于 C 语言实现的，因此如果链接时候错误原因是与 C 语言相关的，连接器无法判断错误原因。但连接器能够理解机器语言和内存布局。</p><p>典型的连接器把由汇编器或编译器生成的若干个目标模块，整合成一个被称为载入模块或可执行文件的实体。</p><p>连接器通常把目标模块看成是由一组外部对象组成的。每个外部对象代表着机器内存中的某个部分，并通过一个外部名称来识别。因此，程序中的每个函数和每个外部变量，如果没有被声明为 static，就都是一个外部对象。static 的不会与其它源程序文件中的同名函数或同名变量发生冲突。对于非 satatic 的函数或变量的名称冲突的解决办法将在后面讨论。</p><p><strong>除了外部对象外，目标模块中还可能包括了对其他模块中的外部对象的引用，当连接器读入一个目标模块时，它必须解析出这些引用，并作出标记说明这些外部对象不再是未定义的。</strong></p><p>连接器的输入是一组目标模块文件和库文件。输出是一个载入模块。</p><p><strong>避免外部变量的函数的冲突和不一致等问题的办法：</strong></p><blockquote><p><code>每个外部对象只在一个头文件里声明，需要用到该外部对象的所有模块都应该包括这个头文件。</code></p><p><code>定义该外部对象的模块也应该包括这个头文件。</code></p></blockquote><h1 id="第五章-库函数"><a href="#第五章-库函数" class="headerlink" title="第五章 库函数"></a>第五章 库函数</h1><p>没什么好说的，就是 apue 的一些函数而已。</p><h1 id="第六章-预处理器"><a href="#第六章-预处理器" class="headerlink" title="第六章 预处理器"></a>第六章 预处理器</h1><p>宏定义：主要是理解<strong>宏不是函数，而是直接替换</strong>。</p><ol><li>不能忽视宏定义中的空格：</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> f (x) ( (x)-1 )：因为f后面多了一个空格，所以f(x)代表(x) ( (x)-1 )</span></span><br></pre></td></tr></table></figure><ol start="2"><li>宏并不是函数，所以注意那些括号：</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> abs(x) ( ( (x) &gt;= 0)?(x):-(x) )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a,b) ( (a)&gt;(b)?(a):(b) )</span></span><br></pre></td></tr></table></figure><ol start="3"><li>宏并不是语句：</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> assert(e) <span class="meta-keyword">if</span> (!e) assert_error(__FILE__, __LINE__)</span></span><br></pre></td></tr></table></figure><ol start="4"><li>宏不是类型定义</li></ol><ul><li>错误用法：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int_8_ int*</span></span><br><span class="line">        int_8 a,b; <span class="comment">//则a是指针，b是int型</span></span><br></pre></td></tr></table></figure><ul><li>正确用法：应该用 typedef</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> * int_8_;</span><br></pre></td></tr></table></figure><h1 id="第七章-可移植性缺陷"><a href="#第七章-可移植性缺陷" class="headerlink" title="第七章 可移植性缺陷"></a>第七章 可移植性缺陷</h1><p>主要是：</p><ol><li>应对 C 语言标准的变更；</li><li>标识符名称的限制；</li><li>整数的大小；</li><li>字符是有符号整数还是无符号整数；</li><li>移位运算符；<ol><li>在向右移位时，空出的位是由 0 填充还是 1，还是由符号位的副本填充？如果被移位对象是无符号数，那么由 0 填充；如果是有符号数，那么是 0 或符号位的副本。</li><li>移位操作的位数允许的取值范围是什么？如果被移位对象的长度是 n 位，那么移位计数必须大于或等于 0，而严格小于 n。</li></ol></li><li>移植性需考虑的地方：<ol><li>机器的字符表不同。</li><li>有的机器是 one’s complement，有的机器是 two’s complement 的。基于 2 的补码的计算机，所允许表示的附属取值范围要大于正数取值范围，所以有时取负值的运算会导致溢出。</li><li>各机器对取模运算的定义不同。</li></ol></li></ol><h1 id="第八章-惯用与答案"><a href="#第八章-惯用与答案" class="headerlink" title="第八章 惯用与答案"></a>第八章 惯用与答案</h1><p>将惯用的<code>c == &#39;\t&#39;</code>写作<code>&#39;\t&#39; == c</code>。</p><p>一旦写错成=号，编译器就能检查出来。</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序人生 | C语言字节对齐问题详解 - 对齐/字节序/位序/网络序等（下）</title>
      <link href="/2014/07/21/c-language-byte-alignment-problem-in-detail-part-2/"/>
      <url>/2014/07/21/c-language-byte-alignment-problem-in-detail-part-2/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p><strong>本文首发于 2014-07-21 15:35:30</strong></p></blockquote><h1 id="6-附录"><a href="#6-附录" class="headerlink" title="6. 附录"></a>6. 附录</h1><h2 id="6-1-字节序与网络序"><a href="#6-1-字节序与网络序" class="headerlink" title="6.1. 字节序与网络序"></a>6.1. 字节序与网络序</h2><h3 id="6-1-1-字节序"><a href="#6-1-1-字节序" class="headerlink" title="6.1.1. 字节序"></a>6.1.1. 字节序</h3><p><strong>字节序</strong>，顾名思义就是<strong>字节的高低位存放顺序</strong>。</p><p>对于单字节，大部分处理器以相同的顺序处理比特位，因此单字节的存放和传输方式一般相同。</p><p>对于多字节数据，如整型（32 位机中一般占 4 字节），在不同的处理器的存放方式主要有两种（以内存中 0x0A0B0C0D 的存放方式为例）。</p><h4 id="6-1-1-1-大字节序（Big-Endian，又称大端序或大尾序）"><a href="#6-1-1-1-大字节序（Big-Endian，又称大端序或大尾序）" class="headerlink" title="6.1.1.1. 大字节序（Big-Endian，又称大端序或大尾序）"></a>6.1.1.1. 大字节序（Big-Endian，又称大端序或大尾序）</h4><p>在计算机中，存储介质以下面方式存储整数 0x0A0B0C0D，则称为<strong>大字节序</strong>：</p><blockquote><p>数据以 8bit 为单位：<br>低地址方向 -&gt; 0x0A 0x0B 0x0C 0x0D -&gt; 高地址方向</p><p>数据以 16bit 为单位：<br>低地址方向 -&gt; 0x0A0B 0x0C0D -&gt; 高地址方向</p></blockquote><p>其中，最高有效位(MSB，Most Significant Byte)0x0A 存储在最低的内存地址处。下个字节 0x0B 存在后面的地址处。同时，最高的 16bit 单元 0x0A0B 存储在低位。</p><p>简而言之，大字节序就是<strong>高字节存入低地址，低字节存入高地址</strong>。</p><blockquote><p>这里讲个词源典故：“endian”一词来源于乔纳森·斯威夫特的小说《格列佛游记》。小说中，小人国为水煮蛋该从大的一端(Big-End)剥开还是小的一端(Little-End)剥开而争论，争论的双方分别被称为 Big-endians 和 Little-endians 。</p><p>1980 年，Danny Cohen 在其著名的论文”<em>On Holy Wars and a Plea for Peace</em>“中为平息一场关于字节该以什么样的顺序传送的争论而引用了该词。</p></blockquote><p>借用上面的典故，想象一下要把熟鸡蛋旋转着稳立起来，大头（高字节）肯定在下面（低地址）^_^</p><h4 id="6-1-1-2-小字节序（Little-Endian，又称小端序或小尾序）"><a href="#6-1-1-2-小字节序（Little-Endian，又称小端序或小尾序）" class="headerlink" title="6.1.1.2. 小字节序（Little-Endian，又称小端序或小尾序）"></a>6.1.1.2. 小字节序（Little-Endian，又称小端序或小尾序）</h4><p>在计算机中，存储介质以下面方式存储整数 0x0A0B0C0D 则称为<strong>小字节序</strong>：</p><blockquote><p>数据以 8bit 为单位：<br>高地址方向 -&gt; 0x0A 0x0B 0x0C 0x0D -&gt; 低地址方向</p><p>数据以 16bit 为单位：<br>高地址方向 -&gt; 0x0A0B 0x0C0D -&gt; 低地址方向</p></blockquote><p>其中，最低有效位(LSB，Least Significant Byte)0x0D 存储在最低的内存地址处。后面字节依次存在后面的地址处。同时，最低的 16bit 单元 0x0A0B 存储在低位。</p><p>可见，小字节序就<strong>高字节存入高地址，低字节存入低地址</strong>。</p><p>C 语言中的位域结构也要遵循<strong>比特序(类似字节序)</strong> 。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bitfield</span>&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> a: <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> b: <span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>该位域结构占 1 个字节，假设赋值 a=0x01 和 b=0x02，则大字节机器上该字节为(01)(000010)，小字节机器上该字节为(000010)(01)</strong> 。因此在编写可移植代码时，需要加条件编译。</p><p>注意，在包含位域的 C 结构中，<strong>若位域 A 在位域 B 之前定义，则位域 A 所占用的内存空间地址低于位域 B 所占用的内存空间</strong>。</p><p>另见以下联合体，在小字节机器上若 low=0x01，high=0x02，则 hex=0x21：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">union</span>&#123;</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> hex;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">char</span> low  : <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">char</span> high : <span class="number">4</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;convert;</span><br><span class="line">    convert.low = <span class="number">0x01</span>;</span><br><span class="line">    convert.high = <span class="number">0x02</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hex = 0x%0x\n&quot;</span>, convert.hex);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-1-1-3-注意事项"><a href="#6-1-1-3-注意事项" class="headerlink" title="6.1.1.3. 注意事项"></a>6.1.1.3. 注意事项</h4><p><strong>无论是大字节序，还是小字节序，变量的地址都等于变量所占字节中的低地址。</strong>例如，下述程序中，小字节序输出 0x0D，大字节序输出 0x0A 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int32_t</span> a = <span class="number">0x0A0B0C0D</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0x%0x\n&quot;</span>, *((<span class="keyword">int8_t</span>*)&amp;dwData));</span><br></pre></td></tr></table></figure><h3 id="6-1-2-网络序"><a href="#6-1-2-网络序" class="headerlink" title="6.1.2. 网络序"></a>6.1.2. 网络序</h3><p>网络传输一般采用<strong>大字节序</strong>，也称为<strong>网络字节序</strong>或<strong>网络序</strong>。IP 协议中定义大字节序为网络字节序。</p><p>对于可移植的代码来说，将接收的网络数据转换成主机的字节序是必须的，一般会有成对的函数用于把网络数据转换成相应的主机字节序或反之（若主机字节序与网络字节序相同，通常将函数定义为空宏）。</p><p>伯克利 socket API 定义了一组转换函数，用于 16 和 32 位整数在网络序和主机字节序之间的转换。<code>htonl、htons</code>用于<strong>主机序转换到网络序</strong>；<code>ntohl、ntohs</code>用于<strong>网络序转换到本机序</strong>。</p><p>注意：在大小字节序转换时，必须考虑待转换数据的长度(如 5.1.1 节的数据单元)。另外<strong>对于单字符或小于单字符的几个 bit 数据，是不必转换的</strong>，因为<strong>在机器存储和网络发送的一个字符内的 bit 位存储顺序是一致的</strong>。</p><h3 id="6-1-3-位序"><a href="#6-1-3-位序" class="headerlink" title="6.1.3. 位序"></a>6.1.3. 位序</h3><p>用于描述<strong>串行设备的传输顺序</strong>。<strong>一般硬件传输采用小字节序（先传低位），但 I2C 协议采用大字节序</strong>。网络协议中只有<strong>数据链路层</strong>的底端会涉及到。</p><h3 id="6-1-4-处理器字节序"><a href="#6-1-4-处理器字节序" class="headerlink" title="6.1.4. 处理器字节序"></a>6.1.4. 处理器字节序</h3><p>不同处理器体系的字节序如下所示：</p><ul><li>X86、MOS Technology 6502、Z80、VAX、PDP-11 等处理器为 <strong>Little endian</strong>；</li><li>Motorola 6800、Motorola 68000、PowerPC 970、System/370、SPARC(除 V9 外) 等处理器为 <strong>Big endian</strong>；</li><li>ARM、PowerPC (除 PowerPC 970 外)、DEC Alpha，SPARC V9，MIPS，PA-RISC and IA64 等的字节序是<strong>可配置的</strong>。</li></ul><h3 id="6-1-5-字节序编程"><a href="#6-1-5-字节序编程" class="headerlink" title="6.1.5. 字节序编程"></a>6.1.5. 字节序编程</h3><p>请看下面的语句：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, *((<span class="keyword">short</span>*)<span class="string">&quot;AB&quot;</span>) &gt;&gt; <span class="number">8</span>);</span><br></pre></td></tr></table></figure><p>在大字节序下输出为’A’，小字节序下输出为’B’。</p><p>下面的代码可用来判断本地机器字节序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字节序枚举类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span>&#123;</span></span><br><span class="line">    ENDIAN_LITTLE = (INT8U)<span class="number">0X00</span>,</span><br><span class="line">    ENDIAN_BIG    = (INT8U)<span class="number">0X01</span></span><br><span class="line">&#125;E_ENDIAN_TYPE;</span><br><span class="line"></span><br><span class="line"><span class="function">E_ENDIAN_TYPE <span class="title">GetEndianType</span><span class="params">(VOID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    INT32U dwData = <span class="number">0x12345678</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取数都从低地址开始访问</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0x78</span> == *((INT8U*)&amp;dwData))</span><br><span class="line">        <span class="keyword">return</span> ENDIAN_LITTLE;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> ENDIAN_BIG;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Start of GetEndianTypeTest//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;endian.h&gt;</span></span></span><br><span class="line"><span class="function">VOID <span class="title">GetEndianTypeTest</span><span class="params">(VOID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> _BYTE_ORDER == _LITTLE_ENDIAN</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[%s]&lt;Test Case&gt; Result: %s, EndianType = %s!\n&quot;</span>, __FUNCTION__,</span><br><span class="line">           (ENDIAN_LITTLE != <span class="built_in">GetEndianType</span>()) ? <span class="string">&quot;ERROR&quot;</span> : <span class="string">&quot;OK&quot;</span>, <span class="string">&quot;Little&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> _BYTE_ORDER == _BIG_ENDIAN</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[%s]&lt;Test Case&gt; Result: %s, EndianType = %s!\n&quot;</span>, __FUNCTION__,</span><br><span class="line">           (ENDIAN_BIG != <span class="built_in">GetEndianType</span>()) ? <span class="string">&quot;ERROR&quot;</span> : <span class="string">&quot;OK&quot;</span>, <span class="string">&quot;Big&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//End of GetEndianTypeTest//</span></span><br></pre></td></tr></table></figure><p><strong>在字节序不同的平台间的交换数据时，必须进行转换</strong>。比如对于 int 类型，大字节序写入文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">write</span>(fd, &amp;i, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br></pre></td></tr></table></figure><p>小字节序读出后：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">read</span>(fd, &amp;i, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">char</span> buf[<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>)];</span><br><span class="line"><span class="built_in">memcpy</span>(buf, &amp;i, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>); i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> v = buf[<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>) - i - <span class="number">1</span>];</span><br><span class="line">    buf[<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>) - <span class="number">1</span>] =  buf[i];</span><br><span class="line">    buf[i] = v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memcpy</span>(&amp;i, buf, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br></pre></td></tr></table></figure><p>上面仅仅是个例子。在不同平台间即使不存在字节序的问题，也尽量不要直接传递二进制数据。作为可选的方式就是使用文本来交换数据，这样至少可以避免字节序的问题。</p><p>很多的加密算法为了追求速度，都会采取字符串和数字之间的转换，在计算完毕后，必须注意字节序的问题，在某些实现中可以见到使用预编译的方式来完成，这样很不方便，如果使用前面的语句来判断，就可以自动适应。</p><p>字节序问题不仅影响异种平台间传递数据，还影响诸如读写一些特殊格式文件之类程序的可移植性。此时使用预编译的方式来完成也是一个好办法。</p><h2 id="6-2-对齐时的填充字节"><a href="#6-2-对齐时的填充字节" class="headerlink" title="6.2. 对齐时的填充字节"></a>6.2. 对齐时的填充字节</h2><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span>  c;</span><br><span class="line">    <span class="keyword">int</span>   i;</span><br><span class="line">    <span class="keyword">short</span> s;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">A</span> <span class="title">a</span>;</span></span><br><span class="line">    a.c = <span class="number">1</span>; a.i = <span class="number">2</span>; a.s = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sizeof(A)=%d\n&quot;</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(struct A));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行后输出为 sizeof(A)=12。</p><h2 id="6-3-pragma-pack-语法说明"><a href="#6-3-pragma-pack-语法说明" class="headerlink" title="6.3. pragma pack 语法说明"></a>6.3. pragma pack 语法说明</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(push, 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(pop)</span></span><br></pre></td></tr></table></figure><p>1）<code>#pragma pack(n)</code></p><blockquote><p>该指令指定结构和联合成员的紧凑对齐。而一个完整的转换单元的结构和联合的紧凑对齐由<code>/Zp</code>选项设置。紧凑对齐用 pack 编译指示在数据说明层设置。该编译指示在其出现后的第一个结构或者联合声明处生效。该编译指示对定义无效。</p><p>当使用<code>#pragma pack (n)</code> 时，n 为 1、2、4、8 或 16。第一个结构成员后的每个结构成员都被存储在更小的成员类型或 n 字节界限内。如果使用无参量的<code>#pragma pack</code>，结构成员被紧凑为以<code>/Zp</code>指定的值。该缺省<code>/Zp</code>紧凑值为<code>/Zp 8</code>。</p></blockquote><p>2）编译器也支持以下增强型语法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span>  pack( [ [ &#123; push | pop &#125; , ] [identifier, ] ] [ n] )</span></span><br></pre></td></tr></table></figure><p>若不同的组件使用 pack 编译指示 指定不同的紧凑对齐, 这个语法允许你把程序组件组合为一个单独的转换单元。</p><p>带 push 参量的 pack 编译指示 的每次出现将当前的紧凑对齐存储到一个内部编译器堆栈中。编译指示的参量表从左到右读取。如果使用 push，则当前紧凑值被存储起来；如果给出一个 n 值，该值将成为新的紧凑值。若指定一个标识符，即选定一个名称，则该标识符将和这个新的的紧凑值联系起来。</p><p>带一个 pop 参量的 pack 编译指示 的每次出现都会检索内部编译器堆栈顶的值，并使该值为新的紧凑对齐值。如果使用 pop 参量且内部编译器堆栈是空的，则紧凑值为命令行给定的值，并将产生一个警告信息。若使用 pop 且指定一个 n 值，该值将成为新的紧凑值。</p><p>若使用 pop 且指定一个标识符，所有存储在堆栈中的值将从栈中删除，直到找到一个匹配的标识符。这个与标识符相关的紧凑值也从栈中移出，并且这个仅在标识符入栈之前存在的紧凑值成为新的紧凑值。如果未找到匹配的标识符, 将使用命令行设置的紧凑值，并且将产生一个一级警告。缺省紧凑对齐为 8。</p><p><strong>pack 编译指示 的新的增强功能让你在编写头文件时，确保在遇到该头文件的前后的紧凑值是一样的</strong>。</p><h2 id="6-4-Intel-关于内存对齐的说明"><a href="#6-4-Intel-关于内存对齐的说明" class="headerlink" title="6.4. Intel 关于内存对齐的说明"></a>6.4. Intel 关于内存对齐的说明</h2><p>以下内容节选自《Intel Architecture 32 Manual》。</p><p>字、双字和四字在自然边界上不需要在内存中对齐。（对于字、双字和四字来说，自然边界分别是偶数地址，可以被 4 整除的地址，和可以被 8 整除的地址。）</p><p>无论如何，为了提高程序的性能，数据结构(尤其是栈)应该尽可能地在自然边界上对齐。原因在于，为了访问未对齐的内存，处理器需要作两次内存访问；然而，对齐的内存访问仅需要一次访问。</p><p>一个字或双字操作数跨越了 4 字节边界，或者一个四字操作数跨越了 8 字节边界，被认为是未对齐的，从而需要两次总线周期来访问内存。一个字起始地址是奇数但却没有跨越字边界被认为是对齐的，能够在一个总线周期中被访问。</p><p>某些操作双四字的指令需要内存操作数在自然边界上对齐。如果操作数没有对齐，这些指令将会产生一个通用保护异常(#GP)。双四字的自然边界是能够被 16 整除的地址。其他操作双四字的指令允许未对齐的访问(不会产生通用保护异常)，然而，需要额外的内存总线周期来访问内存中未对齐的数据。</p><h2 id="6-5-不同架构处理器的对齐要求"><a href="#6-5-不同架构处理器的对齐要求" class="headerlink" title="6.5. 不同架构处理器的对齐要求"></a>6.5. 不同架构处理器的对齐要求</h2><p><strong>RISC 指令集处理器（MIPS/ARM）</strong>：这种处理器的设计以效率为先，要求所访问的多字节数据（short/int/long）的地址必须是此数据大小的倍数，如 short 数据地址应为 2 的倍数，long 数据地址应为 4 的倍数，也就是说是对齐的。</p><p><strong>CISC 指令集处理器(X86)</strong> ：没有上述限制。</p><p><strong>对齐处理策略</strong></p><p>访问非对齐多字节数据时(pack 数据)，编译器会将指令拆成多条(因为非对齐多字节数据可能跨越地址对齐边界)，保证每条指令都从正确的起始地址上获取数据，但也因此效率比较低。</p><p>访问对齐数据时则只用一条指令获取数据，因此对齐数据必须确保其起始地址是在对齐边界上。如果不是在对齐的边界，对 X86 CPU 是安全的，但对 MIPS/ARM 这种 RISC CPU 会出现<code>总线访问异常</code>。</p><p>为什么 X86 是安全的呢？</p><blockquote><p>X86 CPU 是如何进行数据对齐的？</p><p>X86 CPU 的<code>EFLAGS寄存器</code>中包含一个特殊的位标志，称为<code>AC</code>(对齐检查的英文缩写)标志。</p><p>按照默认设置，当 CPU 首次加电时，该标志被设置为 0。</p><p>当该标志是 0 时，CPU 能够自动执行它应该执行的操作，以便成功地访问未对齐的数据值。</p><p>然而，如果该标志被设置为 1，每当系统试图访问未对齐的数据时，CPU 就会发出一个<code>INT 17H中断</code>。</p><p>X86 的 Windows 2000 和 Windows 98 版本从来不改变这个 CPU 标志位。因此，当应用程序在 X86 处理器上运行时，你根本看不到应用程序中出现数据未对齐的异常条件。</p></blockquote><p>为什么 MIPS/ARM 不安全呢？</p><blockquote><p><strong>因为 MIPS/ARM CPU 不能自动处理对未对齐数据的访问</strong>。当未对齐的数据访问发生时，CPU 就会将这一情况通知操作系统。这时，操作系统将会确定它是否应该引发一个数据未对齐异常条件，对 vxworks 是会触发这个异常的。</p></blockquote><h2 id="6-6-ARM-下的对齐处理"><a href="#6-6-ARM-下的对齐处理" class="headerlink" title="6.6. ARM 下的对齐处理"></a>6.6. ARM 下的对齐处理</h2><p>有部分摘自 ARM 编译器文档对齐部分。</p><p>对齐的使用：</p><ol><li><p><code>__align(num)</code> 用于修改最高级别对象的字节边界。</p><blockquote><ul><li>在汇编中使用 LDRD 或 STRD 时就要用到此命令<code>__align(8)</code>进行修饰限制。来保证数据对象是相应对齐。</li><li>这个修饰对象的命令最大是 8 个字节限制，可以让 2 字节的对象进行 4 字节对齐，但不能让 4 字节的对象 2 字节对齐。</li><li><code>__align</code>是存储类修改，只修饰最高级类型对象，不能用于结构或者函数对象。</li></ul></blockquote></li><li><p><code>__packed</code> 进行一字节对齐。需注意：</p><blockquote><ul><li>不能对 packed 的对象进行对齐；</li><li>所有对象的读写访问都进行非对齐访问；</li><li>float 及包含 float 的结构联合及未用__packed 的对象将不能字节对齐；</li><li>__packed 对局部整型变量无影响。</li><li>强制由 unpacked 对象向 packed 对象转化时未定义。整型指针可以合法定义为 packed，如**packed int* p(**packed int 则没有意义)</li></ul></blockquote></li></ol><p>对齐或非对齐读写访问可能存在的问题：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义如下结构，b的起始地址不对齐。在栈中访问b可能有问题，因为栈上数据对齐访问</span></span><br><span class="line">__packed <span class="class"><span class="keyword">struct</span> <span class="title">STRUCT_TEST</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> a;</span><br><span class="line">    <span class="keyword">int</span>  b;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将下面的变量定义成全局静态(不在栈上)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *p;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">STRUCT_TEST</span> <span class="title">a</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    __packed <span class="keyword">int</span> *q; <span class="comment">//定义成__packed来修饰当前q指向为非对齐的数据地址下面的访问则可以</span></span><br><span class="line">    p = (<span class="keyword">char</span>*)&amp;a;</span><br><span class="line">    q = (<span class="keyword">int</span>*)(p + <span class="number">1</span>);</span><br><span class="line">    *q = <span class="number">0x87654321</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 得到赋值的汇编指令很清楚</span></span><br><span class="line"><span class="comment">    ldr      r5,0x20001590 ; = #0x12345678</span></span><br><span class="line"><span class="comment">    [0xe1a00005]   mov     r0,r5</span></span><br><span class="line"><span class="comment">    [0xeb0000b0]   bl      __rt_uwrite4  //在此处调用一个写4字节的操作函数</span></span><br><span class="line"><span class="comment">    [0xe5c10000]   strb    r0,[r1,#0]    //函数进行4次strb操作然后返回，正确访问数据</span></span><br><span class="line"><span class="comment">    [0xe1a02420]   mov     r2,r0,lsr #8</span></span><br><span class="line"><span class="comment">    [0xe5c12001]   strb    r2,[r1,#1]</span></span><br><span class="line"><span class="comment">    [0xe1a02820]   mov     r2,r0,lsr #16</span></span><br><span class="line"><span class="comment">    [0xe5c12002]   strb    r2,[r1,#2]</span></span><br><span class="line"><span class="comment">    [0xe1a02c20]   mov     r2,r0,lsr #24</span></span><br><span class="line"><span class="comment">    [0xe5c12003]   strb    r2,[r1,#3]</span></span><br><span class="line"><span class="comment">    [0xe1a0f00e]   mov     pc,r14</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    若q未加__packed修饰则汇编出来指令如下(会导致奇地址处访问失败)：</span></span><br><span class="line"><span class="comment">    [0xe59f2018]   ldr      r2,0x20001594 ; = #0x87654321</span></span><br><span class="line"><span class="comment">    [0xe5812000]   str     r2,[r1,#0]</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//这样很清楚地看到非对齐访问如何产生错误，以及如何消除非对齐访问带来的问题</span></span><br><span class="line">    <span class="comment">//也可看到非对齐访问和对齐访问的指令差异会导致效率问题</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-7-《The-C-Book》之位域篇"><a href="#6-7-《The-C-Book》之位域篇" class="headerlink" title="6.7. 《The C Book》之位域篇"></a>6.7. 《The C Book》之位域篇</h2><p>While we’re on the subject of structures, we might as well look at bitfields. They can only be declared inside a structure or a union, and allow you to specify some very small objects of a given number of bits in length. Their usefulness is limited and they aren’t seen in many programs, but we’ll deal with them anyway. This example should help to make things clear:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> field1 :<span class="number">4</span>; <span class="comment">//field 4 bits wide</span></span><br><span class="line">    <span class="keyword">unsigned</span>        :<span class="number">3</span>; <span class="comment">//unnamed 3 bit field(allow for padding)</span></span><br><span class="line">    <span class="keyword">signed</span> field2   :<span class="number">1</span>; <span class="comment">//one-bit field(can only be 0 or -1 in two&#x27;s complement)</span></span><br><span class="line">    <span class="keyword">unsigned</span>        :<span class="number">0</span>; <span class="comment">//align next field on a storage unit</span></span><br><span class="line">    <span class="keyword">unsigned</span> field3 :<span class="number">6</span>;</span><br><span class="line">&#125;full_of_fields;</span><br></pre></td></tr></table></figure><p>Each field is accessed and manipulated as if it were an ordinary member of a structure. The keywords signed and unsigned mean what you would expect, except that it is interesting to note that a 1-bit signed field on a two’s complement machine can only take the values 0 or -1. The declarations are permitted to include the const and volatile qualifiers.</p><p>The main use of bitfields is either to allow tight packing of data or to be able to specify the fields within some externally produced data files. C gives no guarantee of the ordering of fields within machine words, so if you do use them for the latter reason, you program will not only be non-portable, it will be compiler-dependent too. The Standard says that fields are packed into ‘storage units’, which are typically machine words. The packing order, and whether or not a bitfield may cross a storage unit boundary, are implementation defined. To force alignment to a storage unit boundary, a zero width field is used before the one that you want to have aligned.</p><p>Be careful using them. It can require a surprising amount of run-time code to manipulate these things and you can end up using more space than they save.</p><p>Bit fields do not have addresses—you can’t have pointers to them or arrays of them.</p><h2 id="6-8-C-语言字节相关面试题"><a href="#6-8-C-语言字节相关面试题" class="headerlink" title="6.8. C 语言字节相关面试题"></a>6.8. C 语言字节相关面试题</h2><h3 id="6-8-1-Intel-微软-C-语言面试题"><a href="#6-8-1-Intel-微软-C-语言面试题" class="headerlink" title="6.8.1. Intel/微软 C 语言面试题"></a>6.8.1. Intel/微软 C 语言面试题</h3><p>请看下面的问题：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(8)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">s1</span>&#123;</span></span><br><span class="line">    <span class="keyword">short</span> a; <span class="comment">// 按 min(1,8) 对齐</span></span><br><span class="line">    <span class="keyword">long</span>  b; <span class="comment">// 按 min(4,8) 对齐</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">s2</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    s1   d;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> e;  <span class="comment">//VC6.0下可能要用__int64代替双long</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack()</span></span><br></pre></td></tr></table></figure><p><strong>问题：</strong></p><ol><li>sizeof(s2) = ？</li><li>s2 的 s1 中的 a 后面空了几个字节接着是 b？</li></ol><p>分析：</p><blockquote><p>成员对齐有一个重要的条件，即<strong>每个成员分别按自己的方式对齐</strong>。</p><p>也就是说上面虽然指定了按 8 字节对齐，但并不是所有的成员都是以 8 字节对齐。其对齐的规则是：<strong>每个成员按 <code>其类型的对齐参数（通常是这个类型的大小）</code> 和 <code>指定对齐参数（这里是8字节）</code> 中较小的一个对齐，并且结构的长度必须为所用过的所有对齐参数的整数倍，不够就补空字节。</strong></p><p>s1 中成员 a 是 1 字节，默认按 1 字节对齐，而指定对齐参数为 8，两值中取 1，即 a 按 1 字节对齐；成员 b 是 4 个字节，默认按 4 字节对齐，这时就按 4 字节对齐，所以<code>sizeof(s1)应该为8</code>；</p><p>s2 中 c 和 s1 中 a 一样，按 1 字节对齐。而 d 是个 8 字节结构体，其默认对齐方式就是所有成员使用的对齐参数中最大的一个，s1 的就是 4。所以，成员 d 按 4 字节对齐。成员 e 是 8 个字节，默认按 8 字节对齐，和指定的一样，所以它对到 8 字节的边界上。这时，已经使用了 12 个字节，所以又添加 4 个字节的空，从第 16 个字节开始放置成员 e。此时长度为 24，并可被 8（成员 e 按 8 字节对齐）整除。这样，一共使用了 24 个字节。</p></blockquote><p>各个变量在内存中的布局为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c***aa**</span><br><span class="line">bbbb****</span><br><span class="line">dddddddd ——这种“矩阵写法”很方便看出结构体实际大小！</span><br></pre></td></tr></table></figure><p>因此，<code>sizeof(S2)结果为24，a后面空了2个字节接着是b</code>。</p><p>这里有三点很重要：</p><ol><li>每个成员分别按自己的方式对齐，并能最小化长度；</li><li>复杂类型(如结构)的默认对齐方式是其最长的成员的对齐方式，这样在成员是复杂类型时可以最小化长度；</li><li>对齐后的长度必须是成员中最大对齐参数的整数倍，这样在处理数组时可保证每一项都边界对齐。</li></ol><p>还要注意，“空结构体”(不含数据成员)的大小为 1，而不是 0。试想如果不占空间的话，一个空结构体变量如何取地址、两个不同的空结构体变量又如何得以区分呢？</p><h3 id="6-8-2-上海网宿科技面试题"><a href="#6-8-2-上海网宿科技面试题" class="headerlink" title="6.8.2 上海网宿科技面试题"></a>6.8.2 上海网宿科技面试题</h3><p>假设硬件平台是 intel x86(little endian)，以下程序输出什么：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设硬件平台是intel x86(little endian)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="keyword">uint32_t</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inet_ntoa</span><span class="params">(<span class="keyword">uint32_t</span> in)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>  b[<span class="number">18</span>];</span><br><span class="line">    <span class="keyword">register</span>  <span class="keyword">char</span>  *p;</span><br><span class="line">    p = (<span class="keyword">char</span> *)∈</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UC(b) (((int)b)&amp;0xff) <span class="comment">//byte转换为无符号int型</span></span></span><br><span class="line">    <span class="built_in">sprintf</span>(b, <span class="string">&quot;%d.%d.%d.%d\n&quot;</span>, <span class="built_in">UC</span>(p[<span class="number">0</span>]), <span class="built_in">UC</span>(p[<span class="number">1</span>]), <span class="built_in">UC</span>(p[<span class="number">2</span>]), <span class="built_in">UC</span>(p[<span class="number">3</span>]));</span><br><span class="line">    <span class="built_in">printf</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">inet_ntoa</span>(<span class="number">0x12345678</span>);</span><br><span class="line">    <span class="built_in">inet_ntoa</span>(<span class="number">0x87654321</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先看如下程序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0x12345678</span>;</span><br><span class="line">    <span class="keyword">char</span> *p = (<span class="keyword">char</span> *)&amp;a;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">20</span>];</span><br><span class="line">    <span class="built_in">sprintf</span>(str,<span class="string">&quot;%d.%d.%d.%d\n&quot;</span>, p[<span class="number">0</span>], p[<span class="number">1</span>], p[<span class="number">2</span>], p[<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(str);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>按照小字节序的规则，变量 a 在计算机中存储方式为：</strong></p><blockquote><p>高地址方向 ————–&gt; 低地址方向<br>0x12 0x34 0x56 0x78<br>p[3] p[2] p[1] p[0]</p></blockquote><p>注意：<strong>p 并不是指向 0x12345678 的开头 0x12，而是指向 0x78</strong>。p[0]到 p[1]的操作是&amp;p[0]+1，因此 p[1]地址比 p[0]地址大。输出结果为<code>120.86.52.18</code>。</p><p>反过来的话，令<code>int a = 0x87654321</code>，则输出结果为<code>33.67.101.-121</code>。</p><p>为什么有负值呢？</p><blockquote><p>因为系统默认的 char 是有符号的，本来是 0x87 也就是 135，大于 127 因此就减去 256 得到-121。</p></blockquote><p>想要得到正值的话只需将<code>char *p = (char *)&amp;a</code>改为<code>unsigned char *p = (unsigned char *)&amp;a</code>即可。</p><p>综上不难得出，网宿面试题的答案为<code>120.86.52.18</code>和<code>33.67.101.135</code>。</p><blockquote><p><strong>说明：</strong><br>本文转载自 <a href="https://www.cnblogs.com/clover-toeic/p/3853132.html">https://www.cnblogs.com/clover-toeic/p/3853132.html</a></p></blockquote><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 字节对齐 </tag>
            
            <tag> 字节序 </tag>
            
            <tag> 网络序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序人生 | C语言字节对齐问题详解 - 对齐/字节序/位序/网络序等（上）</title>
      <link href="/2014/07/21/c-language-byte-alignment-problem-in-detail-part-1/"/>
      <url>/2014/07/21/c-language-byte-alignment-problem-in-detail-part-1/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p><strong>本文首发于 2014-07-21 15:32:28</strong></p></blockquote><h1 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h1><p>考虑下面的结构体定义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span>  c1;</span><br><span class="line">    <span class="keyword">short</span> s;</span><br><span class="line">    <span class="keyword">char</span>  c2;</span><br><span class="line">    <span class="keyword">int</span>   i;</span><br><span class="line">&#125;T_FOO;</span><br></pre></td></tr></table></figure><p>假设这个结构体的成员在内存中是紧凑排列的，且 c1 的起始地址是 0，则 s 的地址就是 1，c2 的地址是 3，i 的地址是 4。</p><p>现在，我们编写一个简单的程序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    T_FOO a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c1 -&gt; %d, s -&gt; %d, c2 -&gt; %d, i -&gt; %d\n&quot;</span>,</span><br><span class="line">          (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(<span class="keyword">void</span>*)&amp;a.c1 - (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(<span class="keyword">void</span>*)&amp;a,</span><br><span class="line">          (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(<span class="keyword">void</span>*)&amp;a.s  - (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(<span class="keyword">void</span>*)&amp;a,</span><br><span class="line">          (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(<span class="keyword">void</span>*)&amp;a.c2 - (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(<span class="keyword">void</span>*)&amp;a,</span><br><span class="line">          (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(<span class="keyword">void</span>*)&amp;a.i  - (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(<span class="keyword">void</span>*)&amp;a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后输出：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c1 -&gt; <span class="number">0</span>, s -&gt; <span class="number">2</span>, c2 -&gt; <span class="number">4</span>, i -&gt; <span class="number">8</span></span><br></pre></td></tr></table></figure><p>为什么会这样？这就是字节对齐导致的问题。</p><p>本文在参考诸多资料的基础上，详细介绍常见的字节对齐问题。因成文较早，资料来源大多已不可考，敬请谅解。</p><h1 id="2-什么是字节对齐"><a href="#2-什么是字节对齐" class="headerlink" title="2. 什么是字节对齐"></a>2. 什么是字节对齐</h1><p>现代计算机中，内存空间按照字节划分，理论上可以从任何起始地址访问任意类型的变量，但实际上在访问特定类型变量时经常在特定的内存地址访问，这就需要各种类型数据按照一定的规则在空间上排列，而不是一个接一个地顺序存放，这就是对齐。</p><h1 id="3-对齐的原因和作用"><a href="#3-对齐的原因和作用" class="headerlink" title="3. 对齐的原因和作用"></a>3. 对齐的原因和作用</h1><ol><li><strong>不同硬件平台对存储空间的处理上存在很大的不同</strong>。某些平台对特定类型的数据只能从特定地址开始存取，而不允许其在内存中任意存放。例如 Motorola 68000 处理器不允许 16 位的字存放在奇地址，否则会触发异常，因此在这种架构下编程必须保证字节对齐。</li><li><strong>如果不按照平台要求对数据存放进行对齐，会带来存取效率上的损失</strong>。比如 32 位的 Intel 处理器通过总线访问(包括读和写)内存数据。每个总线周期从偶地址开始访问 32 位内存数据，内存数据以字节为单位存放。如果一个 32 位的数据没有存放在 4 字节整除的内存地址处，那么处理器就需要 2 个总线周期对其进行访问，显然访问效率下降很多。因此，<strong>通过合理的内存对齐可以提高访问效率。</strong> 为使 CPU 能够对数据进行快速访问，数据的起始地址应具有“对齐”特性。比如 4 字节数据的起始地址应位于 4 字节边界上，即起始地址能够被 4 整除。</li><li><strong>合理利用字节对齐还可以有效地节省存储空间</strong>。但要注意，在 32 位机中使用 1 字节或 2 字节对齐，反而会降低变量访问速度，因此，<strong>需要考虑处理器类型</strong>。同时，<strong>还应考虑编译器的类型</strong>，<code>在VC/C++和GNU GCC中都是默认是4字节对齐</code>。</li></ol><h1 id="4-对齐的分类和准则"><a href="#4-对齐的分类和准则" class="headerlink" title="4. 对齐的分类和准则"></a>4. 对齐的分类和准则</h1><p>本小节主要基于 Intel X86 架构介绍结构体对齐和栈内存对齐，<strong>位域</strong>本质上为结构体类型。</p><p><strong>对于 Intel X86 平台，每次分配内存应该是从 4 的整数倍地址开始分配，无论是对结构体变量还是简单类型的变量。</strong></p><h2 id="4-1-结构体对齐"><a href="#4-1-结构体对齐" class="headerlink" title="4.1. 结构体对齐"></a>4.1. 结构体对齐</h2><p>在 C 语言中，结构体是种复合数据类型，其构成元素既可以是基本数据类型（int、long、float 等）的变量，也可以是一些复合数据类型（数组、结构体、联合等)的数据单元。编译器为结构体的每个成员按照其自然边界（alignment）分配空间。各成员按照它们被声明的顺序在内存中顺序存储，<strong>第一个成员的地址和整个结构的地址相同。</strong></p><p>字节对齐的问题主要就是针对结构体。</p><h3 id="4-1-1-简单示例"><a href="#4-1-1-简单示例" class="headerlink" title="4.1.1. 简单示例"></a>4.1.1. 简单示例</h3><p>先看个简单的例子（32 位，X86 处理器，GCC 编译器）：</p><p>【例 1】假设结构体定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span>    a;</span><br><span class="line">    <span class="keyword">char</span>   b;</span><br><span class="line">    <span class="keyword">short</span>  c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span>   b;</span><br><span class="line">    <span class="keyword">int</span>    a;</span><br><span class="line">    <span class="keyword">short</span>  c;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>已知 32 位机器上各数据类型的长度为：char 为 1 字节、short 为 2 字节、int 为 4 字节、long 为 4 字节、float 为 4 字节、double 为 8 字节。那么上面两个结构体大小如何呢？</p><p>结果是：<strong>sizeof(strcut A)值为 8；sizeof(struct B)的值却是 12</strong>。</p><p>结构体 A 和 B 中字段一样，包含一个 4 字节的 int 数据，一个 1 字节 char 数据和一个 2 字节 short 数据，只是顺序不同。按理说 A 和 B 大小应该都是 7 字节，之所以出现上述结果，就是因为编译器要对数据成员在空间上进行对齐。</p><h3 id="4-1-2-对齐准则"><a href="#4-1-2-对齐准则" class="headerlink" title="4.1.2. 对齐准则"></a>4.1.2. 对齐准则</h3><p>先来看四个重要的基本概念：</p><ol><li><p><strong>数据类型自身的对齐值</strong>：char 型数据自身对齐值为 1 字节，short 型数据为 2 字节，int/float 型为 4 字节，double 型为 8 字节。</p></li><li><p><strong>结构体或类的自身对齐值</strong>：<code>其成员中自身对齐值最大的那个值</code>。</p></li><li><p><strong>指定对齐值</strong>：<code>#pragma pack (value)</code> 指定对齐值 value。</p></li><li><p><strong>数据成员、结构体和类的有效对齐值</strong>：自身对齐值和指定对齐值中较小者，即<code>有效对齐值=min&#123;自身对齐值，当前指定的pack值&#125;</code>。</p></li></ol><p>基于上面这些原则，就可以方便地讨论具体数据结构的成员和其自身的对齐方式。</p><p>其中，有效对齐值 N 是最终用来决定数据存放地址方式的值。有效对齐值 N 表示“对齐在 N 上”，即该数据的<code>存放起始地址 % N = 0</code>。而数据结构中的数据变量都是按定义的先后顺序存放。第一个数据变量的起始地址就是数据结构的起始地址。<strong>结构体的成员变量要对齐存放，结构体本身也要根据自身的有效对齐值圆整</strong>（即<code>结构体成员变量占用总长度为结构体有效对齐值的整数倍</code>）。</p><p>以此分析 3.1.1 节中的结构体 B：</p><blockquote><p>假设 B 从地址空间 0x0000 开始存放，且指定对齐值默认为 4(4 字节对齐)。成员变量 b 的自身对齐值是 1，比默认指定对齐值 4 小，所以其有效对齐值为 1，其存放地址 0x0000 符合 0x0000%1=0。</p><p>成员变量 a 自身对齐值为 4，所以有效对齐值也为 4，只能存放在起始地址为 0x0004~0x0007 四个连续的字节空间中，符合 0x0004%4=0 且紧靠第一个变量。</p><p>变量 c 自身对齐值为 2，所以有效对齐值也是 2，可存放在 0x0008~0x0009 两个字节空间中，符合 0x0008%2=0。</p><p>所以从 0x0000~0x0009 存放的都是 B 内容。</p><p>再看数据结构 B 的自身对齐值为其变量中最大对齐值（这里是 b），也就是 4，所以结构体的有效对齐值也是 4。<strong>根据结构体圆整的要求，0x0000~0x0009=10 字节，(10 ＋ 2)％4 ＝ 0</strong>。</p><p>所以 0x0000A~0x000B 也为结构体 B 所占用。故 B 从 0x0000 到 0x000B，共有 12 个字节，sizeof(struct B)=12。</p></blockquote><p><strong>之所以编译器在后面补充 2 个字节，是为了实现结构数组的存取效率</strong>。试想如果定义一个结构 B 的数组，那么第一个结构起始地址是 0 没有问题，但是第二个结构呢？</p><p>按照数组的定义，数组中所有元素都紧挨着。如果我们不把结构体大小补充为 4 的整数倍，那么下一个结构的起始地址将是 0x0000A，这显然不能满足结构的地址对齐。因此要把结构体补充成有效对齐大小的整数倍。</p><p>其实对于 char/short/int/float/double 等已有类型的自身对齐值也是基于数组考虑的，只是因为这些类型的长度已知，所以他们的自身对齐值也就已知。</p><p>上面的概念非常便于理解，不过个人还是更喜欢下面的对齐准则。</p><p><strong>结构体字节对齐的细节和具体编译器实现相关，但一般而言满足三个准则：</strong></p><ol><li><strong>结构体变量的首地址能够被其最宽基本类型成员的大小所整除；</strong></li><li><strong>结构体每个成员相对结构体首地址的偏移量(offset)都是成员大小的整数倍，如有需要编译器会在成员之间加上填充字节(internal adding)；</strong></li><li><strong>结构体的总大小为结构体最宽基本类型成员大小的整数倍，如有需要编译器会在最末一个成员之后加上填充字节{trailing padding}。</strong></li></ol><p>对于以上规则的说明如下：</p><ul><li>第一条：编译器在给结构体开辟空间时，首先找到结构体中最宽的基本数据类型，然后寻找内存地址能被该基本数据类型所整除的位置，作为结构体的首地址。<code>将这个最宽的基本数据类型的大小作为上面介绍的对齐模数</code>。</li><li>第二条：为结构体的一个成员开辟空间之前，<code>编译器首先检查预开辟空间的首地址相对于结构体首地址的偏移是否是本成员大小的整数倍</code>，若是，则存放本成员，反之，则在本成员和上一个成员之间填充一定的字节，以达到整数倍的要求，也就是将预开辟空间的首地址后移几个字节。</li><li>第三条：<code>结构体总大小是包括填充字节</code>，最后一个成员满足上面两条以外，还必须满足第三条，否则就必须在最后填充几个字节以达到本条要求。</li></ul><p>【例 2】假设 4 字节对齐，以下程序的输出结果是多少？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* OFFSET宏定义可取得指定结构体某成员在结构体内部的偏移 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OFFSET(st, field) (size_t)&amp;(((st*)0)-&gt;field)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span>  a;</span><br><span class="line">    <span class="keyword">short</span> b;</span><br><span class="line">    <span class="keyword">char</span>  c;</span><br><span class="line">    <span class="keyword">int</span>   d;</span><br><span class="line">    <span class="keyword">char</span>  e[<span class="number">3</span>];</span><br><span class="line">&#125;T_Test;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Size = %d\n  a-%d, b-%d, c-%d, d-%d\n  e[0]-%d, e[1]-%d, e[2]-%d\n&quot;</span>,</span><br><span class="line">           <span class="built_in"><span class="keyword">sizeof</span></span>(T_Test), <span class="built_in">OFFSET</span>(T_Test, a), <span class="built_in">OFFSET</span>(T_Test, b),</span><br><span class="line">           <span class="built_in">OFFSET</span>(T_Test, c), <span class="built_in">OFFSET</span>(T_Test, d), <span class="built_in">OFFSET</span>(T_Test, e[<span class="number">0</span>]),</span><br><span class="line">           <span class="built_in">OFFSET</span>(T_Test, e[<span class="number">1</span>]),<span class="built_in">OFFSET</span>(T_Test, e[<span class="number">2</span>]));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行后输出如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Size = 16</span><br><span class="line">a-0, b-2, c-4, d-8</span><br><span class="line">e[0]-12, e[1]-13, e[2]-14</span><br></pre></td></tr></table></figure><p><strong>下面来具体分析：</strong></p><blockquote><p>首先 char a 占用 1 个字节，没问题。</p><p>short b 本身占用 2 个字节，根据上面准则 2，需要在 b 和 a 之间填充 1 个字节。</p><p>char c 占用 1 个字节，没问题。</p><p>int d 本身占用 4 个字节，根据准则 2，需要在 d 和 c 之间填充 3 个字节。</p><p>char e[3]；本身占用 3 个字节，根据原则 3，需要在其后补充 1 个字节。</p><p>因此，sizeof(T_Test) = 1 + 1 + 2 + 1 + 3 + 4 + 3 + 1 = 16 字节。</p></blockquote><h3 id="4-1-3-对齐的隐患"><a href="#4-1-3-对齐的隐患" class="headerlink" title="4.1.3. 对齐的隐患"></a>4.1.3. 对齐的隐患</h3><h4 id="4-1-3-1-数据类型转换"><a href="#4-1-3-1-数据类型转换" class="headerlink" title="4.1.3.1. 数据类型转换"></a>4.1.3.1. 数据类型转换</h4><p><strong>代码中关于对齐的隐患，很多是隐式的</strong>。例如，在强制类型转换的时候：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0x12345678</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *p = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)&amp;i;</span><br><span class="line">    *p = <span class="number">0x00</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> *p1 = (<span class="keyword">unsigned</span> <span class="keyword">short</span> *)(p+<span class="number">1</span>);</span><br><span class="line">    *p1 = <span class="number">0x0000</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后两句代码，<code>从奇数边界去访问 unsigned short 型变量，显然不符合对齐的规定。在X86上，类似的操作只会影响效率；但在MIPS或者SPARC上可能导致error，因为它们要求必须字节对齐</code>。</p><p>又如对于 3.1.1 节的结构体 struct B，定义如下函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Func</span><span class="params">(struct B *p)</span></span>&#123;</span><br><span class="line">     <span class="comment">//Code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在函数体内如果直接访问 p-&gt;a，则很可能会异常。因为 MIPS 认为 a 是 int，其地址应该是 4 的倍数，但 p-&gt;a 的地址很可能不是 4 的倍数。</p><p><strong>如果 p 的地址不在对齐边界上就可能出问题</strong>，比如 p 来自一个跨 CPU 的数据包(多种数据类型的数据被按顺序放置在一个数据包中传输)，或 p 是经过指针移位算出来的。因此要特别注意跨 CPU 数据的接口函数对接口输入数据的处理，以及指针移位再强制转换为结构指针进行访问时的安全性。</p><p><strong>解决方式如下：</strong></p><ol><li>定义一个此结构的局部变量，用<code>memmove</code>方式将数据拷贝进来。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Func</span><span class="params">(struct B *p)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">B</span> <span class="title">tData</span>;</span></span><br><span class="line">    <span class="built_in">memmove</span>(&amp;tData, p, <span class="built_in"><span class="keyword">sizeof</span></span>(struct B));</span><br><span class="line">     <span class="comment">//此后可安全访问tData.a，因为编译器已将tData分配在正确的起始地址上</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<strong>如果能确定 p 的起始地址没问题，则不需要这么处理；如果不能确定（比如跨 CPU 输入数据、或指针移位运算出来的数据），则需要这样处理。</strong> 2. 用<code>#pragma pack (1)</code>将 STRUCT_T 定义为 1 字节对齐方式。</p><h4 id="4-1-3-2-处理器间数据通信"><a href="#4-1-3-2-处理器间数据通信" class="headerlink" title="4.1.3.2. 处理器间数据通信"></a>4.1.3.2. 处理器间数据通信</h4><p><strong>处理器间通过消息（对于 C/C++而言就是结构体）进行通信时，需要注意字节对齐以及字节序的问题。</strong></p><p>大多数编译器提供一些内存选项供用户使用。这样用户可以根据处理器的情况选择不同的字节对齐方式。例如：C/C++编译器提供的<code>#pragma pack(n) n=1，2，4</code>等，让编译器在生成目标文件时，<code>使内存数据按照指定的方式排布在1，2，4等字节整除的内存地址处</code>。</p><p>然而在不同编译平台或处理器上，字节对齐会造成消息结构长度的变化。<strong>编译器为了使字节对齐可能会对消息结构体进行填充，不同编译平台可能填充为不同的形式，大大增加处理器间数据通信的风险。</strong></p><p>下面以 32 位处理器为例，提出一种内存对齐方法以解决上述问题。</p><p>对于本地使用的数据结构，为提高内存访问效率，采用 4 字节对齐方式；同时为了减少内存的开销，合理安排结构体成员的位置，减少 4 字节对齐导致的成员之间的空隙，降低内存开销。</p><p>对于处理器之间的数据结构，需要保证消息长度不会因不同编译平台或处理器而导致消息结构体长度发生变化，使用 1 字节对齐方式对消息结构进行紧缩；为保证处理器之间的消息数据结构的内存访问效率，采用字节填充的方式自己对消息中成员进行 4 字节对齐。</p><p>数据结构的成员位置要兼顾成员之间的关系、数据访问效率和空间利用率。<strong>顺序安排原则是：4 字节的放在最前面，2 字节的紧接最后一个 4 字节成员，1 字节紧接最后一个 2 字节成员，填充字节放在最后。</strong></p><p>举例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tag_T_MSG</span>&#123;</span></span><br><span class="line">    <span class="keyword">long</span>  ParaA;</span><br><span class="line">    <span class="keyword">long</span>  ParaB;</span><br><span class="line">    <span class="keyword">short</span> ParaC；</span><br><span class="line">    <span class="keyword">char</span>  ParaD;</span><br><span class="line">    <span class="keyword">char</span>  Pad;   <span class="comment">//填充字节</span></span><br><span class="line">&#125;T_MSG;</span><br></pre></td></tr></table></figure><h4 id="4-1-3-3-排查对齐问题"><a href="#4-1-3-3-排查对齐问题" class="headerlink" title="4.1.3.3. 排查对齐问题"></a>4.1.3.3. 排查对齐问题</h4><p>如果出现对齐或者赋值问题，可查看：</p><ol><li>编译器的字节序大小端设置；</li><li>处理器架构本身是否支持非对齐访问；<blockquote><p>如果支持，则看是否设置对齐；</p><p>如果没有，则看访问时是否需要加某些特殊的修饰来标志其特殊访问操作。</p></blockquote></li></ol><h3 id="4-1-4-更改对齐方式"><a href="#4-1-4-更改对齐方式" class="headerlink" title="4.1.4. 更改对齐方式"></a>4.1.4. 更改对齐方式</h3><p>主要是<strong>更改 C 编译器的缺省字节对齐方式</strong>。</p><p>在缺省情况下，C 编译器为每一个变量或是数据单元按其自然对界条件分配空间。一般地，可以通过下面的方法来改变缺省的对界条件：</p><ul><li>使用<code>伪指令#pragma pack(n)</code>：C 编译器将按照 n 个字节对齐；</li><li>使用<code>伪指令#pragma pack()</code>：取消自定义字节对齐方式。</li></ul><p>另外，还有如下的一种方式（GCC 特有语法）：</p><ul><li><code>__attribute__((aligned (n)))</code>：让所作用的结构成员对齐在 n 字节自然边界上。如果结构体中有成员的长度大于 n，则按照最大成员的长度来对齐。</li><li><code>__attribute__((packed))</code>：取消结构在编译过程中的优化对齐，按照实际占用字节数进行对齐。</li></ul><blockquote><p><strong>注意：</strong></p><p><code>__attribute__</code>机制是 GCC 的一大特色，可以设置函数属性(Function Attribute)、变量属性(Variable Attribute)和类型属性(Type Attribute)。</p></blockquote><p><strong>在编码时，可用<code>#pragma pack</code>动态修改对齐值</strong>。具体语法说明见附录 5.3 节。</p><p>自定义对齐值后要用<code>#pragma pack()</code>来还原，否则会对后面的结构造成影响。</p><p>【例 3】分析如下结构体 C：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(2)  <span class="comment">//指定按2字节对齐</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">C</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span>  b;</span><br><span class="line">    <span class="keyword">int</span>   a;</span><br><span class="line">    <span class="keyword">short</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack()   <span class="comment">//取消指定对齐，恢复缺省对齐</span></span></span><br></pre></td></tr></table></figure><blockquote><p>变量 b 自身对齐值为 1，指定对齐值为 2，所以有效对齐值为 1，假设 C 从 0x0000 开始，则 b 存放在 0x0000，符合 0x0000%1=0；</p><p>变量 a 自身对齐值为 4，指定对齐值为 2，所以有效对齐值为 2，顺序存放在 0x0002~0x0005 四个连续字节中，符合 0x0002%2=0。</p><p>变量 c 的自身对齐值为 2，所以有效对齐值为 2，顺序存放在 0x0006~0x0007 中，符合 0x0006%2=0。</p><p>所以从 0x0000 到 0x00007 共 8 字节存放的是 C 的变量。</p><p>C 的自身对齐值为 4，所以其有效对齐值为 2。又 8%2=0，C 只占用 0x0000~0x0007 的八个字节。所以 sizeof(struct C)=8。</p></blockquote><p>注意：<strong>结构体对齐到的字节数并非完全取决于当前指定的 pack 值</strong>，例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(8)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">D</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span>  b;</span><br><span class="line">    <span class="keyword">short</span> a;</span><br><span class="line">    <span class="keyword">char</span>  c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack()</span></span><br></pre></td></tr></table></figure><p>虽然<code>#pragma pack(8)</code>，但依然按照 2 字节对齐，所以 sizeof(struct D) 的值为 6。所以，<strong>对齐到的字节数=min｛当前指定的 pack 值，最大成员大小｝</strong>。</p><p>另外，GNU GCC 编译器中按 1 字节对齐可写为以下形式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GNUC_PACKED __attribute__((packed))</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">C</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span>  b;</span><br><span class="line">    <span class="keyword">int</span>   a;</span><br><span class="line">    <span class="keyword">short</span> c;</span><br><span class="line">&#125;GNUC_PACKED;</span><br></pre></td></tr></table></figure><p>此时 sizeof(struct C) 的值为 7。</p><h2 id="4-2-栈内存对齐"><a href="#4-2-栈内存对齐" class="headerlink" title="4.2. 栈内存对齐"></a>4.2. 栈内存对齐</h2><p><strong>在 VC/C++中，栈的对齐方式不受结构体成员对齐选项的影响，总是保持对齐在 4 字节边界上</strong>。</p><p>【例 4】分析栈内存对齐方式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(push, 1)  <span class="comment">//后面可改为1, 2, 4, 8</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StrtE</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> m1;</span><br><span class="line">    <span class="keyword">long</span> m2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(pop)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a;</span><br><span class="line">    <span class="keyword">short</span> b;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">double</span> d[<span class="number">2</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">StrtE</span> <span class="title">s</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a    address:   %p\n&quot;</span>, &amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;b    address:   %p\n&quot;</span>, &amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c    address:   %p\n&quot;</span>, &amp;c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;d[0] address:   %p\n&quot;</span>, &amp;(d[<span class="number">0</span>]));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;d[1] address:   %p\n&quot;</span>, &amp;(d[<span class="number">1</span>]));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s    address:   %p\n&quot;</span>, &amp;s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s.m2 address:   %p\n&quot;</span>, &amp;(s.m2));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a    address:   0xbfc4cfff</span><br><span class="line">b    address:   0xbfc4cffc</span><br><span class="line">c    address:   0xbfc4cff8</span><br><span class="line">d[0] address:   0xbfc4cfe8</span><br><span class="line">d[1] address:   0xbfc4cff0</span><br><span class="line">s    address:   0xbfc4cfe3</span><br><span class="line">s.m2 address:   0xbfc4cfe4</span><br></pre></td></tr></table></figure><p>可以看出都是对齐到 4 字节，并且前面的 char 和 short 并没有被凑在一起（成 4 字节），这和结构体内的处理是不同的。</p><p>至于为什么输出的地址值是变小的，这是因为该平台下的栈是倒着“生长”的。</p><h2 id="4-3-位域对齐"><a href="#4-3-位域对齐" class="headerlink" title="4.3. 位域对齐"></a>4.3. 位域对齐</h2><h3 id="4-3-1-位域定义"><a href="#4-3-1-位域定义" class="headerlink" title="4.3.1. 位域定义"></a>4.3.1. 位域定义</h3><p>有些信息在存储时，并不需要占用一个完整的字节，而只需占几个或一个二进制位。例如在存放一个开关量时，只有 0 和 1 两种状态，用一位二进位即可。为了节省存储空间和处理简便，C 语言提供了一种数据结构，称为<strong>位域</strong>或<strong>位段</strong>。</p><p>位域是一种特殊的结构成员或联合成员（即只能用在结构或联合中），用于指定该成员在内存存储时所占用的位数，从而在机器内更紧凑地表示数据。每个位域有一个域名，允许在程序中按域名操作对应的位，这样就可用一个字节的二进制位域来表示几个不同的对象。</p><p>位域定义与结构定义类似，其形式为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 位域结构名</span></span><br><span class="line"><span class="class">       &#123;</span> 位域列表 &#125;;</span><br></pre></td></tr></table></figure><p>其中位域列表的形式为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类型说明符位域名：位域长度</span><br></pre></td></tr></table></figure><p>位域的使用和结构成员的使用相同，其一般形式为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">位域变量名.位域名</span><br></pre></td></tr></table></figure><p>位域允许用各种格式输出。</p><p><strong>位域在本质上就是一种结构类型，不过其成员是按二进位分配的</strong>。位域变量的说明与结构变量说明的方式相同，可先定义后说明、同时定义说明或直接说明。</p><p><strong>位域的使用主要为下面两种情况：</strong></p><ol><li>当机器可用内存空间较少而使用位域可大量节省内存时。例如：把结构作为大数组的元素时。</li><li>当需要把一结构体或联合映射成某预定的组织结构时。例如：需要访问字节内的特定位时。</li></ol><h3 id="4-3-2-对齐准则"><a href="#4-3-2-对齐准则" class="headerlink" title="4.3.2. 对齐准则"></a>4.3.2. 对齐准则</h3><p><code>位域成员不能单独被取sizeof值</code>。下面主要讨论含有位域的结构体的 sizeof。</p><p>C99 规定 int、unsigned int 和 bool 可以作为位域类型，但编译器几乎都对此作了扩展，允许其它类型的存在。位域作为嵌入式系统中非常常见的一种编程工具，优点在于压缩程序的存储空间。</p><p><strong>其对齐规则大致为：</strong></p><ol><li>如果相邻位域字段的类型相同，且其位宽之和小于类型的 sizeof 大小，则后面的字段将紧邻前一个字段存储，直到不能容纳为止；</li><li>如果相邻位域字段的类型相同，但其位宽之和大于类型的 sizeof 大小，则后面的字段将从新的存储单元开始，其偏移量为其类型大小的整数倍；</li><li><strong>如果相邻的位域字段的类型不同，则各编译器的具体实现有差异，VC6 采取不压缩方式，Dev-C++和 GCC 采取压缩方式</strong>；</li><li>如果位域字段之间穿插着非位域字段，则不进行压缩；</li><li><strong>整个结构体的总大小为最宽基本类型成员大小的整数倍，而位域则按照其最宽类型字节数对齐</strong>。</li></ol><p>【例 5】</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BitField</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> element1  : <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> element2  : <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">char</span> element3  : <span class="number">5</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>位域类型为 char，第 1 个字节仅能容纳下 element1 和 element2，所以 element1 和 element2 被压缩到第 1 个字节中，而 element3 只能从下一个字节开始。因此 sizeof(BitField) 的结果为 2。</p><p>【例 6】</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BitField1</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> element1   : <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">short</span> element2  : <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">char</span> element3   : <span class="number">7</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于相邻位域类型不同，在 VC6 中其 sizeof 为 6，在 Dev-C++中为 2。</p><p>【例 7】</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BitField2</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> element1  : <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">char</span> element2  ;</span><br><span class="line">    <span class="keyword">char</span> element3  : <span class="number">5</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>非位域字段穿插在其中，不会产生压缩，在 VC6 和 Dev-C++中得到的大小均为 3。</p><p>【例 8】</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StructBitField</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> element1   : <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> element2   : <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> element3   : <span class="number">29</span>;</span><br><span class="line">    <span class="keyword">int</span> element4   : <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">char</span> element5  :<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">char</span> stelement;  <span class="comment">//在含位域的结构或联合中也可同时说明普通成员</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>位域中最宽类型 int 的字节数为 4，因此结构体按 4 字节对齐，在 VC6 中其 sizeof 为 16。</p><h3 id="4-3-3-注意事项"><a href="#4-3-3-注意事项" class="headerlink" title="4.3.3. 注意事项"></a>4.3.3. 注意事项</h3><p>关于位域操作有几点需要注意：</p><p>1）<code>位域的地址不能访问，因此不允许将&amp;运算符用于位域</code>。不能使用指向位域的指针也不能使用位域的数组（数组是种特殊指针）。例如，scanf 函数无法直接向位域中存储数据：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BitField1</span> <span class="title">tBit</span>;</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;tBit.element2); <span class="comment">//error: cannot take address of bit-field &#x27;element2&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可用 scanf 函数将输入读入到一个普通的整型变量中，然后再赋值给 tBit.element2。</p><p>2）<code>位域不能作为函数返回的结果</code>。</p><p>3）<code>位域以定义的类型为单位，且位域的长度不能够超过所定义类型的长度</code>。例如：定义 int a:33 是不允许的。</p><p>4）<code>位域可以不指定位域名，但不能访问无名的位域</code>。</p><blockquote><p><strong>位域可以无位域名，只用作填充或调整位置，占位大小取决于该类型</strong>。例如，<code>char :0 表示整个位域向后推一个字节</code>，即该无名位域后的下一个位域从下一个字节开始存放，同理 <code>short :0</code> 和 <code>int :0</code> 分别表示整个位域向后推两个和四个字节。</p><p>当空位域的长度为具体数值 N 时(如 int :2)，该变量仅用来占位 N 位。</p></blockquote><p>【例 9】</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BitField3</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> element1  : <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">char</span>  :<span class="number">6</span>;</span><br><span class="line">    <span class="keyword">char</span> element3  : <span class="number">5</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结构体大小为 3。因为 element1 占 3 位，后面要保留 6 位而 char 为 8 位，所以保留的 6 位只能放到第 2 个字节。同样 element3 只能放到第 3 字节。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BitField4</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> element1  : <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">char</span>  :<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> element3  : <span class="number">5</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>长度为 0 的位域告诉编译器将下一个位域放在一个存储单元的起始位置。如上，编译器会给成员 element1 分配 3 位，接着跳过余下的 4 位到下一个存储单元，然后给成员 element3 分配 5 位。所以，上面的结构体大小为 2 。</p><p>5）<strong>位域的表示范围：</strong></p><ul><li>位域的赋值不能超过其可以表示的范围。</li><li>位域的类型决定该编码能表示的值的结果。</li></ul><p>对于第二点，若位域为 unsigned 类型，则直接转化为正数；若非 unsigned 类型，则先判断最高位是否为 1，若为 1，则表示补码，则对其除符号位外的所有位取反再加一得到最后的结果数据（原码）。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> p:<span class="number">3</span> = <span class="number">111</span>;   <span class="comment">//p表示7</span></span><br><span class="line"><span class="keyword">int</span> p:<span class="number">3</span> = <span class="number">111</span>;            <span class="comment">//p 表示-1，对除符号位之外的所有位取反再加一</span></span><br></pre></td></tr></table></figure><p>6）<strong>带位域的结构在内存中各个位域的存储方式取决于编译器，既可从左到右也可从右到左存储。</strong></p><p>【例 10】在 VC6 下执行下面的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">union</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">            <span class="keyword">char</span> a : <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">char</span> b : <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">char</span> c : <span class="number">2</span>;</span><br><span class="line">        &#125;bits;</span><br><span class="line">    &#125;num;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Input an integer for i(0~15): &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num.i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;i = %d, cba = %d %d %d\n&quot;</span>, num.i, num.bits.c, num.bits.b, num.bits.a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>输入 i 值为 11，则输出为 i = 11, cba = -2 -1 -1。</p><p>Intel x86 处理器按小字节序存储数据，所以 bits 中的位域在内存中放置顺序为 ccba。当 num.i 置为 11 时，bits 的最低有效位(即位域 a)的值为 1，a、b、c 按低地址到高地址分别存储为 10、1、1(二进制)。</p><p><code>但为什么最后的打印结果是a=-1而不是1？</code></p><p>因为位域 a 定义的类型 signed char 是有符号数，所以尽管 a 只有 1 位，仍要进行符号扩展。1 做为补码存在，对应原码-1。</p><p>如果将 a、b、c 的类型定义为 unsigned char，即可得到 cba = 2 1 1。1011 即为 11 的二进制数。</p><blockquote><p>注：C 语言中，不同的成员使用共同的存储区域的数据构造类型称为联合(或共用体)。联合占用空间的大小取决于类型长度最大的成员。联合在定义、说明和使用形式上与结构体相似。</p></blockquote><p>7）<strong>位域的实现会因编译器的不同而不同，使用位域会影响程序可移植性</strong>。因此如无必要，最好不要使用位域。</p><p>8）<strong>尽管使用位域可以节省内存空间，但却增加了处理时间</strong>。当访问各个位域成员时，需要把位域从它所在的字中分解出来或反过来把一值压缩存到位域所在的字位中。</p><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h1><p>让我们回到引言部分的问题。</p><p>缺省情况下，C/C++编译器默认将结构、栈中的成员数据进行内存对齐。因此，引言程序输出就变成”c1 -&gt; 0, s -&gt; 2, c2 -&gt; 4, i -&gt; 8”。</p><p>编译器将未对齐的成员向后移，将每一个都成员对齐到自然边界上，从而也导致整个结构的尺寸变大。尽管会牺牲一点空间(成员之间有空洞)，但提高了性能。</p><p>也正是这个原因，引言例子中 sizeof(T_ FOO)为 12，而不是 8。</p><p>总结说来，就是：<strong>在结构体中，综合考虑变量本身和指定的对齐值；在栈上，不考虑变量本身的大小，统一对齐到 4 字节</strong>。</p><blockquote><p><strong>说明：</strong> 本文转载自 <a href="https://www.cnblogs.com/clover-toeic/p/3853132.html">https://www.cnblogs.com/clover-toeic/p/3853132.html</a></p></blockquote><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 字节对齐 </tag>
            
            <tag> 字节序 </tag>
            
            <tag> 网络序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序人生 | Makefile 常用模板 - 静态链接库/动态链接库/可执行文件</title>
      <link href="/2014/07/10/makefile-common-templates/"/>
      <url>/2014/07/10/makefile-common-templates/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p><strong>本文首发于 2014-07-10 11:51:10</strong></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文把 makefile  分成了三份：生成可执行文件的 makefile，生成静态链接库的 makefile，生成动态链接库的 makefile。</p><p>这些 makefile 都很简单，一般都是一看就会用，用法也很容易，只需要把它们拷贝到你的代码的同一目录下，然后就可以用  make  来生成目标文件了。</p><p>下面是三个 makefile 的源代码：</p><h2 id="生成可执行文件的-makefile"><a href="#生成可执行文件的-makefile" class="headerlink" title="生成可执行文件的 makefile"></a>生成可执行文件的 makefile</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment">#source file</span></span><br><span class="line"><span class="comment">#源文件，自动找所有.c和.cpp文件，并将目标定义为同名.o文件</span></span><br><span class="line">SOURCE  := <span class="variable">$(<span class="built_in">wildcard</span> *.c)</span> <span class="variable">$(<span class="built_in">wildcard</span> *.cpp)</span></span><br><span class="line">OBJS    := <span class="variable">$(<span class="built_in">patsubst</span> %.c,%.o,$(<span class="built_in">patsubst</span> %.cpp,%.o,<span class="variable">$(SOURCE)</span>)</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#target you can change test to what you want</span></span><br><span class="line"><span class="comment">#目标文件名，输入任意你想要的执行文件名</span></span><br><span class="line">TARGET  := test</span><br><span class="line"></span><br><span class="line"><span class="comment">#compile and lib parameter</span></span><br><span class="line"><span class="comment">#编译参数</span></span><br><span class="line">CC      := gcc</span><br><span class="line">LIBS    :=</span><br><span class="line">LDFLAGS :=</span><br><span class="line">DEFINES :=</span><br><span class="line">INCLUDE := -I.</span><br><span class="line">CFLAGS  := -g -Wall -O3 <span class="variable">$(DEFINES)</span> <span class="variable">$(INCLUDE)</span></span><br><span class="line">CXXFLAGS:= <span class="variable">$(CFLAGS)</span> -DHAVE_CONFIG_H</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#i think you should do anything here</span></span><br><span class="line"><span class="comment">#下面的基本上不需要做任何改动了</span></span><br><span class="line">.PHONY : everything objs clean veryclean rebuild</span><br><span class="line"></span><br><span class="line">everything : <span class="variable">$(TARGET)</span></span><br><span class="line"></span><br><span class="line">all : <span class="variable">$(TARGET)</span></span><br><span class="line"></span><br><span class="line">objs : <span class="variable">$(OBJS)</span></span><br><span class="line"></span><br><span class="line"><span class="section">rebuild: veryclean everything</span></span><br><span class="line"></span><br><span class="line">clean :</span><br><span class="line">    rm -fr *.so</span><br><span class="line">    rm -fr *.o</span><br><span class="line"></span><br><span class="line">veryclean : clean</span><br><span class="line">    rm -fr <span class="variable">$(TARGET)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(TARGET)</span> : <span class="variable">$(OBJS)</span></span><br><span class="line">    <span class="variable">$(CC)</span> <span class="variable">$(CXXFLAGS)</span> -o <span class="variable">$@</span> <span class="variable">$(OBJS)</span> <span class="variable">$(LDFLAGS)</span> <span class="variable">$(LIBS)</span></span><br></pre></td></tr></table></figure><h2 id="生成静态链接库的-makefile"><a href="#生成静态链接库的-makefile" class="headerlink" title="生成静态链接库的 makefile"></a>生成静态链接库的 makefile</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#target you can change test to what you want</span></span><br><span class="line"><span class="comment">#共享库文件名，lib*.a</span></span><br><span class="line">TARGET  := libtest.a</span><br><span class="line"></span><br><span class="line"><span class="comment">#compile and lib parameter</span></span><br><span class="line"><span class="comment">#编译参数</span></span><br><span class="line">CC      := gcc</span><br><span class="line">AR      = ar</span><br><span class="line">RANLIB  = ranlib</span><br><span class="line">LIBS    :=</span><br><span class="line">LDFLAGS :=</span><br><span class="line">DEFINES :=</span><br><span class="line">INCLUDE := -I.</span><br><span class="line">CFLAGS  := -g -Wall -O3 <span class="variable">$(DEFINES)</span> <span class="variable">$(INCLUDE)</span></span><br><span class="line">CXXFLAGS:= <span class="variable">$(CFLAGS)</span> -DHAVE_CONFIG_H</span><br><span class="line"></span><br><span class="line"><span class="comment">#i think you should do anything here</span></span><br><span class="line"><span class="comment">#下面的基本上不需要做任何改动了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#source file</span></span><br><span class="line"><span class="comment">#源文件，自动找所有.c和.cpp文件，并将目标定义为同名.o文件</span></span><br><span class="line">SOURCE  := <span class="variable">$(<span class="built_in">wildcard</span> *.c)</span> <span class="variable">$(<span class="built_in">wildcard</span> *.cpp)</span></span><br><span class="line">OBJS    := <span class="variable">$(<span class="built_in">patsubst</span> %.c,%.o,$(<span class="built_in">patsubst</span> %.cpp,%.o,<span class="variable">$(SOURCE)</span>)</span>)</span><br><span class="line"></span><br><span class="line">.PHONY : everything objs clean veryclean rebuild</span><br><span class="line"></span><br><span class="line">everything : <span class="variable">$(TARGET)</span></span><br><span class="line"></span><br><span class="line">all : <span class="variable">$(TARGET)</span></span><br><span class="line"></span><br><span class="line">objs : <span class="variable">$(OBJS)</span></span><br><span class="line"></span><br><span class="line"><span class="section">rebuild: veryclean everything</span></span><br><span class="line"></span><br><span class="line">clean :</span><br><span class="line">    rm -fr *.o</span><br><span class="line"></span><br><span class="line">veryclean : clean</span><br><span class="line">    rm -fr <span class="variable">$(TARGET)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(TARGET)</span> : <span class="variable">$(OBJS)</span></span><br><span class="line">    <span class="variable">$(AR)</span> cru <span class="variable">$(TARGET)</span> <span class="variable">$(OBJS)</span></span><br><span class="line">    <span class="variable">$(RANLIB)</span> <span class="variable">$(TARGET)</span></span><br></pre></td></tr></table></figure><h2 id="生成动态链接库的-makefile"><a href="#生成动态链接库的-makefile" class="headerlink" title="生成动态链接库的 makefile"></a>生成动态链接库的 makefile</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#target you can change test to what you want</span></span><br><span class="line"><span class="comment">#共享库文件名，lib*.so</span></span><br><span class="line">TARGET  := libtest.so</span><br><span class="line"></span><br><span class="line"><span class="comment">#compile and lib parameter</span></span><br><span class="line"><span class="comment">#编译参数</span></span><br><span class="line">CC      := gcc</span><br><span class="line">LIBS    :=</span><br><span class="line">LDFLAGS :=</span><br><span class="line">DEFINES :=</span><br><span class="line">INCLUDE := -I.</span><br><span class="line">CFLAGS  := -g -Wall -O3 <span class="variable">$(DEFINES)</span> <span class="variable">$(INCLUDE)</span></span><br><span class="line">CXXFLAGS:= <span class="variable">$(CFLAGS)</span> -DHAVE_CONFIG_H</span><br><span class="line">SHARE   := -fPIC -shared -o</span><br><span class="line"></span><br><span class="line"><span class="comment">#i think you should do anything here</span></span><br><span class="line"><span class="comment">#下面的基本上不需要做任何改动了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#source file</span></span><br><span class="line"><span class="comment">#源文件，自动找所有.c和.cpp文件，并将目标定义为同名.o文件</span></span><br><span class="line">SOURCE  := <span class="variable">$(<span class="built_in">wildcard</span> *.c)</span> <span class="variable">$(<span class="built_in">wildcard</span> *.cpp)</span></span><br><span class="line">OBJS    := <span class="variable">$(<span class="built_in">patsubst</span> %.c,%.o,$(<span class="built_in">patsubst</span> %.cpp,%.o,<span class="variable">$(SOURCE)</span>)</span>)</span><br><span class="line"></span><br><span class="line">.PHONY : everything objs clean veryclean rebuild</span><br><span class="line"></span><br><span class="line">everything : <span class="variable">$(TARGET)</span></span><br><span class="line"></span><br><span class="line">all : <span class="variable">$(TARGET)</span></span><br><span class="line"></span><br><span class="line">objs : <span class="variable">$(OBJS)</span></span><br><span class="line"></span><br><span class="line"><span class="section">rebuild: veryclean everything</span></span><br><span class="line"></span><br><span class="line">clean :</span><br><span class="line">    rm -fr *.o</span><br><span class="line"></span><br><span class="line">veryclean : clean</span><br><span class="line">    rm -fr <span class="variable">$(TARGET)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(TARGET)</span> : <span class="variable">$(OBJS)</span></span><br><span class="line">    <span class="variable">$(CC)</span> <span class="variable">$(CXXFLAGS)</span> <span class="variable">$(SHARE)</span> <span class="variable">$@</span> <span class="variable">$(OBJS)</span> <span class="variable">$(LDFLAGS)</span> <span class="variable">$(LIBS)</span></span><br></pre></td></tr></table></figure><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 编译调试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Makefile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序人生 | UNIX环境高级编程技巧之 du 指令实现</title>
      <link href="/2014/07/10/advanced-programming-in-the-unix-environment-du/"/>
      <url>/2014/07/10/advanced-programming-in-the-unix-environment-du/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p><strong>本文首发于 2014-07-10 10:00:41</strong></p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;glob.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PATHSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">path_noloop</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *pos;</span><br><span class="line"></span><br><span class="line">    pos = <span class="built_in">strrchr</span>(path,<span class="string">&#x27;/&#x27;</span>);<span class="comment">//定位最右边的&#x27;/&#x27;的位置</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(pos+<span class="number">1</span>,<span class="string">&quot;.&quot;</span>) == <span class="number">0</span> || (<span class="built_in">strcmp</span>(pos+<span class="number">1</span>,<span class="string">&quot;..&quot;</span>) == <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int64_t</span> <span class="title">mydu</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">glob_t</span> globres;</span><br><span class="line">    <span class="keyword">int64_t</span> sum;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">statres</span>;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> nextpath[PATHSIZE];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">lstat</span>(path, &amp;statres) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;lstat()&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//exit(1);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">S_ISDIR</span>(statres.st_mode))</span><br><span class="line">        <span class="keyword">return</span> statres.st_blocks;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strncpy</span>(nextpath, path,PATHSIZE);</span><br><span class="line">    <span class="built_in">strncat</span>(nextpath, <span class="string">&quot;/*&quot;</span> , PATHSIZE);</span><br><span class="line">    <span class="built_in">glob</span>(nextpath,GLOB_NOSORT, <span class="literal">NULL</span>, &amp;globres);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strncpy</span>(nextpath, path,PATHSIZE);</span><br><span class="line">    <span class="built_in">strncat</span>(nextpath, <span class="string">&quot;/.*&quot;</span> , PATHSIZE);</span><br><span class="line">    <span class="built_in">glob</span>(nextpath,GLOB_NOSORT|GLOB_APPEND, <span class="literal">NULL</span>, &amp;globres);</span><br><span class="line"></span><br><span class="line">    sum = statres.st_blocks;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span> ;i &lt; globres.gl_pathc ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">path_noloop</span>(globres.gl_pathv[i]))</span><br><span class="line">            sum += <span class="built_in">mydu</span>(globres.gl_pathv[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr,<span class="string">&quot;Usage...\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld 512B blocks\n&quot;</span>, (<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>)<span class="built_in">mydu</span>(argv[<span class="number">1</span>]));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -g -Wall testdu.c -o testdu</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><ul><li><code>testdf</code>执行效果：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./testdu /usr/bin</span><br><span class="line">1766184 512B blocks</span><br></pre></td></tr></table></figure><ul><li><code>原生df</code>执行效果：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ du -sh /usr/bin</span><br><span class="line">859M/usr/bin</span><br></pre></td></tr></table></figure><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> APUE </tag>
            
            <tag> UNIX </tag>
            
            <tag> du </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序人生 | UNIX环境高级编程技巧之 df 指令实现</title>
      <link href="/2014/07/10/advanced-programming-in-the-unix-environment-df/"/>
      <url>/2014/07/10/advanced-programming-in-the-unix-environment-df/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p><strong>本文首发于 2014-07-10 09:48:48</strong></p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mntent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/vfs.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> G = <span class="number">1024</span>*<span class="number">1024</span>*<span class="number">1024ull</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> M = <span class="number">1024</span>*<span class="number">1024</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> K = <span class="number">1024</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> str[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">kscale</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> b, <span class="keyword">unsigned</span> <span class="keyword">long</span> bs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> size = b * (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>)bs;</span><br><span class="line">    <span class="keyword">if</span> (size &gt; G)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(str, <span class="string">&quot;%0.2f GB&quot;</span>, size/(G*<span class="number">1.0</span>));</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (size &gt; M)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(str, <span class="string">&quot;%0.2f MB&quot;</span>, size/(<span class="number">1.0</span>*M));</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (size &gt; K)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(str, <span class="string">&quot;%0.2f K&quot;</span>, size/(<span class="number">1.0</span>*K));</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(str, <span class="string">&quot;%0.2f B&quot;</span>, size*<span class="number">1.0</span>);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE* mount_table;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mntent</span> *<span class="title">mount_entry</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">statfs</span> <span class="title">s</span>;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> blocks_used;</span><br><span class="line">    <span class="keyword">unsigned</span> blocks_percent_used;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *disp_units_hdr = <span class="literal">NULL</span>;</span><br><span class="line">    mount_table = <span class="literal">NULL</span>;</span><br><span class="line">    mount_table = <span class="built_in">setmntent</span>(<span class="string">&quot;/etc/mtab&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!mount_table)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;set mount entry error\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    disp_units_hdr = <span class="string">&quot;     Size&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Filesystem           %-15sUsed Available %s Mounted on\n&quot;</span>,</span><br><span class="line">            disp_units_hdr, <span class="string">&quot;Use%&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *device;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *mount_point;</span><br><span class="line">        <span class="keyword">if</span> (mount_table) &#123;</span><br><span class="line">            mount_entry = <span class="built_in">getmntent</span>(mount_table);</span><br><span class="line">            <span class="keyword">if</span> (!mount_entry) &#123;</span><br><span class="line">                <span class="built_in">endmntent</span>(mount_table);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        device = mount_entry-&gt;mnt_fsname;</span><br><span class="line">        mount_point = mount_entry-&gt;mnt_dir;</span><br><span class="line">        <span class="comment">//fprintf(stderr, &quot;mount info: device=%s mountpoint=%s\n&quot;, device, mount_point);</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">statfs</span>(mount_point, &amp;s) != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;statfs failed!\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((s.f_blocks &gt; <span class="number">0</span>) || !mount_table )</span><br><span class="line">        &#123;</span><br><span class="line">            blocks_used = s.f_blocks - s.f_bfree;</span><br><span class="line">            blocks_percent_used = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (blocks_used + s.f_bavail)</span><br><span class="line">            &#123;</span><br><span class="line">                blocks_percent_used = (blocks_used * <span class="number">100ULL</span></span><br><span class="line">                        + (blocks_used + s.f_bavail)/<span class="number">2</span></span><br><span class="line">                        ) / (blocks_used + s.f_bavail);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* GNU coreutils 6.10 skips certain mounts, try to be compatible.  */</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(device, <span class="string">&quot;rootfs&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">printf</span>(<span class="string">&quot;\n%-20s&quot;</span> + <span class="number">1</span>, device) &gt; <span class="number">20</span>)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;\n%-20s&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">char</span> s1[<span class="number">20</span>];</span><br><span class="line">            <span class="keyword">char</span> s2[<span class="number">20</span>];</span><br><span class="line">            <span class="keyword">char</span> s3[<span class="number">20</span>];</span><br><span class="line">            <span class="built_in">strcpy</span>(s1, <span class="built_in">kscale</span>(s.f_blocks, s.f_bsize));</span><br><span class="line">            <span class="built_in">strcpy</span>(s2, <span class="built_in">kscale</span>(s.f_blocks - s.f_bfree, s.f_bsize));</span><br><span class="line">            <span class="built_in">strcpy</span>(s3, <span class="built_in">kscale</span>(s.f_bavail, s.f_bsize));</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; %9s %9s %9s %3u%% %s\n&quot;</span>,</span><br><span class="line">                    s1,</span><br><span class="line">                    s2,</span><br><span class="line">                    s3,</span><br><span class="line">                    blocks_percent_used, mount_point);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -g -Wall testdf.c -o testdf</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><ul><li><code>testdf</code>执行效果：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ ./testdf</span><br><span class="line">Filesystem                Size      Used Available Use% Mounted on</span><br><span class="line">udev                   3.87 GB    0.00 B   3.87 GB   0% /dev</span><br><span class="line">tmpfs                796.17 MB  980.00 K 795.21 MB   0% /run</span><br><span class="line">/dev/vda1             96.75 GB  40.54 GB  56.19 GB  42% /</span><br><span class="line">tmpfs                  3.89 GB    0.00 B   3.89 GB   0% /dev/shm</span><br><span class="line">tmpfs                  5.00 MB    0.00 B   5.00 MB   0% /run/lock</span><br><span class="line">tmpfs                  3.89 GB    0.00 B   3.89 GB   0% /sys/fs/cgroup</span><br><span class="line">/dev/vda15           104.35 MB   3.86 MB 100.50 MB   4% /boot/efi</span><br><span class="line">/dev/loop1            55.50 MB  55.50 MB    0.00 B 100% /snap/core18/2074</span><br><span class="line">/dev/loop2            70.62 MB  70.62 MB    0.00 B 100% /snap/lxd/16922</span><br><span class="line">/dev/loop4            70.38 MB  70.38 MB    0.00 B 100% /snap/lxd/21029</span><br><span class="line">/dev/loop5            32.38 MB  32.38 MB    0.00 B 100% /snap/snapd/12704</span><br><span class="line">tmpfs                796.17 MB  980.00 K 795.21 MB   0% /run/snapd/ns</span><br><span class="line">tmpfs                796.17 MB    0.00 B 796.17 MB   0% /run/user/1000</span><br><span class="line">/dev/loop6            55.50 MB  55.50 MB    0.00 B 100% /snap/core18/2128</span><br><span class="line">/dev/loop0            32.38 MB  32.38 MB    0.00 B 100% /snap/snapd/12883</span><br></pre></td></tr></table></figure><ul><li><code>原生df</code>执行效果：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ df -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">udev            3.9G     0  3.9G   0% /dev</span><br><span class="line">tmpfs           797M  980K  796M   1% /run</span><br><span class="line">/dev/vda1        97G   41G   57G  42% /</span><br><span class="line">tmpfs           3.9G     0  3.9G   0% /dev/shm</span><br><span class="line">tmpfs           5.0M     0  5.0M   0% /run/lock</span><br><span class="line">tmpfs           3.9G     0  3.9G   0% /sys/fs/cgroup</span><br><span class="line">/dev/vda15      105M  3.9M  101M   4% /boot/efi</span><br><span class="line">/dev/loop1       56M   56M     0 100% /snap/core18/2074</span><br><span class="line">/dev/loop2       71M   71M     0 100% /snap/lxd/16922</span><br><span class="line">/dev/loop4       71M   71M     0 100% /snap/lxd/21029</span><br><span class="line">/dev/loop5       33M   33M     0 100% /snap/snapd/12704</span><br><span class="line">tmpfs           797M     0  797M   0% /run/user/1000</span><br><span class="line">/dev/loop6       56M   56M     0 100% /snap/core18/2128</span><br><span class="line">/dev/loop0       33M   33M     0 100% /snap/snapd/12883</span><br></pre></td></tr></table></figure><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> APUE </tag>
            
            <tag> UNIX </tag>
            
            <tag> df </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特性介绍 | Linux 内存管理机制解析</title>
      <link href="/2014/03/12/linux-memory-management-parsing/"/>
      <url>/2014/03/12/linux-memory-management-parsing/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p><strong>本文首发于 2014-03-12 21:27:30</strong></p></blockquote><h1 id="Linux-内存地址映射图"><a href="#Linux-内存地址映射图" class="headerlink" title="Linux 内存地址映射图"></a>Linux 内存地址映射图</h1><p><img src="linux-memory-address-map.jpg" alt="Linux内存地址映射图"></p><blockquote><p>后文中 <code>图：XXX</code> 指的就是上图中对应区域。</p></blockquote><h1 id="地址映射（图：左中）"><a href="#地址映射（图：左中）" class="headerlink" title="地址映射（图：左中）"></a>地址映射（图：左中）</h1><p>inux 内核使用页式内存管理，应用程序给出的内存地址是虚拟地址，它需要经过若干级页表一级一级的变换，才变成真正的物理地址。</p><p>想一下，地址映射还是一件很恐怖的事情。当访问一个由虚拟地址表示的内存空间时，需要先经过若干次的内存访问，得到每一级页表中用于转换的页表项（页表是存放在内存里面的），才能完成映射。也就是说，要实现一次内存访问，实际上内存被访问了 N+1 次（N=页表级数），并且还需要做 N 次加法运算。</p><p>所以，地址映射必须要有硬件支持，<code>mmu（内存管理单元）</code>就是这个硬件。并且需要有 cache 来保存页表，这个 cache 就是 <code>TLB</code>（Translation lookaside buffer）。</p><p>尽管如此，地址映射还是有着不小的开销。假设 cache 的访存速度是内存的 10 倍，命中率是 40%，页表有三级，那么平均一次虚拟地址访问大概就消耗了两次物理内存访问的时间。于是，一些嵌入式硬件上可能会放弃使用 mmu，这样的硬件能够运行 VxWorks（一个很高效的嵌入式实时操作系统）、linux（linux 也有禁用 mmu 的编译选项）等系统。</p><p>但是使用 mmu 的优势也是很大的，最主要的是出于安全性考虑。<strong>各个进程都是相互独立的虚拟地址空间，互不干扰</strong>。而放弃地址映射之后，所有程序将运行在同一个地址空间。于是，在没有 mmu 的机器上，一个进程越界访存，可能引起其他进程莫名其妙的错误，甚至导致内核崩溃。</p><p>在地址映射这个问题上，<strong>内核只提供页表，实际的转换是由硬件去完成的</strong>。那么内核如何生成这些页表呢？这就有两方面的内容：<strong>虚拟地址空间的管理</strong>和<strong>物理内存的管理</strong>。（实际上只有用户态的地址映射才需要管理，内核态的地址映射是写死的。）</p><h1 id="虚拟地址管理（图：左下）"><a href="#虚拟地址管理（图：左下）" class="headerlink" title="虚拟地址管理（图：左下）"></a>虚拟地址管理（图：左下）</h1><p>每个进程对应一个 task 结构，它指向一个 mm 结构，这就是该进程的内存管理器。（对于线程来说，每个线程也都有一个 task 结构，但是它们都指向同一个 mm，所以<strong>同一进程中的多个线程的地址空间是共享的</strong>。）</p><p><code>mm-&gt;pgd</code> 指向容纳页表的内存，<strong>每个进程有自已的 mm，每个 mm 有自己的页表</strong>。于是，进程调度时，页表被切换（一般会有一个 CPU 寄存器来保存页表的地址，比如 X86 下的 CR3，页表切换就是改变该寄存器的值）。所以，<strong>各个进程的地址空间互不影响</strong>（因为页表都不一样了，当然无法访问到别人的地址空间上。但是<code>共享内存除外</code>，这是故意让不同的页表能够访问到相同的物理地址上）。</p><p>用户程序对内存的操作（分配、回收、映射、等）都是对 mm 的操作，具体来说是对 <strong>mm 上的 vma（虚拟内存空间）</strong> 的操作。这些 vma 代表着进程空间的各个区域，比如堆、栈、代码区、数据区、各种映射区 等。</p><p><strong>用户程序对内存的操作并不会直接影响到页表，更不会直接影响到物理内存的分配</strong>。比如 malloc 成功，仅仅是改变了某个 vma，页表不会变，物理内存的分配也不会变。</p><p>假设用户分配了内存，然后访问这块内存。由于页表里面并没有记录相关的映射，CPU 产生一次缺页异常。内核捕捉异常，检查产生异常的地址是不是存在于一个合法的 vma 中，如果不是，则给进程一个”段错误”，让其崩溃；如果是，则分配一个物理页，并为之建立映射。</p><h1 id="物理内存管理（图：右上）"><a href="#物理内存管理（图：右上）" class="headerlink" title="物理内存管理（图：右上）"></a>物理内存管理（图：右上）</h1><p><code>那么物理内存是如何分配的呢？</code></p><p>首先，linux 支持 NUMA (Non Uniform Memory Access)。物理内存管理的第一个层次就是介质的管理，<code>pg_data_t</code>结构就描述了介质。一般而言，我们的内存管理介质只有内存，并且它是均匀的，所以可以简单地认为系统中只有一个 pg_data_t 对象。</p><p><strong>每一种介质下面有若干个 zone，一般是三个：DMA、NORMAL 和 HIGH。</strong></p><ul><li><strong>DMA</strong>：因为有些硬件系统的 DMA 总线比系统总线窄，所以只有一部分地址空间能够用作 DMA，这部分地址被管理在 DMA 区域（这属于是高级货了）；</li><li><strong>HIGH</strong>：<strong>高端内存</strong>。在 32 位系统中，地址空间是<code>4G</code>，其中内核规定 <code>3~4G</code> 的范围是<code>内核空间</code>，<code>0~3G</code> 是<code>用户空间</code>（每个用户进程都有这么大的虚拟空间）（图：中下）。前面提到过<strong>内核的地址映射是写死的</strong>，就是指这<code>3~4G</code>的对应的页表是写死的，<strong>它映射到了物理地址的<code>0~1G</code>上</strong>。（<code>实际上没有映射1G，只映射了896M</code>。剩下的空间留下来映射大于 1G 的物理地址，而这一部分显然不是写死的）。所以，大于 896M 的物理地址是没有写死的页表来对应的，内核不能直接访问它们（必须要建立映射），称它们为高端内存（当然，如果机器内存不足 896M，就不存在高端内存。如果是 64 位机器，也不存在高端内存，因为地址空间很大很大，属于内核的空间也不止 1G 了）；</li><li><strong>NORMAL</strong>：不属于 DMA 或 HIGH 的内存就叫 NORMAL 。</li></ul><p>在 <code>zone</code> 之上的 <strong><code>zone_list</code> 代表了分配策略，即内存分配时的 zone 优先级</strong>。一种内存分配往往不是只能在一个 zone 里进行分配的，比如分配一个页给内核使用时，最优先是从 NORMAL 里面分配，不行的话就分配 DMA 里面的好了（ HIGH 就不行，因为还没建立映射），这就是一种分配策略。</p><p>每个内存介质维护了一个 <code>mem_map</code>，为介质中的每一个物理页面建立了一个 <code>page</code> 结构与之对应，以便管理物理内存。</p><p>每个 zone 记录着它在 <code>mem_map</code> 上的起始位置。并且通过 <code>free_area</code> 串连着这个 zone 上空闲的 page。物理内存的分配就是从这里来的，从 <code>free_area</code> 上把 page 摘下，就算是分配了。（内核的内存分配与用户进程不同，<strong>用户使用内存会被内核监督</strong>，<code>使用不当就&quot;段错误&quot;</code>；而<strong>内核则无人监督</strong>，只能靠自觉，不是自己从 <code>free_area</code> 摘下的 page 就不要乱用。）</p><h1 id="建立地址映射"><a href="#建立地址映射" class="headerlink" title="建立地址映射"></a>建立地址映射</h1><p><strong>内核需要物理内存时，很多情况是整页分配的</strong>，这在上面的 <code>mem_map</code> 中摘一个 page 下来就好了。比如前面说到的内核捕捉缺页异常，然后需要分配一个 page 以建立映射。</p><p>说到这里，会有一个疑问：<code>内核在分配 page、建立地址映射的过程中，使用的是虚拟地址还是物理地址呢？</code></p><p>首先，<strong>内核代码所访问的地址都是虚拟地址</strong>，因为 CPU 指令接收的就是虚拟地址（地址映射对于 CPU 指令是透明的）。但是，<strong>建立地址映射时，内核在页表里面填写的内容却是物理地址</strong>，因为地址映射的目标就是要得到物理地址。</p><p>那么，内核怎么得到这个物理地址呢？其实，上面也提到了，mem_map 中的 page 就是根据物理内存来建立的，每一个 page 就对应了一个物理页。</p><p>于是我们可以说，虚拟地址的映射是靠这里 page 结构来完成的，是它们给出了最终的物理地址。然而，page 结构显然是通过虚拟地址来管理的（前面已经说过，CPU 指令接收的就是虚拟地址）。那么，page 结构实现了别人的虚拟地址映射，谁又来实现 page 结构自己的虚拟地址映射呢？没人能够实现。</p><p>这就引出了前面提到的一个问题，内核空间的页表项是写死的。在内核初始化时，内核的地址空间就已经把地址映射写死了。page 结构显然存在于内核空间，所以它的地址映射问题已经通过“写死”解决了。</p><p>由于内核空间的页表项是写死的，又引出另一个问题，<strong>NORMAL（或 DMA）区域的内存可能被同时映射到内核空间和用户空间</strong>。被映射到内核空间是显然的，因为这个映射已经写死了。而这些页面也可能被映射到用户空间的，在前面提到的缺页异常的场景里面就有这样的可能。映射到用户空间的页面应该优先从 HIGH 区域获取，因为这些内存被内核访问起来很不方便，拿给用户空间再合适不过了。但是 HIGH 区域可能会耗尽，或者可能因为设备上物理内存不足导致系统里面根本就没有 HIGH 区域，所以，将 NORMAL 区域映射给用户空间是必然存在的。</p><p>但是 NORMAL 区域的内存被同时映射到内核空间和用户空间并没有问题，因为如果某个页面正在被内核使用，对应的 page 应该已经从 free_area 被摘下，于是缺页异常处理代码中不会再将该页映射到用户空间。反过来也一样，被映射到用户空间的 page 自然已经从 free_area 被摘下，内核不会再去使用这个页面。</p><h1 id="内核空间管理（图：右下）"><a href="#内核空间管理（图：右下）" class="headerlink" title="内核空间管理（图：右下）"></a>内核空间管理（图：右下）</h1><p>除了对内存整页的使用，有些时候，内核也需要像用户程序使用 malloc 一样，分配一块任意大小的空间。这个功能是由 <strong>slab 系统</strong>来实现的。</p><p>slab 相当于为内核中常用的一些结构体对象建立了对象池，比如对应 task 结构的池、对应 mm 结构的池、等等。</p><p>而 slab 也维护有通用的对象池，比如”32 字节大小”的对象池、”64 字节大小”的对象池、等等。内核中常用的 kmalloc 函数（类似于用户态的 malloc）就是在这些通用的对象池中实现分配的。</p><p>slab 除了对象实际使用的内存空间外，还有其对应的控制结构。有两种组织方式：<strong>如果对象较大，则控制结构使用专门的页面来保存；如果对象较小，控制结构与对象空间使用相同的页面。</strong></p><p>除了 slab，linux 2.6 还引入了<code>mempool（内存池）</code>。其意图是：某些对象我们不希望它会因为内存不足而分配失败，于是我们预先分配若干个，放在 mempool 中存起来。正常情况下，分配对象时是不会去动 mempool 里面的资源的，照常通过 slab 去分配。当系统内存紧缺，已经无法通过 slab 分配内存时，才会使用 mempool 中的内容。</p><h1 id="页面换入换出（图：左上-amp-图：右上）"><a href="#页面换入换出（图：左上-amp-图：右上）" class="headerlink" title="页面换入换出（图：左上 &amp; 图：右上）"></a>页面换入换出（图：左上 &amp; 图：右上）</h1><p>页面换入换出又是一个很复杂的系统。内存页面被换出到磁盘，与磁盘文件被映射到内存，是很相似的两个过程（内存页被换出到磁盘的动机，就是今后还要从磁盘将其载回内存）。所以 swap 复用了文件子系统的一些机制。</p><p>页面换入换出是一件很费 CPU 和 IO 的事情，但是由于内存昂贵这一历史原因，我们只好拿磁盘来扩展内存。但是现在内存越来越便宜了，我们可以轻松安装数 G 的内存，然后将 swap 系统关闭。于是 swap 的实现实在让人难有探索的欲望，在这里就不赘述了。</p><h1 id="用户空间内存管理"><a href="#用户空间内存管理" class="headerlink" title="用户空间内存管理"></a>用户空间内存管理</h1><p><code>malloc</code>是<code>libc</code>的库函数，用户程序一般通过它（或类似函数）来分配内存空间。</p><p><code>libc</code>对内存的分配有两种途径：一是<strong>调整堆的大小</strong>，二是<strong>mmap 一个新的虚拟内存区域</strong>（堆也是一个 vma）。</p><p><strong>在内核中，堆是一个一端固定、一端可伸缩的 vma</strong>（图：左中）。可伸缩的一端通过系统调用 brk 来调整。libc 管理着堆的空间，用户调用 malloc 分配内存时，libc 尽量从现有的堆中去分配。如果堆空间不够，则通过 brk 增大堆空间。</p><p>当用户将已分配的空间 free 时，libc 可能会通过 brk 减小堆空间。但是堆空间增大容易减小却难，考虑这样一种情况，用户空间连续分配了 10 块内存，前 9 块已经 free。这时，未 free 的第 10 块哪怕只有 1 字节大，libc 也不能够去减小堆的大小。因为堆只有一端可伸缩，并且中间不能掏空。而第 10 块内存就死死地占据着堆可伸缩的那一端，堆的大小没法减小，相关资源也没法归还内核。</p><p>当用户 malloc 一块很大的内存时，libc 会通过 mmap 系统调用映射一个新的 vma。因为对于堆的大小调整和空间管理还是比较麻烦的，重新建一个 vma 会更方便（上面提到的 free 的问题也是原因之一）。</p><p><code>那么为什么不总是在 malloc 的时候去 mmap 一个新的 vma 呢？</code></p><blockquote><p><strong>第一，对于小空间的分配与回收，被 libc 管理的堆空间已经能够满足需要，不必每次都去进行系统调用。</strong> 并且 vma 是以 page 为单位的，最小就是分配一个页；</p><p><strong>第二，太多的 vma 会降低系统性能</strong>。缺页异常、vma 的新建与销毁、堆空间的大小调整、等等情况下，都需要对 vma 进行操作，需要在当前进程的所有 vma 中找到需要被操作的那个（或那些）vma。vma 数目太多，必然导致性能下降。（<strong>在进程的 vma 较少时，内核采用链表来管理 vma；vma 较多时，改用红黑树来管理。</strong>）</p></blockquote><h1 id="用户的栈"><a href="#用户的栈" class="headerlink" title="用户的栈"></a>用户的栈</h1><p><strong>与堆一样，栈也是一个 vma</strong>（图：左中），这个 vma 是<strong>一端固定、一端可伸</strong>（注意，不能缩）的。这个 vma 比较特殊，没有类似 brk 的系统调用让这个 vma 伸展，它是自动伸展的。</p><p>当用户访问的虚拟地址越过这个 vma 时，内核会在处理缺页异常的时候将自动将这个 vma 增大。内核会检查当时的<strong>栈寄存器</strong>（如：ESP），<strong>访问的虚拟地址不能超过 ESP 加 n（n 为 CPU 压栈指令一次性压栈的最大字节数）</strong>。也就是说，<strong>内核是以 ESP 为基准来检查访问是否越界。</strong></p><p>但是，<code>ESP的值是可以由用户态程序自由读写的，用户程序如果调整ESP，将栈划得很大很大怎么办呢？</code> <strong>内核中有一套关于进程限制的配置，其中就有栈大小的配置，栈只能这么大，再大就出错。</strong></p><p>对于一个进程来说，栈一般是可以被伸展得比较大（如：8MB）。然而对于线程呢？<br>首先线程的栈是怎么回事？前面说过，<strong>线程的 mm 是共享其父进程的</strong>。虽然栈是 mm 中的一个 vma，但是线程不能与其父进程共用这个 vma（两个运行实体显然不用共用一个栈）。于是，在线程创建时，线程库通过 mmap 新建了一个 vma，以此作为线程的栈（大于一般为：2M）。</p><p>可见，线程的栈在某种意义上并不是真正栈，它是一个固定的区域，并且容量很有限。</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 内存管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序人生 | UNIX 环境高级编程技巧之 getopt &amp; getopt_long 使用示例</title>
      <link href="/2014/01/10/advanced-programming-in-the-unix-environment-getopt/"/>
      <url>/2014/01/10/advanced-programming-in-the-unix-environment-getopt/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p><strong>本文首发于 2014-01-10 19:48:48</strong></p></blockquote><h1 id="1-getopt"><a href="#1-getopt" class="headerlink" title="1. getopt"></a>1. getopt</h1><p>该函数用来解析命令行参数。</p><h2 id="1-1-函数定义"><a href="#1-1-函数定义" class="headerlink" title="1.1. 函数定义"></a>1.1. 函数定义</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getopt</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * <span class="keyword">const</span> argv[], <span class="keyword">const</span> <span class="keyword">char</span> *optstring)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>前两个参数设为 main 函数的两个参数。</p><blockquote><p>optstring 设为由该命令要处理的各个选项组成的字符串。选项后面带有冒号’：’时，该选项是一个带参数的选项。</p><p>举例：<code>make -f filename -n</code><br>-f 是一个带参数的选项，-n 是一个没有参数的选项。</p><p>可以像下面这样调用 <code>函数getopt</code> 来解析上面的例子。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="built_in">getopt</span>(argc, argv, <span class="string">&quot;f:n&quot;</span>);</span><br></pre></td></tr></table></figure><p>此函数的<strong>返回值即为当前找到的命令选项，全部选项都找到时的返回值为-1</strong>。</p><p>通常一个命令有多个选项，为了取得所有选项，需要循环调用此函数，直到返回值为-1。<br>要使用此函数，还有几个全局变量必须要了解：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span> *optarg;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> optind, opterr, optopt;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">optarg: 当前选项带参数时，optarg指向该参数。</span></span><br><span class="line"><span class="comment">optind: argv的索引。通常选项参数取得完毕时，通过此变量可以取得非选项参数（argv[optind]）</span></span><br><span class="line"><span class="comment">optopt: 一个选项在argv中有，但在optstring中不存在时，或者一个带参数的选项没有参数时，</span></span><br><span class="line"><span class="comment">        getopt()返回&#x27;?&#x27;，同时将optopt设为该选项。</span></span><br><span class="line"><span class="comment">opterr: 将此变量设置为0，可以抑制getopt()输出错误信息。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="1-2-实例"><a href="#1-2-实例" class="headerlink" title="1.2. 实例"></a>1.2. 实例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[ ])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">int</span> flg = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> filename[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">char</span> testdata[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;usage:%s [-f filename] [-n] testdata\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    opterr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = <span class="built_in">getopt</span>(argc, argv, <span class="string">&quot;f:n&quot;</span>)) != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (c)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;f&#x27;</span>:</span><br><span class="line">                <span class="built_in">strncpy</span>(filename, optarg, <span class="built_in"><span class="keyword">sizeof</span></span>(filename)<span class="number">-1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;n&#x27;</span>:</span><br><span class="line">                flg = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;?&#x27;</span>:</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;usage:%s [-f filename] [-n] testdata\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argv[optind] == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;usage:%s [-f filename] [-n] testdata\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strncpy</span>(testdata, argv[optind], <span class="built_in"><span class="keyword">sizeof</span></span>(testdata)<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;fliename:%s flg:%d testdata:%s\n&quot;</span>, filename, flg, testdata);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-getopt-long"><a href="#2-getopt-long" class="headerlink" title="2. getopt_long"></a>2. getopt_long</h1><p>这是支持长命令选项的函数，长选项以’–’开头。</p><h2 id="2-1-函数定义"><a href="#2-1-函数定义" class="headerlink" title="2.1. 函数定义"></a>2.1. 函数定义</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getopt_long</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * <span class="keyword">const</span> argv[],</span></span></span><br><span class="line"><span class="params"><span class="function">                  <span class="keyword">const</span> <span class="keyword">char</span> *optstring,</span></span></span><br><span class="line"><span class="params"><span class="function">                  <span class="keyword">const</span> struct option *longopts, <span class="keyword">int</span> *longindex)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;getopt.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>前三个参数与函数 getopt 的参数是一样的。</p><p>只支持长选项时，参数 optstring 设置为 NULL 或者空字符串””。</p><p>第四个参数是一个构造体 struct option 的数组。此构造体定义在头文件 getopt.h 中。此数组的最后一个须将成员都置为 0。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">option</span> &#123;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *name;</span><br><span class="line"><span class="keyword">int</span> has_arg;</span><br><span class="line"><span class="keyword">int</span> *flag;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>构造体各个成员的解释如下：</strong></p><blockquote><ul><li>name : 长选项的名字。</li><li>has_arg : no_argument 或 0 表示此选项不带参数，required_argument 或 1 表示此选项带参数，optional_argument 或 2 表示是一个可选选项。</li><li>flag : 设置为 NULL 时，getopt_long()返回 val,设置为 NULL 以外时，&gt;getopt_long()返回 0，且将*flag 设为 val。</li><li>val : 返回值或者*flag 的设定值。有些命令既支持长选项也支持短选项，可以通过设定此值为短选项实现。</li></ul></blockquote><p>第五个参数是一个输出参数，函数 getopt_long()返回时，longindex 的值是 struct option 数组的索引。</p><p><strong>关于返回值有以下几种情况：</strong></p><blockquote><ul><li>识别为短选项时，返回值为该短选项。</li><li>识别为长选项时，如果 flag 是 NULL 的情况下，返回 val,如果 flag 非 NULL 的情况下，返回 0。</li><li>所有选项解析结束时返回-1。</li><li>存在不能识别的选项或者带参数选项的参数不存在时返回’?’ 。</li></ul></blockquote><h2 id="2-2-实例"><a href="#2-2-实例" class="headerlink" title="2.2. 实例"></a>2.2. 实例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>     <span class="comment">/* for printf */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span>    <span class="comment">/* for exit */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;getopt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> c;</span><br><span class="line">   <span class="keyword">int</span> digit_optind = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">       <span class="keyword">int</span> this_option_optind = optind ? optind : <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">int</span> option_index = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">option</span> <span class="title">long_options</span>[] =</span> &#123;</span><br><span class="line">           &#123;<span class="string">&quot;add&quot;</span>,     required_argument, <span class="number">0</span>,  <span class="number">0</span> &#125;,</span><br><span class="line">           &#123;<span class="string">&quot;append&quot;</span>,  no_argument,       <span class="number">0</span>,  <span class="number">0</span> &#125;,</span><br><span class="line">           &#123;<span class="string">&quot;delete&quot;</span>,  required_argument, <span class="number">0</span>,  <span class="number">0</span> &#125;,</span><br><span class="line">           &#123;<span class="string">&quot;verbose&quot;</span>, no_argument,       <span class="number">0</span>,  <span class="number">0</span> &#125;,</span><br><span class="line">           &#123;<span class="string">&quot;create&quot;</span>,  required_argument, <span class="number">0</span>, <span class="string">&#x27;c&#x27;</span>&#125;,</span><br><span class="line">           &#123;<span class="string">&quot;file&quot;</span>,    required_argument, <span class="number">0</span>, <span class="string">&#x27;f&#x27;</span>&#125;,</span><br><span class="line">           &#123;<span class="number">0</span>,         <span class="number">0</span>,                 <span class="number">0</span>,  <span class="number">0</span> &#125;</span><br><span class="line">       &#125;;</span><br><span class="line"></span><br><span class="line">       c = <span class="built_in">getopt_long_only</span>(argc, argv, <span class="string">&quot;abc:d:f:012&quot;</span>, long_options, &amp;option_index);</span><br><span class="line">       <span class="keyword">if</span> (c == <span class="number">-1</span>)</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">       <span class="built_in"><span class="keyword">switch</span></span> (c) &#123;</span><br><span class="line">       <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;option %s&quot;</span>, long_options[option_index].name);</span><br><span class="line">           <span class="keyword">if</span> (optarg)</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot; with arg %s&quot;</span>, optarg);</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">           <span class="keyword">if</span> (digit_optind != <span class="number">0</span> &amp;&amp; digit_optind != this_option_optind)</span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">&quot;digits occur in two different argv-elements.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">           digit_optind = this_option_optind;</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;option %c\n&quot;</span>, c);</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;option a\n&quot;</span>);</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;option b\n&quot;</span>);</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;option c with value &#x27;%s&#x27;\n&quot;</span>, optarg);</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;option d with value &#x27;%s&#x27;\n&quot;</span>, optarg);</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;f&#x27;</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;option f with value &#x27;%s&#x27;\n&quot;</span>, optarg);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&#x27;?&#x27;</span>:</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">default</span>:</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;?? getopt returned character code 0%o ??\n&quot;</span>, c);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (optind &lt; argc) &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;non-option ARGV-elements: &quot;</span>);</span><br><span class="line">       <span class="keyword">while</span> (optind &lt; argc)</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>, argv[optind++]);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> APUE </tag>
            
            <tag> UNIX </tag>
            
            <tag> C语言 </tag>
            
            <tag> getopt </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
