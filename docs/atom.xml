<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DBKernel</title>
  
  <subtitle>资深数据库内核研发</subtitle>
  <link href="http://dbkernel.github.io/atom.xml" rel="self"/>
  
  <link href="http://dbkernel.github.io/"/>
  <updated>2023-07-06T03:30:00.498Z</updated>
  <id>http://dbkernel.github.io/</id>
  
  <author>
    <name>DBKernel</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>源码分析 | MySQL测试框架 MTR 系列教程（三）：源码篇</title>
    <link href="http://dbkernel.github.io/2023/07/05/mysql-mtr-03-source-code/"/>
    <id>http://dbkernel.github.io/2023/07/05/mysql-mtr-03-source-code/</id>
    <published>2023-07-05T14:03:44.000Z</published>
    <updated>2023-07-06T03:30:00.498Z</updated>
    
    <content type="html"><![CDATA[<p><strong>作者：卢文双 资深数据库内核研发</strong></p><p><strong>序言</strong>：</p><p>以前对 MySQL 测试框架 MTR 的使用，主要集中于 SQL 正确性验证。近期由于工作需要，深入了解了 MTR 的方方面面，发现 MTR 的能力不仅限于此，还支持单元测试、压力测试、代码覆盖率测试、内存错误检测、线程竞争与死锁等功能，因此，本着分享的精神，将其总结成一个系列。</p><p>主要内容如下：</p><ul><li>入门篇：工作机制、编译安装、参数、指令示例、推荐用法、添加 case、常见问题、异常调试</li><li>进阶篇：高阶用法，包括单元测试、压力测试、代码覆盖率测试、内存错误检测、线程竞争与死锁</li><li>源码篇：分析 MTR 的源码</li><li>语法篇：单元测试、压力测试、mysqltest 语法、异常调试</li></ul><p>由于个人水平有限，所述难免有错误之处，望雅正。</p><p><strong>本文是第三篇源码篇。</strong></p><span id="more"></span><blockquote><p><strong>本文首发于 2023-07-05 22:03:44</strong></p></blockquote><hr><p>MTR 系列基于 MySQL 8.0.29 版本，如有例外，会特别说明。</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>首先回顾一下<strong>MySQL 测试框架主要包含的组件：</strong></p><ul><li><a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_MYSQL_TEST_RUN_PL.html" title="mysql-test-run.pl">mysql-test-run.pl</a> ：perl 脚本，简称 <strong>mtr</strong>，是 MySQL 最常用的测试工具，负责控制流程，包括启停、识别执行哪些用例、创建文件夹、收集结果等等，主要作用是验证 SQL 语句在各种场景下是否返回正确的结果。</li><li><a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_MYSQLTEST.html" title="mysqltest">mysqltest</a> ：C++二进制程序，负责执行测试用例，包括读文件、解析特定语法、执行用例。用例的特殊语法（比如，<code>--source</code>，<code>--replace_column</code>等）都在<code>command_names</code>和<code>enum_commands</code>两个枚举结构体中。</li><li><a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_MYSQL_CLIENT_TEST.html" title="mysql_client_test">mysql_client_test</a> ：C++二进制程序，用于测试 MySQL 客户端 API（<a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_MYSQLTEST.html" title="mysqltest">mysqltest</a> 无法用于测试 API）。</li><li><a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_MYSQL_STRESS_TEST_PL.html" title="mysql-stress-test.pl">mysql-stress-test.pl</a> ：perl 脚本，用于 MySQL Server 的压力测试。</li><li>支持 gcov/gprof 代码覆盖率测试工具。</li></ul><p>除此之外，还提供了单元测试工具，以便为存储引擎和插件创建单独的单元测试程序。</p><p><strong>各个组件的位置如下：</strong></p><table><thead><tr><th>源码位置</th><th>安装目录位置</th></tr></thead><tbody><tr><td><code>mysql-test/mysql-test-run.pl</code></td><td><code>mysql-test/mysql-test-run.pl</code></td></tr><tr><td><code>client/mysqltest.cc</code></td><td><code>bin/mysqltest</code></td></tr><tr><td><code>testclients/mysql_client_test.cc</code></td><td><code>bin/mysql_client_test</code></td></tr><tr><td><code>mysql-test/mysql-stress-test.pl</code></td><td><code>mysql-test/mysql-stress-test.pl</code></td></tr></tbody></table><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a><strong>基本原理</strong></h2><p>简要回顾一下 MTR 的基本原理：</p><p>SQL 正确性：对比（diff）期望输出和实际输出，若完全一致，则测试通过；反之，测试失败。</p><p>高级用法：以下工具都需要在编译时启用对应的选项。</p><ul><li>valgrind：mtr 根据传参拼接 valgrind 指令的方式来测试。</li><li>ASAN：包含编译器插桩模块，还有一个运行时的库用来替换 malloc 函数。插桩模块主要用在栈内存上，而运行时库主要用在堆内存上。</li><li>MSAN：核心是编译插桩，同时还有一个运行时库，用来在启动时，将低地址内存设置为不可读，然后映射为影子内存。</li><li>UBSAN：在编译时对可疑操作进行插桩，以捕获程序运行时的未定义行为。同时，还有一个额外的运行时库。</li><li>gcov/gprof：mtr 根据传参拼接相关指令来测试。</li><li>单元测试：通过 mtr 调用 mysqltest，再调用 <code>xx-t</code> 等生成的二进制文件。</li></ul><p>更多内容请参考本系列「（一）入门篇」及「（二）进阶篇」。</p><h2 id="整体流程图"><a href="#整体流程图" class="headerlink" title="整体流程图"></a>整体流程图</h2><p><img src="/2023/07/05/mysql-mtr-03-source-code/threadpool-architecture.png" alt="线程池流程图" title="线程池流程图"></p><h2 id="mysql-test-run-pl"><a href="#mysql-test-run-pl" class="headerlink" title="mysql-test-run.pl"></a>mysql-test-run.pl</h2><h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><p><strong>MTR 框架时序图如下所示：</strong></p><p><img src="/2023/07/05/mysql-mtr-03-source-code/threadpool-sequence-chart.png" alt="MTR时序图（来源于腾讯数据库技术公众号）" title="MTR时序图（来源于腾讯数据库技术公众号）"></p><h3 id="框架流程"><a href="#框架流程" class="headerlink" title="框架流程"></a>框架流程</h3><p>如上图所示，<code>mysql-test-run.pl</code>框架运行流程如下：</p><p>1、<strong>初始化（Initialization）</strong>。</p><ul><li>确定用例执行范围（<code>collect_test_cases</code>），包括运行哪些 suite，skip 哪些用例，在本阶段根据<code>disabled.def</code>文件、<code>--skip-xxx</code>命令（比如<code>skip-rpl</code>）等确定执行用例。将所有用例组织到一个大的内存结构中（<code>my @tests_list</code>、<code>my @tests</code>），包括用例启动参数，用例。</li><li>同时，初始化数据库（<code>initialize_servers()-&gt;mysql_install_db()</code>）。后面运行用例启动数据库时，不需要每次初始化，只需从这里的目录中拷贝启动。</li></ul><p>2、<strong>运行用例（run test）</strong>。</p><p>主线程根据参数<code>--parallel</code>（默认是 1）启动一个或者多个用例执行线程（<code>run_worker()</code>），各线程有自己独立的 client port，data dir 等。</p><p>启动的<code>run_worker</code>与主线程之间是 server-client 模式，主线程是 server，<code>run_worker()</code>是 client。</p><ul><li>主线程与<code>run_worker</code>是一问一答模式，主线程向<code>run_worker</code>发送运行用例的文件路径、配置文件参数等各种参数信息，<code>run_worker</code>向主线程返回运行结果，直到所有在 collection 中的用例都运行完毕，主线程 close 各<code>run_worker</code>，进行收尾工作。</li><li>主线程先读取各<code>run_worker</code>返回值，对上一个用例进行收尾工作。之后，读取 collection 中的用例，通过本地 socket 发送到<code>run_worker</code>线程，<code>run_worker</code>线程接收到主线程命令，运行本次用例执行函数<code>run_testcase()</code>，而 <code>run_testcase()</code>主要负责 3 件事：<strong>启动 mysqld、启动并监控 mysqltest，处理执行结果</strong>。<ul><li>启动 mysqld： 根据参数启动一个或者多个 mysqld（<code>start_servers()</code>），在<code>start_servers</code>大多数情况下会拷贝主线程初始化后的目录到<code>run_worker</code>的目录，作为新实例的启动目录，用 shell 命令启动数据库。</li><li>启动并监控 mysqltest：用例在<code>mysqltest</code>中执行（会逐行扫描 <code>*.test</code> 文件中的 SQL 或指令并于 MySQL 中执行），<code>run_worker</code>线程会监控<code>mysqltest</code>的运行状态，监测其是否运行超时或者运行结束。</li><li>处理执行结果：<code>mysqltest</code>执行结束会留下执行日志，框架根据执行日志判断执行是否通过，如果没通过是否需要重试等</li></ul></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>本小节所涉及代码都来自于<code>mysql-test-run.pl</code>文件，但由于该文件内容过多，此处只截取关键流程代码。</p><h4 id="引用模块"><a href="#引用模块" class="headerlink" title="引用模块"></a>引用模块</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&quot;lib/mtr_gcov.pl&quot;</span>;</span><br><span class="line"><span class="keyword">require</span> <span class="string">&quot;lib/mtr_gprof.pl&quot;</span>;</span><br><span class="line"><span class="keyword">require</span> <span class="string">&quot;lib/mtr_io.pl&quot;</span>;</span><br><span class="line"><span class="keyword">require</span> <span class="string">&quot;lib/mtr_lock_order.pl&quot;</span>;</span><br><span class="line"><span class="keyword">require</span> <span class="string">&quot;lib/mtr_misc.pl&quot;</span>;</span><br><span class="line"><span class="keyword">require</span> <span class="string">&quot;lib/mtr_process.pl&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="主流程"><a href="#主流程" class="headerlink" title="主流程"></a>主流程</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># BEGIN 是 Perl 语言的标记，用于程序体“运行前”执行的代码逻辑，会在所有代码（包括main函数）执行前执行</span></span><br><span class="line">BEGIN &#123;</span><br><span class="line">  <span class="comment"># Check that mysql-test-run.pl is started from mysql-test/</span></span><br><span class="line">  <span class="keyword">unless</span> (-f <span class="string">&quot;mysql-test-run.pl&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;**** ERROR **** &quot;</span>,</span><br><span class="line">      <span class="string">&quot;You must start mysql-test-run from the mysql-test/ directory\n&quot;</span>;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Check that lib exist</span></span><br><span class="line">  <span class="keyword">unless</span> (-d <span class="string">&quot;lib/&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;**** ERROR **** &quot;</span>, <span class="string">&quot;Could not find the lib/ directory \n&quot;</span>;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># END 是 Perl 语言的标记，用于程序体“运行后”执行的代码逻辑，会在所有代码执行后执行</span></span><br><span class="line">END &#123;</span><br><span class="line">    <span class="keyword">my</span> $current_id = $$;</span><br><span class="line">    <span class="keyword">if</span> ($parent_pid &amp;&amp; $current_id == $parent_pid) &#123;</span><br><span class="line">        remove_redundant_thread_id_file_locations();</span><br><span class="line">  clean_unique_id_dir();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">defined</span> $opt_tmpdir_pid <span class="keyword">and</span> $opt_tmpdir_pid == $$) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!$opt_start_exit) &#123;</span><br><span class="line">      <span class="comment"># Remove the tempdir this process has created</span></span><br><span class="line">      mtr_verbose(<span class="string">&quot;Removing tmpdir $opt_tmpdir&quot;</span>);</span><br><span class="line">      rmtree($opt_tmpdir);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      mtr_warning(</span><br><span class="line">          <span class="string">&quot;tmpdir $opt_tmpdir should be removed after the server has finished&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span>(STDERR);</span><br><span class="line">$| = <span class="number">1</span>;    <span class="comment"># Automatically flush STDERR - output should be in sync with STDOUT</span></span><br><span class="line"><span class="keyword">select</span>(STDOUT);</span><br><span class="line">$| = <span class="number">1</span>;    <span class="comment"># Automatically flush STDOUT</span></span><br><span class="line"></span><br><span class="line">main();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="main-函数"><a href="#main-函数" class="headerlink" title="main 函数"></a>main 函数</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">main</span> </span>&#123;</span><br><span class="line">  <span class="comment"># Default, verbosity on</span></span><br><span class="line">  report_option(<span class="string">&#x27;verbose&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment"># This is needed for test log evaluation in &quot;gen-build-status-page&quot;</span></span><br><span class="line">  <span class="comment"># in all cases where the calling tool does not log the commands directly</span></span><br><span class="line">  <span class="comment"># before it executes them, like &quot;make test-force-pl&quot; in RPM builds.</span></span><br><span class="line">  mtr_report(<span class="string">&quot;Logging: $0 &quot;</span>, <span class="keyword">join</span>(<span class="string">&quot; &quot;</span>, @ARGV));</span><br><span class="line"></span><br><span class="line">  command_line_setup(); <span class="comment"># 分析命令行参数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Create a directory to store build thread id files</span></span><br><span class="line">  create_unique_id_dir();</span><br><span class="line"></span><br><span class="line">  $build_thread_id_file = <span class="string">&quot;$build_thread_id_dir/&quot;</span> . $$ . <span class="string">&quot;_unique_ids.log&quot;</span>;</span><br><span class="line">  <span class="keyword">open</span>(FH, <span class="string">&quot;&gt;&gt;&quot;</span>, $build_thread_id_file) <span class="keyword">or</span></span><br><span class="line">    <span class="keyword">die</span> <span class="string">&quot;Can&#x27;t open file $build_thread_id_file: $!&quot;</span>;</span><br><span class="line">  <span class="keyword">print</span> FH <span class="string">&quot;# Unique id file paths\n&quot;</span>;</span><br><span class="line">  <span class="keyword">close</span>(FH);</span><br><span class="line"></span><br><span class="line">  <span class="comment"># --help will not reach here, so now it&#x27;s safe to assume we have binaries</span></span><br><span class="line">  My::SafeProcess::find_bin($bindir, $path_client_bindir);</span><br><span class="line"></span><br><span class="line">  $secondary_engine_support =</span><br><span class="line">    ($secondary_engine_support <span class="keyword">and</span> find_secondary_engine($bindir)) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ($secondary_engine_support) &#123;</span><br><span class="line">    check_secondary_engine_features(using_extern());</span><br><span class="line">    <span class="comment"># Append secondary engine test suite to list of default suites if found.</span></span><br><span class="line">    add_secondary_engine_suite();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ($opt_gcov) &#123; <span class="comment"># 是否启用了 -gcov 参数</span></span><br><span class="line">    gcov_prepare($basedir); <span class="comment"># 删除之前生成的临时文件，比如 *.gcov、*.da、*.gcda</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ($opt_lock_order) &#123; <span class="comment"># 是否启用了 --lock-order=bool 参数</span></span><br><span class="line">    lock_order_prepare($bindir); <span class="comment"># 创建 lock_order 目录</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">######################################</span></span><br><span class="line">  <span class="comment"># 根据参数，收集需要测试的 suites</span></span><br><span class="line">  <span class="comment">######################################</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Collect test cases from a file and put them into &#x27;@opt_cases&#x27;.</span></span><br><span class="line">  <span class="keyword">if</span> ($opt_do_test_list) &#123; <span class="comment"># 对应选项 --do-test-list=FILE ，各个测试 case 按行分割，如需注释则添加 # 号</span></span><br><span class="line">    collect_test_cases_from_list(\@opt_cases, $opt_do_test_list, \$opt_ctest);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">my</span> $suite_set;</span><br><span class="line">  <span class="keyword">if</span> ($opt_suites) &#123; <span class="comment"># 是否通过 --suites 参数指定了要运行的 suites 集合</span></span><br><span class="line">    <span class="comment"># Collect suite set if passed through the MTR command line</span></span><br><span class="line">    <span class="keyword">if</span> ($opt_suites =~ <span class="regexp">/^default$/i</span>) &#123;</span><br><span class="line">      $suite_set = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">elsif</span> ($opt_suites =~ <span class="regexp">/^non[-]default$/i</span>) &#123;</span><br><span class="line">      $suite_set = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">elsif</span> ($opt_suites =~ <span class="regexp">/^all$/i</span>) &#123;</span><br><span class="line">      $suite_set = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment"># Use all suites(suite set 2) in case the suite set isn&#x27;t explicitly</span></span><br><span class="line">    <span class="comment"># specified and :-</span></span><br><span class="line">    <span class="comment"># a) A PREFIX or REGEX is specified using the --do-suite option</span></span><br><span class="line">    <span class="comment"># b) Test cases are passed on the command line</span></span><br><span class="line">    <span class="comment"># c) The --do-test or --do-test-list options are used</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># If none of the above are used, use the default suite set (i.e.,</span></span><br><span class="line">    <span class="comment"># suite set 0)</span></span><br><span class="line">    $suite_set = ($opt_do_suite <span class="keyword">or</span></span><br><span class="line">                    @opt_cases  <span class="keyword">or</span></span><br><span class="line">                    $::do_test  <span class="keyword">or</span></span><br><span class="line">                    $opt_do_test_list</span><br><span class="line">    ) ? <span class="number">2</span> : <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Ignore the suite set parameter in case a list of suites is explicitly</span></span><br><span class="line">  <span class="comment"># given</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">defined</span> $suite_set) &#123;</span><br><span class="line">    mtr_print(</span><br><span class="line">         <span class="string">&quot;Using &#x27;&quot;</span> . (<span class="string">&quot;default&quot;</span>, <span class="string">&quot;non-default&quot;</span>, <span class="string">&quot;all&quot;</span>)[$suite_set] . <span class="string">&quot;&#x27; suites&quot;</span>)</span><br><span class="line">      <span class="keyword">if</span> @opt_cases;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($suite_set == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment"># Run default set of suites</span></span><br><span class="line">      $opt_suites = $DEFAULT_SUITES;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment"># Include the main suite by default when suite set is &#x27;all&#x27;</span></span><br><span class="line">      <span class="comment"># since it does not have a directory structure like:</span></span><br><span class="line">      <span class="comment"># mysql-test/&lt;suite_name&gt;/[&lt;t&gt;,&lt;r&gt;,&lt;include&gt;]</span></span><br><span class="line">      $opt_suites = ($suite_set == <span class="number">2</span>) ? <span class="string">&quot;main&quot;</span> : <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment"># Scan all sub-directories for available test suites.</span></span><br><span class="line">      <span class="comment"># The variable $opt_suites is updated by get_all_suites()</span></span><br><span class="line">      find(\&amp;get_all_suites, <span class="string">&quot;$glob_mysql_test_dir&quot;</span>);</span><br><span class="line">      find(&#123; <span class="string">wanted =&gt;</span> \&amp;get_all_suites, <span class="string">follow =&gt;</span> <span class="number">1</span> &#125;, <span class="string">&quot;$basedir/internal&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> (-d <span class="string">&quot;$basedir/internal&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ($suite_set == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment"># Run only with non-default suites</span></span><br><span class="line">        <span class="keyword">for</span> <span class="keyword">my</span> $suite (<span class="keyword">split</span>(<span class="string">&quot;,&quot;</span>, $DEFAULT_SUITES)) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="string">&quot;$suite&quot;</span>, <span class="string">&quot;i_$suite&quot;</span>) &#123;</span><br><span class="line">            remove_suite_from_list($_);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment"># Remove cluster test suites if ndb cluster is not enabled</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">not</span> $ndbcluster_enabled) &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="keyword">my</span> $suite (<span class="keyword">split</span>(<span class="string">&quot;,&quot;</span>, $opt_suites)) &#123;</span><br><span class="line">          <span class="keyword">next</span> <span class="keyword">if</span> <span class="keyword">not</span> $suite =~ <span class="regexp">/ndb/</span>;</span><br><span class="line">          remove_suite_from_list($suite);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment"># Remove secondary engine test suites if not supported</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">defined</span> $::secondary_engine <span class="keyword">and</span> <span class="keyword">not</span> $secondary_engine_support) &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="keyword">my</span> $suite (<span class="keyword">split</span>(<span class="string">&quot;,&quot;</span>, $opt_suites)) &#123;</span><br><span class="line">          <span class="keyword">next</span> <span class="keyword">if</span> <span class="keyword">not</span> $suite =~ <span class="regexp">/$::secondary_engine/</span>;</span><br><span class="line">          remove_suite_from_list($suite);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">my</span> $mtr_suites = $opt_suites;</span><br><span class="line">  <span class="comment"># Skip suites which don&#x27;t match the --do-suite filter</span></span><br><span class="line">  <span class="keyword">if</span> ($opt_do_suite) &#123;</span><br><span class="line">    <span class="keyword">my</span> $opt_do_suite_reg = init_pattern($opt_do_suite, <span class="string">&quot;--do-suite&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">my</span> $suite (<span class="keyword">split</span>(<span class="string">&quot;,&quot;</span>, $opt_suites)) &#123;</span><br><span class="line">      <span class="keyword">if</span> ($opt_do_suite_reg <span class="keyword">and</span> <span class="keyword">not</span> $suite =~ <span class="regexp">/$opt_do_suite_reg/</span>) &#123;</span><br><span class="line">        remove_suite_from_list($suite);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Removing &#x27;,&#x27; at the end of $opt_suites if exists</span></span><br><span class="line">    $opt_suites =~ <span class="regexp">s/,$//</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ($opt_skip_sys_schema) &#123;</span><br><span class="line">    remove_suite_from_list(<span class="string">&quot;sysschema&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ($opt_suites) &#123;</span><br><span class="line">    <span class="comment"># Remove extended suite if the original suite is already in</span></span><br><span class="line">    <span class="comment"># the suite list</span></span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">my</span> $suite (<span class="keyword">split</span>(<span class="string">&quot;,&quot;</span>, $opt_suites)) &#123;</span><br><span class="line">      <span class="keyword">if</span> ($suite =~ <span class="regexp">/^i_(.*)/</span>) &#123;</span><br><span class="line">        <span class="keyword">my</span> $orig_suite = $1;</span><br><span class="line">        <span class="keyword">if</span> ($opt_suites =~ <span class="regexp">/,$orig_suite,/</span> <span class="keyword">or</span></span><br><span class="line">            $opt_suites =~ <span class="regexp">/^$orig_suite,/</span> <span class="keyword">or</span></span><br><span class="line">            $opt_suites =~ <span class="regexp">/^$orig_suite$/</span> <span class="keyword">or</span></span><br><span class="line">            $opt_suites =~ <span class="regexp">/,$orig_suite$/</span>) &#123;</span><br><span class="line">          remove_suite_from_list($suite);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Finally, filter out duplicate suite names if present,</span></span><br><span class="line">    <span class="comment"># i.e., using `--suite=ab,ab mytest` should not end up</span></span><br><span class="line">    <span class="comment"># running ab.mytest twice.</span></span><br><span class="line">    <span class="keyword">my</span> %unique_suites = <span class="keyword">map</span> &#123; $_ =&gt; <span class="number">1</span> &#125; <span class="keyword">split</span>(<span class="string">&quot;,&quot;</span>, $opt_suites);</span><br><span class="line">    $opt_suites = <span class="keyword">join</span>(<span class="string">&quot;,&quot;</span>, <span class="keyword">sort</span> <span class="keyword">keys</span> %unique_suites);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (@opt_cases) &#123;</span><br><span class="line">      mtr_verbose(<span class="string">&quot;Using suite(s): $opt_suites&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      mtr_report(<span class="string">&quot;Using suite(s): $opt_suites&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ($opt_do_suite) &#123;</span><br><span class="line">      mtr_error(<span class="string">&quot;The PREFIX/REGEX &#x27;$opt_do_suite&#x27; doesn&#x27;t match any of &quot;</span> .</span><br><span class="line">                <span class="string">&quot;&#x27;$mtr_suites&#x27; suite(s)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">##############################################</span></span><br><span class="line">  <span class="comment"># 决定并发数量：</span></span><br><span class="line">  <span class="comment"># 1. 如果设置了 --parallel 参数，则根据参数来决定；</span></span><br><span class="line">  <span class="comment"># 2. 反之，根据 CPU 核心数来决定；</span></span><br><span class="line">  <span class="comment">##############################################</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Environment variable to hold number of CPUs</span></span><br><span class="line">  <span class="keyword">my</span> $sys_info = My::SysInfo-&gt;new();</span><br><span class="line">  $ENV<span class="string">&#123;NUMBER_OF_CPUS&#125;</span> = $sys_info-&gt;num_cpus();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ($opt_parallel eq <span class="string">&quot;auto&quot;</span>) &#123;</span><br><span class="line">    <span class="comment"># Try to find a suitable value for number of workers</span></span><br><span class="line">    $opt_parallel = $ENV<span class="string">&#123;NUMBER_OF_CPUS&#125;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">defined</span> $ENV<span class="string">&#123;MTR_MAX_PARALLEL&#125;</span>) &#123;</span><br><span class="line">      <span class="keyword">my</span> $max_par = $ENV<span class="string">&#123;MTR_MAX_PARALLEL&#125;</span>;</span><br><span class="line">      $opt_parallel = $max_par <span class="keyword">if</span> ($opt_parallel &gt; $max_par);</span><br><span class="line">    &#125;</span><br><span class="line">    $opt_parallel = <span class="number">1</span> <span class="keyword">if</span> ($opt_parallel &lt; <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  init_timers(); <span class="comment"># 字面意义，初始化 timer</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">##############################################</span></span><br><span class="line">  <span class="comment"># 之前收集了 test suites，现在收集 test cases</span></span><br><span class="line">  <span class="comment">##############################################</span></span><br><span class="line"></span><br><span class="line">  mtr_report(<span class="string">&quot;Collecting tests&quot;</span>);</span><br><span class="line">  <span class="keyword">my</span> $tests = collect_test_cases($opt_reorder, $opt_suites,</span><br><span class="line">                                 \@opt_cases,  $opt_skip_test_list);</span><br><span class="line">  mark_time_used(<span class="string">&#x27;collect&#x27;</span>);</span><br><span class="line">  <span class="comment"># A copy of the tests list, that will not be modified even after the tests</span></span><br><span class="line">  <span class="comment"># are executed.</span></span><br><span class="line">  <span class="keyword">my</span> @tests_list = @&#123;$tests&#125;;</span><br><span class="line"></span><br><span class="line">  check_secondary_engine_option($tests) <span class="keyword">if</span> $secondary_engine_support;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ($opt_report_features) &#123;</span><br><span class="line">    <span class="comment"># Put &quot;report features&quot; as the first test to run. No result file,</span></span><br><span class="line">    <span class="comment"># prints the output on console.</span></span><br><span class="line">    <span class="keyword">my</span> $tinfo = My::Test-&gt;new(<span class="string">master_opt    =&gt;</span> [],</span><br><span class="line">                              <span class="string">name          =&gt;</span> <span class="string">&#x27;report_features&#x27;</span>,</span><br><span class="line">                              <span class="string">path          =&gt;</span> <span class="string">&#x27;include/report-features.test&#x27;</span>,</span><br><span class="line">                              <span class="string">shortname     =&gt;</span> <span class="string">&#x27;report_features&#x27;</span>,</span><br><span class="line">                              <span class="string">slave_opt     =&gt;</span> [],</span><br><span class="line">                              <span class="string">template_path =&gt;</span> <span class="string">&quot;include/default_my.cnf&quot;</span>,);</span><br><span class="line">    <span class="keyword">unshift</span>(@$tests, $tinfo);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">my</span> $num_tests = @$tests;</span><br><span class="line">  <span class="keyword">if</span> ($num_tests == <span class="number">0</span>) &#123;</span><br><span class="line">    mtr_report(<span class="string">&quot;No tests found, terminating&quot;</span>);</span><br><span class="line">    <span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">##############################################</span></span><br><span class="line">  <span class="comment"># 初始化测试所需的 servers</span></span><br><span class="line">  <span class="comment"># 1. kill 掉之前运行 mtr 残留的进程</span></span><br><span class="line">  <span class="comment"># 2. 通过 mysqld --initialize [options] 创建测试所用 database</span></span><br><span class="line">  <span class="comment">##############################################</span></span><br><span class="line"></span><br><span class="line">  initialize_servers();</span><br><span class="line"></span><br><span class="line">  <span class="comment">##############################################</span></span><br><span class="line">  <span class="comment"># 以并行方式运行单元测试</span></span><br><span class="line">  <span class="comment">##############################################</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Run unit tests in parallel with the same number of workers as</span></span><br><span class="line">  <span class="comment"># specified to MTR.</span></span><br><span class="line">  $ctest_parallel = $opt_parallel;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Limit parallel workers to the number of regular tests to avoid</span></span><br><span class="line">  <span class="comment"># idle workers.</span></span><br><span class="line">  $opt_parallel = $num_tests <span class="keyword">if</span> $opt_parallel &gt; $num_tests;</span><br><span class="line">  $ENV<span class="string">&#123;MTR_PARALLEL&#125;</span> = $opt_parallel;</span><br><span class="line">  mtr_report(<span class="string">&quot;Using parallel: $opt_parallel&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">my</span> $is_option_mysqlx_port_set = $opt_mysqlx_baseport <span class="keyword">ne</span> <span class="string">&quot;auto&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> ($opt_parallel &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ($opt_start_exit || $opt_stress || $is_option_mysqlx_port_set) &#123;</span><br><span class="line">      mtr_warning(<span class="string">&quot;Parallel cannot be used neither with --start-and-exit nor&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;--stress nor --mysqlx_port.\nSetting parallel value to 1.&quot;</span>);</span><br><span class="line">      $opt_parallel = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $num_tests_for_report = $num_tests;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Shutdown report is one extra test created to report</span></span><br><span class="line">  <span class="comment"># any failures or crashes during shutdown.</span></span><br><span class="line">  $num_tests_for_report = $num_tests_for_report + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># When either --valgrind or --sanitize option is enabled, a dummy</span></span><br><span class="line">  <span class="comment"># test is created.</span></span><br><span class="line">  <span class="keyword">if</span> ($opt_valgrind_mysqld <span class="keyword">or</span> $opt_sanitize) &#123;</span><br><span class="line">    $num_tests_for_report = $num_tests_for_report + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Please note, that disk_usage() will print a space to separate its</span></span><br><span class="line">  <span class="comment"># information from the preceding string, if the disk usage report is</span></span><br><span class="line">  <span class="comment"># enabled. Otherwise an empty string is returned.</span></span><br><span class="line">  <span class="keyword">my</span> $disk_usage = disk_usage();</span><br><span class="line">  <span class="keyword">if</span> ($disk_usage) &#123;</span><br><span class="line">    mtr_report(<span class="keyword">sprintf</span>(<span class="string">&quot;Disk usage of vardir in MB:%s&quot;</span>, $disk_usage));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Create server socket on any free port</span></span><br><span class="line">  <span class="keyword">my</span> $server = new IO::Socket::INET(<span class="string">Listen    =&gt;</span> $opt_parallel,</span><br><span class="line">                                    <span class="string">LocalAddr =&gt;</span> <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">                                    <span class="string">Proto     =&gt;</span> <span class="string">&#x27;tcp&#x27;</span>,);</span><br><span class="line">  mtr_error(<span class="string">&quot;Could not create testcase server port: $!&quot;</span>) <span class="keyword">unless</span> $server;</span><br><span class="line">  <span class="keyword">my</span> $server_port = $server-&gt;sockport();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ($opt_resfile) &#123;</span><br><span class="line">    resfile_init(<span class="string">&quot;$opt_vardir/mtr-results.txt&quot;</span>);</span><br><span class="line">    print_global_resfile();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ($secondary_engine_support) &#123;</span><br><span class="line">    secondary_engine_offload_count_report_init();</span><br><span class="line">    <span class="comment"># Create virtual environment</span></span><br><span class="line">    create_virtual_env($bindir);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ($opt_summary_report) &#123;</span><br><span class="line">    mtr_summary_file_init($opt_summary_report);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ($opt_xml_report) &#123;</span><br><span class="line">    mtr_xml_init($opt_xml_report);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Read definitions from include/plugin.defs</span></span><br><span class="line">  read_plugin_defs(<span class="string">&quot;include/plugin.defs&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment"># Also read from plugin.defs files in internal and internal/cloud if they exist</span></span><br><span class="line">  <span class="keyword">my</span> @plugin_defs = (<span class="string">&quot;$basedir/internal/mysql-test/include/plugin.defs&quot;</span>,</span><br><span class="line">                     <span class="string">&quot;$basedir/internal/cloud/mysql-test/include/plugin.defs&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">my</span> $plugin_def (@plugin_defs) &#123;</span><br><span class="line">    read_plugin_defs($plugin_def) <span class="keyword">if</span> -e $plugin_def;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Simplify reference to semisync plugins</span></span><br><span class="line">  $ENV&#123;<span class="string">&#x27;SEMISYNC_PLUGIN_OPT&#x27;</span>&#125; = $ENV&#123;<span class="string">&#x27;SEMISYNC_SOURCE_PLUGIN_OPT&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (IS_WINDOWS) &#123;</span><br><span class="line">    $ENV&#123;<span class="string">&#x27;PLUGIN_SUFFIX&#x27;</span>&#125; = <span class="string">&quot;dll&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $ENV&#123;<span class="string">&#x27;PLUGIN_SUFFIX&#x27;</span>&#125; = <span class="string">&quot;so&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ($group_replication) &#123;</span><br><span class="line">    $ports_per_thread = $ports_per_thread + <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ($secondary_engine_support) &#123;</span><br><span class="line">    <span class="comment"># Reserve 10 extra ports per worker process</span></span><br><span class="line">    $ports_per_thread = $ports_per_thread + <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  create_manifest_file();</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Create child processes</span></span><br><span class="line">  <span class="keyword">my</span> %children;</span><br><span class="line"></span><br><span class="line">  $parent_pid = $$;</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">my</span> $child_num (<span class="number">1</span> .. $opt_parallel) &#123;</span><br><span class="line">    <span class="keyword">my</span> $child_pid = My::SafeProcess::Base::_safe_fork();</span><br><span class="line">    <span class="keyword">if</span> ($child_pid == <span class="number">0</span>) &#123;</span><br><span class="line">      $server = <span class="keyword">undef</span>;    <span class="comment"># Close the server port in child</span></span><br><span class="line">      $tests  = &#123;&#125;;       <span class="comment"># Don&#x27;t need the tests list in child</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Use subdir of var and tmp unless only one worker</span></span><br><span class="line">      <span class="keyword">if</span> ($opt_parallel &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        set_vardir(<span class="string">&quot;$opt_vardir/$child_num&quot;</span>);</span><br><span class="line">        $opt_tmpdir = <span class="string">&quot;$opt_tmpdir/$child_num&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      init_timers();</span><br><span class="line">      run_worker($server_port, $child_num); <span class="comment">###### 核心函数</span></span><br><span class="line">      <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $children&#123;$child_pid&#125; = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  mtr_print_header($opt_parallel &gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  mark_time_used(<span class="string">&#x27;init&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 这里的 server 指的是 mtr 的主控制循环，而不是 mysql server 。</span></span><br><span class="line">  <span class="comment"># 该函数的主要作用是定期（每秒）唤醒一次，检查来自 worker 的新消息并处理，</span></span><br><span class="line">  <span class="comment"># 当 test cases 执行完或超时时，该函数会退出。</span></span><br><span class="line">  <span class="keyword">my</span> $completed = run_test_server($server, $tests, $opt_parallel);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">exit</span>(<span class="number">0</span>) <span class="keyword">if</span> $opt_start_exit;</span><br><span class="line"></span><br><span class="line">  <span class="comment">##############################################</span></span><br><span class="line">  <span class="comment"># 为退出测试做收尾工作</span></span><br><span class="line">  <span class="comment">##############################################</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Send Ctrl-C to any children still running</span></span><br><span class="line">  <span class="keyword">kill</span>(<span class="string">&quot;INT&quot;</span>, <span class="keyword">keys</span>(%children));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!IS_WINDOWS) &#123;</span><br><span class="line">    <span class="comment"># Wait for children to exit</span></span><br><span class="line">    <span class="keyword">foreach</span> <span class="keyword">my</span> $pid (<span class="keyword">keys</span> %children) &#123;</span><br><span class="line">      <span class="keyword">my</span> $ret_pid = <span class="keyword">waitpid</span>($pid, <span class="number">0</span>);</span><br><span class="line">      <span class="keyword">if</span> ($ret_pid != $pid) &#123;</span><br><span class="line">        mtr_report(<span class="string">&quot;Unknown process $ret_pid exited&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">delete</span> $children&#123;$ret_pid&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Remove config files for components</span></span><br><span class="line">  read_plugin_defs(<span class="string">&quot;include/plugin.defs&quot;</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">my</span> $plugin_def (@plugin_defs) &#123;</span><br><span class="line">    read_plugin_defs($plugin_def, <span class="number">1</span>) <span class="keyword">if</span> -e $plugin_def;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  remove_manifest_file();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">not</span> $completed) &#123;</span><br><span class="line">    mtr_error(<span class="string">&quot;Test suite aborted&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (@$completed != $num_tests) &#123;</span><br><span class="line">    <span class="comment"># Not all tests completed, failure</span></span><br><span class="line">    mtr_report();</span><br><span class="line">    mtr_report(<span class="string">&quot;Only &quot;</span>, <span class="keyword">int</span>(@$completed), <span class="string">&quot; of $num_tests completed.&quot;</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (@tests_list) &#123;</span><br><span class="line">      $_-&gt;&#123;key&#125; = <span class="string">&quot;$_&quot;</span> <span class="keyword">unless</span> <span class="keyword">defined</span> $_-&gt;&#123;key&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">my</span> %is_completed_map = <span class="keyword">map</span> &#123; $_-&gt;&#123;key&#125; =&gt; <span class="number">1</span> &#125; @$completed;</span><br><span class="line">    <span class="keyword">my</span> @not_completed;</span><br><span class="line">    <span class="keyword">foreach</span> (@tests_list) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">exists</span> $is_completed_map&#123;$_-&gt;&#123;key&#125;&#125;) &#123;</span><br><span class="line">        <span class="keyword">push</span> (@not_completed, $_-&gt;&#123;name&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">int</span>(@not_completed) &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">      mtr_error(<span class="string">&quot;Not all tests completed:&quot;</span>, <span class="keyword">join</span>(<span class="string">&quot; &quot;</span>, @not_completed));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      mtr_error(<span class="string">&quot;Not all tests completed:&quot;</span>, <span class="keyword">join</span>(<span class="string">&quot; &quot;</span>, @not_completed[<span class="number">0</span>...<span class="number">49</span>]), <span class="string">&quot;... and&quot;</span>, <span class="keyword">int</span>(@not_completed)-<span class="number">50</span>, <span class="string">&quot;more&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  mark_time_used(<span class="string">&#x27;init&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">push</span> @$completed, run_ctest() <span class="keyword">if</span> $opt_ctest;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Create minimalistic &quot;test&quot; for the reporting failures at shutdown</span></span><br><span class="line">  <span class="keyword">my</span> $tinfo = My::Test-&gt;new(<span class="string">name      =&gt;</span> <span class="string">&#x27;shutdown_report&#x27;</span>,</span><br><span class="line">                            <span class="string">shortname =&gt;</span> <span class="string">&#x27;shutdown_report&#x27;</span>,);</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Set dummy worker id to align report with normal tests</span></span><br><span class="line">  $tinfo-&gt;&#123;worker&#125; = <span class="number">0</span> <span class="keyword">if</span> $opt_parallel &gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ($shutdown_report) &#123;</span><br><span class="line">    $tinfo-&gt;&#123;result&#125;   = <span class="string">&#x27;MTR_RES_FAILED&#x27;</span>;</span><br><span class="line">    $tinfo-&gt;&#123;comment&#125;  = <span class="string">&quot;Mysqld reported failures at shutdown, see above&quot;</span>;</span><br><span class="line">    $tinfo-&gt;&#123;failures&#125; = <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $tinfo-&gt;&#123;result&#125; = <span class="string">&#x27;MTR_RES_PASSED&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  mtr_report_test($tinfo);</span><br><span class="line">  report_option(<span class="string">&#x27;prev_report_length&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">push</span> @$completed, $tinfo;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ($opt_valgrind_mysqld <span class="keyword">or</span> $opt_sanitize) &#123;</span><br><span class="line">    <span class="comment"># Create minimalistic &quot;test&quot; for the reporting</span></span><br><span class="line">    <span class="keyword">my</span> $tinfo = My::Test-&gt;new(</span><br><span class="line">      <span class="string">name      =&gt;</span> $opt_valgrind_mysqld ? <span class="string">&#x27;valgrind_report&#x27;</span> : <span class="string">&#x27;sanitize_report&#x27;</span>,</span><br><span class="line">      <span class="string">shortname =&gt;</span> $opt_valgrind_mysqld ? <span class="string">&#x27;valgrind_report&#x27;</span> : <span class="string">&#x27;sanitize_report&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Set dummy worker id to align report with normal tests</span></span><br><span class="line">    $tinfo-&gt;&#123;worker&#125; = <span class="number">0</span> <span class="keyword">if</span> $opt_parallel &gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ($valgrind_reports) &#123;</span><br><span class="line">      $tinfo-&gt;&#123;result&#125; = <span class="string">&#x27;MTR_RES_FAILED&#x27;</span>;</span><br><span class="line">      <span class="keyword">if</span> ($opt_valgrind_mysqld) &#123;</span><br><span class="line">        $tinfo-&gt;&#123;comment&#125; = <span class="string">&quot;Valgrind reported failures at shutdown, see above&quot;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $tinfo-&gt;&#123;comment&#125; =</span><br><span class="line">          <span class="string">&quot;Sanitizer reported failures at shutdown, see above&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      $tinfo-&gt;&#123;failures&#125; = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      $tinfo-&gt;&#123;result&#125; = <span class="string">&#x27;MTR_RES_PASSED&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mtr_report_test($tinfo);</span><br><span class="line">    report_option(<span class="string">&#x27;prev_report_length&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">push</span> @$completed, $tinfo;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ($opt_quiet) &#123;</span><br><span class="line">    <span class="keyword">my</span> $last_test = $completed-&gt;[-<span class="number">1</span>];</span><br><span class="line">    mtr_report() <span class="keyword">if</span> !$last_test-&gt;is_failed();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  mtr_print_line();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ($opt_gcov) &#123;</span><br><span class="line">    gcov_collect($bindir, $opt_gcov_exe, $opt_gcov_msg, $opt_gcov_err);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ($ctest_report) &#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;$ctest_report\n&quot;</span>;</span><br><span class="line">    mtr_print_line();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Cleanup the build thread id files</span></span><br><span class="line">  remove_redundant_thread_id_file_locations();</span><br><span class="line">  clean_unique_id_dir();</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Cleanup the secondary engine environment</span></span><br><span class="line">  <span class="keyword">if</span> ($secondary_engine_support) &#123;</span><br><span class="line">    clean_virtual_env();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  print_total_times($opt_parallel) <span class="keyword">if</span> $opt_report_times;</span><br><span class="line"></span><br><span class="line">  mtr_report_stats(<span class="string">&quot;Completed&quot;</span>, $completed);</span><br><span class="line"></span><br><span class="line">  remove_vardir_subs() <span class="keyword">if</span> $opt_clean_vardir;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="run-worker-函数"><a href="#run-worker-函数" class="headerlink" title="run_worker 函数"></a>run_worker 函数</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is the main loop for the worker thread (which, as mentioned, is</span></span><br><span class="line"><span class="comment"># actually a separate process except on Windows).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Its main loop reads messages from the main thread, which are either</span></span><br><span class="line"><span class="comment"># &#x27;TESTCASE&#x27; with details on a test to run (also read with</span></span><br><span class="line"><span class="comment"># My::Test::read_test()) or &#x27;BYE&#x27; which will make the worker clean up</span></span><br><span class="line"><span class="comment"># and send a &#x27;SPENT&#x27; message. If running with valgrind, it also looks</span></span><br><span class="line"><span class="comment"># for valgrind reports and sends &#x27;VALGREP&#x27; if any were found.</span></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">run_worker</span> ($) </span>&#123;</span><br><span class="line">  <span class="keyword">my</span> ($server_port, $thread_num) = @_;</span><br><span class="line"></span><br><span class="line">  $SIG<span class="string">&#123;INT&#125;</span> = <span class="function"><span class="keyword">sub</span> </span>&#123; <span class="keyword">exit</span>(<span class="number">1</span>); &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Connect to server</span></span><br><span class="line">  <span class="keyword">my</span> $server = new IO::Socket::INET(<span class="string">PeerAddr =&gt;</span> <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">                                    <span class="string">PeerPort =&gt;</span> $server_port,</span><br><span class="line">                                    <span class="string">Proto    =&gt;</span> <span class="string">&#x27;tcp&#x27;</span>);</span><br><span class="line">  mtr_error(<span class="string">&quot;Could not connect to server at port $server_port: $!&quot;</span>)</span><br><span class="line">    <span class="keyword">unless</span> $server;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Set worker name</span></span><br><span class="line">  report_option(<span class="string">&#x27;name&#x27;</span>, <span class="string">&quot;worker[$thread_num]&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Set different ports per thread</span></span><br><span class="line">  set_build_thread_ports($thread_num);</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Turn off verbosity in workers, unless explicitly specified</span></span><br><span class="line">  report_option(<span class="string">&#x27;verbose&#x27;</span>, <span class="keyword">undef</span>) <span class="keyword">if</span> ($opt_verbose == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  environment_setup();</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Read hello from server which it will send when shared</span></span><br><span class="line">  <span class="comment"># resources have been setup</span></span><br><span class="line">  <span class="keyword">my</span> $hello = &lt;$server&gt;;</span><br><span class="line"></span><br><span class="line">  setup_vardir(); <span class="comment"># 创建 var 目录（默认，若指定 --vardir，则以参数为准），用于存放测试过程中产生的文件。</span></span><br><span class="line">  check_running_as_root(); <span class="comment"># 检查是否以 root 运行，若是，则无需检查文件权限了。</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (using_extern()) &#123;</span><br><span class="line">    create_config_file_for_extern(%opts_extern);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Ask server for first test</span></span><br><span class="line">  <span class="keyword">print</span> $server <span class="string">&quot;START\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">  mark_time_used(<span class="string">&#x27;init&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="keyword">my</span> $line = &lt;$server&gt;) &#123;</span><br><span class="line">    <span class="keyword">chomp</span>($line);</span><br><span class="line">    <span class="keyword">if</span> ($line eq <span class="string">&#x27;TESTCASE&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">my</span> $test = My::Test::read_test($server);</span><br><span class="line"></span><br><span class="line">      <span class="comment"># Clear comment and logfile, to avoid reusing them from previous test</span></span><br><span class="line">      <span class="keyword">delete</span>($test-&gt;&#123;<span class="string">&#x27;comment&#x27;</span>&#125;);</span><br><span class="line">      <span class="keyword">delete</span>($test-&gt;&#123;<span class="string">&#x27;logfile&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment"># A sanity check. Should this happen often we need to look at it.</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">defined</span> $test-&gt;&#123;reserved&#125; &amp;&amp; $test-&gt;&#123;reserved&#125; != $thread_num) &#123;</span><br><span class="line">        <span class="keyword">my</span> $tres = $test-&gt;&#123;reserved&#125;;</span><br><span class="line">        <span class="keyword">my</span> $name = $test-&gt;&#123;name&#125;;</span><br><span class="line">        mtr_warning(<span class="string">&quot;Test $name reserved for w$tres picked up by w$thread_num&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      $test-&gt;&#123;worker&#125; = $thread_num <span class="keyword">if</span> $opt_parallel &gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">      run_testcase($test); <span class="comment"># 运行测试用例（test case），返回 0 表示执行成功，非 0 表示失败。</span></span><br><span class="line">      |-- do_before_run_mysqltest($tinfo);</span><br><span class="line">      |-- start_mysqltest($tinfo);</span><br><span class="line">      |-- <span class="keyword">while</span> 循环定期判断 mysqltest 的执行状态并做后续处理</span><br><span class="line"></span><br><span class="line">      <span class="comment"># Stop the secondary engine servers if started.</span></span><br><span class="line">      stop_secondary_engine_servers() <span class="keyword">if</span> $test-&gt;&#123;<span class="string">&#x27;secondary-engine&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">      $ENV&#123;<span class="string">&#x27;SECONDARY_ENGINE_TEST&#x27;</span>&#125; = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment"># Send it back, now with results set</span></span><br><span class="line">      $test-&gt;write_test($server, <span class="string">&#x27;TESTRESULT&#x27;</span>);</span><br><span class="line">      mark_time_used(<span class="string">&#x27;restart&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">elsif</span> ($line eq <span class="string">&#x27;BYE&#x27;</span>) &#123; <span class="comment"># 收到 BYE 指令</span></span><br><span class="line">      mtr_report(<span class="string">&quot;Server said BYE&quot;</span>);</span><br><span class="line">      <span class="keyword">my</span> $ret = stop_all_servers($opt_shutdown_timeout); <span class="comment"># 关闭所有 server</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">defined</span> $ret <span class="keyword">and</span> $ret != <span class="number">0</span>) &#123;</span><br><span class="line">        shutdown_exit_reports();</span><br><span class="line">        $shutdown_report = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">print</span> $server <span class="string">&quot;SRV_CRASH\n&quot;</span> <span class="keyword">if</span> $shutdown_report;</span><br><span class="line">      mark_time_used(<span class="string">&#x27;restart&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">my</span> $valgrind_reports = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ($opt_valgrind_mysqld <span class="keyword">or</span> $opt_sanitize) &#123;</span><br><span class="line">        $valgrind_reports = valgrind_exit_reports() <span class="keyword">if</span> <span class="keyword">not</span> $shutdown_report;</span><br><span class="line">        <span class="keyword">print</span> $server <span class="string">&quot;VALGREP\n&quot;</span> <span class="keyword">if</span> $valgrind_reports;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ($opt_gprof) &#123; <span class="comment"># 如果指定了 -gprof ，则使用 gprof 解析 gcov 生成的结果文件 gmon.out</span></span><br><span class="line">        gprof_collect(find_mysqld($basedir), <span class="keyword">keys</span> %gprof_dirs);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      mark_time_used(<span class="string">&#x27;admin&#x27;</span>);</span><br><span class="line">      print_times_used($server, $thread_num);</span><br><span class="line">      <span class="keyword">exit</span>($valgrind_reports);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      mtr_error(<span class="string">&quot;Could not understand server, &#x27;$line&#x27;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  stop_all_servers();</span><br><span class="line">  <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mysql-stress-test-pl"><a href="#mysql-stress-test-pl" class="headerlink" title="mysql-stress-test.pl"></a>mysql-stress-test.pl</h2><p>该文件会被 <code>mysql-test-run.pl</code>调用，但压力测试的命令或 SQL 需要自行编写。</p><h3 id="指令用法"><a href="#指令用法" class="headerlink" title="指令用法"></a>指令用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">perl mysql-stress-test.pl</span><br><span class="line">--stress-suite-basedir=/opt/qa/mysql-test-extra-5.0/mysql-test</span><br><span class="line">--stress-basedir=/opt/qa/<span class="built_in">test</span></span><br><span class="line">--server-logs-dir=/opt/qa/logs</span><br><span class="line">--test-count=20</span><br><span class="line">--stress-tests-file=innodb-tests.txt</span><br><span class="line">--stress-init-file=innodb-init.txt</span><br><span class="line">--threads=5</span><br><span class="line">--suite=funcs_1</span><br><span class="line">--mysqltest=/opt/mysql/mysql-5.0/client/mysqltest</span><br><span class="line">--server-user=root</span><br><span class="line">--server-database=<span class="built_in">test</span></span><br><span class="line">--cleanup</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="代码流程"><a href="#代码流程" class="headerlink" title="代码流程"></a>代码流程</h3><p>该文件代码比较简单，主要步骤为：</p><ol><li>解析参数，检查文件、路径的合法性；</li><li>PREPARATION STAGE ：准备测试所需文件；</li><li>INITIALIZATION STAGE ：读取<code>--stress-init-file</code>指定的文件来初始化 stress database ；</li><li>STRESS TEST RUNNING STAGE ：根据参数<code>--threads</code>指定的数量创建线程（若不指定，默认是 1）。每个线程都执行<code>test_loop</code>函数来运行压力测试。<ol><li>调用 <code>test_init</code> 函数初始化 session 变量。</li><li>调用<code>test_execute</code> 函数来执行测试（测试结果<code>.result</code>的文件名是随机生成的）。</li></ol></li></ol><h2 id="mysqltest-cc"><a href="#mysqltest-cc" class="headerlink" title="mysqltest.cc"></a>mysqltest.cc</h2><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>执行框架主要集中在<code>mysqltest.cc</code>中，<code>mysqltest</code>读取用例文件（<code>*.test</code>），根据预定义的命令（比如<code>--source</code>，<code>--replace_column</code>, <code>shutdown_server</code>等）执行相应的操作。</p><p>根据<code>mysql-test-run.pl</code> 文件中的<code>run_worker</code> 函数传入的运行参数（<code>args</code>）获得用例文件路径等信息，然后读取文件逐行执行语句，语句分为两种：</p><ul><li><strong>一种是可以直接执行的 SQL 语句</strong></li><li><strong>一种是控制语句</strong>，控制语句用来控制 mysqlclient 的特殊行为，比如<code>shutdown mysqld</code>等，这些命令预定义在<code>command_names</code>中。</li></ul><p>详见 《<a href="https://www.wolai.com/gUcRYZJpPu5jivm7oau9Ur" title="04 - MySQL 测试框架 MTR 系列教程4 - 语法篇">04 - MySQL 测试框架 MTR 系列教程 4 - 语法篇</a>》</p><h3 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h3><p>通过 <code>main()</code> 函数可以清晰的看到 <code>mysqltest.cc</code> 的整体流程，主要分为几步：</p><ol><li>初始化或准备工作；</li><li>while 循环读取 command 并处理，每个 command 的处理函数又可能是一个循环解析字符串并执行的过程；</li><li>分析执行结果。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br></pre></td><td class="code"><pre><span class="line">main</span><br><span class="line">|-- init_signal_handling</span><br><span class="line">|-- <span class="built_in">parse_args</span>(argc, argv);</span><br><span class="line">|-- mysql_server_init</span><br><span class="line">|-- <span class="comment">// 打开或创建 result log</span></span><br><span class="line">|-- <span class="built_in">mysql_init</span>(&amp;con-&gt;mysql)</span><br><span class="line">|-- <span class="built_in">safe_connect</span>(&amp;con-&gt;mysql, con-&gt;name, opt_host, opt_user, opt_pass, opt_db,</span><br><span class="line">               opt_port, unix_sock) <span class="comment">// Connect to a server doing several retries if needed</span></span><br><span class="line">|-- <span class="built_in">ssl_client_check_post_connect_ssl_setup</span>(</span><br><span class="line">          &amp;con-&gt;mysql, [](<span class="keyword">const</span> <span class="keyword">char</span> *err) &#123; <span class="built_in">die</span>(<span class="string">&quot;%s&quot;</span>, err); &#125;)</span><br><span class="line">|-- <span class="built_in">mysql_query_wrapper</span>(</span><br><span class="line">        &amp;con-&gt;mysql, <span class="string">&quot;SET optimizer_switch=&#x27;hypergraph_optimizer=on&#x27;;&quot;</span>)</span><br><span class="line">|-- <span class="comment">// 其他准备工作</span></span><br><span class="line">    ...</span><br><span class="line">|-- <span class="keyword">while</span> (!<span class="built_in">read_command</span>(&amp;command) &amp;&amp; !abort_flag) &#123;</span><br><span class="line">     <span class="comment">// 解析 command type</span></span><br><span class="line">     ...</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (ok_to_do) &#123;</span><br><span class="line">     <span class="comment">// 根据 command-&gt;type 做对应处理</span></span><br><span class="line">     <span class="built_in"><span class="keyword">switch</span></span> (command-&gt;type) &#123;</span><br><span class="line">        <span class="keyword">case</span> Q_CONNECT:</span><br><span class="line">          <span class="built_in">do_connect</span>(command); <span class="comment">// 创建新连接</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_CONNECTION:</span><br><span class="line">          <span class="built_in">select_connection</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_DISCONNECT:</span><br><span class="line">        <span class="keyword">case</span> Q_DIRTY_CLOSE:</span><br><span class="line">          <span class="built_in">do_close_connection</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_ENABLE_QUERY_LOG:</span><br><span class="line">          <span class="built_in">set_property</span>(command, P_QUERY, <span class="literal">false</span>); <span class="comment">// 通过设置某个属性值为 0或1，达到关闭/启用的目的</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_DISABLE_QUERY_LOG:</span><br><span class="line">          <span class="built_in">set_property</span>(command, P_QUERY, <span class="literal">true</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_ENABLE_ABORT_ON_ERROR:</span><br><span class="line">          <span class="built_in">set_property</span>(command, P_ABORT, <span class="literal">true</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_DISABLE_ABORT_ON_ERROR:</span><br><span class="line">          <span class="built_in">set_property</span>(command, P_ABORT, <span class="literal">false</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_ENABLE_RESULT_LOG:</span><br><span class="line">          <span class="built_in">set_property</span>(command, P_RESULT, <span class="literal">false</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_DISABLE_RESULT_LOG:</span><br><span class="line">          <span class="built_in">set_property</span>(command, P_RESULT, <span class="literal">true</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_ENABLE_CONNECT_LOG:</span><br><span class="line">          <span class="built_in">set_property</span>(command, P_CONNECT, <span class="literal">false</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_DISABLE_CONNECT_LOG:</span><br><span class="line">          <span class="built_in">set_property</span>(command, P_CONNECT, <span class="literal">true</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_ENABLE_WARNINGS:</span><br><span class="line">          <span class="built_in">do_enable_warnings</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_DISABLE_WARNINGS:</span><br><span class="line">          <span class="built_in">do_disable_warnings</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_ENABLE_INFO:</span><br><span class="line">          <span class="built_in">set_property</span>(command, P_INFO, <span class="literal">false</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_DISABLE_INFO:</span><br><span class="line">          <span class="built_in">set_property</span>(command, P_INFO, <span class="literal">true</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_ENABLE_SESSION_TRACK_INFO:</span><br><span class="line">          <span class="built_in">set_property</span>(command, P_SESSION_TRACK, <span class="literal">true</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_DISABLE_SESSION_TRACK_INFO:</span><br><span class="line">          <span class="built_in">set_property</span>(command, P_SESSION_TRACK, <span class="literal">false</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_ENABLE_METADATA:</span><br><span class="line">          <span class="built_in">set_property</span>(command, P_META, <span class="literal">true</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_DISABLE_METADATA:</span><br><span class="line">          <span class="built_in">set_property</span>(command, P_META, <span class="literal">false</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_SOURCE:</span><br><span class="line">          <span class="built_in">do_source</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_SLEEP:</span><br><span class="line">          <span class="built_in">do_sleep</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_WAIT_FOR_SLAVE_TO_STOP:</span><br><span class="line">          <span class="built_in">do_wait_for_slave_to_stop</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_INC:</span><br><span class="line">          <span class="built_in">do_modify_var</span>(command, DO_INC);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_DEC:</span><br><span class="line">          <span class="built_in">do_modify_var</span>(command, DO_DEC);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_ECHO:</span><br><span class="line">          <span class="built_in">do_echo</span>(command);</span><br><span class="line">          command_executed++;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_REMOVE_FILE:</span><br><span class="line">          <span class="built_in">do_remove_file</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_REMOVE_FILES_WILDCARD:</span><br><span class="line">          <span class="built_in">do_remove_files_wildcard</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_COPY_FILES_WILDCARD:</span><br><span class="line">          <span class="built_in">do_copy_files_wildcard</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_MKDIR:</span><br><span class="line">          <span class="built_in">do_mkdir</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_RMDIR:</span><br><span class="line">          <span class="built_in">do_rmdir</span>(command, <span class="literal">false</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_FORCE_RMDIR:</span><br><span class="line">          <span class="built_in">do_rmdir</span>(command, <span class="literal">true</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_FORCE_CPDIR:</span><br><span class="line">          <span class="built_in">do_force_cpdir</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_LIST_FILES:</span><br><span class="line">          <span class="built_in">do_list_files</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_LIST_FILES_WRITE_FILE:</span><br><span class="line">          <span class="built_in">do_list_files_write_file_command</span>(command, <span class="literal">false</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_LIST_FILES_APPEND_FILE:</span><br><span class="line">          <span class="built_in">do_list_files_write_file_command</span>(command, <span class="literal">true</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_FILE_EXIST:</span><br><span class="line">          <span class="built_in">do_file_exist</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_WRITE_FILE:</span><br><span class="line">          <span class="built_in">do_write_file</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_APPEND_FILE:</span><br><span class="line">          <span class="built_in">do_append_file</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_DIFF_FILES:</span><br><span class="line">          <span class="built_in">do_diff_files</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_SEND_QUIT:</span><br><span class="line">          <span class="built_in">do_send_quit</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_CHANGE_USER:</span><br><span class="line">          <span class="built_in">do_change_user</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_CAT_FILE:</span><br><span class="line">          <span class="built_in">do_cat_file</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_COPY_FILE:</span><br><span class="line">          <span class="built_in">do_copy_file</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_MOVE_FILE:</span><br><span class="line">          <span class="built_in">do_move_file</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_CHMOD_FILE:</span><br><span class="line">          <span class="built_in">do_chmod_file</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_PERL:</span><br><span class="line">          <span class="built_in">do_perl</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_RESULT_FORMAT_VERSION:</span><br><span class="line">          <span class="built_in">do_result_format_version</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_DELIMITER:</span><br><span class="line">          <span class="built_in">do_delimiter</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_DISPLAY_VERTICAL_RESULTS:</span><br><span class="line">          display_result_vertically = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_DISPLAY_HORIZONTAL_RESULTS:</span><br><span class="line">          display_result_vertically = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_SORTED_RESULT:</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Turn on sorting of result set, will be reset after next</span></span><br><span class="line"><span class="comment">            command</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">          display_result_sorted = <span class="literal">true</span>;</span><br><span class="line">          start_sort_column = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_PARTIALLY_SORTED_RESULT:</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Turn on sorting of result set, will be reset after next</span></span><br><span class="line"><span class="comment">            command</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">          display_result_sorted = <span class="literal">true</span>;</span><br><span class="line">          start_sort_column = <span class="built_in">atoi</span>(command-&gt;first_argument);</span><br><span class="line">          command-&gt;last_argument = command-&gt;end;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_LOWERCASE:</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Turn on lowercasing of result, will be reset after next</span></span><br><span class="line"><span class="comment">            command</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">          display_result_lower = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_SKIP_IF_HYPERGRAPH:</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Skip the next query if running with --hypergraph; will be reset</span></span><br><span class="line"><span class="comment">            after next command.</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">          skip_if_hypergraph = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_LET:</span><br><span class="line">          <span class="built_in">do_let</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_EXPR:</span><br><span class="line">          <span class="built_in">do_expr</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_EVAL:</span><br><span class="line">        <span class="keyword">case</span> Q_QUERY_VERTICAL:</span><br><span class="line">        <span class="keyword">case</span> Q_QUERY_HORIZONTAL:</span><br><span class="line">          <span class="keyword">if</span> (command-&gt;query == command-&gt;query_buf) &#123;</span><br><span class="line">            <span class="comment">/* Skip the first part of command, i.e query_xxx */</span></span><br><span class="line">            command-&gt;query = command-&gt;first_argument;</span><br><span class="line">            command-&gt;first_word_len = <span class="number">0</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          [[fallthrough]];</span><br><span class="line">        <span class="keyword">case</span> Q_QUERY:</span><br><span class="line">        <span class="keyword">case</span> Q_REAP: &#123;</span><br><span class="line">          <span class="keyword">bool</span> old_display_result_vertically = display_result_vertically;</span><br><span class="line">          <span class="comment">/* Default is full query, both reap and send  */</span></span><br><span class="line">          <span class="keyword">int</span> flags = QUERY_REAP_FLAG | QUERY_SEND_FLAG;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (q_send_flag) &#123;</span><br><span class="line">            <span class="comment">// Last command was an empty &#x27;send&#x27; or &#x27;send_eval&#x27;</span></span><br><span class="line">            flags = QUERY_SEND_FLAG;</span><br><span class="line">            <span class="keyword">if</span> (q_send_flag == <span class="number">2</span>)</span><br><span class="line">              <span class="comment">// Last command was an empty &#x27;send_eval&#x27; command. Set the command</span></span><br><span class="line">              <span class="comment">// type to Q_SEND_EVAL so that the variable gets replaced with its</span></span><br><span class="line">              <span class="comment">// value before executing.</span></span><br><span class="line">              command-&gt;type = Q_SEND_EVAL;</span><br><span class="line">            q_send_flag = <span class="number">0</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command-&gt;type == Q_REAP) &#123;</span><br><span class="line">            flags = QUERY_REAP_FLAG;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">/* Check for special property for this query */</span></span><br><span class="line">          display_result_vertically |= (command-&gt;type == Q_QUERY_VERTICAL);</span><br><span class="line"></span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">            We run EXPLAIN _before_ the query. If query is UPDATE/DELETE is</span></span><br><span class="line"><span class="comment">            matters: a DELETE may delete rows, and then EXPLAIN DELETE will</span></span><br><span class="line"><span class="comment">            usually terminate quickly with &quot;no matching rows&quot;. To make it more</span></span><br><span class="line"><span class="comment">            interesting, EXPLAIN is now first.</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">          <span class="keyword">if</span> (explain_protocol_enabled)</span><br><span class="line">            <span class="built_in">run_explain</span>(cur_con, command, flags, <span class="literal">false</span>);</span><br><span class="line">          <span class="keyword">if</span> (json_explain_protocol_enabled)</span><br><span class="line">            <span class="built_in">run_explain</span>(cur_con, command, flags, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (*output_file) &#123;</span><br><span class="line">            <span class="built_in">strmake</span>(command-&gt;output_file, output_file, <span class="built_in"><span class="keyword">sizeof</span></span>(output_file) - <span class="number">1</span>);</span><br><span class="line">            *output_file = <span class="number">0</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">run_query</span>(cur_con, command, flags); <span class="comment">// 执行查询</span></span><br><span class="line">          <span class="built_in">display_opt_trace</span>(cur_con, command, flags);</span><br><span class="line">          command_executed++;</span><br><span class="line">          command-&gt;last_argument = command-&gt;end;</span><br><span class="line"></span><br><span class="line">          <span class="comment">/* Restore settings */</span></span><br><span class="line">          display_result_vertically = old_display_result_vertically;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> Q_SEND:</span><br><span class="line">        <span class="keyword">case</span> Q_SEND_EVAL:</span><br><span class="line">          <span class="keyword">if</span> (!*command-&gt;first_argument) &#123;</span><br><span class="line">            <span class="comment">// This is a &#x27;send&#x27; or &#x27;send_eval&#x27; command without arguments, it</span></span><br><span class="line">            <span class="comment">// indicates that _next_ query should be send only.</span></span><br><span class="line">            <span class="keyword">if</span> (command-&gt;type == Q_SEND)</span><br><span class="line">              q_send_flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (command-&gt;type == Q_SEND_EVAL)</span><br><span class="line">              q_send_flag = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">/* Remove &quot;send&quot; if this is first iteration */</span></span><br><span class="line">          <span class="keyword">if</span> (command-&gt;query == command-&gt;query_buf)</span><br><span class="line">            command-&gt;query = command-&gt;first_argument;</span><br><span class="line"></span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">            run_query() can execute a query partially, depending on the flags.</span></span><br><span class="line"><span class="comment">            QUERY_SEND_FLAG flag without QUERY_REAP_FLAG tells it to just send</span></span><br><span class="line"><span class="comment">            the query and read the result some time later when reap instruction</span></span><br><span class="line"><span class="comment">            is given on this connection.</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">          <span class="built_in">run_query</span>(cur_con, command, QUERY_SEND_FLAG); <span class="comment">// 执行查询</span></span><br><span class="line">          command_executed++;</span><br><span class="line">          command-&gt;last_argument = command-&gt;end;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_ERROR:</span><br><span class="line">          <span class="built_in">do_error</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_REPLACE:</span><br><span class="line">          <span class="built_in">do_get_replace</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_REPLACE_REGEX:</span><br><span class="line">          <span class="built_in">do_get_replace_regex</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_REPLACE_COLUMN:</span><br><span class="line">          <span class="built_in">do_get_replace_column</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_REPLACE_NUMERIC_ROUND:</span><br><span class="line">          <span class="built_in">do_get_replace_numeric_round</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_SAVE_MASTER_POS:</span><br><span class="line">          <span class="built_in">do_save_master_pos</span>();</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_SYNC_WITH_MASTER:</span><br><span class="line">          <span class="built_in">do_sync_with_master</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_SYNC_SLAVE_WITH_MASTER: &#123;</span><br><span class="line">          <span class="built_in">do_save_master_pos</span>();</span><br><span class="line">          <span class="keyword">if</span> (*command-&gt;first_argument)</span><br><span class="line">            <span class="built_in">select_connection</span>(command);</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">select_connection_name</span>(<span class="string">&quot;slave&quot;</span>);</span><br><span class="line">          <span class="built_in">do_sync_with_master2</span>(command, <span class="number">0</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> Q_COMMENT: &#123;</span><br><span class="line">          command-&gt;last_argument = command-&gt;end;</span><br><span class="line"></span><br><span class="line">          <span class="comment">/* Don&#x27;t output comments in v1 */</span></span><br><span class="line">          <span class="keyword">if</span> (opt_result_format_version == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">          <span class="comment">/* Don&#x27;t output comments if query logging is off */</span></span><br><span class="line">          <span class="keyword">if</span> (disable_query_log) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">          <span class="comment">/* Write comment&#x27;s with two starting #&#x27;s to result file */</span></span><br><span class="line">          <span class="keyword">const</span> <span class="keyword">char</span> *p = command-&gt;query;</span><br><span class="line">          <span class="keyword">if</span> (p &amp;&amp; *p == <span class="string">&#x27;#&#x27;</span> &amp;&amp; *(p + <span class="number">1</span>) == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">dynstr_append_mem</span>(&amp;ds_res, command-&gt;query, command-&gt;query_len);</span><br><span class="line">            <span class="built_in">dynstr_append</span>(&amp;ds_res, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> Q_EMPTY_LINE:</span><br><span class="line">          <span class="comment">/* Don&#x27;t output newline in v1 */</span></span><br><span class="line">          <span class="keyword">if</span> (opt_result_format_version == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">          <span class="comment">/* Don&#x27;t output newline if query logging is off */</span></span><br><span class="line">          <span class="keyword">if</span> (disable_query_log) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">          <span class="built_in">dynstr_append</span>(&amp;ds_res, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_PING:</span><br><span class="line">          <span class="built_in">handle_command_error</span>(command, <span class="built_in">mysql_ping</span>(&amp;cur_con-&gt;mysql)); <span class="comment">// 执行 ping 指令</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_RESET_CONNECTION:</span><br><span class="line">          <span class="built_in">do_reset_connection</span>();</span><br><span class="line">          global_attrs-&gt;<span class="built_in">clear</span>();</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_QUERY_ATTRIBUTES:</span><br><span class="line">          <span class="built_in">do_query_attributes</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_SEND_SHUTDOWN:</span><br><span class="line">          <span class="keyword">if</span> (opt_offload_count_file) &#123;</span><br><span class="line">            <span class="comment">// Save the value of secondary engine execution status</span></span><br><span class="line">            <span class="comment">// before shutting down the server.</span></span><br><span class="line">            <span class="keyword">if</span> (secondary_engine-&gt;<span class="built_in">offload_count</span>(&amp;cur_con-&gt;mysql, <span class="string">&quot;after&quot;</span>))</span><br><span class="line">              <span class="built_in">cleanup_and_exit</span>(<span class="number">1</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="built_in">handle_command_error</span>(</span><br><span class="line">              command, <span class="built_in">mysql_query_wrapper</span>(&amp;cur_con-&gt;mysql, <span class="string">&quot;shutdown&quot;</span>));</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_SHUTDOWN_SERVER:</span><br><span class="line">          <span class="built_in">do_shutdown_server</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_EXEC:</span><br><span class="line">        <span class="keyword">case</span> Q_EXECW:</span><br><span class="line">          <span class="built_in">do_exec</span>(command, <span class="literal">false</span>);</span><br><span class="line">          command_executed++;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_EXEC_BACKGROUND:</span><br><span class="line">          <span class="built_in">do_exec</span>(command, <span class="literal">true</span>); <span class="comment">// 执行 shell 命令</span></span><br><span class="line">          command_executed++;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_START_TIMER:</span><br><span class="line">          <span class="comment">/* Overwrite possible earlier start of timer */</span></span><br><span class="line">          timer_start = <span class="built_in">timer_now</span>();</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_END_TIMER:</span><br><span class="line">          <span class="comment">/* End timer before ending mysqltest */</span></span><br><span class="line">          <span class="built_in">timer_output</span>();</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_CHARACTER_SET:</span><br><span class="line">          <span class="built_in">do_set_charset</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_DISABLE_PS_PROTOCOL:</span><br><span class="line">          <span class="built_in">set_property</span>(command, P_PS, <span class="literal">false</span>);</span><br><span class="line">          <span class="comment">/* Close any open statements */</span></span><br><span class="line">          <span class="built_in">close_statements</span>();</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_ENABLE_PS_PROTOCOL:</span><br><span class="line">          <span class="built_in">set_property</span>(command, P_PS, ps_protocol);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_DISABLE_RECONNECT:</span><br><span class="line">          <span class="built_in">set_reconnect</span>(&amp;cur_con-&gt;mysql, <span class="number">0</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_ENABLE_RECONNECT:</span><br><span class="line">          <span class="built_in">set_reconnect</span>(&amp;cur_con-&gt;mysql, <span class="number">1</span>);</span><br><span class="line">          enable_async_client = <span class="literal">false</span>;</span><br><span class="line">          <span class="comment">/* Close any open statements - no reconnect, need new prepare */</span></span><br><span class="line">          <span class="built_in">close_statements</span>();</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_ENABLE_ASYNC_CLIENT:</span><br><span class="line">          <span class="built_in">set_property</span>(command, P_ASYNC, <span class="literal">true</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_DISABLE_ASYNC_CLIENT:</span><br><span class="line">          <span class="built_in">set_property</span>(command, P_ASYNC, <span class="literal">false</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_DISABLE_TESTCASE:</span><br><span class="line">          <span class="keyword">if</span> (testcase_disabled == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">do_disable_testcase</span>(command);</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">die</span>(<span class="string">&quot;Test case is already disabled.&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_ENABLE_TESTCASE:</span><br><span class="line">          <span class="comment">// Ensure we don&#x27;t get testcase_disabled &lt; 0 as this would</span></span><br><span class="line">          <span class="comment">// accidentally disable code we don&#x27;t want to have disabled.</span></span><br><span class="line">          <span class="keyword">if</span> (testcase_disabled == <span class="number">1</span>)</span><br><span class="line">            testcase_disabled = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">die</span>(<span class="string">&quot;Test case is already enabled.&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_DIE:</span><br><span class="line">          <span class="comment">/* Abort test with error code and error message */</span></span><br><span class="line">          <span class="built_in">die</span>(<span class="string">&quot;%s&quot;</span>, command-&gt;first_argument);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_EXIT:</span><br><span class="line">          <span class="comment">/* Stop processing any more commands */</span></span><br><span class="line">          abort_flag = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_SKIP: &#123;</span><br><span class="line">          DYNAMIC_STRING ds_skip_msg;</span><br><span class="line">          <span class="built_in">init_dynamic_string</span>(&amp;ds_skip_msg, <span class="literal">nullptr</span>, command-&gt;query_len);</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Evaluate the skip message</span></span><br><span class="line">          <span class="built_in">do_eval</span>(&amp;ds_skip_msg, command-&gt;first_argument, command-&gt;end, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">char</span> skip_msg[FN_REFLEN];</span><br><span class="line">          <span class="built_in">strmake</span>(skip_msg, ds_skip_msg.str, FN_REFLEN - <span class="number">1</span>);</span><br><span class="line">          <span class="built_in">dynstr_free</span>(&amp;ds_skip_msg);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (!no_skip) &#123;</span><br><span class="line">            <span class="comment">// --no-skip option is disabled, skip the test case</span></span><br><span class="line">            <span class="built_in">abort_not_supported_test</span>(<span class="string">&quot;%s&quot;</span>, skip_msg);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">char</span> *path = cur_file-&gt;file_name;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">char</span> *fn = <span class="built_in">get_filename_from_path</span>(path);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check if the file is in excluded list</span></span><br><span class="line">            <span class="keyword">if</span> (excluded_string &amp;&amp; <span class="built_in">strstr</span>(excluded_string, fn)) &#123;</span><br><span class="line">              <span class="comment">// File is present in excluded list, skip the test case</span></span><br><span class="line">              <span class="built_in">abort_not_supported_test</span>(<span class="string">&quot;%s&quot;</span>, skip_msg);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// File is not present in excluded list, ignore the skip</span></span><br><span class="line">              <span class="comment">// and continue running the test case</span></span><br><span class="line">              command-&gt;last_argument = command-&gt;end;</span><br><span class="line">              skip_ignored = <span class="literal">true</span>;  <span class="comment">// Mark as noskip pass or fail.</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_OUTPUT: &#123;</span><br><span class="line">          <span class="keyword">static</span> DYNAMIC_STRING ds_to_file;</span><br><span class="line">          <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">command_arg</span> <span class="title">output_file_args</span>[] =</span> &#123;</span><br><span class="line">              &#123;<span class="string">&quot;to_file&quot;</span>, ARG_STRING, <span class="literal">true</span>, &amp;ds_to_file, <span class="string">&quot;Output filename&quot;</span>&#125;&#125;;</span><br><span class="line">          <span class="built_in">check_command_args</span>(command, command-&gt;first_argument, output_file_args,</span><br><span class="line">                             <span class="number">1</span>, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">          <span class="built_in">strmake</span>(output_file, ds_to_file.str, FN_REFLEN);</span><br><span class="line">          <span class="built_in">dynstr_free</span>(&amp;ds_to_file);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          processed = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!processed) &#123;</span><br><span class="line">      current_line_inc = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in"><span class="keyword">switch</span></span> (command-&gt;type) &#123;</span><br><span class="line">        <span class="keyword">case</span> Q_WHILE: <span class="comment">// 处理 while 代码块</span></span><br><span class="line">          <span class="built_in">do_block</span>(cmd_while, command); <span class="comment">// 该函数内是一个循环</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_IF: <span class="comment">// 处理 if 代码块</span></span><br><span class="line">          <span class="built_in">do_block</span>(cmd_if, command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_ASSERT:</span><br><span class="line">          <span class="built_in">do_block</span>(cmd_assert, command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Q_END_BLOCK:</span><br><span class="line">          <span class="built_in">do_done</span>(command);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          current_line_inc = <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">check_eol_junk</span>(command-&gt;last_argument);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (command_executed != last_command_executed || command-&gt;used_replace) &#123;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        As soon as any command has been executed,</span></span><br><span class="line"><span class="comment">        the replace structures should be cleared</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="built_in">free_all_replace</span>();</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Also reset &quot;sorted_result&quot;, &quot;lowercase&quot; and &quot;skip_if_hypergraph&quot;*/</span></span><br><span class="line">      display_result_sorted = <span class="literal">false</span>;</span><br><span class="line">      display_result_lower = <span class="literal">false</span>;</span><br><span class="line">      skip_if_hypergraph = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    last_command_executed = command_executed;</span><br><span class="line"></span><br><span class="line">    parser.current_line += current_line_inc;</span><br><span class="line">    <span class="keyword">if</span> (opt_mark_progress) <span class="built_in">mark_progress</span>(&amp;progress_file, parser.current_line);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write result from command to log file immediately.</span></span><br><span class="line">    <span class="built_in">flush_ds_res</span>();</span><br><span class="line">  &#125; <span class="comment">// while-end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">|-- <span class="comment">// ================= 检查结果 =================</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">    The whole test has been executed _sucessfully_.</span></span><br><span class="line"><span class="comment">    Time to compare result or save it to record file.</span></span><br><span class="line"><span class="comment">    The entire output from test is in the log file</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">if</span> (log_file.<span class="built_in">bytes_written</span>()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (result_file_name) &#123;</span><br><span class="line">      <span class="comment">/* A result file has been specified */</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (record) &#123;</span><br><span class="line">        <span class="comment">/* Recording */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* save a copy of the log to result file */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">my_copy</span>(log_file.<span class="built_in">file_name</span>(), result_file_name, <span class="built_in">MYF</span>(<span class="number">0</span>)) != <span class="number">0</span>)</span><br><span class="line">          <span class="built_in">die</span>(<span class="string">&quot;Failed to copy &#x27;%s&#x27; to &#x27;%s&#x27;, errno: %d&quot;</span>, log_file.<span class="built_in">file_name</span>(),</span><br><span class="line">              result_file_name, errno);</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* Check that the output from test is equal to result file */</span></span><br><span class="line">        <span class="built_in">check_result</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* Empty output is an error *unless* we also have an empty result file */</span></span><br><span class="line">    <span class="keyword">if</span> (!result_file_name || record ||</span><br><span class="line">        <span class="built_in">compare_files</span>(log_file.<span class="built_in">file_name</span>(), result_file_name)) &#123;</span><br><span class="line">      <span class="built_in">die</span>(<span class="string">&quot;The test didn&#x27;t produce any output&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      empty_result = <span class="literal">true</span>; <span class="comment">/* Meaning empty was expected */</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!command_executed &amp;&amp; result_file_name &amp;&amp; !empty_result)</span><br><span class="line">    <span class="built_in">die</span>(<span class="string">&quot;No queries executed but non-empty result file found!&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">verbose_msg</span>(<span class="string">&quot;Test has succeeded!&quot;</span>);</span><br><span class="line">  <span class="built_in">timer_output</span>();</span><br><span class="line">  <span class="comment">/* Yes, if we got this far the test has suceeded! Sakila smiles */</span></span><br><span class="line">  <span class="built_in">cleanup_and_exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">/* Keep compiler happy too */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_MYSQL_TEST_RUN.html" title="MySQL: The MySQL Test Framework">MySQL: The MySQL Test Framework</a></p><p><a href="https://cloud.tencent.com/developer/article/1564376" title="浅析mysql-test框架 - 腾讯云开发者社区-腾讯云 (tencent.com)">浅析 mysql-test 框架 - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;作者：卢文双 资深数据库内核研发&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;序言&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;以前对 MySQL 测试框架 MTR 的使用，主要集中于 SQL 正确性验证。近期由于工作需要，深入了解了 MTR 的方方面面，发现 MTR 的能力不仅限于此，还支持单元测试、压力测试、代码覆盖率测试、内存错误检测、线程竞争与死锁等功能，因此，本着分享的精神，将其总结成一个系列。&lt;/p&gt;
&lt;p&gt;主要内容如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;入门篇：工作机制、编译安装、参数、指令示例、推荐用法、添加 case、常见问题、异常调试&lt;/li&gt;
&lt;li&gt;进阶篇：高阶用法，包括单元测试、压力测试、代码覆盖率测试、内存错误检测、线程竞争与死锁&lt;/li&gt;
&lt;li&gt;源码篇：分析 MTR 的源码&lt;/li&gt;
&lt;li&gt;语法篇：单元测试、压力测试、mysqltest 语法、异常调试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于个人水平有限，所述难免有错误之处，望雅正。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文是第三篇源码篇。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL" scheme="http://dbkernel.github.io/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://dbkernel.github.io/tags/MySQL/"/>
    
    <category term="测试框架" scheme="http://dbkernel.github.io/tags/%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MTR" scheme="http://dbkernel.github.io/tags/MTR/"/>
    
  </entry>
  
  <entry>
    <title>业内 MySQL 线程池主流方案详解 - MariaDB/Percona/华为/AliSQL/TXSQL/MySQL企业版</title>
    <link href="http://dbkernel.github.io/2023/05/04/mysql-threadpool-main-solutions-details/"/>
    <id>http://dbkernel.github.io/2023/05/04/mysql-threadpool-main-solutions-details/</id>
    <published>2023-05-04T14:07:40.000Z</published>
    <updated>2023-05-08T08:55:04.159Z</updated>
    
    <content type="html"><![CDATA[<p><strong>作者：卢文双 资深数据库内核研发</strong></p><blockquote><p><strong>本文首发于 2023-05-04 22:07:40</strong></p></blockquote><p>本文主要从功能层面对比 percona-server、mariadb、华为鲲鹏 BoostKit 数据库使能套件、阿里云 AliSQL、腾讯 TXSQL、MySQL 企业版线程池方案，都基于 MySQL 8.0。</p><p>至于源码层面，腾讯、阿里云、MySQL 企业版不开源，percona 借鉴了 mariadb 早期版本的实现，而华为鲲鹏同时借鉴了 mariadb 和 percona 的实现，但考虑到线程池代码只有 2000 行左右，相对简单，本文就不做过多阐述了。</p><span id="more"></span><hr><blockquote><p>版本：<br>MariaDB 10.9，<br>Percona-Server-8.0.32-24,<br>华为鲲鹏 8.0.25</p></blockquote><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>社区版的 MySQL 的连接处理方法默认是为每个连接创建一个工作线程的<code>one-thread-per-connection</code>（<strong>Per_thread</strong>）模式。这种模式存在如下弊端：</p><ul><li><strong>由于系统的资源是有限的，随着连接数的增加，资源的竞争也增加，连接的响应时间也随之增加</strong>，如 response time 图所示。</li></ul><p><img src="/2023/05/04/mysql-threadpool-main-solutions-details/response-time.png" alt="response time图" title="response time图"></p><ul><li><strong>在资源未耗尽时，数据库整体吞吐随着连接数增加。一旦连接数超过了某个耗尽系统资源的临界点，由于各线程互相竞争，CPU 时间片在大量线程间频繁调度，不同线程上下文频繁切换，徒增系统开销，数据库整体吞吐反而会下降</strong>，如下图所示。</li></ul><p><img src="/2023/05/04/mysql-threadpool-main-solutions-details/per-thread-throughput.png" alt="Per_Thread 模式下数据库整体吞吐" title="Per_Thread 模式下数据库整体吞吐"></p><p><strong>Q：如何避免 在连接数暴增时，因资源竞争而导致系统吞吐下降的问题呢？</strong></p><p><strong>MariaDB &amp; Percona 中给出了简洁的答案：</strong> ​<strong>线程池</strong>。</p><p>线程池的原理在<a href="https://www.percona.com/blog/simcity-outages-traffic-control-and-thread-pool-for-mysql/" title="percona blog">percona blog</a> 中有生动的介绍，其大致可类比为早高峰期间大量汽车想通过一座大桥，如果采用<code>one-thread-per-connection</code>的方式则放任汽车自由行驶，由于桥面宽度有限，最终将导致所有汽车寸步难行。线程池的解决方案是限制同时行驶的汽车数，让桥面时刻保持最大吞吐，尽快让所有汽车抵达对岸。</p><p>数据库内核月报文章 《<a href="http://mysql.taobao.org/monthly/2019/02/09/" title="MySQL · 最佳实践 · MySQL多队列线程池优化">MySQL · 最佳实践 · MySQL 多队列线程池优化</a>》中举了一个高铁买票的例子，也很形象，由于售票员（类比为 CPU 的核数）有限，当有 1000 个用户（类比为数据库连接）都想买票时，如果采用 <code>one-thread-per-connection</code> 的方式，则每个人都有一个专用窗口，需要售票员跑来跑去（CPU 上下文切换，售票窗口越多，跑起来越费力）来为你服务，可以看到这是不够合理的，特别是售票员比较少而购票者很多的场景。如果采用线程池的思想，则不再是每个人都有一个专用的售票窗口（每个客户端对应一个后端线程），而是通过限定售票窗口数，让购票者排队，来减少售票员跑来跑去的成本。</p><p>回归到数据库本身，MySQL 默认的线程使用模式是会话独占模式（<code>one-thread-per-connection</code>），每个会话都会创建一个独占的线程。<strong>当有大量的会话存在时，会导致大量的资源竞争，同时，大量的系统线程调度和缓存失效也会导致性能急剧下降</strong>。</p><p>线程池线程池功能旨在解决以上问题，在存在大量连接的场景下，通过线程池实现<strong>线程复用</strong>：</p><ul><li>当连接多、并发低时，通过连接复用，避免创建大量空闲线程，减少系统资源开销。</li><li>当连接多、并发高时，通过<strong>限制同时运行的线程数，将其控制在合理的范围内，可避免线程调度工作过多和大量缓存失效，减少线程池间上下文切换和热锁争用</strong>，从而对 OLTP 场景产生积极影响。</li></ul><p>当连接数上升时，在线程池的帮助下数据库整体吞吐维持在一个较高水准，如图所示。</p><p><img src="/2023/05/04/mysql-threadpool-main-solutions-details/threadpool-throughput.png" alt="线程池模式下数据库整体吞吐" title="线程池模式下数据库整体吞吐"></p><h1 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h1><p>线程池采用一定数量的工作线程来处理连接请求，线程池在查询相对较短且工作负载受 CPU 限制的情况下效率最高，通常比较适应于 OLTP 工作负载的场景。如果工作负载不受 CPU 限制，那么您仍然可以通过限制线程数量来为数据库内存缓冲区节省内存。</p><p>线程池的不足在于当请求偏向于慢查询时，工作线程阻塞在高时延操作上，难以快速响应新的请求，导致系统吞吐量反而相较于传统 one-thread-per-connection 模式更低。</p><p><strong>线程池适用的场景</strong>：</p><ul><li>对于<strong>大量连接的 OLTP 短查询</strong>的场景将有最大收益。</li><li>对于<strong>大量连接的只读短查询</strong>也有明显收益。</li><li>有效避免大量连接高并发下数据库性能衰减。</li></ul><p><strong>不太适合用线程池的场景：</strong></p><ul><li><strong>具有突发工作负载的场景</strong>。在这种场景下，许多用户往往长时间处于非活跃状态，但个别时候又处于特别活跃的状态，同时，对延迟的容忍度较低，因此，线程池节流效果不太理想。不过，即使在这种情况下，也可以通过调整线程的退役频率来提高性能（使用 <code>thread_pool_idle_timeout</code> 参数）。</li><li><strong>高并发、长耗时语句的场景</strong>。在这种场景下，并发较多，且都是执行时间较长的语句，会导致工作线程堆积，一旦达到上限，完全阻止后续语句的执行，比如最常见的数据仓库场景。当然这样的场景下，不管是否使用线程池，数据库的表现都是不够理想的，<strong>需要应用侧控制大查询的并发度</strong>。</li><li><strong>有较严重的锁冲突，如果处于锁等待的工作线程数超过总线程数，也会堆积起来，阻止无锁待的处理请求。比如某个会话执行<code> FLUSH TABLES WITH READ LOCK</code>语句获得全局锁后暂停，那么其他执行写操作的客户端连接就会阻塞，当阻塞的数量超过线程池的上限时，整个 server 都会阻塞</strong>。当然这样的场景下，不管是否使用线程池，数据库的表现都是不够理想的，<strong>需要应用侧进行优化</strong>。</li><li><strong>极高并发的 Prepared Statement 请求</strong>。使用 Prepared Statement（Java 应用不算）时，会<strong>使用 MySQL Binary Protocol，会增加很多的网络来回操作</strong>，比如参数的绑定、结果集的返回，在极高请求压力下会给 epoll 监听进程带来一定的压力，处于事务状态中时，可能会让普通请求得不到执行机会。</li></ul><p>为了应对这种阻塞问题，一般会允许配置 <code>extra_port</code> 或 <code>admin_port</code> 来管理连接。</p><h1 id="行业方案：Percona-线程池实现"><a href="#行业方案：Percona-线程池实现" class="headerlink" title="行业方案：Percona 线程池实现"></a>行业方案：Percona 线程池实现</h1><p>由于市面上的线程池方案大多都借鉴了 percona、mariadb 的方案，因此，首先介绍下 percona 线程池的工作机制，再说明其他方案相较于 percona 做了什么改进。</p><h2 id="0-基本原理"><a href="#0-基本原理" class="headerlink" title="0. 基本原理"></a>0. 基本原理</h2><p>线程池的基本原理为：预先创建一定数量的工作线程（worker 线程）。在线程池监听线程（listener 线程）从现有连接中监听到新请求时，从工作线程中分配一个线程来提供服务。工作线程在服务结束之后不销毁线程（处于 idle 状态一段时间后会退出），而是保留在线程池中继续等待下一个请求来临。</p><p>下面我们将从线程池架构、新连接的创建与分配、listener 线程、worker 线程、timer 线程等几个方面来介绍 percona 线程池的实现。</p><h2 id="1-线程池的架构"><a href="#1-线程池的架构" class="headerlink" title="1. 线程池的架构"></a><strong>1. 线程池的架构</strong></h2><p>线程池由<strong>多个线程组（thread group）</strong>和<strong>timer 线程</strong>组成，如下图所示。</p><p>线程组的数量是线程池并发的上限，通常而言<strong>线程组的数量</strong>需要配置成<strong>数据库实例的 CPU 核心数量</strong>（可通过参数<code>thread_pool_size</code>设置），从而充分利用 CPU。线程组之间通过<code>线程ID % 线程组数</code>的方式分配连接，线程组内通过竞争方式处理连接。</p><p>线程池中还有一个服务于所有线程组的<strong>timer 线程</strong>，负责周期性（检查时间间隔为<code>threadpool_stall_limit</code>毫秒）检查线程组是否处于阻塞状态。当检测到阻塞的线程组时，timer 线程会通过唤醒或创建新的工作线程（<code>wake_or_create_thread</code> 函数）来让线程组恢复工作。</p><p>创建新的工作线程不是每次都能创建成功，<strong>要根据当前的线程组中的线程数是否大于线程组中的连接数，活跃线程数是否为 0，以及上一次创建线程的时间间隔是否超过阈值（这个阈值与线程组中的线程数有关，线程组中的线程数越多，时间间隔越大</strong>）。</p><p><img src="/2023/05/04/mysql-threadpool-main-solutions-details/threadpool-architecture.png" alt="Percona 线程池架构图" title="Percona 线程池架构图"></p><p>线程组内部由<strong>多个 worker 线程、0 或 1 个动态 listener 线程、高低优先级事件队列（由网络事件 event 构成）、mutex、epollfd、统计信息等组成</strong>。如下图所示：</p><p><img src="/2023/05/04/mysql-threadpool-main-solutions-details/threadpool-group.png" alt="Percona 线程组构成" title="Percona 线程组构成"></p><p><strong>worker 线程</strong>：主要作用是从队列中读取并处理事件。</p><ul><li>如果该线程所在组中没有 listener 线程，则该 worker 线程将成为 listener 线程，通过 epoll 的方式监听数据，并将监听到的 event 放到线程组中的队列。</li><li>worker 线程数目动态变化，并发较大时会创建更多的 worker 线程，当从队列中取不到 event 时，work 线程将休眠，超过一定时间后结束线程。</li><li>一个 worker 线程只属于一个线程组。</li></ul><p><strong>listener 线程</strong>：当高低队列为空，listen 线程会自己处理，无论这次获取到多少事务。否则 listen 线程会把请求加入到队列中，<strong>如果此时<code>active_thread_count=0</code>，唤醒一个工作线程</strong>。</p><p><strong>高低优先级队列</strong>：为了提高性能，将队列分为优先队列和普通队列。这里采用引入两个新变量<code>thread_pool_high_prio_tickets</code>和<code>thread_pool_high_prio_mode</code>。由它们控制高优先级队列策略。对<strong>每个新连接</strong>分配可以进入高优先级队列的 ticket。</p><h2 id="2-新连接的创建与分配"><a href="#2-新连接的创建与分配" class="headerlink" title="2. 新连接的创建与分配"></a><strong>2. 新连接的创建与分配</strong></h2><p>新连接接入时，线程池按照新连接的线程 id 取模线程组个数来确定新连接归属的线程组（<code>thd-&gt;thread_id() % group_count</code>）。这样的分配逻辑非常简洁，但<strong>由于没有充分考虑连接的负载情况，繁忙的连接可能会恰巧被分配到相同的线程组，从而导致负载不均衡的现象，这是 percona 线程池值得被优化的点</strong>。</p><p><img src="/2023/05/04/mysql-threadpool-main-solutions-details/threadpool-architecture-details.png" alt="线程池新连接的创建与分配" title="线程池新连接的创建与分配"></p><p>选定新连接归属的线程组后，<strong>新连接申请</strong>被作为<strong>事件</strong>放入<strong>低优先级队列</strong>中，等待线程组中 worker 线程将<strong>高优先级事件队列</strong>处理完后，就会处理低优先级队列中的请求。</p><h2 id="3-listener-线程-【-要不要重新画图或添加-percona-源码笔记图】"><a href="#3-listener-线程-【-要不要重新画图或添加-percona-源码笔记图】" class="headerlink" title="3. listener 线程 【====要不要重新画图或添加 percona 源码笔记图】"></a><strong>3. listener 线程</strong> 【====要不要重新画图或添加 percona 源码笔记图】</h2><p>listener 线程是负责监听连接请求的线程，每个线程组都有一个<strong>listener 线程</strong>。</p><p>percona 线程池的 listener 采用<strong>epoll</strong>实现。当 epoll 监听到请求事件时，listener 会根据<strong>请求事件的类型</strong>来决定将其放入哪个优先级事件队列。<strong>将事件放入高优先级队列的条件如下（见函数</strong><code>connection_is_high_prio</code><strong>），只需要满足其一即可</strong>：</p><ul><li>当前线程池的工作模式为<strong>高优先级模式</strong>，在此模式下只启用高优先级队列。（<code>mode == TP_HIGH_PRIO_MODE_STATEMENTS</code>）</li><li>当前线程池的工作模式为<strong>高优先级事务模式</strong>，在此模式下<strong>每个连接的 event</strong>最多被放入高优先级队列<code>threadpool_high_prio_tickets</code>次。超过<code>threadpool_high_prio_tickets</code>次后，该连接的请求事件只能被放入低优先级（<code>mode == TP_HIGH_PRIO_MODE_TRANSACTIONS</code>），同时，也会重置票数。</li><li>连接持有<strong>表锁</strong></li><li>连接持有<strong>mdl 锁</strong></li><li>连接持有<strong>全局读锁</strong></li><li>连接持有<strong>backup 锁</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">connection_is_high_prio</span><span class="params">(<span class="keyword">const</span> <span class="keyword">connection_t</span> &amp;c)</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ulong mode = c.thd-&gt;variables.threadpool_high_prio_mode;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (mode == TP_HIGH_PRIO_MODE_STATEMENTS) ||</span><br><span class="line">         (mode == TP_HIGH_PRIO_MODE_TRANSACTIONS &amp;&amp; c.tickets &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">          (<span class="built_in">thd_is_transaction_active</span>(c.thd) ||</span><br><span class="line">           c.thd-&gt;variables.option_bits &amp; OPTION_TABLE_LOCK ||</span><br><span class="line">           c.thd-&gt;locked_tables_mode != LTM_NONE ||</span><br><span class="line">           c.thd-&gt;mdl_context.<span class="built_in">has_locks</span>() ||</span><br><span class="line">           c.thd-&gt;global_read_lock.<span class="built_in">is_acquired</span>() ||</span><br><span class="line">           c.thd-&gt;backup_tables_lock.<span class="built_in">is_acquired</span>() ||</span><br><span class="line">           c.thd-&gt;mdl_context.<span class="built_in">has_locks</span>(MDL_key::USER_LEVEL_LOCK) ||</span><br><span class="line">           c.thd-&gt;mdl_context.<span class="built_in">has_locks</span>(MDL_key::LOCKING_SERVICE)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被放入高优先级队列的事件可以优先被 worker 线程处理。</p><p><strong>只有当高优先级队列为空，并且当前线程组不繁忙的时候才处理低优先级队列中的事件</strong>。线程组繁忙（<code>too_many_busy_threads</code>）的判断条件是<strong>当前组内活跃工作线程数+组内处于等待状态的线程数</strong>大于<strong>线程组工作线程额定值</strong>（<code>thread_pool_oversubscribe+1</code>）。这样的设计可能带来的问题是<strong>在高优先级队列不为空或者线程组繁忙时低优先级队列中的事件迟迟得不到响应，这同样也是 percona 线程池值得被优化的一个点</strong>。</p><p>listener 线程将事件放入高低优先级队列后，如果<strong>线程组的活跃 worker 数量为 0</strong>，则唤醒或创建新的 worker 线程来处理事件。</p><p>percona 的线程池中<strong>listener 线程和 worker 线程是可以互相切换的</strong>，详细的切换逻辑会在「worker 线程」一节介绍。</p><ul><li>epoll 监听到请求事件时，如果高低优先级事件队列都为空，意味着此时线程组非常空闲，大概率不存在活跃的 worker 线程。</li><li>listener 在此情况下会将除第一个事件外的所有事件按前述规则放入高低优先级事件队列，<strong>然后退出监听任务，亲自处理第一个事件</strong>。</li><li>这样设计的好处在于当线程组非常空闲时，可以避免 listener 线程将事件放入队列，唤醒或创建 worker 线程来处理事件的开销，提高工作效率。</li></ul><p><img src="/2023/05/04/mysql-threadpool-main-solutions-details/listener-flow-chart.png" alt="listener 线程流程图" title="listener 线程流程图"></p><blockquote><p>上图来源于腾讯数据库技术公众号</p></blockquote><h2 id="4-worker-线程-【-要不要重新画图或添加-percona-源码笔记图】"><a href="#4-worker-线程-【-要不要重新画图或添加-percona-源码笔记图】" class="headerlink" title="4. worker 线程 【====要不要重新画图或添加 percona 源码笔记图】"></a><strong>4. worker 线程</strong> 【====要不要重新画图或添加 percona 源码笔记图】</h2><p>worker 线程是线程池中真正干活的线程，正常情况下，每个线程组都会有一个活跃的 worker 线程。</p><p>worker 在理想状态下，可以高效运转并且快速处理完高低优先级队列中的事件。但是在实际场景中，worker 经常会遭遇 IO、锁等等待情况而难以高效完成任务，此时任凭 worker 线程等待将使得在队列中的事件迟迟得不到处理，甚至可能出现长时间没有 listener 线程监听新请求的情况。为此，每当 worker 遭遇 IO、锁等等待情况，如果此时线程组中没有 listener 线程或者高低优先级事件队列非空，并且没有过多活跃 worker，则会尝试唤醒或者创建一个 worker。</p><p>为了避免短时间内创建大量 worker，带来系统吞吐波动，线程池创建 worker 线程时有一个控制单位时间创建 worker 线程上限的逻辑，线程组内连接数越多则创建下一个线程需要等待的时间越长。</p><p>当<strong>线程组活跃 worker 线程数量</strong>大于等于<code>too_many_active_threads+1</code>时，认为线程组的活跃 worker 数量过多。此时需要对 worker 数量进行适当收敛，首先判断当前线程组是否有 listener 线程：</p><ul><li>如果没有 listener 线程，则将当前 worker 线程转化为 listener 线程。</li><li>如果当前有 listener 线程，则在进入休眠前尝试通过<code>epoll_wait</code>获取一个尚未进入队列的事件，成功获取到后立刻处理该事件，否则进入休眠等待被唤醒，等待<code>threadpool_idle_timeout</code>时间后仍未被唤醒则销毁该 worker 线程。</li></ul><p>worker 线程与 listener 线程的切换如下图所示：</p><p><img src="/2023/05/04/mysql-threadpool-main-solutions-details/worker-flow-chart.png" alt="worker 线程流程图" title="worker 线程流程图"></p><p>【尝试获取一个未进入队列的事件】描述错误，此处需要改为【尝试从队列获取事件】。</p><blockquote><p>上图来自于腾讯数据库技术公众号</p></blockquote><h2 id="5-timer-线程-【-要不要重新画图或添加-percona-源码笔记图】"><a href="#5-timer-线程-【-要不要重新画图或添加-percona-源码笔记图】" class="headerlink" title="5. timer 线程 【====要不要重新画图或添加 percona 源码笔记图】"></a><strong>5. timer 线程</strong> 【====要不要重新画图或添加 percona 源码笔记图】</h2><p>timer 线程每隔<code>threadpool_stall_limit</code>时间进行一次所有线程组的扫描（<code>check_stall</code>）。</p><p>当线程组高低优先级队列中存在事件，并且自上次检查至今没有新的事件被 worker 消费，则认为线程组处于停滞状态。</p><ul><li>停滞的主要原因可能是长时间执行的非阻塞请求， 也可能发生于线程正在等待但 <code>wait_begin/wait_end</code> （尝试唤醒或创建新的 worker 线程）被上层函数忘记调用的场景。</li><li>timer 线程会通过唤醒或创建新的 worker 线程来让停滞的线程组恢复工作。</li></ul><p>timer 线程为了尽量减少对正常工作的线程组的影响，在<code>check_stall</code>时采用的是<code>try_lock</code>的方式，如果加不上锁则认为线程组运转良好，不再去打扰。</p><p>timer 线程除上述工作外，<strong>还负责终止空闲时间超过<code>wait_timeout</code>秒的客户端</strong>。</p><p><strong>下面是 Percona 的实现：</strong></p><p><code>check_stall</code> 函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">check_stall</span><br><span class="line">|-- <span class="keyword">if</span> (!thread_group-&gt;listener &amp;&amp; !thread_group-&gt;io_event_count) &#123;</span><br><span class="line">|--   <span class="built_in">wake_or_create_thread</span>(thread_group); <span class="comment">// 重点函数</span></span><br><span class="line">|-- &#125;</span><br><span class="line">|-- thread_group-&gt;io_event_count = <span class="number">0</span>; <span class="comment">// 表示自上次 check 之后，当前线程组新获取的 event 数</span></span><br><span class="line">|-- <span class="keyword">if</span> (!thread_group-&gt;queue_event_count &amp;&amp; !<span class="built_in">queues_are_empty</span>(*thread_group)) &#123; <span class="comment">// 重点函数</span></span><br><span class="line">|--   thread_group-&gt;stalled = <span class="literal">true</span>;</span><br><span class="line">|--   <span class="built_in">wake_or_create_thread</span>(thread_group); <span class="comment">// 重点函数</span></span><br><span class="line">|-- &#125;</span><br><span class="line">|-- thread_group-&gt;queue_event_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">queues_are_empty</span><span class="params">(<span class="keyword">const</span> <span class="keyword">thread_group_t</span> &amp;tg)</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (tg.high_prio_queue.<span class="built_in">is_empty</span>() &amp;&amp; <span class="comment">// 重点函数</span></span><br><span class="line">(tg.queue.<span class="built_in">is_empty</span>() || <span class="built_in">too_many_busy_threads</span>(tg))); <span class="comment">// 重点函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>io_event_count：当 Listen 线程监听到事件时++</li><li>queue_event_count ：当 work 线程从队列中获取事件时++</li></ul><h1 id="行业主流方案对比"><a href="#行业主流方案对比" class="headerlink" title="行业主流方案对比"></a>行业主流方案对比</h1><h2 id="MySQL-企业版-vs-MariaDB"><a href="#MySQL-企业版-vs-MariaDB" class="headerlink" title="MySQL 企业版 vs MariaDB"></a>MySQL 企业版 vs MariaDB</h2><p>MySQL 企业版是在 5.5 版本引入的线程池，以插件的方式实现的。</p><p><strong>相同点：</strong></p><ul><li>都具备线程池功能，都支持 <code>thread_pool_size</code> 参数。</li><li>都支持专有 listener 线程（<code>thread_pool_dedicated_listeners</code> 参数）。</li><li>都支持高低优先级队列，且在避免低优先级队列事件饿死方面，二者采用了相同方案，即低优先级队列事件等待一段时间（<code>thread_pool_prio_kickup_timer</code> 参数）即可移入高优先级队列。</li><li>都使用相同的机制来探测处于停滞（stall）状态的线程，都提供了 <code>thread_pool_stall_limit</code> 参数（MariaDB 单位是 ms，MySQL 企业版单位是 10ms）。</li></ul><p><strong>不同点：</strong> Windows 平台实现方式不同。</p><ul><li>MariaDB 使用 Windows 自带的线程池，而 MySQL 企业版的实现用到了 <code>WSAPoll()</code> 函数（为了便于移植 Unix 程序而提供），因此，MySQL 企业版的实现将不能使用命名管道和共享内存。</li><li>MariaDB 为每个操作系统都使用最高效的 IO 多路复用机制。<ul><li><strong>Windows</strong>：原生线程池</li><li><strong>Linux</strong>： <code>epoll</code></li><li><strong>Solaris</strong> (<code>event ports</code>)</li><li><strong>FreeBSD</strong> and <strong>OSX</strong> (<code>kevent</code>)</li></ul></li><li>而 MySQL 企业版只在 Linux 上才使用优化过的 IO 多路复用机制 <code>epoll</code>，其他平台则用 <code>poll</code> 。</li></ul><h2 id="MariaDB-vs-Percona"><a href="#MariaDB-vs-Percona" class="headerlink" title="MariaDB vs Percona"></a>MariaDB vs Percona</h2><p><a href="https://www.percona.com/doc/percona-server/5.7/performance/threadpool.html" title="Percona 的实现">Percona 的实现</a>移植自 MariaDB，并在此基础上添加了一些功能。特别是 Percona 在 5.5-5.7 版本添加了优先级调度。而 <a href="https://mariadb.com/kb/en/what-is-mariadb-102/" title="MariaDB 10.2">MariaDB 10.2</a> 也支持了优先级调度，和 Percona 的工作方式类似，只是细节有所不同。</p><ul><li>MariaDB 10.2 版本的参数 <code>thread_pool_priority=auto,high,low</code> 对应于 Percona 的 <code>thread_pool_high_prio_mode=transactions,statements,none</code></li><li>MariaDB 10.2 版本中只有<strong>处于事务中</strong>的连接才是高优先级，而 Percona 中符合高优先级的情况包括：<strong>1）处于事务中；2）持有表锁；3）持有 MDL 锁；4）持有全局读锁；5）持有 backup 锁</strong>。</li><li>关于<strong>避免低优先级队列语句饿死</strong>的问题：<ul><li>Percona 有一个 <code>thread_pool_high_prio_tickets</code> 参数，用于<strong>指定每个连接在高优先级队列中的 tickets 数量</strong>，而 MariaDB 没有相应参数。</li><li>MariaDB 有一个 <code>thread_pool_prio_kickup_timer</code> 参数，可<strong>让低优先队列中的语句在等待指定时间后移入高优先级队列</strong>，而 Percona 没有相应参数。</li></ul></li><li>MariaDB 有参数<code>thread_pool_dedicated_listener</code> 、<code>thread_pool_exact_stats</code>，而 Percona 没有。<ul><li><code>thread_pool_dedicated_listener</code> ：可用于<strong>指定专有 listener 线程</strong>，其只负责<code>epoll_wait</code>等待网络事件，不会变为 worker 线程。默认为 OFF，表示不固定 listener。</li><li><code>thread_pool_exact_stats</code> ：是否使用高精度时间戳。</li></ul></li><li>MariaDB （比如 10.9 版本）在 <code>information_schema</code> 中新增了四张表（<code>THREAD_POOL_GROUPS</code>、<code>THREAD_POOL_QUEUES</code>、<code>THREAD_POOL_STATS</code>、<code>THREAD_POOL_WAITS</code>），便于监控线程池状态。</li></ul><h2 id="华为鲲鹏-vs-Percona"><a href="#华为鲲鹏-vs-Percona" class="headerlink" title="华为鲲鹏 vs Percona"></a>华为鲲鹏 vs Percona</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>核心功能与 percona 线程池方案相同，优先级调度算法 及 避免低优先级队列语句饿死的策略 也相同，但额外做了一些改进：</p><ul><li>借鉴了 MariaDB 的实现，添加了参数 <code>thread_pool_dedicated_listener</code> ，即支持固定 listener 功能。</li><li>添加参数 <code>thread_pool_toobusy</code> ：表示线程组是否过于忙碌的线程数阈值。当线程组中活跃的工作线程数+锁或 IO 等待中的工作线程数＞该阈值加 1 时，认为线程组过于忙碌，不再处理低优先级的任务，等待当前执行的任务和高优先级队列中的任务被处理，直到线程组回到非忙碌的状态。</li><li>借鉴了 MariaDB 的实现，在 <code>information_schema</code> 中新增了四张表（<code>THREAD_POOL_GROUPS</code>、<code>THREAD_POOL_QUEUES</code>、<code>THREAD_POOL_STATS</code>、<code>THREAD_POOL_WAITS</code>），便于监控线程池状态。</li><li>还有一些优化点：<ul><li>支持 NUMA 亲和：同一线程组的工作线程分配到同一 NUMA Node。</li><li><strong>高优先级 session 独占 worker 线程：</strong> ​<strong>在连接数很大，高负载时，对于一些事务取得了锁等资源时，可优先处理</strong>（详见下文）。</li><li>listener 线程调用 io_poll_wait 监听 event 时，percona 最少获取 1 个 event 就处理，华为鲲鹏改为了最少获取 2 个 event 才处理。</li><li>listener 线程调用 io_poll_wait 后，只要线程组不繁忙，则按需批量唤醒或创建一批 worker 线程（根据本次获得的 event 数量、活跃线程数来决定 worker 数量）。</li></ul></li></ul><p>简单来说，<strong>华为鲲鹏的线程池方案 = Percona + MariaDB + NUMA 亲和 + 插件化</strong>。&#x20;</p><blockquote><p>详细说明见<a href="https://www.hikunpeng.com/document/detail/zh/kunpengdbs/basicAccelFeatures/mysqlthreadpool/kunpengdbsthreadpool8025_20_0003.html" title="官方手册">官方手册</a>（参考链接 [5.a]）。</p></blockquote><p>接下来重点介绍下华为鲲鹏独有的优化（Percona 和 MariaDB 没有实现）。</p><h3 id="NUMA"><a href="#NUMA" class="headerlink" title="NUMA"></a>NUMA</h3><p>依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line">sudo apt install libnuma-dev</span><br><span class="line"><span class="comment"># CentOS</span></span><br><span class="line">sudo apt install numactl-devel</span><br></pre></td></tr></table></figure><p>参数说明：<strong>thread_pool_sched_affinity</strong></p><p>是否支持命令行：是</p><p>是否支持配置文件：是</p><p>是否支持动态修改：是</p><p>参数范围：Global</p><p>参数类型：Bool</p><p>默认值：OFF</p><p>允许值：OFF、ON</p><p>线程池插件<strong>默认关闭</strong>线程组与 numa 亲和。</p><p>本配置功能使用的限制条件为 mysqld 进程可使用整机所有 numa，未使用 numactl 等方式限制 mysqld 进程的可使用 cpu 范围。</p><p>本配置功能开启时，thread_pool_size 配置的数量的线程组将与服务器上的 numa 轮询亲和，即例如整机 numa 数为<code>a</code>，numa 编号为<code>0 ~ a-1</code>，则第 n 个线程组将会与第<code>n%a</code>（n 对 a 的余数）个 numa 进行绑定。与 numa 亲和的线程组上创建的线程都会与该 numa 亲和。通过线程与 numa 亲和，<strong>使数据与 session 关联性大的类型的业务的跨 numa 内存访问概率降低，从而提升性能</strong>。</p><p><img src="/2023/05/04/mysql-threadpool-main-solutions-details/numa-architecture.png" alt="NUMA 架构图" title="NUMA 架构图"></p><h3 id="优先-session-独占-worker-线程"><a href="#优先-session-独占-worker-线程" class="headerlink" title="优先 session 独占 worker 线程"></a>优先 session 独占 worker 线程</h3><p><strong>在连接数很大，高负载时，对于一些事务取得了锁等资源时，可优先处理</strong>。</p><p>原先的处理逻辑（percona/mariadb 也是）是此类连接发生可读事件后，会被线程组加到优先队列中，等待空闲 worker 线程优先处理。</p><p>进一步优化逻辑，<strong>需要优先处理的 session 不将当前 worker 还给线程池，继续独占当前 worker 线程</strong>，类似每线程每连接的模式，独占 worker 线程专用于处理该优先连接之后的所有语句，直到该连接释放了优先资源转为普通连接，例如该连接事务执行结束释放锁资源。</p><p>优先 session 连接的判断逻辑如下图。</p><p><img src="/2023/05/04/mysql-threadpool-main-solutions-details/huawei-kenpeng-worker-flow-chart.png" alt="华为鲲鹏线程池 worker 线程流程图" title="华为鲲鹏线程池 worker 线程流程图"></p><p>以下描述序号对应上图的数字标记点。</p><ol><li> 新连接建立时，worker 线程处理器登录校验的逻辑，连接生命周期开始。</li><li> 新连接登录校验完成后进入是否高优先级 session 的判断。</li><li> <strong>如果是 Admin 端口上的管理连接，则会一直独占 worker 线程</strong>，避免进入等待队列得不到 worker 线程的处理。</li><li> 如果 session 经过判断后为高优先级的 session，将继续占用当前 worker 线程，进入 [6] 等待下一条 SQL 语句并执行。</li><li> 如果 session 经过判断后为普通 session，则会将当前 session 的连接标识加入到当前线程组的 epoll_wait 中，当前 worker 线程将状态置为空闲并归还本线程组。</li><li> epoll_wait 中触发网络可读事件（有 SQL 语句到达）或 worker 独占的 session，将在 worker 线程等待 SQL 语句的到达。</li><li> worker 线程中等待接收 SQL 语句并执行完成后，若执行结果正常且非结束连接，将进入 [3] 进行 session 优先级判断。</li><li> 登录校验失败，连接生命周期结束。</li><li> 等待接收 SQL 语句或执行 SQL 语句出现异常，或 session 结束退出时，连接生命周期结束。</li></ol><h3 id="小线程组数模式配置"><a href="#小线程组数模式配置" class="headerlink" title="小线程组数模式配置"></a>小线程组数模式配置</h3><p>相对于默认模式的线程池参数配置，使用小线程组数模式的线程池参数配置时，每个线程组上可以创建更多的 active 线程数，使长查询的连接绑定到某个线程组时，<strong>该长查询的连接对该线程组的时延影响可以更小或无明显时延差异</strong>。</p><p>同时使用小线程组数模式时，对于部分场景（例如 OLTP writeonly）在连接数非常大（例如 8192 个连接）时，仍然可以保持 90%左右的曲线峰值。</p><p>小线程组数模式相对于默认模式（使用默认参数），就是参数配置的优化使用，在高并发连接数时，可以更好保持峰值性能的配置模式，相关配置说明如下表：</p><table><thead><tr><th><strong>参数名称</strong></th><th><strong>默认模式配置</strong></th><th><strong>小线程组数模式</strong></th></tr></thead><tbody><tr><td>thread_pool_size</td><td>默认为 CPU 逻辑核数，或手动配置为 1-3 倍 CPU 逻辑核数</td><td>配置为 4 倍 NUMA 数（TPCH 场景测试经验值）</td></tr><tr><td>thread_pool_dedicated_listener</td><td>默认为 OFF，listener 线程可转为 worker 线程</td><td>配置为 ON，listener 线程只负责网络事件等待，不转为 worker 线程</td></tr><tr><td>thread_pool_oversubscribe</td><td>默认为 3</td><td>配置该值=基线版本最优性能时的连接数/thread_pool_size 的配置值</td></tr><tr><td>thread_pool_toobusy</td><td>默认为 13</td><td>配置该值=thread_pool_oversubscribe</td></tr></tbody></table><h2 id="AliSQL-vs-Percona"><a href="#AliSQL-vs-Percona" class="headerlink" title="AliSQL vs Percona"></a>AliSQL vs Percona</h2><p>AliSQL 线程池也一定程度借鉴了 Percona 的机制，但也有自己的特色：</p><ul><li>AliSQL 线程池<strong>给予管理类的 SQL 语句更高的优先级</strong>，保证这些语句优先执行。这样在系统负载很高时，新建连接、管理、监控等操作也能够稳定执行。</li><li><strong>AliSQL 线程池给予复杂查询 SQL 语句相对较低的优先级，并且有最大并发数的限制</strong>。这样可以<strong>避免过多的复杂 SQL 语句将系统资源耗尽，导致整个数据库服务不可用</strong>。</li><li>AliSQL 支持<strong>动态开关线程池</strong>。</li><li>从官网手册及内核月报公开资料，无法获知 AliSQL 是否支持线程组专职 listener 。</li></ul><p>AliSQL 虽然也使用了队列，但没有直接采用 percona 或 mariadb 的高低优先级调度策略，结合<a href="https://help.aliyun.com/document_detail/130306.html" title="官方手册">官方手册</a>和数据库内核月报 2019 年 2 月份的文章 《<a href="http://mysql.taobao.org/monthly/2019/02/09/?spm=wolai.workspace.0.0.3857b476u3d92G" title="MySQL 多队列线程优化">MySQL 多队列线程优化</a>》，推测是使用了两层队列：</p><ul><li><strong>第一层队列为网络请求队列</strong>，可以区分为<strong>请求队列</strong>（不在事务状态中的请求）和<strong>高优先级队列</strong>（已经在事务状态中的请求，收到请求后会马上执行，不进入第二队列）。</li><li><strong>第二层队列为工作任务队列</strong>，可以区分为<strong>查询队列、更新队列和事务队列</strong>。</li></ul><p>第一层请求队列的请求经过快速的处理和分析进入第二层队列。如果是管理操作，则直接执行（假定所有管理操作都是小操作）。</p><p>对第二层队列，可以分别设置一个允许的并发度（可以接近 CPU 的个数），以实现总线程数的控制。只要线程数大于四类操作的设计并发度之和，则不同类型的操作不会互相干涉（在这里是假定同一操作超过各自并发度而进行排队是合理的）。任何一个队列超过一定的时间，如果没有完成任何语句，处于阻塞模式，则可以考虑放行，在 MySQL 线程池中有<code>thread_pool_stall_limit</code>变量来控制这个间隔，以防止任何一个队列挂起。</p><p>可以从配置参数的变化来了解优化后的线程池工作机制：</p><ul><li><code>thread_pool_enabled</code> ：线程池开关。</li><li><code>thread_pool_idle_timeout</code> ：线程最大空闲时间，超过则退出。</li><li><code>thread_pool_max_threads</code> ：线程池最大工作线程数。</li><li><code>thread_pool_oversubscribe</code>：每个 Thread Group 的目标线程数。</li><li><code>thread_pool_normal_weights</code>（相较 percona 新加）：<strong>查询、更新操作的目标线程比例（假定这两类操作的比重相同）</strong>，即<code>并发度 = thread_pool_oversubscribe * 目标比例/100</code>。</li><li><code>thread_pool_trans_weights</code>（相较 percona 新加）：<strong>事务操作的目标线程比例</strong>，即<code>并发度 = thread_pool_oversubscribe * 目标比例/100</code>。</li><li><code>thread_pool_stall_limit</code>：阻塞模式检查频率（同时检查 5 个队列的状态）</li><li><code>thread_pool_size</code>：线程组的个数（在优化锁并发后，线程组的个数不是很关键，可以用来根据物理机器的资源配置情况来软性调节处理能力）</li></ul><p>另外，AliSQL 新增了 6 个状态变量：<code>thread_pool_active_threads</code>，<code>thread_pool_big_threads</code>，<code>thread_pool_dml_threads</code>，<code>thread_pool_qry_threads</code>，<code>thread_pool_trx_threads</code>，<code>thread_pool_wait_threads</code> 。还有 2 个状态变量与 percona 线程池含义相同，只是名字不同。</p><h2 id="TXSQL-vs-Percona"><a href="#TXSQL-vs-Percona" class="headerlink" title="TXSQL vs Percona"></a>TXSQL vs Percona</h2><p>腾讯云 TXSQL 线程池核心方案与 Percona 完全一样，额外支持的功能如下：</p><h3 id="1-支持线程池动态切换"><a href="#1-支持线程池动态切换" class="headerlink" title="1. 支持线程池动态切换"></a><strong>1. 支持线程池动态切换</strong></h3><p>线程池采用一定数量的工作线程来处理用户连接请求，通常比较适应于 OLTP 工作负载的场景。但线程池并不是万能的，线程池的不足在于当用户请求偏向于慢查询时，工作线程阻塞在高时延操作上，难以快速响应新的用户请求，导致系统吞吐量反而相较于 one-thread-per-connection（简称为 Per_thread）模式更低。</p><p>Per_thread 模式与 Thread_pool 模式各有优劣，系统需要根据用户的业务类型灵活切换两种模式。在业务高峰时段切换模式，重启服务器，会严重影响用户业务。为了解决此问题，TXSQL 提出了<strong>线程池动态切换</strong>的优化，即在不重启数据库服务的情况下，动态开启或关闭线程池。</p><p>通过参数 <code>thread_handling_switch_mode</code> 控制，可选值及含义如下：</p><table><thead><tr><th>可选值</th><th>含义</th></tr></thead><tbody><tr><td>disabled</td><td>禁止模式动态迁移</td></tr><tr><td>stable</td><td>只有新连接迁移</td></tr><tr><td>fast</td><td>新连接 + 新请求都迁移，默认模式</td></tr><tr><td>sharp</td><td>kill 当前活跃连接，迫使用户重连，达到快速切换的效果</td></tr></tbody></table><p>在了解了 TXSQL 动态线程池的使用方法后，我们再来了解一下其具体的实现。</p><p>mysql 的<code>thread_handling</code>参数代表了连接管理方法。</p><p><strong>在原生 mysql 中，thread_handling 是只读参数，不允许在线修改</strong>。</p><p><code>thread_handling</code> 参数对应的底层实现对象是<code>Connection_handler_manager</code>，后者是 mysql 提供连接管理服务的单例类，可对外提供多种连接管理服务：</p><ul><li><code>Per_thread</code> : 参数值是 one-thread-per-connection</li><li><code>No_threads</code> : 参数值是 no-threads</li><li><code>Thread_pool</code> : 新加</li><li><code>Plugin_connection_handler</code> : 参数值是 loaded-dynamically</li></ul><p>在 mysql 启动时<code>Connection_handler_manager</code>只需要按照<code>thread_handling</code>初始化一种连接管理方法即可。</p><p>为了支持动态线程池，允许用户连接从 Per_thread 和 Thread_pool 模式中来回切换，我们需要允许多种连接管理方法同时存在。因此，<strong>在 mysql 初始化阶段，TXSQL 初始化了所有连接管理方法</strong>。</p><p>在支持<code>thread_handling</code>在<strong>Per_thread 和 Thread_pool 模式</strong>中来回切换后，我们需要考虑的问题主要有以下几个：</p><h4 id="1-1-活跃用户连接的-thread-handling-切换"><a href="#1-1-活跃用户连接的-thread-handling-切换" class="headerlink" title="1.1. 活跃用户连接的 thread_handling 切换"></a><strong>1.1. 活跃用户连接的 thread_handling 切换</strong></h4><p>Per_thread 模式下，每个用户连接对应一个<code>handle_connection</code>线程，<code>handle_connection</code>线程既负责用户网络请求的监听，又负责请求的处理。</p><p>Thread_pool 模式下，每个 thread_group 都用<code>epoll</code>来管理其中所有用户连接的网络事件，监听到的事件放入事件队列中，交予 worker 处理。</p><p><strong>不论是哪种模式，在处理请求的过程中（<code>do_command</code>）切换都不是一个好选择，而在完成一次 command 之后，尚未接到下一次请求之前是一个较合适的切换点。</strong></p><ul><li>为实现用户连接从 Per_thread 到 Thread_pool 的切换，需要在请求处理完（<code>do_command</code>）之后判断<code>thread_handling</code>是否发生了变化。<br>如需切换则立刻按照 2.2 中介绍的逻辑，通过<code>thread_id % group_size</code>选定目标 thread_group，<strong>将当前用户连接迁移至 Thread_pool 的目标 thread_group 中</strong>，后续该用户连接的所有网络事件统一交予 thread_group 的 epoll 监听。在完成连接迁移之后，handle_connection 线程即可完成退出或者缓存至下一次 Per_thread 模式处理新连接时复用（此为<strong>原生 mysql 支持的逻辑</strong>，目的是避免 Per_thread 模式下频繁地创建和销毁 handle_connection 线程）。</li><li>为实现用户连接从 Thread_pool 到 Per_thread 的切换，需要在请求处理完（<code>threadpool_process_request</code>）后，<strong>将用户线程网络句柄重新挂载到 epoll</strong>（<code>start_io</code>）之前判断 thread_handling 是否发生了变化。<strong>如需切换则先将网络句柄从 epoll 中移除以及将连接的信息从对应 thread_group 中清除</strong>。由于 Per_thread 模式下每个连接对应一个 handle_connection 线程，<strong>还需为当前用户连接创建一个 handle_connection 线程</strong>，后续当前用户连接的网络监听和请求处理都交予该 handle_connection 线程处理。</li></ul><h4 id="1-2-新连接的处理"><a href="#1-2-新连接的处理" class="headerlink" title="1.2. 新连接的处理"></a><strong>1.2. 新连接的处理</strong></h4><p>由于 thread_handling 可能随时动态变化，为了使得新连接能被新 thread_handling 处理，需要在新连接处理接口<code>Connection_handler_manager::process_new_connection</code>中，<strong>读取最新的 thread_handling，利用其相应的连接管理方法添加新连接</strong>。</p><ul><li>对于 Per_thread 模式，需要为新连接创建<code>handle_connection</code>线程；</li><li>对于 Thread_pool 模式，则需要为新连接选定 thread_group 和将其网络句柄绑定到 thread_group 的<code>epoll</code>中。</li></ul><h4 id="1-3-thread-handling-切换的快速生效"><a href="#1-3-thread-handling-切换的快速生效" class="headerlink" title="1.3. thread_handling 切换的快速生效"></a><strong>1.3. thread_handling 切换的快速生效</strong></h4><p>从前文的讨论中可以看到，<strong>处于连接状态的用户线程需要等到一个请求处理结束才会等到合适的切换点</strong>。</p><p>如果该用户连接迟迟不发送网络请求，则连接会阻塞在 do_command 下的<code>get_command</code>的网络等待中，无法及时切换到 Thread_pool。如何快速完成此类线程的切换呢？</p><blockquote><p>一种比较激进的方法就是<strong>迫使此类连接重连</strong>，在重连后作为新连接自然地切换到 Thread_pool 中，其下一个网络请求也将被 Thread_pool 应答。</p></blockquote><p><strong>线程池动态切换对性能的影响</strong>：</p><ul><li><code>pool-of-threads</code> 切换为 <code>one-thread-per-connection</code> 过程本身<strong>不会带来 query 堆积，以及性能影响</strong>。</li><li><code>one-thread-per-connection</code> 切换为 <code>pool-of-threads</code> 过程，由于<strong>之前线程池处于休眠状态</strong>，在 QPS 极高并且有持续高压的情况下，<strong>可能存在一定的请求累积</strong>。解决方案如下：<ul><li>方案 1：适当增大 <code>thread_pool_oversubscribe</code>，并适当调小 <code>thread_pool_stall_limit</code>，快速激活线程池。待消化完堆积 SQL 再视情况还原上述修改。</li><li>方案 2：出现 SQL 累积时，短暂暂停或降低业务流量几秒钟，等待 <code>pool-of-threads</code> 完成激活，再恢复持续高压业务流量。</li></ul></li></ul><h3 id="2-线程池负载均衡优化"><a href="#2-线程池负载均衡优化" class="headerlink" title="2. 线程池负载均衡优化"></a>2. 线程池负载均衡优化</h3><p>如前文所述，新连接<strong>按照线程 id 取模线程组个数</strong>来确定新连接归属的线程组（<code>thd-&gt;thread_id() % group_count</code>）。这样的分配方式未能将各线程组的实际负载考虑在内，因此<strong>可能将繁忙的连接分配到相同的线程组，使得线程池出现负载不均衡的现象</strong>。为了避免负载不均衡的发生，TXSQL 提出了线程池负载均衡优化。</p><h4 id="2-1-负载的度量"><a href="#2-1-负载的度量" class="headerlink" title="2.1. 负载的度量"></a><strong>2.1. 负载的度量</strong></h4><p>在提出负载均衡的算法之前，我们首先需要找到一种度量线程组负载状态的方法，通常我们称之为”信息策略“。下面我们分别讨论几种可能的信息策略。</p><p><strong>1） queue_length</strong></p><p><code>queue_length</code><strong>代表线程组中低优先级队列和高优先级队列的长度</strong>。此信息策略的最大优势在于简单，直接用<strong>在工作队列中尚未处理的 event 的数量</strong>描述当前线程组的工作负载情况。此信息策略的不足是 无法将每个网络事件 event 的处理效率纳入考量。由于每个 event 的处理效率并不相同，简单地以工作队列长度作为度量标准会带来一些误判。</p><p><strong>2） average_wait_usecs_in_queue</strong></p><p><code>average_wait_usecs_in_queue</code><strong>表示最近 n 个 event 在队列中的平均等待时间</strong>。此信息策略的优势在于能够直观地反映线程组处理 event 的响应速度。某线程组<code>average_wait_usecs_in_queue</code>明显高于其他线程组说明其工作队列中的 event 无法及时被处理，需要其他线程组对其提供帮助。</p><p><strong>3） group_efficiency</strong></p><p><code>group_efficiency</code>表示一定的时间周期内，<strong>线程组处理完的 event 总数占（工作队列存量 event 数+新增 event 数）的比例</strong>。此信息策略的优势在于能够直观反映出线程组一定时间周期内的工作效率，不足在于对于运转良好的线程组也可能存在误判：当时间周期选择不合适时，运转良好的线程组可能存在时而 group_efficiency 小于 1，时而大于 1 的情况。 &#x20;<br>上述三种信息策略只是举例说明，还有更多信息策略可以被采用，就不再一一罗列。</p><h4 id="2-2-负载均衡的实现介绍"><a href="#2-2-负载均衡的实现介绍" class="headerlink" title="2 .2. 负载均衡的实现介绍"></a>2 <strong>.2. 负载均衡的实现介绍</strong></h4><p>在明确了度量线程组负载的方法之后，我们接下来讨论如何均衡负载。我们需要考虑的问题主要如下：</p><p><strong>1） 负载均衡算法的触发条件</strong></p><p><strong>负载均衡操作会将用户连接从一个线程组迁移至另一个线程组，在非必要情况下触发用户连接的迁移反而会导致用户连接的性能抖动</strong>。为尽可能避免负载均衡算法错误触发，我们需要为触发负载均衡算法<strong>设定一个负载阈值 M，以及负载比例 N。只有线程组的负载阈值大于 M，并且其与参与均衡负载的线程组的负载比例大于 N 时，才需要启动负载均衡算法平衡负载</strong>。</p><p><strong>2） 负载均衡的参数对象</strong></p><p>Q：当线程组触发了负载均衡算法后，该由哪些线程组参与平衡高负载线程组的负载呢？</p><p>很容易想到的一个方案是<strong>我们维护全局的线程组负载动态序列，让负载最轻的线程组负责分担负载</strong>。但是遗憾的是为了维护全局线程组负载动态序列，线程组每处理完一次任务都可能需要更新自身的状态，并在全局锁的保护下更新其在全局负载序列中的位置，如此一来对性能的影响势必较大，因此<strong>全局线程组负载动态序列的方案并不理想</strong>。</p><p>为了避免均衡负载对线程池整体性能的影响，需改全局负载比较为局部负载比较。一种可能的方法为<strong>当当前线程组的负载高于阈值 M 时，只比较其与左右相邻的 X 个（通常 1-2 个）线程组的负载差异，当当前线程组的负载与相邻线程组的比例也高于 N 倍时，从当前线程组向低负载线程组迁移用户连接</strong>。需要注意的是当当前线程组的负载与相邻线程组的比例不足 N 倍时，说明要么当前线程组还不够繁忙、要么其相邻线程组也较为忙碌，此时为了避免线程池整体表现恶化，不适合强行均衡负载。</p><p><strong>3） 均衡负载的方法</strong></p><p>讨论完负载均衡的触发条件及参与对象之后，接下来我们需要讨论高负载线程组向低负载线程组<strong>迁移负载的方法</strong>。总体而言，包括两种方法：<strong>新连接的优化分配、旧连接的合理转移</strong>。</p><p>在掌握了线程组的量化负载之后，<strong>较容易实现的均衡负载方法是在新连接分配线程组时特意避开高负载线程组</strong>，这样一来已经处于高负载状态的线程组便不会因新连接的加入进一步恶化。但仅仅如此还不够，如果高负载线程组的响应已经很迟钝，我们还需要主动将其中的旧连接迁移至合适的低负载线程组，具体迁移时机在 3.1 中已有述及，为在请求处理完（<code>threadpool_process_request</code>）后，将用户线程网络句柄重新挂载到<code>epoll</code>（start_io）之前，此处便不再展开讨论。</p><h3 id="3-线程池断连优化"><a href="#3-线程池断连优化" class="headerlink" title="3. 线程池断连优化"></a>3. 线程池断连优化</h3><h4 id="3-1-percona-线程池问题"><a href="#3-1-percona-线程池问题" class="headerlink" title="3.1. percona 线程池问题"></a>3.1. percona 线程池问题</h4><p>如前文所述，线程池采用 epoll 来处理网络事件。当 epoll 监听到网络事件时，listener 会将网络事件放入事件队列或自己处理，此时相应用户连接不会被 epoll 监听。<strong>percona 线程池需要等到请求处理结束之后才会使用 epoll 重新监听用户连接的新网络事件</strong>。percona 线程池这样的设计通常不会带来问题，因为用户连接在请求未被处理时，也不会有发送新请求的需求。<strong>但特殊情况下，如果用户连接在重新被 epoll 监听前自行退出了，此时用户连接发出的断连信号无法被 epoll 捕捉，因此在 mysql 服务器端无法及时退出该用户连接</strong>。这样带来的影响主要有两点：</p><ol><li> <strong>用户连接客户端虽已退出，但 mysql 服务器端却仍在运行该连接</strong>，继续消耗 CPU、内存资源，甚至可能继续持有锁，只有等到连接超时才能退出；</li><li> 由于<strong>用户连接在 mysql 服务器端未及时退出，连接数也并未清理</strong>，如果用户业务连接数较多，可能导致用户新连接数触达最大连接数上限，用户无法连接数据库，严重影响业务。</li></ol><p>为解决上述问题，TXSQL 提出了线程池断连优化。</p><h4 id="3-2-断连优化的实现介绍"><a href="#3-2-断连优化的实现介绍" class="headerlink" title="3.2. 断连优化的实现介绍"></a><strong>3.2. 断连优化的实现介绍</strong></h4><p>断连优化的重点在于<strong>及时监听用户连接的断连事件并及时处理</strong>。为此需要作出的优化如下：</p><ol><li> <strong>在 epoll 接到用户连接的正常网络事件后，立刻监听该用户连接的断连事件</strong>；</li><li> <strong>所有用户连接退出从同步改为异步</strong>，所有退出的连接先放入<code>quit_connection_queue</code>，后统一处理；</li><li> <strong>一旦 epoll 接到断连事件后立刻将用户连接<code>thd-&gt;killed</code>设置为<code>THD::KILL_CONNECTION</code>状态，并将连接放入<code>quit_connection_queue</code>中异步退出</strong>；</li><li> <strong>listener 每隔固定时间（例如 100ms）处理一次<code>quit_connection_queue</code>，让其中的用户连接退出</strong>。</li></ol><h3 id="4-新增用于监控的状态变量"><a href="#4-新增用于监控的状态变量" class="headerlink" title="4. 新增用于监控的状态变量"></a><strong>4. 新增用于监控的状态变量</strong></h3><ul><li>新增指令 <code>show threadpool status</code> ，可展示 25 个线程池状态变量。</li><li>在 <code>show full processlist</code> 中新增如下状态变量：<ul><li><code>Moved_to_per_thread</code> 表示该连接迁移到 Per_thread 的次数。</li><li><code>Moved_to_thread_pool</code> 表示该连接迁移到 Thread_pool 的次数。</li></ul></li></ul><h1 id="性能结果"><a href="#性能结果" class="headerlink" title="性能结果"></a>性能结果</h1><p>由于腾讯 TXSQL、Percona 官方手册都没有性能数据，因此仅列出其他几种方案的性能结果。</p><h2 id="华为鲲鹏"><a href="#华为鲲鹏" class="headerlink" title="华为鲲鹏"></a>华为鲲鹏</h2><p><img src="/2023/05/04/mysql-threadpool-main-solutions-details/huawei-kunpeng-threadpool-benchmark.png" alt="华为鲲鹏线程池性能测试" title="华为鲲鹏线程池性能测试"></p><h2 id="MariaDB-5-5-无优先级队列"><a href="#MariaDB-5-5-无优先级队列" class="headerlink" title="MariaDB 5.5 - 无优先级队列"></a>MariaDB 5.5 - 无优先级队列</h2><blockquote><p>本小节内容来源于<a href="https://mariadb.com/kb/en/threadpool-benchmarks/" title="官网手册">官网手册</a>。</p></blockquote><p>MariaDB 官网是基于 5.5 版本线程池测试的，也就是不支持高低优先级队列的版本。</p><p>采用 Sysbench 0.4，以 pitbull (Linux, 24 cores) 的情况来说明在不同场景下的 QPS 情况。</p><h3 id="OLTP-RO"><a href="#OLTP-RO" class="headerlink" title="OLTP_RO"></a>OLTP_RO</h3><table><thead><tr><th>并发数</th><th>16</th><th>32</th><th>64</th><th>128</th><th>256</th><th>512</th><th>1024</th><th>2048</th><th>4096</th></tr></thead><tbody><tr><td>per_thread</td><td>6754</td><td>7905</td><td>8152</td><td>7948</td><td>7924</td><td>7587</td><td>5313</td><td>3827</td><td>208</td></tr><tr><td>threadpool</td><td>6566</td><td>7725</td><td>8108</td><td>8079</td><td>7976</td><td>7793</td><td>7429</td><td>6523</td><td>4456</td></tr></tbody></table><p><img src="/2023/05/04/mysql-threadpool-main-solutions-details/mariadb-threadpool-sysbench-oltp-ro.png" alt="MariaDB Sysbench oltp_ro 性能" title="MariaDB Sysbench oltp_ro 性能"></p><h3 id="OLTP-RW"><a href="#OLTP-RW" class="headerlink" title="OLTP_RW"></a>OLTP_RW</h3><table><thead><tr><th>并发数</th><th>16</th><th>32</th><th>64</th><th>128</th><th>256</th><th>512</th><th>1024</th><th>2048</th><th>4096</th></tr></thead><tbody><tr><td>per_thread</td><td>4561</td><td>5316</td><td>5332</td><td>3512</td><td>2874</td><td>2476</td><td>1380</td><td>265</td><td>53</td></tr><tr><td>threadpool</td><td>4504</td><td>5382</td><td>5694</td><td>5567</td><td>5302</td><td>4514</td><td>2548</td><td>1186</td><td>484</td></tr></tbody></table><p><img src="/2023/05/04/mysql-threadpool-main-solutions-details/mariadb-threadpool-sysbench-oltp-rw.png" alt="MariaDB Sysbench oltp_rw 性能" title="MariaDB Sysbench oltp_rw 性能"></p><h3 id="POINT-SELECT"><a href="#POINT-SELECT" class="headerlink" title="POINT_SELECT"></a>POINT_SELECT</h3><table><thead><tr><th>并发数</th><th>16</th><th>32</th><th>64</th><th>128</th><th>256</th><th>512</th><th>1024</th><th>2048</th><th>4096</th></tr></thead><tbody><tr><td>per_thread</td><td>148673</td><td>161547</td><td>169747</td><td>172083</td><td>69036</td><td>42041</td><td>21775</td><td>4368</td><td>282</td></tr><tr><td>threadpool</td><td>143222</td><td>167069</td><td>167270</td><td>165977</td><td>164983</td><td>158410</td><td>148690</td><td>147107</td><td>143934</td></tr></tbody></table><p><img src="/2023/05/04/mysql-threadpool-main-solutions-details/mariadb-threadpool-sysbench-point-select.png" alt="MariaDB Sysbench point_select 性能" title="MariaDB Sysbench point_select 性能"></p><h3 id="UPDATE-NOKEY"><a href="#UPDATE-NOKEY" class="headerlink" title="UPDATE_NOKEY"></a>UPDATE_NOKEY</h3><table><thead><tr><th>并发数</th><th>16</th><th>32</th><th>64</th><th>128</th><th>256</th><th>512</th><th>1024</th><th>2048</th><th>4096</th></tr></thead><tbody><tr><td>per_thread</td><td>65213</td><td>71680</td><td>19418</td><td>13008</td><td>11155</td><td>8742</td><td>5645</td><td>635</td><td>332</td></tr><tr><td>threadpool</td><td>64902</td><td>70236</td><td>70037</td><td>68926</td><td>69930</td><td>69929</td><td>67099</td><td>62376</td><td>17766</td></tr></tbody></table><p><img src="/2023/05/04/mysql-threadpool-main-solutions-details/mariadb-threadpool-sysbench-update-nokey.png" alt="MariaDB Sysbench update_nokey 性能" title="MariaDB Sysbench update_nokey 性能"></p><h2 id="AliSQL"><a href="#AliSQL" class="headerlink" title="AliSQL"></a>AliSQL</h2><p>如下是开启线程池和不开启线程池的性能对比。从测试结果可以看出线程池在高并发的情况下有着明显的性能优势。</p><h3 id="update-non-index"><a href="#update-non-index" class="headerlink" title="update_non_index"></a>update_non_index</h3><p><img src="/2023/05/04/mysql-threadpool-main-solutions-details/alisql-sysbench-update-non-index.png" alt="AliSQL update_non_index 性能" title="AliSQL update_non_index 性能"></p><h3 id="write-only"><a href="#write-only" class="headerlink" title="write_only"></a>write_only</h3><p><img src="/2023/05/04/mysql-threadpool-main-solutions-details/alisql-sysbench-write-only.png" alt="AliSQL write_only 性能" title="AliSQL write_only 性能"></p><h3 id="read-write"><a href="#read-write" class="headerlink" title="read_write"></a>read_write</h3><p><img src="/2023/05/04/mysql-threadpool-main-solutions-details/alisql-sysbench-read-write.png" alt="AliSQL read_write 性能" title="AliSQL read_write 性能"></p><h3 id="point-select"><a href="#point-select" class="headerlink" title="point_select"></a>point_select</h3><p><img src="/2023/05/04/mysql-threadpool-main-solutions-details/alisql-sysbench-point-select.png" alt="AliSQL point_select 性能" title="AliSQL point_select 性能"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="功能区别"><a href="#功能区别" class="headerlink" title="功能区别"></a>功能区别</h2><table><thead><tr><th></th><th><strong>MySQL 企业版</strong></th><th><strong>MariaDB</strong></th><th><strong>Percona</strong></th><th>华为鲲鹏</th><th>腾讯 TXSQL</th><th>阿里云 AliSQL</th></tr></thead><tbody><tr><td><strong>功能实现方式</strong></td><td>插件</td><td>非插件</td><td>非插件</td><td>插件</td><td>非插件</td><td>-</td></tr><tr><td><strong>版本</strong></td><td>5.5 版本引入</td><td>5.5 版本引入，10.2 版本完善</td><td>5.5-5.7/8.0</td><td>5.7/8.0</td><td>5.7/8.0</td><td>5.6/5.7/8.0</td></tr><tr><td><strong>是否开源</strong></td><td>否</td><td>是</td><td>是</td><td>是</td><td>否</td><td>否</td></tr><tr><td><strong>动态开关线程池</strong></td><td>插件式，不支持</td><td>不支持</td><td>不支持</td><td>插件式，不支持</td><td>支持</td><td>支持</td></tr><tr><td><strong>优先级处理策略</strong></td><td>设定高低优先级，且低优先级事件等待一段时间可升为高优先级队列</td><td>设定高低优先级，且低优先级事件等待一段时间可升为高优先级队列</td><td>设定高低优先级，且限制每个连接在高优先级队列中的票数</td><td>设定高低优先级，且限制每个连接在高优先级队列中的票数</td><td>设定高低优先级，且限制每个连接在高优先级队列中的票数</td><td>控制事务、非事务语句的比例</td></tr><tr><td><strong>各线程组之间负载均衡优化</strong></td><td>不支持</td><td>不支持</td><td>不支持</td><td>不支持</td><td>支持</td><td>-</td></tr><tr><td><strong>线程池断连优化</strong></td><td>-</td><td>不支持</td><td>不支持</td><td>不支持</td><td>支持</td><td>-</td></tr><tr><td><strong>监控</strong></td><td>-</td><td>2 个状态变量</td><td>2 个状态变量</td><td>4 张状态信息表</td><td>27 个状态变量</td><td>8 个状态变量</td></tr><tr><td><strong>借鉴方案</strong></td><td>-</td><td>-</td><td>MariaDB</td><td>Percona + MariaDB 10.2 及之后版本</td><td>Percona</td><td>MariaDB 5.5</td></tr><tr><td><strong>跨平台</strong></td><td>Windows/Unix</td><td>Windows/Unix/MacOS</td><td>Windows/Unix</td><td>Unix</td><td>-</td><td>-</td></tr></tbody></table><p>Q：<strong>如果线程池阻塞了，怎么处理？</strong></p><blockquote><p>MySQL 8.0.14 以前的版本使用 <code>extra_port</code> 功能（percona &amp; mariadb），8.0.14 及之后版本官方支持了 <code>admin_port</code> 功能。</p></blockquote><p>由上表可见，<strong>华为鲲鹏社区的线程池方案相对较全，腾讯 TXSQL 的优化点也有较大参考价值</strong>。</p><h2 id="参数区别"><a href="#参数区别" class="headerlink" title="参数区别"></a>参数区别</h2><p>由于业内线程池方案基本都会参考 MariaDB 或 Percona，因此，以 Percona 和 MariaDB 的参数为准，基于 MySQL 8.0，总结其他方案是否有相同或类似参数。</p><blockquote><p>注意：MySQL 企业版核心方案与 MariaDB 类似，且关于差异点，官方描述较少，因此，不做对比。</p></blockquote><table><thead><tr><th></th><th>MariaDB</th><th>Percona</th><th>华为鲲鹏</th><th>腾讯 TXSQL</th><th>阿里云 AliSQL</th></tr></thead><tbody><tr><td><code>thread_handling</code> <br>线程池开关</td><td>有</td><td>有</td><td>无（插件方式）</td><td>有类似参数 <code>thread_handling_switch_mode</code> （支持动态开关）</td><td>有类似参数 <code>thread_pool_enabled</code>（支持动态开关）</td></tr><tr><td><code>thread_pool_idle_timeout</code> <br>线程最大空闲时间，超过则退出。</td><td>有</td><td>有</td><td>有</td><td>有</td><td>有</td></tr><tr><td><code>thread_pool_high_prio_mode</code> <br>高优先级队列调度策略，<br>支持 <code>transactions</code>,<code>statements</code>,<code>none</code> 三种策略</td><td>有类似参数 <code>thread_pool_priority</code>，<br>支持 <code>high</code>, <code>low</code>, <code>auto</code> 三种策略</td><td>有</td><td>有</td><td>有</td><td>无</td></tr><tr><td><code>thread_pool_high_prio_tickets</code> <br>控制每个连接在高优先级中的票数，仅在调度模式是<strong>事务模式</strong>时生效</td><td>无</td><td>有</td><td>有</td><td>有</td><td>无</td></tr><tr><td><code>thread_pool_max_threads</code> <br>线程池最大工作线程数</td><td>有</td><td>有</td><td>有</td><td>有</td><td>有</td></tr><tr><td><code>thread_pool_oversubscribe</code> <br>每个线程组中的最大工作线程数</td><td>有</td><td>有</td><td>有</td><td>有</td><td>有</td></tr><tr><td><code>thread_pool_size</code> <br>线程组数，一般推荐设为 CPU 核心数</td><td>有</td><td>有</td><td>有</td><td>有</td><td>有</td></tr><tr><td><code>thread_pool_stall_limit</code> <br>timer 线程判断线程组是否停滞（定期调用 check_stall ）的时间间隔</td><td>有</td><td>有</td><td>有</td><td>有</td><td>有</td></tr><tr><td><code>thread_pool_prio_kickup_timer</code> <br>低优先队列中的语句在等待该值指定的时间后，则移入高优先级队列</td><td>有</td><td>无</td><td>无</td><td>无</td><td>无</td></tr><tr><td><code>thread_pool_dedicated_listener</code> <br>是否启用专用 listener 线程。若关闭，则 listener 有可能变为 worker。</td><td>有</td><td>无</td><td>有</td><td>无</td><td>无</td></tr><tr><td><code>thread_pool_exact_stats</code> <br>是否使用高精度时间戳</td><td>有</td><td>无</td><td>无</td><td>无</td><td>无</td></tr><tr><td><code>thread_pool_toobusy</code> <br>表示线程组是否过于忙碌的线程数阈值</td><td>无</td><td>无</td><td>有</td><td>无</td><td>无</td></tr><tr><td><code>thread_pool_sched_affinity</code> <br>指定是否启用线程组与 numa 亲和，默认关闭。</td><td>无</td><td>无</td><td>有</td><td>无</td><td>无</td></tr><tr><td><code>thread_pool_normal_weights</code>：<br>查询、更新操作的目标线程比例（假定这两类操作的比重相同），<br>即<code>并发度= thread_pool_oversubscribe * 目标比例/100</code></td><td>无</td><td>无</td><td>无</td><td>无</td><td>有</td></tr><tr><td><code>thread_pool_trans_weights</code>：<br>事务操作的目标线程比例，<br>即<code>并发度= thread_pool_oversubscribe * 目标比例/100</code></td><td>无</td><td>无</td><td>无</td><td>无</td><td>有</td></tr></tbody></table><p><strong>可见</strong>：</p><ol><li> 华为鲲鹏主要基于 percona 方案实现，同时实现了专用 listener 线程（参数 <code>thread_pool_prio_kickup_timer</code>）。</li><li> 阿里云 AliSQL 线程池资料较少，虽然有些参数不具备，但并不说明未实现对应机制，比如专用 listener 线程。</li></ol><h2 id="监控区别"><a href="#监控区别" class="headerlink" title="监控区别"></a>监控区别</h2><h3 id="Percona、MariaDB："><a href="#Percona、MariaDB：" class="headerlink" title="Percona、MariaDB："></a><strong>Percona、MariaDB：</strong></h3><p>只有两个状态变量：</p><ul><li>&#x20;<code>Threadpool_threads</code>&#x20;</li><li><code>Threadpool_idle_threads</code></li></ul><h3 id="华为鲲鹏："><a href="#华为鲲鹏：" class="headerlink" title="华为鲲鹏："></a><strong>华为鲲鹏</strong>：</h3><ul><li><code>information_schema</code> 中增加四张<strong>状态信息表</strong>：<ul><li><code>THREAD_POOL_GROUPS</code>查询线程组相关信息。</li><li><code>THREAD_POOL_QUEUES</code>查询线程组队列中连接的信息。</li><li><code>THREAD_POOL_STATS</code>查询线程组状态信息的统计值，比如线程组由于 check_stall 创建的线程数、由 listener 线程 poll 到的任务数等。</li><li><code>THREAD_POOL_WAITS</code>提供线程组的 worker 线程在执行 SQL 语句时，各类等待原因的统计数据。 等待原因有：UNKNOWN、SLEEP、DISKIO、ROW_LOCK、GLOBAL_LOCK、META_DATA_LOCK、TABLE_LOCK、USER_LOCK、BINLOG、GROUP_COMMIT、SYNC、NET。</li></ul></li></ul><h3 id="阿里云-AliSQL："><a href="#阿里云-AliSQL：" class="headerlink" title="阿里云 AliSQL："></a><strong>阿里云 AliSQL</strong>：</h3><p>新增了一些状态变量：</p><table><thead><tr><th>状态名</th><th>状态说明</th></tr></thead><tbody><tr><td>thread_pool_active_threads</td><td>线程池中的活跃线程数</td></tr><tr><td>thread_pool_big_threads</td><td>线程池中正在执行复杂查询的线程数。复杂查询包括有子查询、聚合函数、group by、limit 等的查询语句。</td></tr><tr><td>thread_pool_dml_threads</td><td>线程池中的在执行 DML 的线程数</td></tr><tr><td>thread_pool_idle_threads</td><td>线程池中的空闲线程数</td></tr><tr><td>thread_pool_qry_threads</td><td>线程池中正在执行简单查询的线程数</td></tr><tr><td>thread_pool_total_threads</td><td>线程池中的总线程数</td></tr><tr><td>thread_pool_trx_threads</td><td>线程池中正在执行事务的线程数</td></tr><tr><td>thread_pool_wait_threads</td><td>线程池中正在等待磁盘 IO、事务提交的线程数</td></tr></tbody></table><h3 id="腾讯云-TXSQL："><a href="#腾讯云-TXSQL：" class="headerlink" title="腾讯云 TXSQL："></a><strong>腾讯云 TXSQL</strong>：</h3><p>新增 <code>show threadpool status</code> 指令，展示的相关状态如下：</p><table><thead><tr><th>状态名</th><th>状态说明</th></tr></thead><tbody><tr><td>groupid</td><td>线程组 id</td></tr><tr><td>connection_count</td><td>线程组用户连接数</td></tr><tr><td>thread_count</td><td>线程组内工作线程数</td></tr><tr><td>havelistener</td><td>线程组当前是否存在 listener</td></tr><tr><td>active_thread_count</td><td>线程组内活跃 worker 数量</td></tr><tr><td>waiting_thread_count</td><td>线程组内等待中的 worker 数量（调用 wait_begin 的 worker）</td></tr><tr><td>waiting_threads_size</td><td>线程组中无网络事件需要处理，进入休眠期等待被唤醒的 worker 数量（等待 thread_pool_idle_timeout 秒后自动销毁）</td></tr><tr><td>queue_size</td><td>线程组普通优先级队列长度</td></tr><tr><td>high_prio_queue_size</td><td>线程组高优先级队列长度</td></tr><tr><td>get_high_prio_queue_num</td><td>线程组内事件从高优先级队列被取走的总次数</td></tr><tr><td>get_normal_queue_num</td><td>线程组内事件从普通优先级队列被取走的总次数</td></tr><tr><td>create_thread_num</td><td>线程组内创建的 worker 线程总数</td></tr><tr><td>wake_thread_num</td><td>线程组内从 waiting_threads 队列中唤醒的 worker 总数</td></tr><tr><td>oversubscribed_num</td><td>线程组内 worker 发现当前线程组处于 oversubscribed 状态，并且准备进入休眠的次数</td></tr><tr><td>mysql_cond_timedwait_num</td><td>线程组内 worker 进入 waiting_threads 队列的总次数</td></tr><tr><td>check_stall_nolistener</td><td>线程组被 timer 线程 check_stall 检查中发现没有 listener 的总次数</td></tr><tr><td>check_stall_stall</td><td>线程组被 timer 线程 check_stall 检查中被判定为 stall 状态的总次数</td></tr><tr><td>max_req_latency_us</td><td>线程组中用户连接在队列等待的最长时间（单位毫秒）</td></tr><tr><td>conns_timeout_killed</td><td>线程组中用户连接因客户端无新消息时间超过阈值（net_wait_timeout）被 killed 的总次数</td></tr><tr><td>connections_moved_in</td><td>从其他线程组中迁入该线程组的连接总数</td></tr><tr><td>connections_moved_out</td><td>从该线程组迁出到其他线程组的连接总数</td></tr><tr><td>connections_moved_from_per_thread</td><td>从 one-thread-per-connection 模式中迁入该线程组的连接总数</td></tr><tr><td>connections_moved_to_per_thread</td><td>从该线程组中迁出到 one-thread-per-connection 模式的连接总数</td></tr><tr><td>events_consumed</td><td>线程组处理过的 events 总数</td></tr><tr><td>average_wait_usecs_in_queue</td><td>线程组内所有 events 在队列中的平均等待时间</td></tr></tbody></table><p>在 <code>show full processlist</code> 中新增如下状态：</p><ul><li><code>Moved_to_per_thread</code> 表示该连接迁移到 Per_thread 的次数。</li><li><code>Moved_to_thread_pool</code> 表示该连接迁移到 Thread_pool 的次数.</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li>腾讯 TXSQL：<ol><li> <a href="https://mp.weixin.qq.com/s/BXEYVfYCsZ5fD2IG6fNVrA" title="原创｜线程池详解 (qq.com)">原创｜线程池详解 (qq.com)</a></li><li> <a href="https://cloud.tencent.com/document/product/236/48851" title="云数据库 MySQL 动态线程池-自研内核 TXSQL-文档中心-腾讯云 (tencent.com)">云数据库 MySQL 动态线程池-自研内核 TXSQL-文档中心-腾讯云 (tencent.com)</a></li></ol></li><li>Percona：<ol><li> <a href="https://docs.percona.com/percona-server/8.0/performance/threadpool.html" title="Thread pool - Percona Server for MySQL">Thread pool - Percona Server for MySQL</a></li><li> <a href="https://www.percona.com/blog/simcity-outages-traffic-control-and-thread-pool-for-mysql/" title="SimCity outages, traffic control and Thread Pool for MySQL (percona.com)">SimCity outages, traffic control and Thread Pool for MySQL (percona.com)</a></li><li> <a href="https://dbaplus.cn/news-11-1989-1.html" title="关于MySQL线程池，这也许是目前最全面的实用帖 - MySQL - dbaplus社群">关于 MySQL 线程池，这也许是目前最全面的实用帖 - MySQL - dbaplus 社群</a></li></ol></li><li>MariaDB：<ol><li> <a href="https://mariadb.com/kb/en/thread-pool-in-mariadb/" title="Thread Pool in MariaDB - MariaDB Knowledge Base">Thread Pool in MariaDB - MariaDB Knowledge Base</a></li></ol></li><li>阿里云 AliSQL：<ol><li> <a href="http://mysql.taobao.org/monthly/2016/02/09/" title="MySQL · 特性分析 · 线程池 (taobao.org)">MySQL · 特性分析 · 线程池 (taobao.org)</a></li><li> <a href="http://mysql.taobao.org/monthly/2019/02/09/" title="MySQL · 最佳实践 · MySQL多队列线程池优化 (taobao.org)">MySQL · 最佳实践 · MySQL 多队列线程池优化 (taobao.org)</a></li></ol></li><li>华为鲲鹏：<ol><li> <a href="https://www.hikunpeng.com/document/detail/zh/kunpengdbs/basicAccelFeatures/mysqlthreadpool/kunpengdbsthreadpool8025_20_0003.html" title="MySQL 8.0.25-MySQL线程池特性-鲲鹏BoostKit数据库使能套件-文档首页-鲲鹏社区 (hikunpeng.com)">MySQL 8.0.25-MySQL 线程池特性-鲲鹏 BoostKit 数据库使能套件-文档首页-鲲鹏社区 (hikunpeng.com)</a></li></ol></li><li>MySQL 企业版：<ol><li> <a href="https://dev.mysql.com/doc/refman/8.0/en/thread-pool.html" title="MySQL :: MySQL 8.0 Reference Manual :: 5.6.3 MySQL Enterprise Thread Pool">MySQL :: MySQL 8.0 Reference Manual :: 5.6.3 MySQL Enterprise Thread Pool</a></li></ol></li></ol><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;作者：卢文双 资深数据库内核研发&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本文首发于 2023-05-04 22:07:40&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文主要从功能层面对比 percona-server、mariadb、华为鲲鹏 BoostKit 数据库使能套件、阿里云 AliSQL、腾讯 TXSQL、MySQL 企业版线程池方案，都基于 MySQL 8.0。&lt;/p&gt;
&lt;p&gt;至于源码层面，腾讯、阿里云、MySQL 企业版不开源，percona 借鉴了 mariadb 早期版本的实现，而华为鲲鹏同时借鉴了 mariadb 和 percona 的实现，但考虑到线程池代码只有 2000 行左右，相对简单，本文就不做过多阐述了。&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL" scheme="http://dbkernel.github.io/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://dbkernel.github.io/tags/MySQL/"/>
    
    <category term="测试框架" scheme="http://dbkernel.github.io/tags/%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MTR" scheme="http://dbkernel.github.io/tags/MTR/"/>
    
  </entry>
  
  <entry>
    <title>特性介绍 | MySQL 测试框架 MTR 系列教程（二）：进阶篇 - 内存/线程/代码覆盖率/单元/压力测试</title>
    <link href="http://dbkernel.github.io/2023/05/01/mysql-mtr-02-advanced/"/>
    <id>http://dbkernel.github.io/2023/05/01/mysql-mtr-02-advanced/</id>
    <published>2023-05-01T13:03:44.000Z</published>
    <updated>2023-05-07T12:56:40.048Z</updated>
    
    <content type="html"><![CDATA[<p><strong>作者：卢文双 资深数据库内核研发</strong></p><p><strong>序言：</strong></p><p>以前对 MySQL 测试框架 MTR 的使用，主要集中于 SQL 正确性验证。近期由于工作需要，深入了解了 MTR 的方方面面，发现 MTR 的能力不仅限于此，还支持单元测试、压力测试、代码覆盖率测试、内存错误检测、线程竞争与死锁等功能，因此，本着分享的精神，将其总结成一个系列。</p><p>主要内容如下：</p><ul><li>入门篇：工作机制、编译安装、参数、指令示例、推荐用法、添加 case、常见问题、异常调试</li><li>进阶篇：高阶用法，包括单元测试、压力测试、代码覆盖率测试、内存错误检测、线程竞争与死锁</li><li>源码篇：分析 MTR 的源码</li><li>语法篇：单元测试、压力测试、mysqltest 语法、异常调试</li></ul><p>由于个人水平有限，所述难免有错误之处，望雅正。</p><p><strong>本文是第二篇进阶篇</strong>。</p><span id="more"></span><blockquote><p><strong>本文首发于 2023-05-01 21:03:44</strong></p></blockquote><hr><p>MTR 系列基于 MySQL 8.0.29 版本（编译情况也在 8.0.32 版本验证过），且主要在 Ubuntu 22.04 X86_64 验证（部分指令也在 Ubuntu 20.04 X86_64、Ubuntu 22.04 ARM64、MacOS M1 做了验证），如有例外，会特别说明。</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上一篇文章《MySQL 测试框架 MTR 系列教程（一）：入门篇》介绍了 mtr 的原理、目录结构、参数及常见用法，侧重于<strong>最常见的 SQL 正确性验证</strong>，但 mtr 能做更多的事情，比如 <strong>内存错误、线程竞争、代码覆盖率、压力测试等</strong>，本文主要介绍这些内容，涉及的相关工具如下：</p><ul><li>valgrind ：用于内存调试、内存泄漏检测以及性能分析。</li><li>Sanitizier ：谷歌发起的开源工具集。<ul><li>ASAN/AddressSanitizier ：检查内存地址相关问题，包括内存泄漏、释放后使用、重复释放、堆溢出、栈溢出等等问题。</li><li>LSAN/LeakSanitizer ：检查内存泄漏问题。它是集成在 Address Sanitizer 中的一个相对独立的工具，它工作在检查过程的最后阶段。</li><li>MSAN/MemorySanitizer ： 检查使用未初始化内存的问题。</li><li>TSAN/ThreadSanitizer ： 检查线程数据竞争和死锁问题。</li><li>UBSAN/UndefinedBehaviorSanitizer ： 检测未定义行为（使用空指针、有符号整数溢出等）。</li></ul></li><li>gcov ： 代码覆盖率测试。</li><li>gprof ： 性能分析工具。</li><li>单元测试</li><li>压力测试</li></ul><p>本文将逐一介绍对各个工具的支持情况。</p><p><strong>补充：</strong></p><p>MariaDB 已经很好的支持了以上工具集：</p><p><a href="https://mariadb.com/kb/en/compile-and-using-mariadb-with-sanitizers-asan-ubsan-tsan-msan/" title="Compile and Using MariaDB with Sanitizers (ASAN, UBSAN, TSAN, MSAN) - MariaDB Knowledge Base">Compile and Using MariaDB with Sanitizers (ASAN, UBSAN, TSAN, MSAN) - MariaDB Knowledge Base</a></p><p><a href="https://mariadb.com/kb/en/compiling-mariadb-for-debugging/" title="Compiling MariaDB for Debugging - MariaDB Knowledge Base">Compiling MariaDB for Debugging - MariaDB Knowledge Base</a> （支持 valgrind）</p><h1 id="MySQL-编译选项"><a href="#MySQL-编译选项" class="headerlink" title="MySQL 编译选项"></a>MySQL 编译选项</h1><p>首先说明一下与本文相关的 MySQL 编译选项：</p><ul><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_cmake_build_type" title="-DCMAKE_BUILD_TYPE=type">-DCMAKE_BUILD_TYPE=type</a></p><p>The type of build to produce:</p><ul><li><code>RelWithDebInfo</code>: <strong>default value</strong>。<strong>Enable optimizations and generate debugging information</strong>. This is the default MySQL build type.</li><li><code>Release</code>: Enable optimizations but omit debugging information to reduce the build size. <strong>This build type was added in MySQL 8.0.13</strong> (MySQL 5.7 is not supported).</li><li><code>Debug</code>: Disable optimizations and generate debugging information. This build type is also used if the <a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_debug" title="WITH_DEBUG">WITH_DEBUG</a> option is enabled. That is, <a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_debug" title="-DWITH_DEBUG=1">-DWITH_DEBUG=1</a> has the same effect as <a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_cmake_build_type" title="-DCMAKE_BUILD_TYPE=Debug">-DCMAKE_BUILD_TYPE=Debug</a>.</li></ul></li></ul><ul><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_debug" title="-DWITH_DEBUG=bool">-DWITH_DEBUG=bool</a></p><p>Whether to include debugging support. <strong>The default is<code>OFF</code></strong>.</p></li><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_asan" title="-DWITH_ASAN=bool">-DWITH_ASAN=bool</a></p><p>Whether to enable the AddressSanitizer, for compilers that support it. <strong>The default is off</strong>.</p></li><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_asan_scope" title="-DWITH_ASAN_SCOPE=bool">-DWITH_ASAN_SCOPE=bool</a></p><p>Whether to enable the AddressSanitizer <code>-fsanitize-address-use-after-scope</code> Clang flag for <strong>use-after-scope</strong> detection. <strong>The default is off</strong>. To use this option, <code>-DWITH_ASAN</code> must also be enabled.</p></li><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_lsan" title="-DWITH_LSAN=bool">-DWITH_LSAN=bool</a></p><p>Whether to run LeakSanitizer, without AddressSanitizer. <strong>The default is<code>OFF</code></strong>.</p><p>This option was added in MySQL 8.0.16.</p></li><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_msan" title="-DWITH_MSAN=bool">-DWITH_MSAN=bool</a></p><p>Whether to enable MemorySanitizer, for compilers that support it. <strong>The default is off</strong>.</p><p>For this option to have an effect if enabled, all libraries linked to MySQL must also have been compiled with the option enabled.</p></li><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_tsan" title="-DWITH_TSAN=bool">-DWITH_TSAN=bool</a></p><p>Whether to enable the ThreadSanitizer, for compilers that support it. <strong>The default is off</strong>.</p></li><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_ubsan" title="-DWITH_UBSAN=bool">-DWITH_UBSAN=bool</a></p><p>Whether to enable the Undefined Behavior Sanitizer, for compilers that support it. <strong>The default is off</strong>.</p></li><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_unit_tests" title="-DWITH_UNIT_TESTS={ON|OFF}">-DWITH_UNIT_TESTS={ON|OFF}</a></p><p>If enabled, compile MySQL with unit tests. <strong>The default is ON</strong> unless the server is not being compiled.</p></li><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_valgrind" title="-DWITH_VALGRIND=bool">-DWITH_VALGRIND=bool</a></p><p>Whether to compile in the Valgrind header files, which exposes the Valgrind API to MySQL code. <strong>The default is<code>OFF</code></strong>.</p><p>To generate a Valgrind-aware debug build, <a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_valgrind" title="-DWITH_VALGRIND=1">-DWITH_VALGRIND=1</a> normally is combined with <a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_debug" title="-DWITH_DEBUG=1">-DWITH_DEBUG=1</a>. See <a href="https://dev.mysql.com/doc/internals/en/debug-configurations.html" title="Building Debug Configurations">Building Debug Configurations</a>.</p></li><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_enable_gcov" title="-DENABLE_GCOV=bool">-DENABLE_GCOV=bool</a></p><p>Whether to include <code>gcov</code> support (<strong>Linux only</strong>).</p></li><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_enable_gprof" title="-DENABLE_GPROF=bool">-DENABLE_GPROF=bool</a></p><p>Whether to enable <code>gprof</code> (<strong>optimized Linux builds only</strong>). <strong>The default is<code>OFF</code></strong>.</p></li><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_test_trace_plugin" title="-DWITH_TEST_TRACE_PLUGIN=bool">-DWITH_TEST_TRACE_PLUGIN=bool</a></p><p>Whether to build the test protocol trace client plugin (see <a href="https://dev.mysql.com/doc/extending-mysql/8.0/en/test-protocol-trace-plugin.html" title="Using the Test Protocol Trace Plugin">Using the Test Protocol Trace Plugin</a>). <strong>By default, this option is disabled</strong>. Enabling this option has no effect unless the <a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_client_protocol_tracing" title="WITH_CLIENT_PROTOCOL_TRACING">WITH_CLIENT_PROTOCOL_TRACING</a> option is enabled. If MySQL is configured with both options enabled, the <code>libmysqlclient</code> client library is built with the test protocol trace plugin built in, and all the standard MySQL clients load the plugin. However, even when the test plugin is enabled, it has no effect by default. Control over the plugin is afforded using environment variables; see <a href="https://dev.mysql.com/doc/extending-mysql/8.0/en/test-protocol-trace-plugin.html" title="Using the Test Protocol Trace Plugin">Using the Test Protocol Trace Plugin</a>.</p><p><strong>Note</strong></p><p>Do <em>not</em> enable the <a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_test_trace_plugin" title="WITH_TEST_TRACE_PLUGIN">WITH_TEST_TRACE_PLUGIN</a> option if you want to use your own protocol trace plugins because only one such plugin can be loaded at a time and an error occurs for attempts to load a second one. If you have already built MySQL with the test protocol trace plugin enabled to see how it works, you must rebuild MySQL without it before you can use your own plugins.</p><p>For information about writing trace plugins, see <a href="https://dev.mysql.com/doc/extending-mysql/8.0/en/writing-protocol-trace-plugins.html" title="Writing Protocol Trace Plugins">Writing Protocol Trace Plugins</a>.</p></li><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_client_protocol_tracing" title="-DWITH_CLIENT_PROTOCOL_TRACING=bool">-DWITH_CLIENT_PROTOCOL_TRACING=bool</a></p><p>Whether to build the client-side protocol tracing framework into the client library. <strong>By default, this option is enabled</strong>.</p><p>For information about writing protocol trace client plugins, see <a href="https://dev.mysql.com/doc/extending-mysql/8.0/en/writing-protocol-trace-plugins.html" title="Writing Protocol Trace Plugins">Writing Protocol Trace Plugins</a>.</p><p>See also the <a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_test_trace_plugin" title="WITH_TEST_TRACE_PLUGIN">WITH_TEST_TRACE_PLUGIN</a> option.</p></li><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_keyring_test" title="-DWITH_KEYRING_TEST=bool">-DWITH_KEYRING_TEST=bool</a></p><p>Whether to build the test program that accompanies the <code>keyring_file</code> plugin. <strong>The default is<code>OFF</code></strong>. Test file source code is located in the <code>plugin/keyring/keyring-test</code> directory.</p></li><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_ndb_test" title="-DWITH_NDB_TEST={ON|OFF}">-DWITH_NDB_TEST={ON|OFF}</a></p><p>If enabled, include a set of NDB API test programs. <strong>The default is OFF</strong>.</p></li></ul><p>详见：<a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html" title="MySQL :: MySQL 8.0 Reference Manual :: 2.8.7 MySQL Source-Configuration Options">MySQL :: MySQL 8.0 Reference Manual :: 2.8.7 MySQL Source-Configuration Options</a></p><hr><p>以下是各组件或测试类型的详细介绍。</p><h1 id="valgrind"><a href="#valgrind" class="headerlink" title="valgrind"></a>valgrind</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>valgrind 是一个工具集，主要集成了：</p><ul><li>memcheck ：内存错误检测器。</li><li>cachegrind ：缓存和分支预测分析器。</li><li>callgrind ：可生成缓存分析器的调用图。</li><li>helgrind ：线程错误检测器。</li><li>DRD ：也是线程错误检测器。</li><li>massif ：堆分析器，它可以帮助程序使用更少的内存。</li><li>DHAT ：一种不同类型的堆分析器。使用它可以了解块寿命，块利用率和布局效率低下的问题。</li></ul><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><p>mtr 提供的 valgrind 选项如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Options <span class="keyword">for</span> valgrind</span><br><span class="line"></span><br><span class="line">  callgrind             Instruct valgrind to use callgrind.</span><br><span class="line">  helgrind              Instruct valgrind to use helgrind.</span><br><span class="line">  valgrind              Run the <span class="string">&quot;mysqltest&quot;</span> and <span class="string">&quot;mysqld&quot;</span> executables using</span><br><span class="line">                        valgrind with default options.</span><br><span class="line">  valgrind-all          Synonym <span class="keyword">for</span> --valgrind.</span><br><span class="line">  valgrind-clients      Run clients started by .<span class="built_in">test</span> files with valgrind.</span><br><span class="line">  valgrind-mysqld       Run the <span class="string">&quot;mysqld&quot;</span> executable with valgrind.</span><br><span class="line">  valgrind-mysqltest    Run the <span class="string">&quot;mysqltest&quot;</span> and <span class="string">&quot;mysql_client_test&quot;</span> executable</span><br><span class="line">                        with valgrind.</span><br><span class="line">  valgrind-option=ARGS  Option to give valgrind, replaces default option(s), can</span><br><span class="line">                        be specified more <span class="keyword">then</span> once.</span><br><span class="line">  valgrind-options=ARGS Deprecated, use --valgrind-option.</span><br><span class="line">  valgrind-path=&lt;EXE&gt;   Path to the valgrind executable.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>从代码看：</strong></p><ol><li> <strong>支持的工具不仅限于 callgrind、helgrind，还支持 memcheck、massif</strong> 。</li><li> 只有启用<code>--valgrind</code> 或 <code>--valgrind-mysqltest</code> 选项，才会用到 <code>mysql_client_test</code> 。</li></ol><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p><strong>编译选项</strong>： <code>-DWITH_DEBUG=1 -DWITH_VALGRIND=1</code></p><p><strong>使用建议</strong>：</p><p>1、推荐指令可参考 <code>mysql-test/collections/</code> 目录下的文件 <code>default.daily-valgrind</code>、<code>default.push-valgrind</code>、<code>default.weekly-valgrind</code> 。</p><p>2、据我实测，<strong>如需测试 valgrind 所有功能，需在原有指令基础上添加<code>--valgrind</code>选项</strong>。比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官方 collections 中的示例指令：</span></span><br><span class="line">perl mysql-test-run.pl --timer  --force --skip-rpl --comment=all_default_valgrind --vardir=var-all_default_valgrind --skip-ndb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 --valgrind</span></span><br><span class="line">perl mysql-test-run.pl --timer  --force --skip-rpl --comment=all_default_valgrind --vardir=var-all_default_valgrind --skip-ndb --valgrind</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3、在同时启用 ASAN 和 valgrind 的情况下，并在运行 mtr 时添加<code>--valgrind</code>选项，mtr 会因 valgrind memcheck 与 asan 冲突而 crash，因此，valgrind 与 asan 不建议同时启用</strong>。</p><h1 id="Sanitizier"><a href="#Sanitizier" class="headerlink" title="Sanitizier"></a>Sanitizier</h1><p><a href="https://github.com/google/sanitizers" title="Sanitizers">Sanitizers</a> 是谷歌发起的开源工具集，已经成为静态和动态代码分析的利器，可以检查<strong>内存错误、未初始化的读取、线程安全和未定义的行为等</strong>相关的问题。</p><p><strong>优点</strong>：与同类型分析工具相比，Sanitizers 带来的性能损失通常要小得多，而且往往提供的信息更详细。</p><p><strong>缺点</strong>：代码（可能还有工具链的一部分）需要使用附加的标志重新编译。</p><p><a href="https://github.com/google/sanitizers" title="Sanitizers">Sanitizers</a> 包括如下组件：</p><ul><li><p><strong>AddressSanitizer/ASAN</strong></p><p>检查内存地址相关问题，包括内存泄漏、释放后使用、重复释放、堆溢出、栈溢出等问题。</p><p>通过<strong>编译插桩(CTI)</strong> ，能够发现此堆/栈/全局变量读写溢出，内存泄露等问题，并将信息直接打印到日志中。</p><p><strong>ASAN 是一个快速的内存错误检测工具。它非常快，只拖慢程序两倍左右（比起 Valgrind 快多了）</strong>。</p><p>它包括一个编译器 instrumentation 模块和一个提供<code>malloc()/free()</code> 替代项的运行时库。</p></li><li><p><strong>LeakSanitizer/LSAN</strong></p><p>检查内存泄漏问题。它是<strong>集成在 Address Sanitizer 中</strong>的一个相对独立的工具，它工作在检查过程的最后阶段。</p></li><li><p><strong>UndefinedBehaviorSanitizer/UBSAN</strong></p><p>检测未定义行为（使用空指针、有符号整数溢出等）。</p></li><li><p><strong>ThreadSanitizer/TSAN</strong></p><p>检查线程数据竞争和死锁问题。</p></li><li><p><strong>MemorySanitizer/MSAN</strong></p><p>检查使用未初始化内存问题。</p></li><li><p><strong>内核 Sanitizer</strong>包括<strong>KASAN</strong>和<strong>KMSAN</strong></p></li></ul><p>Sanitizers 项目本是 LLVM 项目的一部分，但 GNU 也将该系列工具加入到了自家的 GCC 编译器中（clang 当然也支持）。</p><ul><li>GCC 4.8 版本开始支持 <strong>Address Sanitizer</strong>和 <strong>Thread Sanitizer</strong>。</li><li>GCC 4.9 版本开始支持 <strong>Leak Sanitizer</strong> 和 <strong>UndefinedBehaviorSanitizer</strong>。</li></ul><h2 id="ASAN"><a href="#ASAN" class="headerlink" title="ASAN"></a>ASAN</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>ASAN/AddressSanitizer 能检测很多种内存错误，主要包含如下类别：</p><ul><li><strong>Out-of-bounds accesses to heap, stack and globals</strong></li><li><strong>Use-after-free</strong></li><li><strong>Use-after-return</strong> (clang flag <code>-fsanitize-address-use-after-return=(never|runtime|always)</code> default: <code>runtime</code>)<ul><li>Enable with: <code>ASAN_OPTIONS=detect_stack_use_after_return=1</code> (already enabled on Linux).</li><li>Disable with: <code>ASAN_OPTIONS=detect_stack_use_after_return=0</code>.</li></ul></li><li><strong>Use-after-scope</strong> (clang flag <code>-fsanitize-address-use-after-scope</code>)</li><li><strong>Double-free, invalid free</strong></li><li><strong>Memory leaks</strong> (experimental)</li></ul><p>更详细的示例 case：参考 <a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/asan-error-examples?view=msvc-170" title="https://learn.microsoft.com/zh-cn/cpp/sanitizers/asan-error-examples?view=msvc-170">https://learn.microsoft.com/zh-cn/cpp/sanitizers/asan-error-examples?view=msvc-170</a></p><ul><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-alloc-dealloc-mismatch?view=msvc-170" title="alloc-dealloc-mismatch">alloc-dealloc-mismatch</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-allocation-size-too-big?view=msvc-170" title="allocation-size-too-big">allocation-size-too-big</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-calloc-overflow?view=msvc-170" title="calloc-overflow">calloc-overflow</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-container-overflow?view=msvc-170" title="container-overflow">container-overflow</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-double-free?view=msvc-170" title="double-free">double-free</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-dynamic-stack-buffer-overflow?view=msvc-170" title="dynamic-stack-buffer-overflow">dynamic-stack-buffer-overflow</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-global-buffer-overflow?view=msvc-170" title="global-buffer-overflow">global-buffer-overflow</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-heap-buffer-overflow?view=msvc-170" title="heap-buffer-overflow">heap-buffer-overflow</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-heap-use-after-free?view=msvc-170" title="heap-use-after-free">heap-use-after-free</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-invalid-allocation-alignment?view=msvc-170" title="invalid-allocation-alignment">invalid-allocation-alignment</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-memcpy-param-overlap?view=msvc-170" title="memcpy-param-overlap">memcpy-param-overlap</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-new-delete-type-mismatch?view=msvc-170" title="new-delete-type-mismatch">new-delete-type-mismatch</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-stack-buffer-overflow?view=msvc-170" title="stack-buffer-overflow">stack-buffer-overflow</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-stack-buffer-underflow?view=msvc-170" title="stack-buffer-underflow">stack-buffer-underflow</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-stack-use-after-return?view=msvc-170" title="stack-use-after-return">stack-use-after-return</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-stack-use-after-scope?view=msvc-170" title="stack-use-after-scope">stack-use-after-scope</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-strncat-param-overlap?view=msvc-170" title="strncat-param-overlap">strncat-param-overlap</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/error-use-after-poison?view=msvc-170" title="use-after-poison">use-after-poison</a></li></ul><p><strong>性能影响</strong>：使用 ASAN 后，性能会降低 2 倍。</p><h3 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h3><p><strong>安装</strong>：有一个单独的动态库<code>libasan6.so</code>，会随 gcc 安装。</p><p><strong>编译选项</strong>：<code>-DWITH_DEBUG=1 -DWITH_ASAN=1</code>，可选择启用<code>-DWITH_ASAN_SCOPE=1</code></p><p><strong>验证版本</strong>：8.0.29</p><p><strong>MTR 选项</strong>：<code>--sanitize</code></p><p><strong>使用建议</strong>：</p><p><strong>1、ASAN 功能强大，相较于 valgrind，对性能影响小很多，建议作为主要的内存检测工具</strong>。</p><p>2、由于 mtr 需要用到<code>/usr/bin/perl</code>，因此，有可能出现 perl 自身某些函数的内存泄漏问题被 Leak Sanitizer 检测到，导致 mtr 测试失败，此时，将问题函数添加到<code>lsan.supp</code>文件即可解决。比如 Ubuntu 22.04 perl v5.34.0 会遇到内存泄漏，同样的，Ubuntu 20.04 perl v5.30.0 就无该问题。</p><h4 id="mysql-test-asan-supp-示例"><a href="#mysql-test-asan-supp-示例" class="headerlink" title="mysql-test/asan.supp 示例"></a>mysql-test/asan.supp 示例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">interceptor_via_fun:NameOfCFunctionToSuppress</span><br><span class="line">interceptor_via_fun:-[ClassName objCMethodToSuppress:]</span><br><span class="line">interceptor_via_lib:NameOfTheLibraryToSuppress</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">interceptor_via_fun:Perl_safesyscalloc</span><br><span class="line">interceptor_via_fun:Perl_safesysmalloc</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考：</p><ul><li><a href="https://clang.llvm.org/docs/AddressSanitizer.html#id10" title="asan文档">asan 文档</a></li><li><a href="https://github.com/gcc-mirror/gcc/blob/master/libsanitizer/asan/asan_suppressions.cpp" title="gcc/asan_suppressions.cpp at master · gcc-mirror/gcc · GitHub">gcc/asan_suppressions.cpp at master · gcc-mirror/gcc · GitHub</a></li></ul><h4 id="mysql-test-lsan-supp-示例"><a href="#mysql-test-lsan-supp-示例" class="headerlink" title="mysql-test/lsan.supp 示例"></a>mysql-test/lsan.supp 示例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># LSAN suppressions for gcc/clang</span></span><br><span class="line">leak:Perl_safesyscalloc</span><br><span class="line">leak:Perl_safesysmalloc</span><br><span class="line">leak:Perl_safesysrealloc</span><br><span class="line">leak:Perl_savesharedpv</span><br><span class="line">leak:Perl_Slab_Alloc</span><br><span class="line">leak:Perl_newUNOP_AUX</span><br><span class="line">leak:Perl_newSTATEOP</span><br><span class="line">leak:Perl_pmruntime</span><br><span class="line">leak:/usr/bin/perl</span><br><span class="line">leak:/lib64/libperl.so.*</span><br><span class="line">leak:/bin/bash</span><br><span class="line">leak:/usr/bin/zip</span><br><span class="line"><span class="comment"># OpenLDAP bug 9081</span></span><br><span class="line"><span class="comment"># Fixed in 2.4.49, we build with 2.4.48</span></span><br><span class="line">leak:ldap_initialize</span><br><span class="line"></span><br><span class="line"><span class="comment"># sasl_client_init will load all available plugins with _sasl_load_plugins().</span></span><br><span class="line"><span class="comment"># It seems some of the SASL plugin have leaks.</span></span><br><span class="line"><span class="comment"># Both LSAN and Valgrind report leaks.</span></span><br><span class="line">leak:sasl_client_add_plugin</span><br></pre></td></tr></table></figure><p>该内容来源于源码文件，可见官方知晓 Perl 高版本的内存泄漏问题，以此方式来忽略。</p><h3 id="指令示例"><a href="#指令示例" class="headerlink" title="指令示例"></a>指令示例</h3><p>在<code>Ubuntu 22.04 X86_64</code> 运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">perl mysql-test-run.pl --timer --max-test-fail=0 --force --parallel=1 --vardir=var-rpl --suite=rpl --sanitize</span><br><span class="line">perl mysql-test-run.pl --timer --max-test-fail=0 --force --parallel=1 --max-test-fail=0 --vardir=var-binlog --suite=binlog --sanitize</span><br></pre></td></tr></table></figure><h2 id="LSAN"><a href="#LSAN" class="headerlink" title="LSAN"></a>LSAN</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p>LSAN/LeakSanitizer 用于内存泄漏检测。</p><p><strong>性能影响</strong>：使用 LSAN 后，除了执行的最后阶段会有一个内存泄漏检测之外，几乎没有性能开销。</p><h3 id="使用方法-2"><a href="#使用方法-2" class="headerlink" title="使用方法"></a>使用方法</h3><p><strong>安装</strong>：有一个单独的动态库<code>liblsan0.so</code>，会随 gcc 安装。</p><p><strong>编译选项</strong>：<code>-DWITH_DEBUG=1 -DWITH_LSAN=1</code></p><p><strong>验证版本</strong>：8.0.29</p><p><strong>MTR 选项</strong>：<code>--sanitize</code></p><p><strong>使用建议</strong>：</p><ol><li> 由于 ASAN 集成了 LSAN，因此，只有不使用 ASAN、仅使用 LSAN 的情况下才需要设置该选项。</li><li> <code>lsan.supp</code> 格式见 「ASAN」小节。</li></ol><h3 id="指令示例-1"><a href="#指令示例-1" class="headerlink" title="指令示例"></a>指令示例</h3><p>只要编译时启用 ASAN 或 LSAN，在运行时添加<code>--sanitize</code> 选项即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl mysql-test-run.pl --timer --max-test-fail=0 --force --parallel=1 --max-test-fail=0 --vardir=var-binlog --suite=binlog --sanitize</span><br></pre></td></tr></table></figure><h2 id="UBSAN"><a href="#UBSAN" class="headerlink" title="UBSAN"></a>UBSAN</h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><p>UBSAN/UndefinedBehaviorSanitizer 是针对未定义行为的检测器，速度很快。</p><p>UBSAN 需要在编译时修改程序，以捕获程序执行期间的各种未定义行为。比如：</p><ul><li>数组下标越界：Array subscript out of bounds, where the bounds can be statically determined</li><li>位移位超过数据类型边界：Bitwise shifts that are out of bounds for their data type</li><li>解除对未对齐指针或空指针的关联：Dereferencing misaligned or null pointers</li><li>有符号整数溢出：Signed integer overflow</li><li>浮点数类型转换导致的溢出：Conversion to, from, or between floating-point types which would overflow the destination</li></ul><p>更多行为详见 ：</p><p><a href="https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html#ubsan-checks" title="UndefinedBehaviorSanitizer — Clang 17.0.0git documentation (llvm.org)">UndefinedBehaviorSanitizer — Clang 17.0.0git documentation (llvm.org)</a></p><p><strong>性能影响</strong>：UBSAN 的运行时成本很小，对地址空间布局或 ABI 没有影响。</p><h3 id="使用方法-3"><a href="#使用方法-3" class="headerlink" title="使用方法"></a>使用方法</h3><p><strong>安装</strong>：有一个单独的动态库<code>libubsan1.so</code>，会随 gcc 安装。</p><p><strong>编译选项</strong>：<code>-DWITH_DEBUG=1 -DWITH_UBSAN=1</code></p><p><strong>验证版本</strong>：8.0.29</p><p><strong>MTR 选项</strong>：<code>--sanitize</code></p><p><strong>使用建议</strong>：</p><ol><li> <strong>与 ASAN、TSAN、gcov、gprof 都兼容，可一起启用</strong>。</li><li> 若想要某些 case 跳过 UBSAN 的检查，可引用<code>include/not_ubsan.inc</code>。目前只有如下 case 会跳过 UBSAN：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">./t/innodb_tmp_table_heap_to_disk.test</span><br><span class="line">./t/ssl-big.test</span><br><span class="line">./t/count_distinct3.test</span><br><span class="line">./t/multi_update2.test</span><br><span class="line">./t/ds_mrr-big.test</span><br><span class="line"></span><br><span class="line">./suite/gis/t/gis_not_ubsan.test</span><br><span class="line">./suite/binlog_gtid/t/binlog_warning_same_server_id.test</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="指令示例-2"><a href="#指令示例-2" class="headerlink" title="指令示例"></a>指令示例</h3><p>只要编译时启用 UBSAN，在运行时添加<code>--sanitize</code> 选项即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl mysql-test-run.pl --timer --max-test-fail=0 --force --parallel=1 --max-test-fail=0 --vardir=var-binlog --suite=binlog --sanitize</span><br></pre></td></tr></table></figure><h2 id="TSAN"><a href="#TSAN" class="headerlink" title="TSAN"></a>TSAN</h2><h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3><p>TSAN/ThreadSanitizer 是用于检测数据竞争和线程死锁的工具。</p><p><strong>性能影响</strong>：引入 TSAN 后，会降低 5-15 倍性能，同时，内存占用率会提升 5-10 倍。</p><h3 id="使用方法-4"><a href="#使用方法-4" class="headerlink" title="使用方法"></a>使用方法</h3><p><strong>安装</strong>：有一个单独的动态库<code>libtsan0.so</code>，会随 gcc 安装。</p><p><strong>编译选项</strong>：<code>-DWITH_DEBUG=1 -DWITH_TSAN=1</code></p><p><strong>验证版本</strong>：8.0.29、8.0.32</p><p><strong>MTR 选项</strong>：<code>--sanitize</code></p><p><strong>使用建议</strong>：</p><p>1、<strong>TSAN 与 ASAN 不兼容</strong>（一起使用 cmake 会报错<code>&quot;No mysys timer support detected&quot;</code>），但<strong>TSAN 与 UBSAN、VALGRIND 兼容</strong>。</p><p>2、<strong>对 TSAN 的支持是实验性的，尚不成熟，不建议使用</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">-- Performing Test HAVE_SANITIZE_SCOPE</span><br><span class="line">-- Performing Test HAVE_SANITIZE_SCOPE - Success</span><br><span class="line">CMake Warning at CMakeLists.txt:1101 (MESSAGE):</span><br><span class="line">  Thread sanitizer support is currently experimental.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- Performing Test C_LD_LLD_RESULT</span><br><span class="line">-- Performing Test C_LD_LLD_RESULT - Failed</span><br><span class="line">-- Performing Test CXX_LD_LLD_RESULT</span><br><span class="line">-- Performing Test CXX_LD_LLD_RESULT - Failed</span><br><span class="line">-- Performing Test C_LD_GOLD_RESULT</span><br><span class="line">-- Performing Test C_LD_GOLD_RESULT - Failed</span><br><span class="line">-- Performing Test CXX_LD_GOLD_RESULT</span><br><span class="line">-- Performing Test CXX_LD_GOLD_RESULT - Failed</span><br><span class="line">-- Local boost dir /data/work/mysql/boost_1_77_0</span><br><span class="line">-- Found /data/work/mysql/boost_1_77_0/boost/version.hpp</span><br><span class="line">-- BOOST_VERSION_NUMBER is <span class="comment">#define BOOST_VERSION 107700</span></span><br><span class="line">-- BOOST_INCLUDE_DIR /data/work/mysql/boost_1_77_0</span><br><span class="line">-- Looking <span class="keyword">for</span> pthread.h</span><br><span class="line">-- Looking <span class="keyword">for</span> pthread.h - not found</span><br><span class="line">-- Could NOT find Threads (missing: Threads_FOUND)</span><br><span class="line">......</span><br><span class="line">-- Looking <span class="keyword">for</span> timer_create <span class="comment"># 由于 timer_create/timer_settime 函数确实存在，尝试调整过 cmake，后续会报一系列错误，该问题不太好调。</span></span><br><span class="line">-- Looking <span class="keyword">for</span> timer_create - not found</span><br><span class="line">-- Looking <span class="keyword">for</span> timer_settime</span><br><span class="line">-- Looking <span class="keyword">for</span> timer_settime - not found</span><br><span class="line">-- Looking <span class="keyword">for</span> kqueue</span><br><span class="line">-- Looking <span class="keyword">for</span> kqueue - not found</span><br><span class="line">-- Performing Test HAVE_SETNS</span><br><span class="line">-- Performing Test HAVE_SETNS - Failed</span><br><span class="line">-- Looking <span class="keyword">for</span> EVFILT_TIMER</span><br><span class="line">-- Looking <span class="keyword">for</span> EVFILT_TIMER - not found</span><br><span class="line">CMake Error at configure.cmake:334 (MESSAGE):</span><br><span class="line">  No mysys timer support detected!</span><br><span class="line">Call Stack (most recent call first):</span><br><span class="line">  CMakeLists.txt:1487 (INCLUDE)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、如果某些数据竞争或死锁情况是符合预期的，可以通过 <code>mysql-test/tsan.supp</code> 跳过。</p><h4 id="mysql-test-tsan-supp-示例"><a href="#mysql-test-tsan-supp-示例" class="headerlink" title="mysql-test/tsan.supp 示例"></a>mysql-test/tsan.supp 示例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Blacklist for Thread Sanitizer.</span></span><br><span class="line"><span class="comment"># Thread Sanitizer can be enabled with -DWITH_TSAN=1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Suppression syntax is documented here:</span></span><br><span class="line"><span class="comment"># https://github.com/google/sanitizers/wiki/ThreadSanitizerSuppressions</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">race:innobase</span><br><span class="line"></span><br><span class="line">race:client/dump/</span><br><span class="line">deadlock:client/dump/</span><br><span class="line"></span><br><span class="line">race:perfschema</span><br><span class="line"></span><br><span class="line">race:plugin_vars_free_values</span><br><span class="line">race:log_builtins_filter_run</span><br><span class="line">race:MY_LOCALE_ERRMSGS::destroy</span><br><span class="line">race:get_one_variable_ext</span><br><span class="line">race:mysql_set_character_set_with_default_collation</span><br><span class="line"></span><br><span class="line">race:ngs::Scheduler_dynamic::wait_if_idle_then_delete_worker</span><br><span class="line">race:ngs::Socket_events::break_loop</span><br><span class="line"></span><br><span class="line">deadlock:find_sys_var_ex</span><br><span class="line">deadlock:Persisted_variables_cache::lock</span><br><span class="line"></span><br><span class="line">signal:my_print_stacktrace</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="指令示例-3"><a href="#指令示例-3" class="headerlink" title="指令示例"></a>指令示例</h3><p>只要编译时启用 TSAN，在运行时添加<code>--sanitize</code> 选项即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl mysql-test-run.pl --timer --max-test-fail=0 --force --parallel=1 --max-test-fail=0 --vardir=var-binlog --suite=binlog --sanitize</span><br></pre></td></tr></table></figure><h3 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a><strong>存在问题</strong></h3><p>测试时，在 install database 阶段，线程之间就会有大量 data race，报错示例如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错信息位于 mysql-test/var-main-tsan/log/bootstrap.log</span></span><br><span class="line">==================</span><br><span class="line">WARNING: ThreadSanitizer: data <span class="built_in">race</span> (pid=<span class="number">65314</span>)</span><br><span class="line">  Read of size <span class="number">4</span> at <span class="number">0x555ae20c13b0</span> by thread T4:</span><br><span class="line">    #<span class="number">0</span> fil_validate_skip /data/work/mysql/mysql-server/storage/innobase/fil/fil0fil.cc:<span class="number">1953</span> (mysqld+<span class="number">0x541018e</span>)</span><br><span class="line">    #<span class="number">1</span> <span class="built_in">fil_aio_wait</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>) /data/work/mysql/mysql-server/storage/innobase/fil/fil0fil.cc:<span class="number">8234</span> (mysqld+<span class="number">0x54109ca</span>)</span><br><span class="line">    #<span class="number">2</span> io_handler_thread /data/work/mysql/mysql-server/storage/innobase/srv/srv0start.cc:<span class="number">279</span> (mysqld+<span class="number">0x5143b04</span>)</span><br><span class="line">    ......</span><br><span class="line">    #<span class="number">12</span> std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, <span class="built_in"><span class="keyword">void</span></span> (*)(<span class="keyword">unsigned</span> <span class="keyword">long</span>), <span class="keyword">unsigned</span> <span class="keyword">long</span>&gt; &gt; &gt;::_M_run() /usr/include/c++/<span class="number">11</span>/bits/std_thread.h:<span class="number">211</span> (mysqld+<span class="number">0x5159b59</span>)</span><br><span class="line">    #<span class="number">13</span> &lt;null&gt; &lt;null&gt; (libstdc++.so<span class="number">.6</span>+<span class="number">0xdc2b2</span>)</span><br><span class="line"></span><br><span class="line">  Previous write of size <span class="number">4</span> at <span class="number">0x555ae20c13b0</span> by thread T3:</span><br><span class="line">    #<span class="number">0</span> fil_validate_skip /data/work/mysql/mysql-server/storage/innobase/fil/fil0fil.cc:<span class="number">1953</span> (mysqld+<span class="number">0x54101a7</span>)</span><br><span class="line">    #<span class="number">1</span> <span class="built_in">fil_aio_wait</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>) /data/work/mysql/mysql-server/storage/innobase/fil/fil0fil.cc:<span class="number">8234</span> (mysqld+<span class="number">0x54109ca</span>)</span><br><span class="line">    #<span class="number">2</span> io_handler_thread /data/work/mysql/mysql-server/storage/innobase/srv/srv0start.cc:<span class="number">279</span> (mysqld+<span class="number">0x5143b04</span>)</span><br><span class="line">    ......</span><br><span class="line">    #<span class="number">12</span> std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, <span class="built_in"><span class="keyword">void</span></span> (*)(<span class="keyword">unsigned</span> <span class="keyword">long</span>), <span class="keyword">unsigned</span> <span class="keyword">long</span>&gt; &gt; &gt;::_M_run() /usr/include/c++/<span class="number">11</span>/bits/std_thread.h:<span class="number">211</span> (mysqld+<span class="number">0x5159b59</span>)</span><br><span class="line">    #<span class="number">13</span> &lt;null&gt; &lt;null&gt; (libstdc++.so<span class="number">.6</span>+<span class="number">0xdc2b2</span>)</span><br><span class="line"></span><br><span class="line">  Location is global <span class="string">&#x27;fil_validate_skip()::fil_validate_count&#x27;</span> of size <span class="number">4</span> at <span class="number">0x555ae20c13b0</span> (mysqld+<span class="number">0x000007a5c3b0</span>)</span><br><span class="line"></span><br><span class="line">  Thread <span class="built_in">T4</span> (tid=<span class="number">65320</span>, running) created by thread T1 at:</span><br><span class="line">    #<span class="number">0</span> pthread_create ../../../../src/libsanitizer/tsan/tsan_interceptors_posix.cpp:<span class="number">969</span> (libtsan.so<span class="number">.0</span>+<span class="number">0x605b8</span>)</span><br><span class="line">    #<span class="number">1</span> std::thread::_M_start_thread(std::unique_ptr&lt;std::thread::_State, std::default_delete&lt;std::thread::_State&gt; &gt;, <span class="built_in"><span class="keyword">void</span></span> (*)()) &lt;null&gt; (libstdc++.so<span class="number">.6</span>+<span class="number">0xdc388</span>)</span><br><span class="line">    ......</span><br><span class="line">    #<span class="number">8</span> handle_bootstrap /data/work/mysql/mysql-server/sql/bootstrap.cc:<span class="number">327</span> (mysqld+<span class="number">0x387778f</span>)</span><br><span class="line">    #<span class="number">9</span> pfs_spawn_thread /data/work/mysql/mysql-server/storage/perfschema/pfs.cc:<span class="number">2942</span> (mysqld+<span class="number">0x56751fb</span>)</span><br><span class="line"></span><br><span class="line">  Thread <span class="built_in">T3</span> (tid=<span class="number">65319</span>, running) created by thread T1 at:</span><br><span class="line">    #<span class="number">0</span> pthread_create ../../../../src/libsanitizer/tsan/tsan_interceptors_posix.cpp:<span class="number">969</span> (libtsan.so<span class="number">.0</span>+<span class="number">0x605b8</span>)</span><br><span class="line">    #<span class="number">1</span> std::thread::_M_start_thread(std::unique_ptr&lt;std::thread::_State, std::default_delete&lt;std::thread::_State&gt; &gt;, <span class="built_in"><span class="keyword">void</span></span> (*)()) &lt;null&gt; (libstdc++.so<span class="number">.6</span>+<span class="number">0xdc388</span>)</span><br><span class="line">    ......</span><br><span class="line">    #<span class="number">8</span> handle_bootstrap /data/work/mysql/mysql-server/sql/bootstrap.cc:<span class="number">327</span> (mysqld+<span class="number">0x387778f</span>)</span><br><span class="line">    #<span class="number">9</span> pfs_spawn_thread /data/work/mysql/mysql-server/storage/perfschema/pfs.cc:<span class="number">2942</span> (mysqld+<span class="number">0x56751fb</span>)</span><br><span class="line"></span><br><span class="line">SUMMARY: ThreadSanitizer: data race /data/work/mysql/mysql-server/storage/innobase/fil/fil0fil.cc:<span class="number">1953</span> in fil_validate_skip</span><br><span class="line">==================</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>install database 阶段，类似的报错有 200 多个。虽然可以通过<code>tsan.supp</code> 文件跳过，但毕竟报错涉及较多函数，若全部跳过，可能会影响对正常情况下数据竞争的判断。因此，<strong>个人暂不建议使用</strong>。</p><h2 id="MSAN"><a href="#MSAN" class="headerlink" title="MSAN"></a>MSAN</h2><h3 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h3><p>MSAN/MemorySanitizer 用于检测对未初始化内存的读取（uninitialized reads）问题。</p><p><strong>性能影响</strong>：引入 MSAN 后，性能会降低 3 倍。</p><h3 id="使用方法-5"><a href="#使用方法-5" class="headerlink" title="使用方法"></a>使用方法</h3><p><strong>编译选项</strong>：<code>-DWITH_DEBUG=1 -DWITH_MSAN=1</code></p><p>验证版本：8.0.29</p><p><strong>MTR 选项</strong>：<code>--sanitize</code></p><p><strong>使用建议</strong>：</p><ol><li> 对 MSAN 的支持是实验性的，尚不成熟，且与 ASAN 不兼容，考虑到 ASAN 的强大，因此，<strong>建议使用 ASAN，不建议使用 MSAN</strong>。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CMake Warning at CMakeLists.txt:1080 (MESSAGE):</span><br><span class="line">  Memory sanitizer support is currently experimental.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CMake Error at CMakeLists.txt:1107 (MESSAGE):</span><br><span class="line">  Cannot use AddressSanitizer and MemorySanitizer together</span><br></pre></td></tr></table></figure><h3 id="指令示例-4"><a href="#指令示例-4" class="headerlink" title="指令示例"></a>指令示例</h3><p>只要编译时启用 MSAN，在运行时添加<code>--sanitize</code> 选项即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl mysql-test-run.pl --timer --max-test-fail=0 --force --parallel=1 --max-test-fail=0 --vardir=var-binlog --suite=binlog --sanitize</span><br></pre></td></tr></table></figure><h1 id="代码覆盖率测试"><a href="#代码覆盖率测试" class="headerlink" title="代码覆盖率测试"></a>代码覆盖率测试</h1><h2 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h2><p>gcov 用于分析代码覆盖率，gprof 用于分析 gcov 生成的统计数据，二者一般一起使用。</p><p><strong>gprof 只支持 linux 操作系统，不支持 MacOS</strong>。</p><p>官方手册：</p><p><a href="https://gcc.gnu.org/onlinedocs/gcc/Gcov.html" title="Gcov (Using the GNU Compiler Collection (GCC))">Gcov (Using the GNU Compiler Collection (GCC))</a></p><p><a href="https://www.man7.org/linux/man-pages/man1/gprof.1.html" title="gprof(1) - Linux manual page (man7.org)">gprof(1) - Linux manual page (man7.org)</a></p><p><a href="https://zhuanlan.zhihu.com/p/385842627" title="超级方便的Linux自带性能分析工具！gprof介绍、安装、使用及实践 - 知乎 (zhihu.com)">超级方便的 Linux 自带性能分析工具！gprof 介绍、安装、使用及实践 - 知乎 (zhihu.com)</a></p><h2 id="使用方法-6"><a href="#使用方法-6" class="headerlink" title="使用方法"></a>使用方法</h2><p>编译选项：<code>-DWITH_DEBUG=1 -DENABLE_GCOV=1 -DENABLE_GPROF=1</code></p><p><strong>使用建议</strong>：</p><ol><li> 与 ASAN、UBSAN 兼容，建议与 ASAN、UBSAN 同时启用（未验证与 valgrind、MSAN、TSAN 的兼容性）。</li><li>不能在<code>make install</code>的安装目录测试，必须在 <strong>执行编译的源码目录</strong>测试。<ol><li> <code>源码根目录/build-debug/mysql-test/mysql-test-run.pl </code>（本人的编译目录是 build-debug）只是封装了一层对 <code>源码根目录/mysql-test/mysql-test-run.pl</code> 的调用：</li></ol></li></ol><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[apps@node6 mysql-test]$ pwd</span><br><span class="line">/home/apps/mtr/mysql-oracle/mysql-<span class="number">8.0</span>.<span class="number">26</span>/build-debug/mysql-test</span><br><span class="line"></span><br><span class="line">[apps@node6 mysql-test]$ cat mysql-test-run.pl</span><br><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"><span class="comment"># Call mtr in out-of-source build</span></span><br><span class="line">$ENV<span class="string">&#123;MTR_BINDIR&#125;</span> = <span class="string">&#x27;/home/apps/mtr/mysql-oracle/mysql-8.0.26/build-debug&#x27;</span>;</span><br><span class="line"><span class="keyword">chdir</span>(<span class="string">&#x27;/home/apps/mtr/mysql-oracle/mysql-8.0.26/mysql-test&#x27;</span>);</span><br><span class="line"><span class="keyword">exit</span>(<span class="keyword">system</span>($^X, <span class="string">&#x27;/home/apps/mtr/mysql-oracle/mysql-8.0.26/mysql-test/mysql-test-run.pl&#x27;</span>, @ARGV) &gt;&gt; <span class="number">8</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：</p><ol><li> gcov、gprof 运行需要较大内存，尤其是开启<code>-big-test</code>的情况下。</li><li> 官方 <code>collections/</code> 中没有 gcov 的推荐用法。</li><li> <code>mysql-test/README.gcov</code> 文件的最后修改日期是 2006 年，已过时，没有参考价值。</li></ol><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>直接在安装目录（<code>make install</code>）执行测试，报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wslu@ubuntu:/data/work/mysql/mysql80-install.bak_asan_ubsan_gcov_gprof/mysql-test$ ./mtr --gcov</span><br><span class="line">Logging: ./mtr  --gcov</span><br><span class="line"></span><br><span class="line">MySQL Version 8.0.29</span><br><span class="line">mysql-test-run: *** ERROR: Coverage <span class="built_in">test</span> needs the <span class="built_in">source</span> - please use <span class="built_in">source</span> dist</span><br></pre></td></tr></table></figure><p>在<strong>执行编译的目录</strong>（比如 <code>console-build-debug/mysql-test</code>） 执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">wslu@ubuntu:/data/work/mysql/mysql-server/console-build-debug/mysql-test$ ./mtr --gcov -big-test</span><br><span class="line">Logging: /data/work/mysql/mysql-server/mysql-test/mysql-test-run.pl  --gcov -big-test</span><br><span class="line">MySQL Version 8.0.29</span><br><span class="line">Checking supported features</span><br><span class="line"> - Binaries are debug compiled</span><br><span class="line">Purging gcov information from <span class="string">&#x27;/data/work/mysql/mysql-server&#x27;</span>...</span><br><span class="line">Using suite(s): auth_sec,binlog,binlog_gtid,binlog_nogtid,<span class="built_in">clone</span>,collations,component_keyring_file,connection_control,encryption,federated,funcs_2,gcol,gis,information_schema,innodb,innodb_fts,innodb_gis,innodb_undo,innodb_zip,interactive_utilities,json,main,opt_trace,parts,perfschema,query_rewrite_plugins,rpl,rpl_gtid,rpl_nogtid,secondary_engine,service_status_var_registration,service_sys_var_registration,service_udf_registration,sys_vars,sysschema,test_service_sql_api,test_services,x</span><br><span class="line">Collecting tests</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> binlog</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> binlog_gtid</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> binlog_nogtid</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> rpl</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> rpl_gtid</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> rpl_nogtid</span><br><span class="line">Checking leftover processes</span><br><span class="line">Removing old var directory</span><br><span class="line">Creating var directory <span class="string">&#x27;/data/work/mysql/mysql-server/console-build-debug/mysql-test/var&#x27;</span></span><br><span class="line">Installing system database</span><br><span class="line">Using parallel: 1</span><br><span class="line"></span><br><span class="line">==============================================================================</span><br><span class="line">                  TEST NAME                       RESULT  TIME (ms) COMMENT</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">[  0%] binlog_gtid.binlog_xa_select_gtid_executed_explicitly_crash  [ disabled ]   Bug<span class="comment">#28588717 Fails both on FreeBSD and other platforms</span></span><br><span class="line">[  0%] binlog_nogtid.binlog_gtid_next_xa         [ disabled ]   BUG<span class="comment">#33650776 Failure of XA COMMIT of prepared txn, can result in txn rollback</span></span><br><span class="line">[  0%] sys_vars.innodb_log_writer_threads_basic  [ disabled ]   Bug<span class="comment">#32129814 SYS_VARS.INNODB_LOG_WRITER_THREADS_BASIC TIMES OUT SPORADICALLY ON PB2</span></span><br><span class="line">[  0%] sysschema.v_wait_classes_global_by_avg_latency  [ disabled ]   BUG<span class="comment">#21550054 Test fails too often.</span></span><br><span class="line">[  0%] binlog_gtid.binlog_gtid_mix_ok_packet_all_gtids <span class="string">&#x27;mix&#x27;</span>  [ pass ]    770</span><br><span class="line">[  0%] binlog_gtid.binlog_gtid_mix_response_packet <span class="string">&#x27;mix&#x27;</span>  [ pass ]   6474</span><br><span class="line">[  0%] binlog_gtid.binlog_xa_trx_gtid_response_packet <span class="string">&#x27;mix&#x27;</span>  [ pass ]    683</span><br><span class="line">......</span><br><span class="line">[  0%] binlog_gtid.binlog_gtid_errors <span class="string">&#x27;mix&#x27;</span>      [ pass ]   1583</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>如果想执行测试后分析 <code>gmon.out</code> ，则可添加 <code>-gprof</code> 参数（仅支持 linux）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wslu@ubuntu:/data/work/mysql/mysql-server/console-build-debug/mysql-test$ ./mtr --gcov -gprof -big-test</span><br></pre></td></tr></table></figure><p>那么，在 gcov 执行完成后，<strong>mtr 就会自动调用 gprof 解析<code>gmon.out</code>文件</strong>。</p><h2 id="存在问题-1"><a href="#存在问题-1" class="headerlink" title="存在问题"></a>存在问题</h2><p><strong>但在 CentOS 7.6（云服务器 4C8G SSD）实测时遇到问题——gprof 解析 gmon.out 时特别耗时，虽然该进程 CPU 占用率 100%，看起来还在运行，但并无任何输出。</strong></p><p>比如，在编译的源码目录中执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  mysql-test git:(heads/mysql-8.0.26) ✗ ps -axf | grep mysql</span><br><span class="line">30604 ?        SN     0:00  \_ perl mysql-test-run.pl --parallel=4 --timer --debug-server --force --testcase-timeout=180 --suite-timeout=1800 --comment=all-default-debug --vardir=var-all-default --skip-combinations --unit-tests-report --no-skip --exclude-platform=windows --skip-ndb --max-test-fail=0 --suite=rpl -gcov -gprof</span><br><span class="line">30611 ?        SN     0:30      \_ /usr/bin/perl /home/wslu/work/mysql/mysql-server/mysql-test/mysql-test-run.pl --parallel=4 --timer --debug-server --force --testcase-timeout=180 --suite-timeout=1800 --comment=all-default-debug --vardir=var-all-default --skip-combinations --unit-tests-report --no-skip --exclude-platform=windows --skip-ndb --max-test-fail=0 --suite=rpl -gcov -gprof</span><br><span class="line">32759 ?        SN     0:44          \_ /usr/bin/perl /home/wslu/work/mysql/mysql-server/mysql-test/mysql-test-run.pl --parallel=4 --timer --debug-server --force --testcase-timeout=180 --suite-timeout=1800 --comment=all-default-debug --vardir=var-all-default --skip-combinations --unit-tests-report --no-skip --exclude-platform=windows --skip-ndb --max-test-fail=0 --suite=rpl -gcov -gprof</span><br><span class="line"> 2829 ?        SN     0:00          |   \_ sh -c gprof /home/wslu/work/mysql/mysql-server/build-debug/runtime_output_directory/mysqld /home/wslu/work/mysql/mysql-server/mysql-test/var-all-default/3/mysqld.6/data/gmon.out 2 &gt; /home/wslu/work/mysql/mysql-server/mysql-test/var-all-default/3/mysqld.6/data/gprof.err &gt; /home/wslu/work/mysql/mysql-server/mysql-test/var-all-default/3/mysqld.6/data/gprof.msg</span><br><span class="line"> 2830 ?        RN     7:07          |       \_ gprof /home/wslu/work/mysql/mysql-server/build-debug/runtime_output_directory/mysqld /home/wslu/work/mysql/mysql-server/mysql-test/var-all-default/3/mysqld.6/data/gmon.out 2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>gmon.out 文件只有 61MB，但 gprof 在解析<code> gmon.out</code> 时，长达 23 小时无任何输出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  mysql-test git:(heads/mysql-8.0.26) ✗ ls /home/wslu/work/mysql/mysql-server/mysql-test/var-all-default/3/mysqld.6/data/gmon.out -lh</span><br><span class="line">-rw-r--r-- 1 wslu wslu 61M Mar 27 20:21 /home/wslu/work/mysql/mysql-server/mysql-test/var-all-default/3/mysqld.6/data/gmon.out</span><br><span class="line">➜  mysql-test git:(heads/mysql-8.0.26) ✗ ll /home/wslu/work/mysql/mysql-server/mysql-test/var-all-default/3/mysqld.6/data/gprof.err</span><br><span class="line">-rw-r--r-- 1 wslu wslu 0 Mar 28 09:23 /home/wslu/work/mysql/mysql-server/mysql-test/var-all-default/3/mysqld.6/data/gprof.err</span><br><span class="line">➜  mysql-test git:(heads/mysql-8.0.26) ✗ ll  /home/wslu/work/mysql/mysql-server/mysql-test/var-all-default/3/mysqld.6/data/gprof.msg</span><br><span class="line">-rw-r--r-- 1 wslu wslu 0 Mar 28 09:23 /home/wslu/work/mysql/mysql-server/mysql-test/var-all-default/3/mysqld.6/data/gprof.msg</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><h2 id="简介-7"><a href="#简介-7" class="headerlink" title="简介"></a>简介</h2><p>MySQL 使用 <a href="https://testanything.org/" title="TAP">TAP</a>（Test Anything Protocol） 和 <a href="https://google.github.io/googletest/" title="Google Test Framework">Google Test Framework</a> 来实现单元测试。</p><h3 id="MyTAP"><a href="#MyTAP" class="headerlink" title="MyTAP"></a>MyTAP</h3><p>TAP 是 Perl 与测试模块之间所使用的简单的基于文本的接口，主要用于开发 Perl 和 PHP 模块。示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">TAP version 13</span><br><span class="line">ok 1 - testNewArrayIsEmpty(ArrayTest)</span><br><span class="line">ok 2 - testArrayContainsAnElement(ArrayTest)</span><br><span class="line">not ok 3 - Failure: testFailure(FailureErrorTest)</span><br><span class="line">  ---</span><br><span class="line">  message: <span class="string">&#x27;Failed asserting that &lt;integer:2&gt; matches expected value &lt;integer:1&gt;.&#x27;</span></span><br><span class="line">  severity: fail</span><br><span class="line">  data:</span><br><span class="line">    got: 2</span><br><span class="line">    expected: 1</span><br><span class="line">  ...</span><br><span class="line">not ok 4 - Error: testError(FailureErrorTest)</span><br><span class="line">1..4</span><br></pre></td></tr></table></figure><p>为了实现 C/C++ 的单元测试，MySQL 开发了一个用于生成 TAP 文本的库<code>libmytap.a</code>，源码路径位于<code>unittest/mytap/</code>。</p><h3 id="Google-Test-Framework"><a href="#Google-Test-Framework" class="headerlink" title="Google Test Framework"></a>Google Test Framework</h3><p>Google Test Framework，与 MyTAP 类似，也是一个单元测试框架，但提供了更丰富的功能：</p><ul><li>A rich set of predicates</li><li>User-defined predicates and assertions</li><li>Automatic test registration</li><li>Nice error reporting when a predicate fails (with line number, expected and actual values, and additional comments)</li><li>Test fixtures, and setup/teardown logic</li><li>Death tests</li><li>Disabled tests</li><li>Test filtering and shuffling</li></ul><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ul><li><a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_UNIT_TESTS.html" title="MySQL: Creating and Executing Unit Tests">MySQL: Creating and Executing Unit Tests</a><ul><li><a href="https://testanything.org/" title="Home - Test Anything Protocol">Home - Test Anything Protocol</a></li><li><a href="https://google.github.io/googletest/" title="GoogleTest User’s Guide | GoogleTest">GoogleTest User’s Guide | GoogleTest</a></li></ul></li></ul><h2 id="使用方法-7"><a href="#使用方法-7" class="headerlink" title="使用方法"></a>使用方法</h2><p><strong>编译选项</strong>：<code>-DWITH_DEBUG=1 -DWITH_UNIT_TESTS=&#123;ON|OFF&#125;</code>，默认是 <code>ON</code> 。</p><p><strong>执行路径</strong>：必须在编译的源码目录中执行。</p><p><strong>使用方法</strong>：</p><ol><li> 编译后，在<strong>执行编译（cmake）的目录</strong>执行 <code>make test</code>或<code>make test-unit</code> 指令，虽然按手册描述两个指令都能实现单元测试效果，但实测<code>make test-unit</code>会输出更详细的信息，因此，<strong>建议使用<code>make test-unit</code></strong> 。</li><li> 编译后，在<code>编译目录/mysql-test</code> 中执行 mtr 指令时，添加<code>--unit-tests-report</code> 选项。</li></ol><p><strong>注意事项</strong>：</p><p>若启用了 ASAN：</p><ol><li> 直接在编译目录执行<code>make test-unit</code>，可能会因 ASAN 检测到单元测试代码有内存错误（<code>RUN_ALL_TESTS()</code>的子函数）而导致 case 失败。</li><li>通过 mtr 指令来运行单元测试时，也可能会遇到 ASAN 检测到内存错误或内存泄漏，即使按如下方式修改 <code>.supp</code> 文件，也无法跳过：<ol><li> 若是 AddressSanitizer 范畴中的错误，比如下表中的 heap-buffer-overflow，在<code>asan.supp</code> 文件添加 <code>interceptor_via_fun:RUN_ALL_TESTS</code> ，无法跳过该错误。</li><li> 同理，如果是 ASAN 中的<code>LeakSanitizer</code>检测到内存泄漏，在<code>lsan.supp</code> 文件添加 <code>leak:RUN_ALL_TESTS</code>，无法跳过该错误。</li></ol></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">==<span class="number">228225</span>==ERROR: AddressSanitizer: heap-buffer-overflow on address <span class="number">0x620000098e90</span> at pc <span class="number">0x5570c34c26fb</span> bp <span class="number">0x7ffe1d0d0590</span> sp <span class="number">0x7ffe1d0d0580</span></span><br><span class="line">READ of size <span class="number">2</span> at <span class="number">0x620000098e90</span> thread T0</span><br><span class="line">    #<span class="number">0</span> <span class="number">0x5570c34c26fa</span> in modify_all_zh_pages /data/work/mysql/mysql-server/strings/ctype-uca.cc:<span class="number">4178</span></span><br><span class="line">    #<span class="number">1</span> <span class="number">0x5570c34c4d89</span> in init_weight_level /data/work/mysql/mysql-server/strings/ctype-uca.cc:<span class="number">4287</span></span><br><span class="line">    ......</span><br><span class="line">    #<span class="number">16</span> <span class="number">0x5570c36724b8</span> in testing::UnitTest::<span class="built_in">Run</span>() /data/work/mysql/mysql-server/extra/googletest/googletest-release<span class="number">-1.11</span><span class="number">.0</span>/googletest[表情]c/gtest.cc:<span class="number">5438</span></span><br><span class="line">    #<span class="number">17</span> <span class="number">0x5570c3285445</span> in <span class="built_in">RUN_ALL_TESTS</span>() /data/work/mysql/mysql-server/extra/googletest/googletest-release<span class="number">-1.11</span><span class="number">.0</span>/googletest/include/gtest/gtest.h:<span class="number">2490</span></span><br><span class="line">    #<span class="number">18</span> <span class="number">0x5570c3284f94</span> in main /data/work/mysql/mysql-server/unittest/gunit/gunit_test_main.cc:<span class="number">150</span></span><br><span class="line">    #<span class="number">19</span> <span class="number">0x7f680a423d8f</span> in __libc_start_call_main ../sysdeps/nptl[表情]bc_start_call_main.h:<span class="number">58</span></span><br><span class="line">    #<span class="number">20</span> <span class="number">0x7f680a423e3f</span> in __libc_start_main_impl ..[表情]u[表情]bc-start.c:<span class="number">392</span></span><br><span class="line">    #<span class="number">21</span> <span class="number">0x5570c2682f34</span> in _start (/data/work/mysql/mysql-server/console-build-debug/runtime_output_directory/merge_small_tests-t+<span class="number">0x26a9f34</span>)</span><br></pre></td></tr></table></figure><p>综上，<strong>运行单元测试时，不建议同时启用 ASAN</strong>。</p><h2 id="指令示例-5"><a href="#指令示例-5" class="headerlink" title="指令示例"></a>指令示例</h2><h3 id="make-test-示例"><a href="#make-test-示例" class="headerlink" title="make test 示例"></a><strong>make test 示例</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">➜  console-build-debug git:(my_learn_8.0.29) ✗ make <span class="built_in">test</span></span><br><span class="line">Running tests...</span><br><span class="line">Test project /Users/wslu/work/mysql/mysql-server-8.0/console-build-debug</span><br><span class="line">        Start   1: hp_test1</span><br><span class="line">  1/223 Test   <span class="comment">#1: hp_test1 ...................................................   Passed    0.49 sec</span></span><br><span class="line">        Start   2: hp_test2</span><br><span class="line">  2/223 Test   <span class="comment">#2: hp_test2 ...................................................   Passed    0.74 sec</span></span><br><span class="line">        Start   3: pfs_instr_class</span><br><span class="line">  3/223 Test   <span class="comment">#3: pfs_instr_class ............................................   Passed    0.54 sec</span></span><br><span class="line"> ......</span><br><span class="line">        Start 206: routertest_component_rest_metadata_cache</span><br><span class="line"> 206/223 Test <span class="comment">#206: routertest_component_rest_metadata_cache ...................***Failed   13.37 sec</span></span><br><span class="line">        Start 207: routertest_component_rest_mock_server</span><br><span class="line"> 207/223 Test <span class="comment">#207: routertest_component_rest_mock_server ......................   Passed   23.60 sec</span></span><br><span class="line">        Start 208: routertest_component_rest_router</span><br><span class="line"> 208/223 Test <span class="comment">#208: routertest_component_rest_router ...........................   Passed    3.87 sec</span></span><br><span class="line">        Start 209: routertest_component_rest_routing</span><br><span class="line"> 209/223 Test <span class="comment">#209: routertest_component_rest_routing ..........................***Failed  145.64 sec</span></span><br><span class="line">        Start 210: routertest_component_rest_connection_pool</span><br><span class="line"> 210/223 Test <span class="comment">#210: routertest_component_rest_connection_pool ..................   Passed    5.71 sec</span></span><br><span class="line">        Start 211: routertest_component_router_configuration_errors</span><br><span class="line"> 211/223 Test <span class="comment">#211: routertest_component_router_configuration_errors ...........   Passed    5.15 sec</span></span><br><span class="line">        Start 212: routertest_component_routing</span><br><span class="line"> 212/223 Test <span class="comment">#212: routertest_component_routing ...............................***Failed   39.04 sec</span></span><br><span class="line">        Start 213: routertest_component_routing_connection</span><br><span class="line"> 213/223 Test <span class="comment">#213: routertest_component_routing_connection ....................***Failed  117.32 sec</span></span><br><span class="line">        Start 214: routertest_component_routing_strategy</span><br><span class="line"> 214/223 Test <span class="comment">#214: routertest_component_routing_strategy ......................   Passed   83.88 sec</span></span><br><span class="line">        Start 215: routertest_component_sd_notify</span><br><span class="line"> 215/223 Test <span class="comment">#215: routertest_component_sd_notify .............................   Passed   22.63 sec</span></span><br><span class="line">        Start 216: routertest_component_shutdown</span><br><span class="line"> 216/223 Test <span class="comment">#216: routertest_component_shutdown ..............................   Passed    4.86 sec</span></span><br><span class="line">        Start 217: routertest_component_state_file</span><br><span class="line"> 217/223 Test <span class="comment">#217: routertest_component_state_file ............................   Passed   22.92 sec</span></span><br><span class="line">        Start 218: routertest_component_user_option</span><br><span class="line"> 218/223 Test <span class="comment">#218: routertest_component_user_option ...........................   Passed    0.74 sec</span></span><br><span class="line">        Start 219: routertest_component_metadata_http_auth_backend</span><br><span class="line"> 219/223 Test <span class="comment">#219: routertest_component_metadata_http_auth_backend ............***Failed   76.95 sec</span></span><br><span class="line">        Start 220: routertest_component_socket_close</span><br><span class="line"> 220/223 Test <span class="comment">#220: routertest_component_socket_close ..........................   Passed  162.52 sec</span></span><br><span class="line">        Start 221: routertest_component_routing_splicer</span><br><span class="line"> 221/223 Test <span class="comment">#221: routertest_component_routing_splicer .......................   Passed  287.30 sec</span></span><br><span class="line">        Start 222: routertest_component_mock_server</span><br><span class="line"> 222/223 Test <span class="comment">#222: routertest_component_mock_server ...........................   Passed   20.44 sec</span></span><br><span class="line">        Start 223: routertest_integration_routing_reuse</span><br><span class="line"> 223/223 Test <span class="comment">#223: routertest_integration_routing_reuse .......................   Passed  440.36 sec</span></span><br><span class="line"></span><br><span class="line">97% tests passed, 6 tests failed out of 223</span><br><span class="line"></span><br><span class="line">Total Test time (real) = 2940.80 sec</span><br><span class="line"></span><br><span class="line">The following tests FAILED:</span><br><span class="line">   14 - merge_small_tests (Failed)</span><br><span class="line">  206 - routertest_component_rest_metadata_cache (Failed)</span><br><span class="line">  209 - routertest_component_rest_routing (Failed)</span><br><span class="line">  212 - routertest_component_routing (Failed)</span><br><span class="line">  213 - routertest_component_routing_connection (Failed)</span><br><span class="line">  219 - routertest_component_metadata_http_auth_backend (Failed)</span><br><span class="line">Errors <span class="keyword">while</span> running CTest</span><br><span class="line">Output from these tests are <span class="keyword">in</span>: /Users/wslu/work/mysql/mysql-server-8.0/console-build-debug/Testing/Temporary/LastTest.log</span><br><span class="line">Use <span class="string">&quot;--rerun-failed --output-on-failure&quot;</span> to re-run the failed cases verbosely.</span><br><span class="line">make: *** [<span class="built_in">test</span>] Error 8</span><br></pre></td></tr></table></figure><h3 id="make-test-unit-示例"><a href="#make-test-unit-示例" class="headerlink" title="make test-unit 示例"></a><strong>make test-unit 示例</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">wslu@ubuntu:/data/work/mysql/mysql-server/console-build-debug$ head -n 100 /tmp/maketestunit.out</span><br><span class="line">Test project /data/work/mysql/mysql-server/console-build-debug</span><br><span class="line">        Start  14: merge_small_tests</span><br><span class="line">        Start  15: merge_large_tests</span><br><span class="line">  1/223 Test  <span class="comment">#14: merge_small_tests ..........................................***Failed   70.09 sec</span></span><br><span class="line">[==========] Running 2386 tests from 132 <span class="built_in">test</span> suites.</span><br><span class="line">[----------] Global <span class="built_in">test</span> environment set-up.</span><br><span class="line">[----------] 5 tests from BoundsCheckedArrayDeathTest</span><br><span class="line">[ RUN      ] BoundsCheckedArrayDeathTest.BoundsCheckRead</span><br><span class="line">[       OK ] BoundsCheckedArrayDeathTest.BoundsCheckRead (616 ms)</span><br><span class="line">[ RUN      ] BoundsCheckedArrayDeathTest.BoundsCheckAssign</span><br><span class="line">[       OK ] BoundsCheckedArrayDeathTest.BoundsCheckAssign (329 ms)</span><br><span class="line">[ RUN      ] BoundsCheckedArrayDeathTest.BoundsCheckPopFront</span><br><span class="line">[       OK ] BoundsCheckedArrayDeathTest.BoundsCheckPopFront (276 ms)</span><br><span class="line">[ RUN      ] BoundsCheckedArrayDeathTest.BoundsCheckResize</span><br><span class="line">[       OK ] BoundsCheckedArrayDeathTest.BoundsCheckResize (277 ms)</span><br><span class="line">[ RUN      ] BoundsCheckedArrayDeathTest.BoundsCheckResizeAssign</span><br><span class="line">[       OK ] BoundsCheckedArrayDeathTest.BoundsCheckResizeAssign (290 ms)</span><br><span class="line">[----------] 5 tests from BoundsCheckedArrayDeathTest (1794 ms total)</span><br><span class="line"></span><br><span class="line">[----------] 1 <span class="built_in">test</span> from DebugDeathTest</span><br><span class="line">[ RUN      ] DebugDeathTest.Suicide</span><br><span class="line">[       OK ] DebugDeathTest.Suicide (178 ms)</span><br><span class="line">[----------] 1 <span class="built_in">test</span> from DebugDeathTest (178 ms total)</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">216/223 Test   <span class="comment">#1: hp_test1 ...................................................   Passed    0.96 sec</span></span><br><span class="line">        Start  12: pfs_misc</span><br><span class="line">217/223 Test  <span class="comment">#10: pfs_noop ...................................................   Passed    0.76 sec</span></span><br><span class="line">        Start  83: basic</span><br><span class="line">218/223 Test  <span class="comment">#83: basic ......................................................   Passed    0.12 sec</span></span><br><span class="line">        Start  79: skip</span><br><span class="line">219/223 Test  <span class="comment">#79: skip .......................................................   Passed    0.07 sec</span></span><br><span class="line">        Start  80: todo</span><br><span class="line">220/223 Test  <span class="comment">#12: pfs_misc ...................................................   Passed    0.91 sec</span></span><br><span class="line">        Start  81: skip_all</span><br><span class="line">221/223 Test  <span class="comment">#80: todo .......................................................   Passed    0.06 sec</span></span><br><span class="line">        Start  82: no_plan</span><br><span class="line">222/223 Test  <span class="comment">#81: skip_all ...................................................   Passed    0.07 sec</span></span><br><span class="line">223/223 Test  <span class="comment">#82: no_plan ....................................................   Passed    0.03 sec</span></span><br><span class="line"></span><br><span class="line">94% tests passed, 14 tests failed out of 223</span><br><span class="line"></span><br><span class="line">Total Test time (real) = 4334.59 sec</span><br><span class="line"></span><br><span class="line">The following tests FAILED:</span><br><span class="line">   14 - merge_small_tests (Failed)</span><br><span class="line">   15 - merge_large_tests (Failed)</span><br><span class="line">   56 - gcs_xcom_xcom_cache (Subprocess killed)</span><br><span class="line">   57 - gcs_xcom_control_interface (Failed)</span><br><span class="line">   65 - merge_temptable_tests-t (Failed)</span><br><span class="line">  187 - routertest_component_bootstrap (Subprocess aborted)</span><br><span class="line">  189 - routertest_component_bootstrap_clusterset (Subprocess aborted)</span><br><span class="line">  191 - routertest_component_bootstrap_tls_endpoint (Subprocess aborted)</span><br><span class="line">  192 - routertest_component_clusterset (Subprocess aborted)</span><br><span class="line">  197 - routertest_component_gr_notifications (Failed)</span><br><span class="line">  205 - routertest_component_rest_api_enable (Subprocess aborted)</span><br><span class="line">  213 - routertest_component_routing_connection (Subprocess aborted)</span><br><span class="line">  221 - routertest_component_routing_splicer (Timeout)</span><br><span class="line">  223 - routertest_integration_routing_reuse (Failed)</span><br><span class="line">Errors <span class="keyword">while</span> running CTest</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="通过-mtr-执行单元测试"><a href="#通过-mtr-执行单元测试" class="headerlink" title="通过 mtr 执行单元测试"></a>通过 mtr 执行单元测试</h3><p>在<code>编译目录/mysql-test</code> 执行如下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl mysql-test-run.pl --timer --max-test-fail=0 --force --parallel=1 --max-test-fail=0 --vardir=var-binlog --suite=binlog --unit-tests-report</span><br></pre></td></tr></table></figure><p>mtr 会首先运行 binlog suite 的所有 case，之后才会运行单元测试。</p><h1 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h1><h2 id="简介-8"><a href="#简介-8" class="headerlink" title="简介"></a>简介</h2><p>涉及压力测试的有两部分：</p><h3 id="压力测试-suites"><a href="#压力测试-suites" class="headerlink" title="压力测试 suites"></a>压力测试 suites</h3><p>只有两个：</p><ul><li>stress</li><li>innodb_stress</li></ul><p>如需要添加新 case，参考对应 suite 已有 case 照猫画虎即可，后续文章会详解介绍语法。</p><h3 id="mysql-stress-test-pl"><a href="#mysql-stress-test-pl" class="headerlink" title="mysql-stress-test.pl"></a>mysql-stress-test.pl</h3><p>被 <code>mysql-test-run.pl</code> 调用，参数是<code>--stress</code>。</p><p>使用说明位于<code>mysql-test/README.stress</code>文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">The stress script is designed to perform testing of the MySQL server <span class="keyword">in</span></span><br><span class="line">a multi-threaded environment.</span><br><span class="line"></span><br><span class="line">All functionality regarding stress testing is implemented <span class="keyword">in</span> the</span><br><span class="line">mysql-stress-test.pl script.</span><br><span class="line"></span><br><span class="line">The stress script allows:</span><br><span class="line"></span><br><span class="line"> - To stress <span class="built_in">test</span> the mysqltest binary <span class="built_in">test</span> engine.</span><br><span class="line"> - To stress <span class="built_in">test</span> the regular <span class="built_in">test</span> suite and any additional <span class="built_in">test</span> suites</span><br><span class="line">   (such as mysql-test-extra-5.0).</span><br><span class="line"> - To specify files with lists of tests both <span class="keyword">for</span> initialization of</span><br><span class="line">   stress db and <span class="keyword">for</span> further testing itself.</span><br><span class="line"> - To define the number of threads to be concurrently used <span class="keyword">in</span> testing.</span><br><span class="line"> - To define limitations <span class="keyword">for</span> the <span class="built_in">test</span> run. such as the number of tests or</span><br><span class="line">   loops <span class="keyword">for</span> execution or duration of testing, delay between <span class="built_in">test</span></span><br><span class="line">   executions, and so forth.</span><br><span class="line"> - To get a readable <span class="built_in">log</span> file that can be used <span class="keyword">for</span> identification of</span><br><span class="line">   errors that occur during testing.</span><br><span class="line"></span><br><span class="line">There are two ways to run the mysql-stress-test.pl script:</span><br><span class="line"></span><br><span class="line"> - For most cases, it is enough to use the options below <span class="keyword">for</span> starting</span><br><span class="line">   the stress <span class="built_in">test</span> from the mysql-test-run wrapper. In this <span class="keyword">case</span>, the</span><br><span class="line">   server is run automatically, all preparation steps are performed,</span><br><span class="line">   and after that the stress <span class="built_in">test</span> is started.</span><br><span class="line"></span><br><span class="line"> - In advanced <span class="keyword">case</span>, you can run the mysql-stress-test.pl script directly.</span><br><span class="line">   But this requires that you perform some preparation steps and to specify</span><br><span class="line">   a bunch of options as well, so this invocation method may be a bit</span><br><span class="line">   complicated.</span><br></pre></td></tr></table></figure><p>可见，有两种用法：</p><ul><li><p>大部分情况下，通过 <code>mysql-test-run.pl --stress=[option1,option2,...]</code> 运行即可，该脚本实现了准备阶段、压力测试阶段所需的工作。</p></li><li><p>更高级的用法是直接执行<code>mysql-stress-test.pl</code> 脚本，这就需要自行实现准备阶段、测试阶段所需的工作。主要包括：</p><ul><li><p><code> --stress-init-file[=path]</code></p><p><strong>file_name</strong> is the location of the file that contains the list of tests to be run once to initialize the database for the testing. If missing, the default file is <strong>stress_init.txt</strong> in the test suite directory.</p></li><li><p><code>--stress-tests-file[=file_name]</code></p><p>Use this option to run the stress tests. <strong>file_name</strong> is the location of the file that contains the list of tests. If <strong>file_name</strong> is omitted, the default file is <strong>stress-test.txt</strong> in the stress suite directory. (See <strong><code>--stress-suite-basedir</code></strong>).</p></li></ul></li></ul><p>其他参数见手册 <a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_MYSQL_STRESS_TEST_PL.html" title="MySQL: mysql-stress-test.pl — Server Stress Test Program">MySQL: mysql-stress-test.pl — Server Stress Test Program</a></p><h2 id="指令示例-6"><a href="#指令示例-6" class="headerlink" title="指令示例"></a>指令示例</h2><h3 id="单独运行压力测试-suites"><a href="#单独运行压力测试-suites" class="headerlink" title="单独运行压力测试 suites"></a>单独运行压力测试 suites</h3><p>没找到手册说明，据我理解，只要未主动关闭单元测试标记（<code>-DWITH_UNIT_TESTS=&#123;ON|OFF&#125;</code>选项，默认是开启的），就肯定会编译生成 stress suite。</p><p>在 Ubuntu 22.04 X86_64 执行测试，成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">wslu@ubuntu:/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test$ perl mysql-test-run.pl --force --timer    --comment=stress --vardir=var-stress  --suite=stress --no-skip --max-test-fail=30</span><br><span class="line">Logging: mysql-test-run.pl  --force --timer --comment=stress --vardir=var-stress --suite=stress --no-skip --max-test-fail=30</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MySQL Version 8.0.29</span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># stress</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line">Checking supported features</span><br><span class="line"> - Binaries are debug compiled</span><br><span class="line">Using suite(s): stress</span><br><span class="line">Collecting tests</span><br><span class="line">Removing old var directory</span><br><span class="line">Creating var directory <span class="string">&#x27;/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-stress&#x27;</span></span><br><span class="line">Installing system database</span><br><span class="line">Using parallel: 1</span><br><span class="line"></span><br><span class="line">==============================================================================</span><br><span class="line">                  TEST NAME                       RESULT  TIME (ms) COMMENT</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[ 16%] stress.ddl_myisam                         [ pass ]  88171</span><br><span class="line">[ 33%] stress.ddl_archive                        [ pass ]  11868</span><br><span class="line">[ 50%] stress.ddl_csv                            [ pass ]   8007</span><br><span class="line">[ 66%] stress.ddl_innodb                         [ pass ]  163638</span><br><span class="line">[ 83%] stress.ddl_memory                         [ pass ]  84721</span><br><span class="line">[100%] shutdown_report                           [ pass ]</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">The servers were restarted 1 <span class="built_in">times</span></span><br><span class="line">The servers were reinitialized 0 <span class="built_in">times</span></span><br><span class="line">Spent 356.405 of 423 seconds executing testcases</span><br><span class="line"></span><br><span class="line">Completed: All 6 tests were successful.</span><br></pre></td></tr></table></figure><h3 id="mysql-stress-test-pl-使用示例"><a href="#mysql-stress-test-pl-使用示例" class="headerlink" title="mysql-stress-test.pl 使用示例"></a>mysql-stress-test.pl 使用示例</h3><p>指令示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">perl mysql-stress-test.pl</span><br><span class="line">--stress-suite-basedir=/opt/qa/mysql-test-extra-5.0/mysql-test</span><br><span class="line">--stress-basedir=/opt/qa/<span class="built_in">test</span></span><br><span class="line">--server-logs-dir=/opt/qa/logs</span><br><span class="line">--test-count=20</span><br><span class="line">--stress-tests-file=innodb-tests.txt</span><br><span class="line">--stress-init-file=innodb-init.txt</span><br><span class="line">--threads=5</span><br><span class="line">--suite=funcs_1</span><br><span class="line">--mysqltest=/opt/mysql/mysql-5.0/client/mysqltest</span><br><span class="line">--server-user=root</span><br><span class="line">--server-database=<span class="built_in">test</span></span><br><span class="line">--cleanup</span><br></pre></td></tr></table></figure><h2 id="官方推荐的压力测试用法"><a href="#官方推荐的压力测试用法" class="headerlink" title="官方推荐的压力测试用法"></a>官方推荐的压力测试用法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### 提交代码时执行</span></span><br><span class="line">perl mysql-test-run.pl --force --timer    --comment=stress --vardir=var-stress  --suite=stress --no-skip --max-test-fail=30</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 每天执行</span></span><br><span class="line">perl mysql-test-run.pl --force --timer --big-test   --comment=stress --vardir=var-stress  --suite=stress --no-skip</span><br><span class="line"></span><br><span class="line"><span class="comment">##### 每周执行 basic</span></span><br><span class="line"><span class="comment"># 相较于提交代码时执行的测试指令，多了 --debug-server 选项</span></span><br><span class="line">perl mysql-test-run.pl --debug-server --force --timer --comment=stress --vardir=var-stress  --suite=stress --no-skip</span><br><span class="line"><span class="comment"># 相较于上一条多了 --big-test</span></span><br><span class="line">perl mysql-test-run.pl --debug-server --force --timer --big-test    --comment=stress --vardir=var-stress  --suite=stress --no-skip</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 每天执行 valgrind</span></span><br><span class="line">perl mysql-test-run.pl --force --timer    --comment=stress --vardir=var-stress  --suite=stress</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 每周执行 valgrind</span></span><br><span class="line"><span class="comment"># 指定了 --big-test</span></span><br><span class="line">perl mysql-test-run.pl --force --timer --big-test --testcase-timeout=60 --debug-server  --comment=stress-debug-big --vardir=var-stress-debug-big  --suite=stress</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他</span></span><br><span class="line">perl mysql-test-run.pl --force --timer    --comment=stress --vardir=var-stress  --suite=stress --no-skip --max-test-fail=30</span><br><span class="line">perl mysql-test-run.pl --force --timer    --comment=innodb-stress --vardir=var-innodb-stress  --suite=innodb_stress --no-skip --max-test-fail=30</span><br></pre></td></tr></table></figure><p>注意：<code>mysql-test/README.stress</code> 文件的最后修改日期是 2006 年，已过时，没有参考价值。</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><h2 id="mtr-执行路径"><a href="#mtr-执行路径" class="headerlink" title="mtr 执行路径"></a><strong>mtr 执行路径</strong></h2><ul><li><strong>代码覆盖率、单元测试只能在<code>编译的源码目录/mysql-test</code>执行</strong>。</li><li><strong>其他测试在<code>编译的源码目录/mysql-test</code>和 <code>安装目录/mysql-test</code>都可以执行</strong>。</li><li><strong>如无特殊需求，更建议在安装目录执行 mtr 测试</strong>（目录结构更清晰）。</li></ul><h2 id="测试结果及兼容性"><a href="#测试结果及兼容性" class="headerlink" title="测试结果及兼容性"></a><strong>测试结果及</strong>兼容性</h2><table><thead><tr><th><strong>名称</strong></th><th><strong>对其支持是否是实验性的</strong></th><th><strong>编译兼容性（同时启用可编译成功，则为兼容）</strong></th><th><strong>mtr 测试结果</strong></th><th><strong>结论</strong></th></tr></thead><tbody><tr><td>ASAN</td><td>否</td><td>与 UBSAN 、Valgrind 兼容。</td><td>若与 Valgrind 同时启用（mtr 指定 <code>--valgrind</code>等选项），执行 mtr 测试时，会导致很多 case 因 valgrind memcheck 报错而失败。比如 <code>binlog_gtid.binlog_gtid_mix_ok_packet_all_gtids</code></td><td><strong>ASAN 与 Valgrind 不可同时启用，但可与 UBSAN 同时启用。</strong></td></tr><tr><td>LSAN</td><td>否</td><td>已集成到 ASAN，未测试。</td><td></td><td>已集成到 ASAN，无需单独启用。</td></tr><tr><td>UBSAN</td><td>否</td><td>与 ASAN、valgrind、TSAN 都兼容。</td><td></td><td><strong>建议与 ASAN 同时启用</strong>。</td></tr><tr><td>MSAN</td><td>是</td><td>与 ASAN 不兼容，若同时启用，编译会报错。&#xA;单独启用 MSAN，cmake 失败，报错。</td><td></td><td>MySQL 对其的支持是实验性的，暂不建议使用。</td></tr><tr><td>TSAN</td><td>是</td><td>与 ASAN 不兼容，若同时启用，编译会报错。&#xA;与 UBSAN、Valgrind 兼容。</td><td>即使只启用 TSAN，在运行 mtr 时，install database 阶段依然有大片的 data race。</td><td>MySQL 对其的支持是实验性的，暂不建议使用。</td></tr><tr><td>valgrind</td><td>否</td><td>与 ASAN 、UBSAN 、TSAN 兼容。</td><td>单独启用 valgrind，mtr 可正常执行<strong>完全体 valgrind 测试（mtr 指定<code>--valgrind</code>选项）</strong>，memcheck 未报错。&#xA;与 ASAN 同时启用时，若执行完全体 valgrind 测试，mtr 会因 valgrind memcheck 与 asan 冲突而 crash <strong>。</strong></td><td><strong>若要使用，不建议与 ASAN 同时启用。</strong></td></tr><tr><td>gcov/gprof</td><td>否</td><td>与 ASAN、UBSAN 兼容。&#xA;gprof 只支持 linux，不支持 MacOS/Windows。</td><td>需要在 <strong>执行 cmake 的源码目录</strong> 测试。</td><td><strong>建议与 ASAN、UBSAN 一起启用。</strong></td></tr><tr><td>单元测试</td><td>否</td><td>只要是 DEBUG 版本，就会默认启用。&#xA;与 ASAN、UBSAN 兼容，其他组件未验证，理论上也应该兼容。</td><td>需要在 <strong>执行 cmake 的源码目录</strong> 测试，运行<code>make test-unit</code>指令或<code>./mtr --unit-tests-report</code>。&#xA;ASAN 会检测到部分测试 case 自身存在内存泄漏，导致当前 case 失败。</td><td>做单元测试时建议启用 ASAN/UBSAN/LSAN。</td></tr><tr><td>压力测试</td><td>否</td><td>只要编译，就会产生 <code>stress</code>、<code>innodb_stress</code> 两个 suite 。&#xA;<code>mysql-stress-test.pl</code> 需要自定义 初始化和运行的 SQL 语句，不建议使用。</td><td>测试成功。</td><td>正常运行 mtr 全量 suite 或单独运行 <code>stress</code>、<code>innodb_stress </code>suites。</td></tr></tbody></table><p><strong>注意事项：</strong></p><ol><li> 由于 mtr case 特别多，运行全部 case 时间过长，因此，该表中所说「正常执行」是执行一部分 suites（而不是全部）未报错。</li><li> <strong>从执行时长来看，如需在 hyper 运行官方推荐 collections ，至少要开启 32 并发</strong>。</li><li> <strong>对于单元测试、代码覆盖率测试、内存错误检测，建议在 X86_64 平台运行，某些选项对 ARM 平台不兼容（编译失败）</strong>。</li><li> <strong>部分 perl 版本有内存泄漏，会被 ASAN 检测出来，导致 mtr 测试终止</strong>。目前验证 Ubuntu 22.04 所用的 perl 5.34.0 存在内存泄漏，而 Ubuntu 20.04 所用的 perl 5.30.0 不存在内存泄漏。</li><li> 由于我主要是在虚拟机进行验证的，而 mtr 运行太过耗时，因此，本文章节涉及的 mtr 指令，大部分并未完整运行（进度小于 10%）。</li></ol><h2 id="推荐用法"><a href="#推荐用法" class="headerlink" title="推荐用法"></a>推荐用法</h2><blockquote><p>本部分是个人根据官方 collections ，结合实际情况给出的建议，仅供参考。</p></blockquote><p>在代码开发阶段，统一使用 debug 版本（编译选项<code>-DWITH_DEBUG=1</code>）提前发现问题：</p><ul><li>push 代码到 dev 分支时，可参考 <code>default.push</code> 中的指令集。</li><li>merge 代码到 main 分支时，可参考 <code>mysql-trunk-stage.push</code> （与 <code>mysql-8.0-stage.push</code> 完全相同，是<code>default.push</code>的超集）中的指令集。</li></ul><p>内核在发布 alpha 版本前，也要用 debug 版本来验证稳定性：</p><ul><li><strong>单元测试</strong>：<ul><li>编译选项：<code>-DWITH_DEBUG=1 -DWITH_UNIT_TESTS=&#123;ON|OFF&#125;</code>，默认是 ON 。</li><li>执行路径：<strong>只能在编译后的源码目录执行</strong>。</li><li>使用方法：<ul><li>执行 <code>make test</code>或<code>make test-unit</code> 指令，虽然按手册描述两个指令都能实现单元测试效果，但实测<code>make test-unit</code>会输出更详细的信息，因此，<strong>建议使用<code>make test-unit</code></strong> 。</li><li>执行 mtr 指令时添加 <code>--unit-tests-report</code> 选项也有同样效果。</li></ul></li><li>注意事项：在执行单元测试时，不建议启用 ASAN。</li></ul></li><li><strong>内存错误检测</strong>：<ul><li>工具选择：由于 valgrind 运行很慢，建议使用 ASAN + UBSAN 来测试。</li><li>编译选项：<code>-DWITH_DEBUG=1 -DWITH_ASAN=1 -DUBSAN=1</code>，可选择启用<code>-DWITH_ASAN_SCOPE=1</code></li><li>建议指令：官方并未提供推荐指令集，建议在 <code>default.daily</code> 的指令基础上，添加 <code>--sanitize</code> 选项。</li><li>指令示例：<code>perl mysql-test-run.pl --timer --max-test-fail=0 --force --comment=var-rpl --vardir=var-rpl --suite=rpl --sanitize</code></li></ul></li><li><strong>代码覆盖率测试</strong>：<ul><li>编译选项：<code>-DWITH_DEBUG=1 -DENABLE_GCOV=1 -DENABLE_GPROF=1</code></li><li>特殊要求：必须在<code>编译的源码目录</code>执行测试。</li><li>指令示例：<code>./mtr --gcov --gprof -big-test --force --max-test-fail=0 --comment=gcov-gprof --vardir=var-gcov-gprof --no-skip</code><ul><li>在 gcov 执行成功后，会将代码覆盖率相关信息写到<code>gmon.out</code>，之后，mtr 会自动调用 gprof 解析该文件 。</li></ul></li></ul></li><li><strong>压力测试</strong>：虽然 mtr 整合了<code>mysql-stress-test.pl</code> 脚本，但使用该脚本需要自行编写 stress-init、stress-test 文件，因此，<strong>建议直接测试 stress、innodb_stress 这两个 suites</strong> 。<ul><li><code>perl mysql-test-run.pl --force --timer --big-test --comment=stress --vardir=var-stress --suite=stress,innodb_stress --no-skip</code></li></ul></li><li><strong>线程竞争</strong>：参考<code>mysql-test/collections/mysql-trunk-tsan.push</code> 。<ul><li>编译选项：<code>-DWITH_DEBUG=1 -DWITH_TSAN=1</code></li><li>指令示例：<code>perl mysql-test-run.pl --timer --debug-server --force  --comment=main-tsan --vardir=var-main-tsan --suite=main</code><ul><li><strong>在 install database 阶段会检测出大面积线程竞争，因此，当前版本无法使用</strong>。</li></ul></li><li>注意事项：TSAN/ThreadSanitizer 运行速度很慢，因此，只建议运行 main suite 。</li></ul></li></ul><p>如果需要验证 release 版本稳定性（适用于 QA、研发），可参考 <code>default.daily</code> 中的指令集。</p><ul><li>该指令集覆盖了单元测试、压力测试等。</li></ul><h2 id="编译组合建议"><a href="#编译组合建议" class="headerlink" title="编译组合建议"></a><strong>编译组合建议</strong></h2><p>推荐：</p><ul><li>普通 debug 版，运行 SQL 兼容性测试 + 单元测试 + 压力测试（stress/innodb_stress suite）</li><li>内存错误 + 代码覆盖率测试：asan/ubsan + gcov/gprof<ul><li>当然 二者也可分开编译、测试。</li><li>ASAN 与 valgrind 不可同时启用，执行 mtr 时如果添加<code>--valgrind</code> 参数，asan 会与 memcheck 冲突导致 crash，测试终止。</li></ul></li></ul><p>可选：</p><ul><li>valgrind ： 主要用于检测内存问题，但运行速度很慢，更建议使用 ASAN。</li><li>编译选项：<code>-DWITH_VALGRIND=1</code></li></ul><p>持续跟踪后续版本改进情况：</p><ul><li>TSAN：MySQL 对其的支持尚不成熟。</li><li>MSAN：与 ASAN 功能重叠，且 MySQL 对其的支持尚不成熟。</li></ul><h1 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a><strong>参考链接：</strong></h1><p>llvm 工具集：</p><ul><li><a href="https://clang.llvm.org/docs/AddressSanitizer.html" title="AddressSanitizer — Clang 17.0.0git documentation (llvm.org)">AddressSanitizer — Clang 17.0.0git documentation (llvm.org)</a></li><li><a href="https://clang.llvm.org/docs/LeakSanitizer.html" title="LeakSanitizer — Clang 17.0.0git documentation (llvm.org)">LeakSanitizer — Clang 17.0.0git documentation (llvm.org)</a></li><li><a href="https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html" title="UndefinedBehaviorSanitizer — Clang 17.0.0git documentation (llvm.org)">UndefinedBehaviorSanitizer — Clang 17.0.0git documentation (llvm.org)</a></li><li><a href="https://clang.llvm.org/docs/ThreadSanitizer.html" title="ThreadSanitizer — Clang 17.0.0git documentation (llvm.org)">ThreadSanitizer — Clang 17.0.0git documentation (llvm.org)</a></li><li><a href="https://clang.llvm.org/docs/MemorySanitizer.html" title="MemorySanitizer — Clang 17.0.0git documentation (llvm.org)">MemorySanitizer — Clang 17.0.0git documentation (llvm.org)</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/sanitizers/asan?view=msvc-170" title="AddressSanitizer | Microsoft Learn">AddressSanitizer | Microsoft Learn</a></li><li><a href="https://github.com/google/sanitizers/wiki/AddressSanitizer" title="AddressSanitizer · google/sanitizers Wiki · GitHub">AddressSanitizer · google/sanitizers Wiki · GitHub</a></li></ul><p>linux kernel 工具集：</p><ul><li><a href="https://www.kernel.org/doc/html/latest/dev-tools/kasan.html" title="The Kernel Address Sanitizer (KASAN) — The Linux Kernel documentation">The Kernel Address Sanitizer (KASAN) — The Linux Kernel documentation</a></li><li><a href="https://www.kernel.org/doc/html/latest/dev-tools/kmsan.html" title="The Kernel Memory Sanitizer (KMSAN) — The Linux Kernel documentation">The Kernel Memory Sanitizer (KMSAN) — The Linux Kernel documentation</a></li></ul><p>MySQL：</p><ul><li><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html" title="MySQL :: MySQL 8.0 Reference Manual :: 2.8.7 MySQL Source-Configuration Options">MySQL :: MySQL 8.0 Reference Manual :: 2.8.7 MySQL Source-Configuration Options</a></li><li><a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_UNIT_TESTS.html" title="MySQL: Creating and Executing Unit Tests">MySQL: Creating and Executing Unit Tests</a><ul><li><a href="https://testanything.org/" title="Home - Test Anything Protocol">Home - Test Anything Protocol</a></li><li><a href="https://google.github.io/googletest/" title="GoogleTest User’s Guide | GoogleTest">GoogleTest User’s Guide | GoogleTest</a></li><li><a href="https://github.com/google/googletest" title="GitHub - google/googletest: GoogleTest - Google Testing and Mocking Framework">GitHub - google/googletest: GoogleTest - Google Testing and Mocking Framework</a></li></ul></li></ul><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;作者：卢文双 资深数据库内核研发&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;序言：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以前对 MySQL 测试框架 MTR 的使用，主要集中于 SQL 正确性验证。近期由于工作需要，深入了解了 MTR 的方方面面，发现 MTR 的能力不仅限于此，还支持单元测试、压力测试、代码覆盖率测试、内存错误检测、线程竞争与死锁等功能，因此，本着分享的精神，将其总结成一个系列。&lt;/p&gt;
&lt;p&gt;主要内容如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;入门篇：工作机制、编译安装、参数、指令示例、推荐用法、添加 case、常见问题、异常调试&lt;/li&gt;
&lt;li&gt;进阶篇：高阶用法，包括单元测试、压力测试、代码覆盖率测试、内存错误检测、线程竞争与死锁&lt;/li&gt;
&lt;li&gt;源码篇：分析 MTR 的源码&lt;/li&gt;
&lt;li&gt;语法篇：单元测试、压力测试、mysqltest 语法、异常调试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于个人水平有限，所述难免有错误之处，望雅正。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文是第二篇进阶篇&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL" scheme="http://dbkernel.github.io/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://dbkernel.github.io/tags/MySQL/"/>
    
    <category term="测试框架" scheme="http://dbkernel.github.io/tags/%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MTR" scheme="http://dbkernel.github.io/tags/MTR/"/>
    
  </entry>
  
  <entry>
    <title>特性介绍 | MySQL 测试框架 MTR 系列教程（一）：入门篇</title>
    <link href="http://dbkernel.github.io/2023/03/18/mysql-mtr-01-introduction/"/>
    <id>http://dbkernel.github.io/2023/03/18/mysql-mtr-01-introduction/</id>
    <published>2023-03-18T13:58:52.000Z</published>
    <updated>2023-04-17T15:29:31.671Z</updated>
    
    <content type="html"><![CDATA[<p><strong>作者：卢文双 资深数据库内核研发</strong></p><blockquote><p>去年年底通过微信公众号【数据库内核】设定了一个目标——2023 年要写一系列 特性介绍+内核解析 的文章（现阶段还是以 MySQL 为主）。<br>虽然关注者很少，但本着“说到就要做到”的原则，从这篇就开始了。</p></blockquote><p><strong>序言：</strong></p><p>以前对 MySQL 测试框架 MTR 的使用，主要集中于 SQL 正确性验证。近期由于工作需要，深入了解了 MTR 的方方面面，发现 MTR 的能力不仅限于此，还支持单元测试、压力测试、代码覆盖率测试、内存错误检测、线程竞争与死锁等功能，因此，本着分享的精神，将其总结成一个系列。</p><p>主要内容如下：</p><ul><li>入门篇：工作机制、编译安装、参数、指令示例、推荐用法、添加 case、常见问题、异常调试</li><li>进阶篇：高阶用法，包括单元测试、压力测试、代码覆盖率测试、内存错误检测、线程竞争与死锁</li><li>源码篇：分析 MTR 的源码</li><li>语法篇：单元测试、压力测试、mysqltest 语法、异常调试</li></ul><p>由于个人水平有限，所述难免有错误之处，望雅正。</p><p><strong>本文是第一篇入门篇</strong>。</p><span id="more"></span><blockquote><p><strong>本文首发于 2023-03-18 21:58:52</strong></p></blockquote><hr><p>本系列基于 MySQL 8.0.29 版本，且主要在 Ubuntu 22.04 X86_64 验证（部分指令也在 Ubuntu 20.04 X86_64、Ubuntu 22.04 ARM64、MacOS M1 做了验证），如有例外，会特别说明。</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在修改内核代码后，不仅需要测试新增功能，同时也要对原有功能做回归测试，以保证新加代码对原有功能没有影响，这就需要用到 MySQL 源码自带的测试框架 mtr。</p><p>MySQL 测试框架是一个以 MySQL 框架和内部引擎为测试对象的工具，主要执行脚本在安装路径（<code>make install</code>后的路径）下的<code>mysql-test</code>目录，基本覆盖了所有 MySQL 的特性和异常情况。</p><p><strong>MySQL 测试框架 mtr 主要包含如下几个组件：</strong></p><ul><li><a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_MYSQL_TEST_RUN_PL.html">mysql-test-run.pl</a> ：perl 脚本，简称 <strong>mtr</strong>，是 MySQL 最常用的测试工具，负责控制流程，包括启停、识别执行哪些用例、创建文件夹、收集结果等等，主要作用是验证 SQL 语句在各种场景下是否返回正确的结果。</li><li><a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_MYSQLTEST.html">mysqltest</a> ：C++二进制程序，负责执行测试用例，包括读文件、解析特定语法、执行用例。<ul><li>用例的特殊语法（比如，<code>--source</code>，<code>--replace_column</code>等）都在<code>command_names</code>和<code>enum_commands</code>两个枚举结构体中。</li></ul></li><li><a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_MYSQL_CLIENT_TEST.html">mysql_client_test</a> ：C++二进制程序，用于测试 MySQL 客户端 API（<a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_MYSQLTEST.html">mysqltest</a> 无法用于测试 API）。<ul><li>从代码看，只有启用<code>--valgrind</code> 或 <code>--valgrind-mysqltest</code> 选项，才会用到 <code>mysql_client_test</code> 。</li></ul></li><li><a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_MYSQL_STRESS_TEST_PL.html">mysql-stress-test.pl</a> ：perl 脚本，用于 MySQL Server 的压力测试。</li><li>支持 gcov/gprof 代码覆盖率测试工具。</li></ul><p>除此之外，还提供了单元测试工具（严格来说不属于 mtr ），以便为存储引擎和插件创建单独的单元测试程序。</p><p><strong>由于 MySQL 测试框架的入口是 <a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_MYSQL_TEST_RUN_PL.html">mysql-test-run.pl</a>（它会调用上述其他组件），因此，一般将 MySQL 测试框架简称为 mtr</strong>。</p><h1 id="mtr-工作原理"><a href="#mtr-工作原理" class="headerlink" title="mtr 工作原理"></a>mtr 工作原理</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>mtr 采用<code>t/r</code>模式（<code>t</code>目录中存储具体的测试 case，文件以<code>.test</code>结尾；<code>r</code>目录中存储了对应 case 的期望结果，文件以<code>.result</code>结尾），主要测试步骤是“通过执行一个 case，将该 case 的输出结果，与标准的输出结果（期望结果）作 diff”：</p><ul><li>如果完全一样，则说明该 case 通过；</li><li>反之，则说明该 case 失败。<ul><li>可能原因：case 本身写的有问题；MySQL 服务有问题。</li></ul></li></ul><p>如果<code>t</code>目录中的某个 case 在<code>r</code>目录中没有对应<code>.result</code>文件：</p><ul><li>那么，只要该 case 能正常执行完，mtr 就会判定该 case 通过；</li><li>反之，若执行过程中出现 mysql server crash 等异常问题，mtr 就会判定该 case 失败。</li></ul><p>上文说的 case 是指一系列的语句，包括 SQL 语句和一些必要的 mysqltest command。</p><p>所有 case 可分为三部分，分别为：</p><ul><li><strong>main</strong>：测试 case 位于 <code>mysql-test/t</code> 目录，期望结果（如果有的话）位于<code>mysql-test/r</code> 目录，二者中的文件是一一对应的，比如：<code>mysql-test/t/alter_debug.test</code> 、<code>mysql-test/r/alter_debug.result</code>。</li><li><strong>suite</strong> ：路径位于<code>mysql-test/suite</code> 目录，其中包含很多测试 case 的集合，每个集合都是一个单独的子目录（比如 <code>mysql-test/suite/binlog</code>），在子目录中又分别包含 r、t 两个目录。</li><li><strong>extra</strong> ：应该是对上述两种 case 的补充，位于<code>mysql-test/extra/</code> 目录，在 8.0.29 版本中只包含<code>binlog_tests</code>、<code>rpl_tests</code> 两个集合。</li></ul><h2 id="框架流程"><a href="#框架流程" class="headerlink" title="框架流程"></a>框架流程</h2><p><code>mysql-test-run.pl</code>框架运行流程如下：</p><p>1、<strong>初始化（Initialization）</strong>。</p><ul><li>确定用例执行范围，包括运行哪些 suite，skip 哪些用例，在本阶段根据<code>disabled.def</code>文件、<code>--skip-xxx</code>命令（比如<code>skip-rpl</code>）等确定执行用例。</li><li>同时，初始化数据库。后面运行用例启动数据库时，不需要每次初始化，只需从这里的目录中拷贝启动。</li></ul><p>2、<strong>运行用例（run test）</strong>。</p><p>主线程根据参数<code>--parallel</code>（默认是 1）启动一个或者多个<strong>用例执行线程（worker）</strong>，各线程有自己独立的 client port，data dir 等。</p><p>启动的 worker 与主线程之间是 server-client 模式，主线程是 server，worker 是 client。</p><ul><li>主线程与 worker 是一问一答模式，主线程向 worker 发送运行用例的文件路径、配置文件参数等各种参数信息，worker 向主线程返回运行结果，直到所有在 collection 中的用例都运行完毕，主线程 close 各 worker，进行收尾工作。</li><li>主线程先读取各 worker 返回值，对上一个用例进行收尾工作。之后，读取 collection 中的用例，通过本地 socket 发送到 worker 线程，worker 线程接收到主线程命令，运行本次用例测试的核心逻辑，主要包括 3 件事：<strong>启动 mysqld、启动并监控 mysqltest，处理执行结果</strong>。<ul><li><strong>启动 mysqld</strong>： <strong>根据参数启动一个或者多个 mysqld server 进程</strong>，大多数情况下会拷贝主线程初始化后的目录到 worker 的数据目录，作为新实例的启动目录，用 shell 命令启动数据库。</li><li><strong>启动并监控 mysqltest</strong>：用例在 mysqltest 中执行（<strong>会逐行扫描 <code>*.test</code> 文件中的 SQL 或指令并于 MySQL 中执行</strong>），worker 线程会监控 mysqltest 的运行状态，监测其是否运行超时或者运行结束。</li><li><strong>处理执行结果</strong>：mysqltest 执行结束会留下执行日志，框架根据执行日志判断执行是否通过，如果没通过是否需要重试等。</li></ul></li></ul><p>以 <code>rpl.rpl_multi_source_basic</code>（对应于文件 <code>mysql-test/suite/rpl/t/rpl_multi_source_basic.test</code>）测试 case 为例来说明执行过程，用例内容如下（开头注释部分为测试过程）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is the basic test required in for multisource replication</span></span><br><span class="line"><span class="comment"># The aim of this file is to test the basic usecases of msr.</span></span><br><span class="line"><span class="comment"># 0. Create two masters and a slave and setup a multisource replication</span></span><br><span class="line"><span class="comment">#    between them.</span></span><br><span class="line"><span class="comment"># 1. create a different databases on each master and test if they are replicated</span></span><br><span class="line"><span class="comment">#    to the slave.</span></span><br><span class="line"><span class="comment"># 2. create a different table on each master and test if they are replicated to</span></span><br><span class="line"><span class="comment">#    the to the slave.</span></span><br><span class="line"><span class="comment"># 3. Create a table with the same name on both masters and update non conflicting</span></span><br><span class="line"><span class="comment">#    data on that table. Test if the replication is done properly.</span></span><br><span class="line"><span class="comment"># 4. Check if updates happen on different master such that the resulting</span></span><br><span class="line"><span class="comment">#    data on slave is conflicting, check that one of the channels the slave</span></span><br><span class="line"><span class="comment">#    SQL thread is stopped.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note: Out of convention, server 2 is always made a slave for multisource testing.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Skip on group replication runs</span></span><br><span class="line">--<span class="built_in">source</span> include/not_group_replication_plugin.inc</span><br><span class="line"><span class="comment"># Test requires master-info-repository=TABLE, relay-log-info-repository=TABLE</span></span><br><span class="line">--<span class="built_in">source</span> include/have_slave_repository_type_table.inc</span><br><span class="line"></span><br><span class="line">--<span class="built_in">echo</span> <span class="comment">#</span></span><br><span class="line">--<span class="built_in">echo</span> <span class="comment"># set up masters server_1 and server_3 with server_2 being a slave.</span></span><br><span class="line">--<span class="built_in">echo</span> <span class="comment">#.</span></span><br><span class="line">--<span class="built_in">let</span> <span class="variable">$rpl_topology</span>= 1-&gt;2,3-&gt;2</span><br><span class="line">--<span class="built_in">let</span> <span class="variable">$rpl_multi_source</span>= 1</span><br><span class="line">--<span class="built_in">source</span> include/rpl_init.inc</span><br><span class="line"></span><br><span class="line">--<span class="built_in">echo</span> <span class="comment">#</span></span><br><span class="line">--<span class="built_in">echo</span> <span class="comment"># Test case 1: 1.a) create a database and table db1.t1 on server_1</span></span><br><span class="line">--<span class="built_in">echo</span> <span class="comment">#                   and insert values in the table.</span></span><br><span class="line">--<span class="built_in">let</span> <span class="variable">$rpl_connection_name</span>= server_1</span><br><span class="line">--<span class="built_in">source</span> include/rpl_connection.inc</span><br><span class="line">CREATE DATABASE db1;</span><br><span class="line">CREATE TABLE db1.t1 ( a int);</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>启动测试指令 <code>perl mysql-test-run.pl --do-test=rpl_multi_source</code> 后，会启动 3 个 mysqld 进程，其中 2 个 master 节点，1 个 slave 节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">➜  rpl ps -xf | grep mysql</span><br><span class="line">   6982 pts/2    S+     0:00      \_ perl mysql-test-run.pl rpl_multi_source_basic</span><br><span class="line">   7125 pts/2    S+     0:00          \_ perl mysql-test-run.pl rpl_multi_source_basic</span><br><span class="line">   7130 pts/2    S+     0:00              \_ /data/work/mysql/mysql80-install.bak_valgrind/bin//mysqltest_safe_process -- /data/work/mysql/mysql80-install.bak_valgrind/bin/mysqld --defaults-group-suffix=.1 --defaults-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/my.cnf --log-output=file --loose-debug-sync-timeout=600 --binlog-format=mixed --core-file</span><br><span class="line">   7131 pts/2    Sl     0:04              |   \_ /data/work/mysql/mysql80-install.bak_valgrind/bin/mysqld --defaults-group-suffix=.1 --defaults-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/my.cnf --log-output=file --loose-debug-sync-timeout=600 --binlog-format=mixed --core-file</span><br><span class="line">   7132 pts/2    S+     0:00              \_ /data/work/mysql/mysql80-install.bak_valgrind/bin//mysqltest_safe_process -- /data/work/mysql/mysql80-install.bak_valgrind/bin/mysqld --defaults-group-suffix=.2 --defaults-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/my.cnf --log-output=file --loose-debug-sync-timeout=600 --binlog-format=mixed --core-file</span><br><span class="line">   7133 pts/2    Sl     0:06              |   \_ /data/work/mysql/mysql80-install.bak_valgrind/bin/mysqld --defaults-group-suffix=.2 --defaults-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/my.cnf --log-output=file --loose-debug-sync-timeout=600 --binlog-format=mixed --core-file</span><br><span class="line">   7134 pts/2    S+     0:00              \_ /data/work/mysql/mysql80-install.bak_valgrind/bin//mysqltest_safe_process -- /data/work/mysql/mysql80-install.bak_valgrind/bin/mysqld --defaults-group-suffix=.3 --defaults-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/my.cnf --log-output=file --loose-debug-sync-timeout=600 --binlog-format=mixed --core-file</span><br><span class="line">   7135 pts/2    Sl     0:04              |   \_ /data/work/mysql/mysql80-install.bak_valgrind/bin/mysqld --defaults-group-suffix=.3 --defaults-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/my.cnf --log-output=file --loose-debug-sync-timeout=600 --binlog-format=mixed --core-file</span><br><span class="line">   7283 pts/2    S+     0:00              \_ /data/work/mysql/mysql80-install.bak_valgrind/bin//mysqltest_safe_process -- /data/work/mysql/mysql80-install.bak_valgrind/bin/mysqltest --defaults-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/my.cnf --silent --tmpdir=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/tmp --character-sets-dir=/data/work/mysql/mysql80-install.bak_valgrind/share/charsets --logdir=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/<span class="built_in">log</span> --database=<span class="built_in">test</span> --plugin_dir=/data/work/mysql/mysql80-install.bak_valgrind/lib/plugin --timer-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/<span class="built_in">log</span>/timer --test-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/suite/rpl/t/rpl_multi_source_basic.test --tail-lines=20 --result-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/suite/rpl/r/rpl_multi_source_basic.result</span><br><span class="line">   7284 pts/2    R      0:00                  \_ /data/work/mysql/mysql80-install.bak_valgrind/bin/mysqltest --defaults-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/my.cnf --silent --tmpdir=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/tmp --character-sets-dir=/data/work/mysql/mysql80-install.bak_valgrind/share/charsets --logdir=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/<span class="built_in">log</span> --database=<span class="built_in">test</span> --plugin_dir=/data/work/mysql/mysql80-install.bak_valgrind/lib/plugin --timer-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/<span class="built_in">log</span>/timer --test-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/suite/rpl/t/rpl_multi_source_basic.test --tail-lines=20 --result-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/suite/rpl/r/rpl_multi_source_basic.result</span><br></pre></td></tr></table></figure><p>可见：</p><ol><li>无论是 mysqldtest 还是 mysqld，都是由 mysqltest_safe_process 程序启动的。</li><li><code>--defaults-group-suffix=.1 到 3</code> 分别对应 3 个 mysqld 进程，说明 <strong>mtr 不是靠 mock 的形式来测试的，而是启动真 mysqld 进程来测试</strong>。</li></ol><h1 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h1><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p><strong>mysql-server 编译需要：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for mysql 8.0</span></span><br><span class="line"></span><br><span class="line">sudo apt install gdb gcc g++ cmake -y</span><br><span class="line">sudo apt install openssl libssl-dev -y</span><br><span class="line">sudo apt install libncurses-dev libudev-dev -y</span><br><span class="line">sudo apt install bison flex libaio-dev libreadline-dev libjemalloc-dev -y</span><br><span class="line">sudo apt install libevent-dev zlib1g-dev libmecab-dev libgcrypt20-dev -y</span><br><span class="line">sudo apt install libsasl2-dev libldap2-dev libtirpc-dev</span><br><span class="line">sudo apt-get install libsasl2-dev <span class="comment"># SASL</span></span><br><span class="line">sudo apt-get install slapd ldap-utils <span class="comment"># LDAP</span></span><br><span class="line">sudo apt install valgrind doxygen libcurl4-gnutls-dev -y <span class="comment"># extra</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># centos 7.6</span></span><br><span class="line">sudo yum install cmake gcc g++ <span class="comment"># 由于 cmake、gcc 版本偏低，需要自行通过源码编译安装</span></span><br><span class="line">sudo yum install readline-devel bison flex libarchive openssl-devel</span><br><span class="line">sudo yum install rpcgen libudev-devel ncurses-devel libtirpc libtirpc-devel</span><br><span class="line">sudo yum install cyrus-sasl-devel <span class="comment"># SASL</span></span><br><span class="line">sudo yum install openldap openldap-devel <span class="comment"># LDAP</span></span><br><span class="line">sudo yum install valgrind <span class="comment"># extra</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># centos stream 9</span></span><br><span class="line">sudo yum install cmake gcc g++ gcc-toolset-12-gcc gcc-toolset-12-gcc-c++ gcc-toolset-12-binutils</span><br><span class="line">sudo yum install readline-devel bison flex libarchive openssl-devel <span class="comment"># libtirpc-devel</span></span><br><span class="line">sudo yum install rpcgen libudev-devel ncurses-devel libtirpc libtirpc-devel</span><br><span class="line">sudo yum install cyrus-sasl-devel <span class="comment"># SASL</span></span><br><span class="line">sudo yum install openldap openldap-devel <span class="comment"># LDAP</span></span><br><span class="line">sudo yum install valgrind <span class="comment"># extra</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># macos</span></span><br><span class="line">brew install lz4</span><br><span class="line">brew install zlib</span><br><span class="line">brew install clang</span><br></pre></td></tr></table></figure><blockquote><p>由于系统及版本差异，这里罗列的软件包可能会有所缺失，版本也可能会有所不同。</p></blockquote><p><strong>对于 mtr 来说，也需要额外安装一些依赖：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># centos</span></span><br><span class="line">yum -y install perl -y</span><br><span class="line">sudo yum install perl-JSON -y</span><br><span class="line">sudo yum install perl-Test-use-ok.noarch -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># ubuntu</span></span><br><span class="line">sudo apt install perl -y</span><br><span class="line">sudo perl -MCPAN -e <span class="string">&#x27;install JSON&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>Debug 版本编译选项示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for MacOS and Ubuntu</span></span><br><span class="line">CURDIR=`<span class="built_in">pwd</span>`</span><br><span class="line">INSTALLDIR=<span class="variable">$CURDIR</span>/../../mysql80-install</span><br><span class="line">DATADIR=<span class="variable">$CURDIR</span>/../../mysql80-default-data</span><br><span class="line">BOOSTDIR=<span class="variable">$CURDIR</span>/../../boost_1_77_0</span><br><span class="line"></span><br><span class="line">rm CMakeCache.txt -f</span><br><span class="line">cmake .. \</span><br><span class="line">-DCMAKE_BUILD_TYPE=Debug \</span><br><span class="line">-DCMAKE_INSTALL_PREFIX=<span class="variable">$INSTALLDIR</span> \</span><br><span class="line">-DSYSCONFDIR=/etc \</span><br><span class="line">-DMYSQL_DATADIR=<span class="variable">$DATADIR</span> \</span><br><span class="line">-DMYSQL_UNIX_ADDR=/tmp/mysqld.sock \</span><br><span class="line">-DMYSQL_TCP_PORT=3306 \</span><br><span class="line">-DWITH_MYISAM_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 \</span><br><span class="line">-DENABLED_LOCAL_INFILE=1 \</span><br><span class="line">-DWITH_DEBUG=1 \ <span class="comment"># 必须是 debug 版本</span></span><br><span class="line">-DWITH_BOOST=<span class="variable">$BOOSTDIR</span> \</span><br><span class="line">-DWITH_SSL=/usr/<span class="built_in">local</span>/openssl-1.1.1 \</span><br><span class="line">-DFORCE_INSOURCE_BUILD=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># -DWITH_ASAN=ON -DWITH_ASAN_SCOPE=ON -DWITH_UBSAN=ON \ # 选择启用哪些组件</span></span><br><span class="line"><span class="comment"># -DWITH_VALGRIND=ON \</span></span><br><span class="line"><span class="comment"># -DENABLE_GCOV=1 -DENABLE_GPROF=1 \</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? != 0 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for MacOS, only need make</span></span><br><span class="line">make -j4</span><br><span class="line">make install</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Release 版本编译选项示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># for MacOS and Ubuntu</span></span><br><span class="line">CURDIR=`<span class="built_in">pwd</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment"># for 8.0.29</span></span><br><span class="line">INSTALLDIR=<span class="variable">$CURDIR</span>/../../mysql80-install</span><br><span class="line"><span class="comment">#INSTALLDIR=/usr</span></span><br><span class="line">DATADIR=<span class="variable">$CURDIR</span>/../../mysql80-default-data</span><br><span class="line">BOOSTDIR=<span class="variable">$CURDIR</span>/../../boost_1_77_0</span><br><span class="line"></span><br><span class="line">rm CMakeCache.txt -f</span><br><span class="line">cmake .. \</span><br><span class="line">-DCMAKE_BUILD_TYPE=Release \</span><br><span class="line">-DBUILD_CONFIG=mysql_release \</span><br><span class="line">-DFEATURE_SET=community \</span><br><span class="line">-DWITH_EMBEDDED_SERVER=OFF \</span><br><span class="line">-DWITHOUT_ROCKSDB=ON \</span><br><span class="line">-DWITH_UNIT_TESTS=OFF \</span><br><span class="line">-DWITH_BOOST=<span class="variable">$BOOSTDIR</span> \</span><br><span class="line">-DFORCE_INSOURCE_BUILD=1 \</span><br><span class="line">-DCOMPILATION_COMMENT=<span class="string">&quot;MySQL build <span class="subst">$(date +%Y%m%d.%H%M%S.$(git rev-parse --short HEAD)</span>)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-DCMAKE_INSTALL_PREFIX=$INSTALLDIR \</span></span><br><span class="line"><span class="comment">#-DSYSCONFDIR=/etc \</span></span><br><span class="line"><span class="comment">#-DMYSQL_DATADIR=$DATADIR \</span></span><br><span class="line"><span class="comment">#-DWITH_MYISAM_STORAGE_ENGINE=1 \</span></span><br><span class="line"><span class="comment">#-DWITH_INNOBASE_STORAGE_ENGINE=1 \</span></span><br><span class="line"><span class="comment">#-DWITH_MEMORY_STORAGE_ENGINE=1 \</span></span><br><span class="line"><span class="comment">#-DWITH_PARTITION_STORAGE_ENGINE=1 \</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? != 0 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># for MacOS, only need make</span></span><br><span class="line">make -j4</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_cmake_build_type"><code>-DCMAKE_BUILD_TYPE=type</code></a> 选项说明：</p><p>The type of build to produce:</p><ul><li><code>RelWithDebInfo</code>: <strong>default value</strong>。<strong>Enable optimizations and generate debugging information</strong>. This is the default MySQL build type.</li><li><code>Release</code>: Enable optimizations but omit debugging information to reduce the build size. <strong>This build type was added in MySQL 8.0.13</strong> (MySQL 5.7 is not supported).</li><li><code>Debug</code>: Disable optimizations and generate debugging information. This build type is also used if the <a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_debug"><code>WITH_DEBUG</code></a> option is enabled. That is, <a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_debug"><code>-DWITH_DEBUG=1</code></a> has the same effect as <a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_cmake_build_type"><code>-DCMAKE_BUILD_TYPE=Debug</code></a>.</li></ul><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><p>编译安装后，<code>mysql-test</code> 目录树结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line">mysql-test</span><br><span class="line">├── README</span><br><span class="line">├── README.gcov <span class="comment"># 代码覆盖率测试说明，最后更新于2006年</span></span><br><span class="line">├── README.stress <span class="comment"># 压力测试说明，针对 mysql-stress-test.pl ，最后更新于2006年</span></span><br><span class="line"></span><br><span class="line">├── collections <span class="comment"># 该目录下的文件是官方推荐的回归测试指令集</span></span><br><span class="line">│   ├── README <span class="comment"># 说明文档</span></span><br><span class="line">│   ├── coverage.ignore <span class="comment"># 指定需要忽略代码覆盖率测试的目录</span></span><br><span class="line">│   ├── disabled.def <span class="comment"># 列出需要临时禁用的测试用例，在运行测试时会跳过</span></span><br><span class="line">│   ├── disabled-asan.list <span class="comment"># 除 disabled.def 文件所列用例之外，还需要临时禁用的测试用例</span></span><br><span class="line">│   ├── disabled-ubsan.list <span class="comment"># 同上</span></span><br><span class="line">│   ├── disabled-valgrind.list <span class="comment"># 同上</span></span><br><span class="line">│   ├── disabled_ndb.def <span class="comment"># 仅在运行 MySQL Cluster 时才需要临时禁用的测试用例</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 适合每天都运行的回归测试指令集</span></span><br><span class="line">        <span class="comment"># 涵盖 default suites、非 default suites、针对复制和binlog的扩展测试（区分不同的复制参数）、InnoDB 扩展测试（区分不同页面大小）</span></span><br><span class="line">│   ├── default.daily</span><br><span class="line">        <span class="comment"># 由于 valgrind 运行比较耗时，因此，该指令集只能涵盖除 big-test 之外的所有 suites 。</span></span><br><span class="line">        <span class="comment"># 需要编译时添加选项 -DWITH_DEBUG=1 -DWITH_VALGRIND=1 的情况下，才能执行 valgrind 测试。</span></span><br><span class="line">        <span class="comment"># 注意：通过实测、分析代码，运行 mtr 时必须添加 --valgrind 选项才能用到 valgrind 组件。</span></span><br><span class="line">│   ├── default.daily-valgrind</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 适合每周运行一次的指令集，运行耗时能达到48小时。</span></span><br><span class="line">        <span class="comment"># 是 default.daily 的超集，同时，还指定了 --debug-server 。</span></span><br><span class="line">        <span class="comment"># 覆盖 default suites + 非 default suites + 复制和binlog的扩展 + InnoDB扩展 + 其他按周运行的指令集。</span></span><br><span class="line">│   ├── default.weekly</span><br><span class="line">│   ├── default.weekly-ndbcluster <span class="comment"># 覆盖 default.daily + ndbcluster + 部分非默认指令集</span></span><br><span class="line">│   ├── default.weekly-protocol <span class="comment"># 编译时需要设置 DWITH_TEST_TRACE_PLUGIN=1，只覆盖 main suite。</span></span><br><span class="line">        <span class="comment"># 在启用 --big-test 和 --debug-server 选项的前提下，运行所有的指令集。</span></span><br><span class="line">        <span class="comment"># 需要编译时添加选项 -DWITH_DEBUG=1 -DWITH_VALGRIND=1 的情况下，才能执行 valgrind 测试。</span></span><br><span class="line">        <span class="comment"># 注意：通过实测、分析代码，运行 mtr 时必须添加 --valgrind 选项才能用到 valgrind 组件。</span></span><br><span class="line">│   ├── default.weekly-valgrind</span><br><span class="line">│   ├── default.weekly.basic <span class="comment"># 在禁用 --big-test 选项的前提下，运行所有的指令集，即包含 default suites + 非 default suites。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 适用于每次push代码时运行的指令集，能控制在一个小时内。</span></span><br><span class="line">        <span class="comment"># 更适用于 mysql 5.7 版本。</span></span><br><span class="line">│   ├── default.push</span><br><span class="line">│   ├── default.push-ndbcluster <span class="comment"># 分为 default suites + 与 ndbcluster 相关的指令集</span></span><br><span class="line">│   ├── default.push-valgrind <span class="comment"># 分为 default suites（排除 rpl）+ ndb 相关 suites + group_replication suite</span></span><br><span class="line">│   ├── mysql-8.0-stage.push <span class="comment"># 在 default.push 基础上，为 mysql-8.0-stage 扩展的测试用例，在merge到main分支前使用</span></span><br><span class="line">│   ├── mysql-8.0-stage.push.basic <span class="comment"># mysql-8.0-stage.push 的子集</span></span><br><span class="line"></span><br><span class="line">│   ├── mysql-trunk-meb-itch.push <span class="comment"># 文件为空</span></span><br><span class="line">        <span class="comment"># default.push 的超集，目的是在 push 到 main 分支前，提前发现问题。</span></span><br><span class="line">│   ├── mysql-trunk-stage.push <span class="comment"># 内容与 mysql-8.0-stage.push 一样，在merge到main分支前使用</span></span><br><span class="line">│   ├── mysql-trunk-stage.push.basic <span class="comment"># mysql-trunk-stage.push 的子集</span></span><br><span class="line">│   └── mysql-trunk-tsan.push <span class="comment"># 由于 ThreadSanitizer 非常慢，因此，只测试 main suite</span></span><br><span class="line"></span><br><span class="line">├── extra <span class="comment"># 不属于 main 和 其他 suites 的测试 case</span></span><br><span class="line">│   ├── binlog_tests</span><br><span class="line">│   │   ├── binlog.test</span><br><span class="line">│   │   ├── binlog_cache_stat.test</span><br><span class="line">│   │   ├── binlog_crash_safe_ddl.inc</span><br><span class="line">│   │   ├── binlog_ddl.inc</span><br><span class="line">        ......</span><br><span class="line">│   │   └── tmp_table.test</span><br><span class="line">│   └── rpl_tests</span><br><span class="line">│       ├── binlog_transaction_compression.inc</span><br><span class="line">│       ├── check_slave_delay.inc</span><br><span class="line">        ......</span><br><span class="line">│       └── type_conversions.test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">├── lib <span class="comment"># 测试框架相关依赖文件，里面主要是一些用perl实现的逻辑。</span></span><br><span class="line">│   ├── My</span><br><span class="line">│   │   ├── Config.pm</span><br><span class="line">│   │   ├── ConfigFactory.pm</span><br><span class="line">        ......</span><br><span class="line">│   │   └── Test.pm</span><br><span class="line">│   ├── mtr_cases.pm</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">├── lock_order_dependencies.txt <span class="comment"># mysql-test-run.pl 读取该文件来控制加锁顺序，与 --lock-order 选项有关。该文件非空。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 mtr 运行对应工具期间，比如 asan，对应的 .supp 文件用于指定需要跳过的测试用例。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ASAN、LSAN、TSAN 出自谷歌的 Sanitizer 项目，包含了 ASAN、LSAN、MSAN、TSAN等内存、线程错误的检测工具。</span></span><br><span class="line">├── asan.supp <span class="comment"># ASAN（Address-Sanitizier），内存错误检测工具。早期是LLVM中的特性，后被加入GCC 4.8。</span></span><br><span class="line">├── lsan.supp <span class="comment"># LSAN（LeakSanitizer），内存泄漏检测工具，已集成在 ASAN（AddressSanitizer）中。</span></span><br><span class="line">├── tsan.supp <span class="comment"># TSAN（ThreadSanitizer），线程间数据竞争的检测工具。</span></span><br><span class="line">├── valgrind.supp <span class="comment"># Valgrind 是一个工具集。集成了：</span></span><br><span class="line">                  <span class="comment"># Memcheck 内存错误检测器。</span></span><br><span class="line">                  <span class="comment"># Cachegrind 缓存和分支预测分析器。</span></span><br><span class="line">                  <span class="comment"># Callgrind 可生成缓存分析器的调用图。</span></span><br><span class="line">                  <span class="comment"># Helgrind 线程错误检测器。</span></span><br><span class="line">                  <span class="comment"># DRD 也是线程错误检测器。</span></span><br><span class="line">                  <span class="comment"># Massif 堆分析器，它可以帮助程序使用更少的内存。</span></span><br><span class="line">                  <span class="comment"># DHAT 一种不同类型的堆分析器。使用它可以了解块寿命，块利用率和布局效率低下的问题。</span></span><br><span class="line"></span><br><span class="line">├── mtr -&gt; ./mysql-test-run.pl <span class="comment"># mysql-test-run.pl 脚本别名</span></span><br><span class="line">├── mysql-stress-test.pl</span><br><span class="line">├── mysql-test-run -&gt; ./mysql-test-run.pl</span><br><span class="line">├── mysql-test-run.dox</span><br><span class="line">├── mysql-test-run.pl <span class="comment"># mtr 入口文件，测试框架核心逻辑</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># include/ 目录包含.inc 文件，在测试用例中通过 source 命令引入，就像 C/C++ 的头文件。建议将多次重复使用的测试语句整合到 .inc 文件中。</span></span><br><span class="line">├── include <span class="comment"># include 下所有 *.inc 都会被 t/ 目录下的 *.test 引用</span></span><br><span class="line">│   ├── Load_data.inc</span><br><span class="line">    ......</span><br><span class="line">│   ├── json_lookup.inc</span><br><span class="line">│   ├── keyring_tests</span><br><span class="line">│   │   ├── binlog</span><br><span class="line">│   │   │   ├── rpl_binlog_cache_encryption.inc</span><br><span class="line">        ......</span><br><span class="line">│   ├── keyring_udf_keyring_plugin_loaded.inc</span><br><span class="line">    ......</span><br><span class="line">│   └── year-engine.test</span><br><span class="line"><span class="comment"># t/ 和 r/ 目录分别对应于 main suite 的测试 case 和 期望结果。</span></span><br><span class="line"><span class="comment"># 测试 case 以 .test 后缀结尾。</span></span><br><span class="line"><span class="comment"># 另外还有 .opt 后缀文件，它里面指定了MySQL的参数。某些测试用例会涉及重启，在重启时可能会变更 mysql 参数，可能会用 .opt 文件中指定的参数。</span></span><br><span class="line">├── t <span class="comment"># 该目录下的每个 *.test 都对应一个测试 case 。</span></span><br><span class="line">│   ├── 1st.test</span><br><span class="line">│   ├── admin_interface.test</span><br><span class="line">    ......</span><br><span class="line">├── r <span class="comment"># 路径和命名 与 t/ 目录一一对应，表示对应测试用例的期望输出。</span></span><br><span class="line">│   ├── 1st.result</span><br><span class="line">│   ├── admin_interface.result</span><br><span class="line">    ......</span><br><span class="line">│   └── year-myisam.result</span><br><span class="line"></span><br><span class="line">├── std_data <span class="comment"># 测试所用的数据文件，某些测试 case 需要使用到。</span></span><br><span class="line">│   ├── 14897.frm</span><br><span class="line">│   ├── 256kb.json</span><br><span class="line">│   ├── 41_decimal.frm</span><br><span class="line">│   ├── 57import.zip</span><br><span class="line">    ......</span><br><span class="line">│   └── x_y_data.csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试框架有 suite 的概念，每个 suite 为一个测试用例集合，默认的 suite 为 main，它的测试集合位于当前目录下的 t/ 目录。</span></span><br><span class="line"><span class="comment"># 除了 main suite 之外，其他的 suite 基本都以子目录的形式存放于当前文件夹，比如 json、binlog 等。</span></span><br><span class="line">├── suite <span class="comment"># 本目录下每个子目录都包含 include/r/t 三个子目录，其中：</span></span><br><span class="line">          <span class="comment"># include/*.inc 会被 t/*.test 引用</span></span><br><span class="line">          <span class="comment"># t/*.test 是各个测试case的主文件</span></span><br><span class="line">          <span class="comment"># r/*.result 是期望的测试输出</span></span><br><span class="line">          <span class="comment"># 另外，t/ 与 r/ 路径中的文件是一一对应的。</span></span><br><span class="line">│   ├── audit_null</span><br><span class="line">    ......</span><br><span class="line">│   ├── innodb</span><br><span class="line">│   │   ├── include</span><br><span class="line">│   │   │   ├── alter_table_pk_no_sort.inc</span><br><span class="line">            ......</span><br><span class="line">│   │   ├── r</span><br><span class="line">│   │   │   ├── add_foreign_key.result</span><br><span class="line">│   │   │   ├── alter_crash.result</span><br><span class="line">            ......</span><br><span class="line">│   │   └── t</span><br><span class="line">│   │       ├── add_foreign_key.test</span><br><span class="line">│   │       ├── alter_crash.test</span><br><span class="line">            ......</span><br><span class="line">│   │       └── zlob_update_purge.test</span><br><span class="line">│   ├── innodb_fts</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">└── var <span class="comment"># 测试开启后 mtr 创建的目录，用于存放测试过程产生的数据目录、日志等。</span></span><br><span class="line">    ├── data</span><br><span class="line">    │   ├── <span class="comment">#ib_16384_0.dblwr</span></span><br><span class="line">        ......</span><br><span class="line">    ......</span><br><span class="line">    ├── my.cnf</span><br><span class="line">    ├── run</span><br><span class="line">    ├── std_data</span><br><span class="line">    │   ├── 14897.frm</span><br><span class="line">    ......</span><br><span class="line">    └── tmp</span><br><span class="line">        └── mysqld.1</span><br></pre></td></tr></table></figure><h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><p>参考：</p><ul><li><a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_MYSQLTEST_PROGRAMS.html">MySQL: MySQL Test Programs</a></li><li><a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_MYSQL_TEST_RUN_PL.html">MySQL: mysql-test-run.pl — Run MySQL Test Suite</a></li></ul><h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><ul><li><code>--force</code><ul><li>默认情况下，只要遇到一个 case 出错，测试程序就会退出。</li><li>加入该参数后，mtr 会忽略错误并继续执行下一个 case 直到所有 case 执行结束再退出。</li><li>但如果脚本存在太多错误还是会退出，可设置<code>--max-test-fail=0</code> 忽略计数。</li></ul></li><li><code>--max-test-fail</code><ul><li>测试过程中失败 case 数达到一定值会退出，默认值是 10，设置为 0 则会忽略计数。</li></ul></li><li><code>--record</code><ul><li><strong>是否记录 results 结果，首次执行建议带上，让其自动生成 <code>.results</code> 文件，再基于该文件修改成我们预期的结果</strong>。</li><li>若一个执行输出结果和 <code>testname.result</code> 文件不同，会生成一个 <code>testname.reject</code> 文件，该文件在下次执行成功之后被删除；</li><li>检查<code>.reject</code>文件的内容，如果里面是期望的输出，则将内容拷贝到 <code>.result</code> 文件中，作为以后判断运行结果是否通过的依据；</li></ul></li><li><code>--parallel</code><ul><li>指定运行测试 case 的并行线程数。</li></ul></li><li><code>—-nowarnings</code><ul><li>忽略 warnings 错误。</li><li>设置该参数后，当出现 warnings 错误，不再累加 <code>--max-test-fail</code> 。</li></ul></li><li><code>--big-test</code><ul><li>执行标记为 <code>big</code> 的 test cases，也就是同时覆盖 <strong>非 big + big</strong>。这是因为标记为 big 的 case 较大、耗时较长，默认不会执行。</li></ul></li><li><code>--only-big-test</code> ：只启用带 big 标记的 test cases，也就是会跳过普通的非 big 标记的 cases。</li><li><code>--suite=[suitename1,...]</code><ul><li>默认情况下 mtr 会执行所有测试 case，但有时候我们要执行一个测试集，就可用该参数来指定，比如<code>./mtr --suite=rpl</code> 只执行 rpl 测试集。</li></ul></li><li><code>--do-test=events</code><ul><li>执行所有以 <code>events</code>为前缀的 case（搜索范围为 t/和所有的 suite）。</li><li><code>--do-test</code> 的参数支持正则表达式，上述命令等效于 <code>./mtr --do-test=events.*</code></li><li>所以如果想测试所有的包括 innodb 的 case，可以用 <code>./mtr --do-test=.*innodb.*</code></li></ul></li><li><strong>连接远程的数据库进行 mtr 执行：</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --extern  一般情况下mtr是启动自己的MySQL服务来进行测试，如果在启动时指定参数 --extern，则可以使用指定的 MySQL 服务进行测试</span></span><br><span class="line">./mtr --extern host=192.168.6.1 --extern port=3306 --extern user=root --extern password=<span class="string">&#x27;123456&#x27;</span>  --record --force example.1</span><br><span class="line">./mtr --extern host=127.0.0.1 --extern port=3306 --extern user=root --extern password= --force --max-test-fail=0 --suite=main</span><br><span class="line">./mtr --extern host=127.0.0.1 --extern port=3306 --extern user=root --extern password= --force --max-test-fail=0 --fast --suite=main</span><br></pre></td></tr></table></figure><ul><li><code>--debug-server</code> ：Use debug version of server, but without turning on tracing.</li><li><code>--platform</code> 和 <code>--exclude-platform</code> ：用于指定或排除平台的选项。<ul><li>如果 MTR 不是运行在 pushbuild test 环境中（存在环境变量<code>PB2WORKDIR</code>，即<code>export PB2WORKDIR=</code>），这两个选项是不生效的。</li></ul></li><li><code>comment=STR</code> ：添加该选项后，mtr 会将注释信息打印到 stdout 。比如 <code>--comment=all-default-big</code>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># all-default-big</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br></pre></td></tr></table></figure><ul><li><code>--vardir=DIR</code> ：指定测试过程中生成的文件存放的目录，默认是当前路径下的<code>var/</code> 。</li><li><code>--report-features</code> ：指定该选项后，mtr 首先运行名为 <code>report_features</code> 的 case，该 case 没有任何输出（设置了<code>--disable_query_log</code>） 。</li><li><code>--unit-tests-report</code> ：加上该参数后，如果在编译后的源码目录执行 mtr，会在测试的最后阶段加上每个测试用例的报告信息。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line">[----------] 1027 tests from Spec/ReuseConnectionTest (404 ms total)</span><br><span class="line"></span><br><span class="line">[----------] Global <span class="built_in">test</span> environment tear-down</span><br><span class="line">[==========] 1027 tests from 1 <span class="built_in">test</span> suite ran. (70804 ms total)</span><br><span class="line"></span><br><span class="line">Total Test time (real) = 3363.87 sec</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">The following tests FAILED:</span><br><span class="line">        203 - routertest_component_metadata_ttl (Subprocess aborted)</span><br><span class="line">        206 - routertest_component_rest_api_enable (Failed)</span><br><span class="line">        222 - routertest_component_routing_splicer (Failed)</span><br><span class="line">        224 - routertest_integration_routing_reuse (Failed)</span><br><span class="line">Errors <span class="keyword">while</span> running CTest</span><br><span class="line">  [  FAILED  ] CheckEdgeHttpsPortValues/UseEdgeHttpsPortValues.ensure_bootstrap_works_for_edge_https_port_values/1, <span class="built_in">where</span> GetParam() = 65535 (1444 ms)</span><br><span class="line">  [  FAILED  ] 1 <span class="built_in">test</span>, listed below:</span><br><span class="line">  [  FAILED  ] CheckEdgeHttpsPortValues/UseEdgeHttpsPortValues.ensure_bootstrap_works_for_edge_https_port_values/1, <span class="built_in">where</span> GetParam() = 65535</span><br><span class="line">   1 FAILED TEST</span><br><span class="line">  [  FAILED  ] Spec/SplicerFailParamTest.fails/client_ssl_dh_params_not_exists, <span class="built_in">where</span> GetParam() = 64-byte object &lt;C8-CE 3D-2F 4D-56 00-00 F0-DA BB-30 4D-56 00-00 B0-DB BB-30 4D-56 00-00 B0-DB BB-30 4D-56 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 3D-D1 F9-2E 4D-56 00-00 AD-D0 F9-2E 4D-56 00-00&gt; (383 ms)</span><br><span class="line">  [  FAILED  ] 1 <span class="built_in">test</span>, listed below:</span><br><span class="line">  [  FAILED  ] Spec/SplicerFailParamTest.fails/client_ssl_dh_params_not_exists, <span class="built_in">where</span> GetParam() = 64-byte object &lt;C8-CE 3D-2F 4D-56 00-00 F0-DA BB-30 4D-56 00-00 B0-DB BB-30 4D-56 00-00 B0-DB BB-30 4D-56 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 3D-D1 F9-2E 4D-56 00-00 AD-D0 F9-2E 4D-56 00-00&gt;</span><br><span class="line">   1 FAILED TEST</span><br><span class="line">  [  FAILED  ] 0 tests, listed below:</span><br><span class="line">   0 FAILED TESTS</span><br><span class="line">  [  FAILED  ] Spec/ReuseConnectionTest: SetUpTestSuite or TearDownTestSuite</span><br><span class="line">   1 FAILED TEST SUITE</span><br><span class="line"></span><br><span class="line">Unit tests: 98% tests passed, 4 tests failed out of 224</span><br><span class="line">  The following tests FAILED:</span><br><span class="line">        206 - routertest_component_rest_api_enable (Failed)</span><br><span class="line">        222 - routertest_component_routing_splicer (Failed)</span><br><span class="line">        224 - routertest_integration_routing_reuse (Failed)</span><br><span class="line">Report from unit tests <span class="keyword">in</span> /data/work/mysql/mysql-server/mysql-test/var-all-default-big/ctest.log</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">The servers were restarted 3 <span class="built_in">times</span></span><br><span class="line">The servers were reinitialized 0 <span class="built_in">times</span></span><br><span class="line">Spent 53.181 of 3579 seconds executing testcases</span><br><span class="line"></span><br><span class="line">Completed: Failed 1/6 tests, 83.33% were successful.</span><br><span class="line"></span><br><span class="line">Failing <span class="built_in">test</span>(s): unit_tests</span><br></pre></td></tr></table></figure><ul><li><code>--no-skip</code> ：指定该选项后，即使 <code>.inc</code> 文件中要求的条件不满足，也会运行所有的 mtr 测试 cases 。特别地，在 <code>include/excludenoskip.list</code> 文件中指定的 <code>.inc</code> 文件列表依然会跳过。</li><li><code>--skip-ndb</code> ：与选项<code>--skip-ndbcluster</code> 含义相同，表示跳过与 ndb 相关的 suites，默认启用。<ul><li>ndb 引擎也是开源的（<code>storage/ndb/</code>），涉及 ndb 引擎的 suites 包括：</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- ndb</span><br><span class="line">- ndb_big</span><br><span class="line">- ndb_opt</span><br><span class="line">- ndb_ddl</span><br><span class="line">- ndb_binlog</span><br><span class="line">- ndb_rpl</span><br><span class="line">- rpl_ndb</span><br><span class="line">- ndbcluster</span><br><span class="line">- gcol_ndb</span><br><span class="line">- json_ndb</span><br></pre></td></tr></table></figure><ul><li><code>--with-ndb-only</code> ：与选项<code>--with-ndbcluster-only</code> 含义相同，只运行与 ndb 相关的 suites 。如果没显示指定<code>--suites</code> 参数，则会跳过所有非 ndb 的 suites ；反之，若指定了，也会额外运行指定的 suites 。</li><li><code>--ps-protocol</code> ：在 client 和 server 端之间使用 prepared-statement 协议（binary），会将<code>--ps-protocol</code> 参数直接传给 mysqltest 程序。</li><li><code>--skip-combinations</code> ：忽略组合文件或选项，也就是忽略：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动 mtr 时的日志：</span></span><br><span class="line">Collecting tests</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> binlog</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> binlog_gtid</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> binlog_nogtid</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> rpl</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> rpl_gtid</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> rpl_nogtid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对应于</span></span><br><span class="line">./suite/rpl_nogtid/combinations</span><br><span class="line">./suite/binlog_gtid/combinations</span><br><span class="line">./suite/binlog/combinations</span><br><span class="line">./suite/rpl/combinations</span><br><span class="line">./suite/rpl_gtid/combinations</span><br><span class="line">./suite/binlog_nogtid/combinations</span><br><span class="line"></span><br><span class="line"><span class="comment"># 除此之外，还有：</span></span><br><span class="line">./suite/ndb_rpl/t/ndb_rpl_innodb2ndb.combinations</span><br><span class="line">./suite/ndb_rpl/t/ndb_rpl_conflict_epoch.combinations</span><br><span class="line">./suite/ndb_rpl/t/ndb_rpl_basic.combinations</span><br></pre></td></tr></table></figure><h2 id="suitename-可选范围"><a href="#suitename-可选范围" class="headerlink" title="suitename 可选范围"></a>suitename 可选范围</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">main,</span><br><span class="line"></span><br><span class="line">audit_null,</span><br><span class="line">auth_sec,</span><br><span class="line"></span><br><span class="line">binlog,</span><br><span class="line">binlog_gtid,</span><br><span class="line">binlog_nogtid,</span><br><span class="line"><span class="built_in">clone</span>,</span><br><span class="line"></span><br><span class="line">collations,</span><br><span class="line"></span><br><span class="line">component_keyring_file,</span><br><span class="line">connection_control,</span><br><span class="line">encryption,</span><br><span class="line"></span><br><span class="line">engines,</span><br><span class="line">engines/funcs,</span><br><span class="line">engines/iuds,</span><br><span class="line">engines/rr_trx,</span><br><span class="line">federated,</span><br><span class="line"></span><br><span class="line">funcs_1, <span class="comment"># 额外功能（包括视图、存储过程、INFORMATION_SCHEMA等）</span></span><br><span class="line">funcs_2, <span class="comment"># 额外功能（字符集等）</span></span><br><span class="line">gcol, <span class="comment"># 虚拟生成列</span></span><br><span class="line">gis,</span><br><span class="line">group_replication,</span><br><span class="line">information_schema,</span><br><span class="line"></span><br><span class="line">innodb,</span><br><span class="line">innodb_fts, <span class="comment"># 全文索引</span></span><br><span class="line">innodb_gis,</span><br><span class="line">innodb_stress,</span><br><span class="line">innodb_undo,</span><br><span class="line">innodb_zip,</span><br><span class="line"></span><br><span class="line">interactive_utilities,</span><br><span class="line">jp, <span class="comment"># 日语字符集</span></span><br><span class="line">json,</span><br><span class="line">large_tests,</span><br><span class="line">lock_order,</span><br><span class="line">max_parts,</span><br><span class="line">memcached,</span><br><span class="line">network_namespace,</span><br><span class="line">opt_trace,</span><br><span class="line">parts,parts/special_tests,</span><br><span class="line">perfschema,</span><br><span class="line">query_rewrite_plugins,</span><br><span class="line"></span><br><span class="line">rpl,</span><br><span class="line">rpl_gtid,</span><br><span class="line">rpl_nogtid,</span><br><span class="line"></span><br><span class="line">secondary_engine,</span><br><span class="line"></span><br><span class="line">service_status_var_registration,</span><br><span class="line">service_sys_var_registration,</span><br><span class="line">service_udf_registration,</span><br><span class="line"></span><br><span class="line">special,</span><br><span class="line">stress,</span><br><span class="line">sys_vars,</span><br><span class="line">sysschema,</span><br><span class="line"></span><br><span class="line">test_service_sql_api,</span><br><span class="line">test_services,</span><br><span class="line"></span><br><span class="line">x</span><br></pre></td></tr></table></figure><h1 id="suites-分类"><a href="#suites-分类" class="headerlink" title="suites 分类"></a>suites 分类</h1><h2 id="default-suites"><a href="#default-suites" class="headerlink" title="default suites:"></a>default suites:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">auth_sec,binlog,binlog_gtid,binlog_nogtid,<span class="built_in">clone</span>,</span><br><span class="line">collations,component_keyring_file,connection_control,encryption,</span><br><span class="line">federated,funcs_2,gcol,gis,information_schema,</span><br><span class="line">innodb,innodb_fts,innodb_gis,innodb_undo,innodb_zip,</span><br><span class="line">interactive_utilities,json,</span><br><span class="line">main,</span><br><span class="line">opt_trace,parts,perfschema,query_rewrite_plugins,rpl,rpl_gtid,rpl_nogtid,secondary_engine,</span><br><span class="line">service_status_var_registration,service_sys_var_registration,service_udf_registration,</span><br><span class="line">sys_vars,sysschema,test_service_sql_api,test_services,x</span><br></pre></td></tr></table></figure><h2 id="非-default-suites："><a href="#非-default-suites：" class="headerlink" title="非 default suites："></a>非 default suites：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">funcs_2, stress, jp, nist</span><br><span class="line">engines, memcached, audit_null</span><br><span class="line">group_replication</span><br></pre></td></tr></table></figure><h1 id="指令示例"><a href="#指令示例" class="headerlink" title="指令示例"></a>指令示例</h1><h2 id="mtr-执行路径："><a href="#mtr-执行路径：" class="headerlink" title="mtr 执行路径："></a><strong>mtr 执行路径：</strong></h2><ul><li>代码覆盖率、单元测试只能在 <code>编译的源码目录/mysql-test</code> 执行。</li><li>其他测试在 <code>编译的源码目录/mysql-test</code> 和 <code>安装目录/mysql-test</code> 都可以执行。</li><li><strong>如无特殊需求，更建议在安装目录执行 mtr 测试</strong>（目录结构更清晰）。</li></ul><h2 id="常用指令："><a href="#常用指令：" class="headerlink" title="常用指令："></a>常用指令：</h2><ul><li>在未编写 <code>.result</code>文件的情况下，可先通过<code>--reocrd</code>选项生成<code>.result</code>文件，再基于该文件修改成期望的结果：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl mysql-test-run.pl --record mytest</span><br></pre></td></tr></table></figure><ul><li>常态下执行，不加 <code>--reocrd</code>选项，这样才会比对实际结果与期望结果是否相同：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">perl mysql-test-run.pl mytestcase1</span><br><span class="line">perl mysql-test-run.pl --suites=main,rpl <span class="comment"># 指定多个 suites</span></span><br></pre></td></tr></table></figure><ul><li>当一些测试 case 频繁失败时，可单独运行这些 case 以便调试：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">./mtr testcasename --record</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只运行基础套餐里的 subquery_all 用例（ t/subquery_all.test ）</span></span><br><span class="line"><span class="comment"># 可选 --charset-for-testdb=utf8mb4</span></span><br><span class="line">./mtr --force --big-test --nowarnings --max-test-fail=0 main.subquery_all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如需执行多个 case，可通过空格分割，比如：</span></span><br><span class="line">./mtr --force --big-test --nowarnings --max-test-fail=0 main.subquery_all main.myisam_explain_json_non_select_none</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>如果不指定任何 suite，mtr 默认会执行所有 default suites（包括 main）</strong>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mtr --force</span><br></pre></td></tr></table></figure><ul><li>执行 main suite 中的所有 case（所有<code>mysql-test/t/*.test</code>），忽略中间的 warnings 报错，强制运行完所有 case：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./mtr  --suite=main --force --max-test-fail=0 --nowarnings --parallel=8</span><br><span class="line">./mtr  --suite=main --force --max-test-fail=0 --nowarnings --parallel=8 --big-test</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>执行所有以 <code>events </code>为前缀的 case，搜索范围为 <code>mysql-test/t</code>、<code>mysql-test/suite</code>，注意不包括<code>extra/</code> ：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --do-test 参数支持正则表达式，该指令等效于./mtr --do-test=events.*</span></span><br><span class="line">./mtr --do-test=events --force --max-test-fail=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想测试所有包含 innodb 的 case，可以用 ./mtr --do-test=.*innodb.*</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="特殊用法："><a href="#特殊用法：" class="headerlink" title="特殊用法："></a>特殊用法：</h2><ul><li><p>1、准备数据库： <code>create database test</code> 。</p><ul><li><p>a）执行 <code>./mtr --extern host=127.0.0.1 --extern port=3306 --extern user=root --extern password= --force --max-test-fail=0 --suite=main</code> ，第一个非 skipped case 可以执行成功，但之后的 case 全部失败。</p></li><li><p>b）分析原因，发现是每执行完一个 case ，mtr 就会 shutdown mysqld server，下一个 case 再启动，而这里是使用的外部 mysql，则不会启动。</p></li></ul></li><li><p>2、查看手册，发现有一个参数可以控制是否每个 case 都重启 mysqld：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--fast</span><br><span class="line"></span><br><span class="line">Do not perform controlled shutdown when servers need to be restarted or at the end of the <span class="built_in">test</span> run. This is equivalent to using --shutdown-timeout=0.</span><br></pre></td></tr></table></figure><ul><li><strong>3、添加后，虽然不重启了，但会导致一些 case 失败。 这是因为有些 case 需要初始化一些参数</strong>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Note</span><br><span class="line"></span><br><span class="line">    If a <span class="built_in">test</span> <span class="keyword">case</span> has an .opt file that requires the server to be restarted with specific options, the</span><br><span class="line">    file will not be used. The <span class="built_in">test</span> <span class="keyword">case</span> likely will fail as a result.</span><br></pre></td></tr></table></figure><p>可见，<strong>官方对这种用法的支持尚不完善</strong>。</p><h1 id="推荐用法"><a href="#推荐用法" class="headerlink" title="推荐用法"></a>推荐用法</h1><p>如果需要验证 release 版本稳定性（适用于 QA、研发），可参考 <code>default.daily</code> 中的指令集。</p><ul><li>该指令集覆盖了单元测试（必须以 DEBUG 编译）、压力测试等。</li></ul><h1 id="如何添加测试用例？"><a href="#如何添加测试用例？" class="headerlink" title="如何添加测试用例？"></a>如何添加测试用例？</h1><h2 id="1-示例一"><a href="#1-示例一" class="headerlink" title="1. 示例一"></a>1. 示例一</h2><p>我们通过一个最简单的例子来说明这个框架是怎么使用的。</p><h3 id="1-1-创建测试用例"><a href="#1-1-创建测试用例" class="headerlink" title="1.1. 创建测试用例"></a>1.1. 创建测试用例</h3><p>在 <code>mysql-test/t</code> 目录下创建一个文件名为 <code>mytest.test</code> 的测试用例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--disable_warnings</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> t1;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@sql</span>_mode<span class="operator">=</span><span class="string">&#x27;NO_ENGINE_SUBSTITUTION&#x27;</span>;</span><br><span class="line"><span class="comment">--enable_warnings</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> SQL_WARNINGS<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--echo #</span></span><br><span class="line"><span class="comment">--echo # test content</span></span><br><span class="line"><span class="comment">--echo #</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1 (a <span class="type">INT</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span> (<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span> (<span class="number">2</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> t1;</span><br></pre></td></tr></table></figure><p>在<code>mysql-test/r</code> 目录下创建名为<code>mytest.result</code> 的文件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> t1;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@sql</span>_mode<span class="operator">=</span><span class="string">&#x27;NO_ENGINE_SUBSTITUTION&#x27;</span>;</span><br><span class="line"><span class="keyword">SET</span> SQL_WARNINGS<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">#</span><br><span class="line"># test content</span><br><span class="line">#</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1 (a <span class="type">INT</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span> (<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span> (<span class="number">2</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1;</span><br><span class="line">a</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> t1;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可见，<code>.result</code> 文件中不仅要记录 SQL，还要记录输出结果。</p><h3 id="1-2-执行测试，成功"><a href="#1-2-执行测试，成功" class="headerlink" title="1.2. 执行测试，成功"></a>1.2. 执行测试，成功</h3><p>指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> mysql80-debug/mysql-test</span><br><span class="line">./mtr main.mytest</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Logging: ./mtr  main.mytest</span><br><span class="line">MySQL Version 8.0.29</span><br><span class="line">Checking supported features</span><br><span class="line"> - Binaries are debug compiled</span><br><span class="line">Using <span class="string">&#x27;all&#x27;</span> suites</span><br><span class="line">Collecting tests</span><br><span class="line">Checking leftover processes</span><br><span class="line">Removing old var directory</span><br><span class="line">Creating var directory <span class="string">&#x27;/Users/wslu/work/mysql/mysql80-debug/mysql-test/var&#x27;</span></span><br><span class="line">Installing system database</span><br><span class="line">Using parallel: 1</span><br><span class="line"></span><br><span class="line">==============================================================================</span><br><span class="line">                  TEST NAME                       RESULT  TIME (ms) COMMENT</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">[ 50%] main.mytest                               [ pass ]     63</span><br><span class="line">[100%] shutdown_report                           [ pass ]</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">The servers were restarted 0 <span class="built_in">times</span></span><br><span class="line">The servers were reinitialized 0 <span class="built_in">times</span></span><br><span class="line">Spent 0.063 of 16 seconds executing testcases</span><br><span class="line"></span><br><span class="line">Completed: All 2 tests were successful.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看到 successful 说明执行成功。</p><h3 id="1-3-修改-result-文件"><a href="#1-3-修改-result-文件" class="headerlink" title="1.3. 修改 result 文件"></a>1.3. 修改 result 文件</h3><p>在 <code>mytest.result</code> 文件中添加一些字符：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS t1;</span><br><span class="line">SET @@sql_mode=<span class="string">&#x27;NO_ENGINE_SUBSTITUTION&#x27;</span>;</span><br><span class="line">SET SQL_WARNINGS=1;</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># test content</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">CREATE TABLE t1 (a INT);</span><br><span class="line">INSERT INTO t1 VALUES (1);</span><br><span class="line">INSERT INTO t1 VALUES (2);</span><br><span class="line">SELECT * FROM t1; <span class="comment"># new comment</span></span><br><span class="line">a</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">DROP TABLE t1;</span><br></pre></td></tr></table></figure><h3 id="1-4-再次执行测试，失败"><a href="#1-4-再次执行测试，失败" class="headerlink" title="1.4. 再次执行测试，失败"></a>1.4. 再次执行测试，失败</h3><p>再次执行指令<code>./mtr main.mytest</code> ，可见<code># new comment</code> 那一行报错：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line">                  TEST NAME                       <span class="keyword">RESULT</span>  <span class="type">TIME</span> (ms) COMMENT</span><br><span class="line"><span class="comment">------------------------------------------------------------------------------</span></span><br><span class="line">[ <span class="number">50</span><span class="operator">%</span>] main.mytest                               [ fail ]</span><br><span class="line">        Test ended <span class="keyword">at</span> <span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">15</span>:<span class="number">07</span>:<span class="number">50</span></span><br><span class="line"></span><br><span class="line">CURRENT_TEST: main.mytest</span><br><span class="line"><span class="comment">--- /Users/wslu/work/mysql/mysql80-debug.bak_asan_ubsan_gcov/mysql-test/r/mytest.result  2023-03-20 10:07:31.000000000 +0300</span></span><br><span class="line"><span class="operator">+</span><span class="operator">+</span><span class="operator">+</span> <span class="operator">/</span>Users<span class="operator">/</span>wslu<span class="operator">/</span>work<span class="operator">/</span>mysql<span class="operator">/</span>mysql80<span class="operator">-</span>debug.bak_asan_ubsan_gcov<span class="operator">/</span>mysql<span class="operator">-</span>test<span class="operator">/</span>var<span class="operator">/</span>log<span class="operator">/</span>mytest.reject  <span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">07</span>:<span class="number">50.000000000</span> <span class="operator">+</span><span class="number">0300</span></span><br><span class="line">@@ <span class="number">-7</span>,<span class="number">7</span> <span class="operator">+</span><span class="number">7</span>,<span class="number">7</span> @@</span><br><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1 (a <span class="type">INT</span>);</span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span> (<span class="number">1</span>);</span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span> (<span class="number">2</span>);</span><br><span class="line"><span class="operator">-</span><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1; # <span class="keyword">new</span> comment</span><br><span class="line"><span class="operator">+</span><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1;</span><br><span class="line"> a</span><br><span class="line"> <span class="number">1</span></span><br><span class="line"> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">mysqltest: <span class="keyword">Result</span> length mismatch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">The <span class="keyword">result</span> <span class="keyword">from</span> queries just before the failure was:</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> t1;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@sql</span>_mode<span class="operator">=</span><span class="string">&#x27;NO_ENGINE_SUBSTITUTION&#x27;</span>;</span><br><span class="line"><span class="keyword">SET</span> SQL_WARNINGS<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">#</span><br><span class="line"># test content</span><br><span class="line">#</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1 (a <span class="type">INT</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span> (<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span> (<span class="number">2</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1;</span><br><span class="line">a</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> t1;</span><br><span class="line">safe_process[<span class="number">19130</span>]: Child process: <span class="number">19131</span>, exit: <span class="number">1</span></span><br><span class="line"></span><br><span class="line"> <span class="operator">-</span> the logfile can be found <span class="keyword">in</span> <span class="string">&#x27;/Users/wslu/work/mysql/mysql80-debug.bak_asan_ubsan_gcov/mysql-test/var/log/main.mytest/mytest.log&#x27;</span></span><br><span class="line"></span><br><span class="line">[<span class="number">100</span><span class="operator">%</span>] shutdown_report                           [ pass ]</span><br><span class="line"><span class="comment">------------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure><p>mtr 会指出具体是哪行导致的 case 失败。</p><h1 id="常见问题-FAQ"><a href="#常见问题-FAQ" class="headerlink" title="常见问题 FAQ"></a>常见问题 FAQ</h1><h2 id="test-case-failed-原因"><a href="#test-case-failed-原因" class="headerlink" title="test case failed 原因"></a>test case failed 原因</h2><ol><li>产生的测试结果文件与预期输出文件 diff 结果不一致：<ol><li>期望输入的 SQL 执行成功，实际执行失败。</li><li>期望输入的 SQL 执行失败，实际执行成功。</li><li>比如：<code>mysql-test/t/select_all.test</code> 这个测试 case，其预期结果在<code>mysql-test/r/select_all.result</code>，在实际执行时，会将执行结果与<code>mysql-test/r/select_all.result</code>作比较，若不一致，则失败，并在<code>mysql-test/var/log</code>目录生成一个<code>.reject</code>文件。</li></ol></li><li>测试过程中 mysql server 挂掉。这种情况一般会报“丢失连接”的错误。</li><li>测试期间 MySQL Server 端写入了未过滤的 warnings 或 errors 日志。</li></ol><blockquote><p>此外，测试用例可以执行外部程序，因此在某些方面，测试框架可以扩展为测试 SQL 语句以外的用途。<br>最后，可以在测试中嵌入一小段 Perl 代码。这有时可用于执行超出测试语言或 SQL 能力的操作或执行逻辑。</p></blockquote><p>可使用一些技巧来定为具体的错误原因，详见下节。</p><h1 id="异常调试"><a href="#异常调试" class="headerlink" title="异常调试"></a>异常调试</h1><h2 id="分析日志"><a href="#分析日志" class="headerlink" title="分析日志"></a>分析日志</h2><p>默认情况下，在目录 <code>mysql-test/var/log/</code>中有日志生成（若指定 <code>--vardir</code> 参数，则以该参数路径为准），分析该日志也能得到一些有用信息。</p><p>比如 启动失败，则可以查看 <code>bootstrap.log</code> 文件，去掉命令中的 <code>--bootstrap</code> 并运行即可启动对应的 MySQL 服务来验证、调试。</p><h2 id="verbose-参数"><a href="#verbose-参数" class="headerlink" title="verbose 参数"></a>verbose 参数</h2><p>启动 mtr 时加 <code>--verbose</code> 参数，定位到引用的脚本位置后可以配置 <code>--echo</code> 命令修改调试。</p><p>如果加上 <code>--verbose</code> 打印的内容还不够详细，可以再加一个，即 <code>--verbose --verbose</code>，能打印出 mtr perl 脚本中的日志信息。</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">wslu@ubuntu:/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test$ perl mysql-test-run.pl --timer  --force --parallel=1 --vardir=var-rpl --suite=rpl --verbose</span><br><span class="line">Logging: mysql-test-run.pl  --timer --force --parallel=1 --vardir=var-rpl --suite=rpl --verbose</span><br><span class="line">&gt; exe_name: mysqld</span><br><span class="line">MySQL Version 8.0.29</span><br><span class="line">Checking supported features</span><br><span class="line"> - Binaries are debug compiled</span><br><span class="line">&gt; Testing FIPS: --test-ssl-fips-mode 0 error:0F06D065:common libcrypto routines:FIPS_mode_set:fips mode not supported</span><br><span class="line"></span><br><span class="line">Using suite(s): rpl</span><br><span class="line">Collecting tests</span><br><span class="line">&gt; Collecting: rpl</span><br><span class="line">&gt; suitedir: /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/suite/rpl</span><br><span class="line">&gt; testdir: /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/suite/rpl/t</span><br><span class="line">&gt; resdir: /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/suite/rpl/r</span><br><span class="line">&gt; Read combinations file /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/suite/rpl/combinations.</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> rpl</span><br><span class="line">&gt; Collecting: i_rpl</span><br><span class="line">Removing old var directory</span><br><span class="line">&gt; opt_vardir: /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl</span><br><span class="line">&gt; Removing /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var</span><br><span class="line">&gt; Removing /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/</span><br><span class="line">&gt; Removing /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/tmp/</span><br><span class="line">Creating var directory <span class="string">&#x27;/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl&#x27;</span></span><br><span class="line">&gt; Creating /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl</span><br><span class="line">Installing system database</span><br><span class="line"><span class="comment">### safe_path: /data/work/mysql/mysql80-install.bak_asan_ubsan/bin//mysqltest_safe_process --verbose -- /data/work/mysql/mysql80-install.bak_asan_ubsan/bin/mysqld --no-defaults --initialize-insecure --loose-skip-ndbcluster --tmpdir=/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/tmp/ --core-file --datadir=/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/data/ --secure-file-priv=/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl --innodb_buffer_pool_size=24M --innodb-log-file-size=5M --innodb_autoextend_increment=8 --character-sets-dir=/data/work/mysql/mysql80-install.bak_asan_ubsan/share/charsets --loose-auto_generate_certs=OFF --loose-sha256_password_auto_generate_rsa_keys=OFF --loose-caching_sha2_password_auto_generate_rsa_keys=OFF --init-file=/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/tmp/bootstrap.sql</span></span><br><span class="line">Using parallel: 1</span><br><span class="line"></span><br><span class="line">==============================================================================</span><br><span class="line">                  TEST NAME                       RESULT  TIME (ms) COMMENT</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">&gt; Client connected</span><br><span class="line">worker[1] &gt; mtr_ping_port: 13000</span><br><span class="line">worker[1] &gt; FREE</span><br><span class="line">worker[1] &gt; mtr_ping_port: 13001</span><br><span class="line">worker[1] &gt; FREE</span><br><span class="line">worker[1] &gt; mtr_ping_port: 13002</span><br><span class="line">worker[1] &gt; FREE</span><br><span class="line">worker[1] &gt; mtr_ping_port: 13003</span><br><span class="line">worker[1] &gt; FREE</span><br><span class="line">......</span><br><span class="line">worker[1] &gt; mtr_ping_port: 13029</span><br><span class="line">worker[1] &gt; FREE</span><br><span class="line">worker[1] &gt; Using MTR_BUILD_THREAD 300, with reserved ports 13000..13029</span><br><span class="line">worker[1] Creating var directory <span class="string">&#x27;/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl&#x27;</span></span><br><span class="line">worker[1] &gt; result: , file_mode: 0</span><br><span class="line">[  0%] rpl.rpl_atomic_ddl                        [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_atomic_ddl_no_binlog              [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_binlog_cache_encryption           [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_filters_error_cases_on_startup    [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_group_commit_deadlock             [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_group_commit_deadlock_myisam      [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_innodb_auto_increment             [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_killed_ddl                        [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_log_info_repository_persistence_assign_gtids_to_anonymous_transactions  [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_log_info_repository_persistence_require_row  [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_log_info_repository_persistence_require_table_primary_key_check  [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_row_crash_safe                    [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_row_mts_rec_crash_safe            [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_stm_mixed_crash_safe              [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_stm_mixed_mts_rec_crash_safe      [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_stm_mixed_mts_rec_crash_safe_checksum  [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_io_thd_wait_for_disk_space_stress  [ disabled ]   BUG<span class="comment">#23581287 Disabled until bug is fixed.</span></span><br><span class="line">[  0%] rpl.rpl_writeset_add_unique_key           [ disabled ]   Bug<span class="comment">#33134835 RPL_WRITESET_ADD_UNIQUE_KEY FAILS SPORADICALLY</span></span><br><span class="line">worker[1] &gt; Running <span class="built_in">test</span>: rpl.rpl_plugin_load</span><br><span class="line">worker[1] &gt; Setting timezone: GMT-3</span><br><span class="line">worker[1] &gt; Cleaning datadirs...</span><br><span class="line">worker[1] &gt; clean_dir: /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/tmp</span><br><span class="line">worker[1] &gt; unlink: <span class="string">&#x27;/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/tmp/bootstrap.sql&#x27;</span></span><br><span class="line">worker[1] &gt; Generating my.cnf from <span class="string">&#x27;/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/suite/rpl/my.cnf&#x27;</span></span><br><span class="line">worker[1] &gt; MASTER_MYPORT = 13000</span><br><span class="line">worker[1] &gt; MASTER_MYSOCK = /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/tmp/mysqld.1.sock</span><br><span class="line">worker[1] &gt; MASTER_X_MYSOCK = /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/tmp/mysqlx.1.sock</span><br><span class="line">worker[1] &gt; SLAVE_MYPORT = 13002</span><br><span class="line">worker[1] &gt; SLAVE_MYSOCK = /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/tmp/mysqld.2.sock</span><br><span class="line">worker[1] &gt; SLAVE_X_MYSOCK = /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/tmp/mysqlx.2.sock</span><br><span class="line">worker[1] &gt; mysqld_start:  [<span class="string">&#x27; --plugin-dir=/data/work/mysql/mysql80-install.bak_asan_ubsan/lib/plugin&#x27;</span>, <span class="string">&#x27;--binlog-format=mixed &#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">### safe_path: /data/work/mysql/mysql80-install.bak_asan_ubsan/bin//mysqltest_safe_process --verbose -- /data/work/mysql/mysql80-install.bak_asan_ubsan/bin/mysqld --defaults-group-suffix=.1 --defaults-file=/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/my.cnf --log-output=file --loose-debug-sync-timeout=600 --plugin-dir=/data/work/mysql/mysql80-install.bak_asan_ubsan/lib/plugin --binlog-format=mixed --core-file</span></span><br><span class="line">worker[1] &gt; Started [mysqld.1 - pid: 61921, winpid: 61921]</span><br><span class="line">worker[1] &gt; mysqld_start:  [<span class="string">&#x27; --plugin-dir=/data/work/mysql/mysql80-install.bak_asan_ubsan/lib/plugin&#x27;</span>, <span class="string">&#x27;--binlog-format=mixed &#x27;</span>]</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="debug-参数和-gdb-参数"><a href="#debug-参数和-gdb-参数" class="headerlink" title="debug 参数和 gdb 参数"></a>debug 参数和 gdb 参数</h2><p>mtr 支持的一些 debug 参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">debug                 Dump trace output <span class="keyword">for</span> all servers and client programs.</span><br><span class="line">debug-common          Same as debug, but sets <span class="string">&#x27;d&#x27;</span> debug flags to</span><br><span class="line">                      <span class="string">&quot;query,info,error,enter,exit&quot;</span>; you need this <span class="keyword">if</span> you</span><br><span class="line">                      want both to see debug printouts and to use</span><br><span class="line">                      DBUG_EXECUTE_IF.</span><br><span class="line">debug-server          Use debug version of server, but without turning on</span><br><span class="line">                      tracing.</span><br><span class="line">debugger=NAME         Start mysqld <span class="keyword">in</span> the selected debugger.</span><br><span class="line">gdb                   Start the mysqld(s) <span class="keyword">in</span> gdb.</span><br><span class="line">lldb                  Start the mysqld(s) <span class="keyword">in</span> lldb.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可见，要想跟踪调用过程，只有 <code>--debug</code> 和 <code>--gdb</code> 参数满足要求，会生成 trace 信息。</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这几条指令很耗费内存</span></span><br><span class="line">./mtr --debug --suite=rpl</span><br><span class="line">./mtr --gdb --suite=rpl</span><br><span class="line">./mtr --debug --gdb --suite=rpl</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>指令执行后，生成 trace 文件，比如 <code>var/log/bootstrap.trace</code> 。</p><h2 id="脚本自身支持-debug-参数"><a href="#脚本自身支持-debug-参数" class="headerlink" title="脚本自身支持 debug 参数"></a>脚本自身支持 debug 参数</h2><p>如果引用（<code>source</code>）的脚本支持 debug 参数，比如常用的 <code>$rpl_debug</code>，则可以修改相应的 <code>.inc</code> 文件以获得更多的 debug 信息。</p><h2 id="perl-的调试模式"><a href="#perl-的调试模式" class="headerlink" title="perl 的调试模式"></a>perl 的调试模式</h2><p>添加<code>-d</code> 参数可进入 perl 语言的 debug 模式，便于调试 <code>mysql-test-run.pl</code> 及其调用。示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">wslu@ubuntu:/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test$ perl -d mysql-test-run.pl --timer  --force --parallel=1 --vardir=var-rpl --suite=rpl</span><br><span class="line"></span><br><span class="line">Loading DB routines from perl5db.pl version 1.60</span><br><span class="line">Editor support available.</span><br><span class="line"></span><br><span class="line">Enter h or <span class="string">&#x27;h h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>, or <span class="string">&#x27;man perldebug&#x27;</span> <span class="keyword">for</span> more <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line">main::(mysql-test-run.pl:54):  push @INC, <span class="string">&quot;.&quot;</span>;</span><br><span class="line">  DB&lt;1&gt; l</span><br><span class="line">54==&gt;  push @INC, <span class="string">&quot;.&quot;</span>;</span><br><span class="line">55</span><br><span class="line">56:  use My::ConfigFactory;</span><br><span class="line">57:  use My::CoreDump;</span><br><span class="line">58:  use My::File::Path;    <span class="comment"># Patched version of File::Path</span></span><br><span class="line">59:  use My::Find;</span><br><span class="line">60:  use My::Options;</span><br><span class="line">61:  use My::Platform;</span><br><span class="line">62:  use My::SafeProcess;</span><br><span class="line">63:  use My::SysInfo;</span><br><span class="line">  DB&lt;1&gt; n</span><br><span class="line">main::(mysql-test-run.pl:72):  require <span class="string">&quot;lib/mtr_gcov.pl&quot;</span>;</span><br><span class="line">  DB&lt;1&gt; l</span><br><span class="line">72==&gt;  require <span class="string">&quot;lib/mtr_gcov.pl&quot;</span>;</span><br><span class="line">73:  require <span class="string">&quot;lib/mtr_gprof.pl&quot;</span>;</span><br><span class="line">74:  require <span class="string">&quot;lib/mtr_io.pl&quot;</span>;</span><br><span class="line">75:  require <span class="string">&quot;lib/mtr_lock_order.pl&quot;</span>;</span><br><span class="line">76:  require <span class="string">&quot;lib/mtr_misc.pl&quot;</span>;</span><br><span class="line">77:  require <span class="string">&quot;lib/mtr_process.pl&quot;</span>;</span><br><span class="line">78</span><br><span class="line">79:  our <span class="variable">$secondary_engine_support</span> = <span class="built_in">eval</span> <span class="string">&#x27;use mtr_secondary_engine; 1&#x27;</span>;</span><br><span class="line">80</span><br><span class="line">81   <span class="comment"># Global variable to keep track of completed test cases</span></span><br><span class="line">  DB&lt;1&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调试模式常用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">h       查看帮助文档</span><br><span class="line">c line  运行到指定行</span><br><span class="line">n       运行到下一行</span><br><span class="line">s       跳到函数内部运行</span><br><span class="line">l       查看代码</span><br><span class="line">q       退出</span><br></pre></td></tr></table></figure><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;作者：卢文双 资深数据库内核研发&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;去年年底通过微信公众号【数据库内核】设定了一个目标——2023 年要写一系列 特性介绍+内核解析 的文章（现阶段还是以 MySQL 为主）。&lt;br&gt;虽然关注者很少，但本着“说到就要做到”的原则，从这篇就开始了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;序言：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以前对 MySQL 测试框架 MTR 的使用，主要集中于 SQL 正确性验证。近期由于工作需要，深入了解了 MTR 的方方面面，发现 MTR 的能力不仅限于此，还支持单元测试、压力测试、代码覆盖率测试、内存错误检测、线程竞争与死锁等功能，因此，本着分享的精神，将其总结成一个系列。&lt;/p&gt;
&lt;p&gt;主要内容如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;入门篇：工作机制、编译安装、参数、指令示例、推荐用法、添加 case、常见问题、异常调试&lt;/li&gt;
&lt;li&gt;进阶篇：高阶用法，包括单元测试、压力测试、代码覆盖率测试、内存错误检测、线程竞争与死锁&lt;/li&gt;
&lt;li&gt;源码篇：分析 MTR 的源码&lt;/li&gt;
&lt;li&gt;语法篇：单元测试、压力测试、mysqltest 语法、异常调试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于个人水平有限，所述难免有错误之处，望雅正。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文是第一篇入门篇&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL" scheme="http://dbkernel.github.io/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://dbkernel.github.io/tags/MySQL/"/>
    
    <category term="测试框架" scheme="http://dbkernel.github.io/tags/%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MTR" scheme="http://dbkernel.github.io/tags/MTR/"/>
    
  </entry>
  
  <entry>
    <title>推荐 | 一体化实时 HTAP 数据库 StoneDB，如何替换 MySQL 并实现近百倍性能提升</title>
    <link href="http://dbkernel.github.io/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/"/>
    <id>http://dbkernel.github.io/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/</id>
    <published>2022-07-06T01:10:34.000Z</published>
    <updated>2022-07-20T05:10:47.947Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>本文首发于 2022-07-06 09:10:34</strong></p></blockquote><h1 id="推荐语"><a href="#推荐语" class="headerlink" title="推荐语"></a>推荐语</h1><p>本文为数据库圈内好友<strong>高日耀</strong>首发于“CSDN 微信公众号”的文章。</p><p>最近几年基于 PostgreSQL 开发的国产数据库如雨后春笋般涌现，而受限于 MySQL 的 GPL Licence（感兴趣的可移步我的博文<a href="https://dbkernel.github.io/2021/08/19/how-to-choose-open-source-licence/">《技术分享 | 如何为你的代码选择一个合适的开源协议？》</a>），二次开发必须开源，这导致基于 MySQL 开发的国产数据库相对较少（比如：万里开源的 <a href="https://github.com/GreatSQL/GreatSQL">GreatSQL</a>），因此，当听说 StoneDB 开源的消息时，我个人还是很兴奋的。</p><p>废话不多说，以下为正文。</p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>众所周知，MySQL 是世界上最流行的 OLTP 数据库之一，截至 2022 年它在整个数据库行业的市场占有率达到了 43.04%（数据来源：Slintel 网站）。许多企业将各种业务系统应用于 MySQL 上。然而，随着企业数据量的不断增加，除了在线业务逻辑的读写，数据库还要面对日益复杂的分析性业务需求，比如 BI 报表、可视化、大数据应用等。而 MySQL 原生的架构（基于流式迭代器模型 Volcano Iterator 的执行引擎，没有利用现代多核 CPU 并行处理能力，按行存储的存储引擎）在 AP 场景中存在天然的缺陷。针对这种情况，为了补足 MySQL 的 AP 能力缺陷，业内围绕 MySQL 做了很多解决方案。主要是围绕 MySQL 搭建的异构 HTAP 数据库系统。</p><p>什么是 HTAP ？在 2014 年，Gartner 给出了 HTAP 的严格定义，其目的是为了打破，事务型负载和分析型负载之间的“壁垒”, 使系统能够支持更多的“数据”在两个系统之间流动，以及以这些数据为基础的 “实时业务”的决策。</p><p>传统架构形式下，为了解决同时处理 TP 负载和 AP 负载的问题，通常采用一套 TP 系统加上一套 AP 系统的方式，TP 和 AP 之间通过 ETL 的方式进行数据同步的来满足业务对实时性的需求，这也是当前业界搭建 HTAP 的主流方案。</p><h1 id="业内围绕-MySQL-搭建-HTAP-主流方案"><a href="#业内围绕-MySQL-搭建-HTAP-主流方案" class="headerlink" title="业内围绕 MySQL 搭建 HTAP 主流方案"></a>业内围绕 MySQL 搭建 HTAP 主流方案</h1><p>我们先来看看业界主流的基于 MySQL 的 HTAP 解决方案。</p><h2 id="1-MySQL-Hadoop"><a href="#1-MySQL-Hadoop" class="headerlink" title="1. MySQL + Hadoop"></a>1. MySQL + Hadoop</h2><p>借助 Hadoop 体系，将 MySQL 的业务数据，通过 ETL 工具同步至开源大数据系统（如 Hive，Hadoop，Spark 等）搭建的数据仓库，再基于该数仓做数据分析。</p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/sync-mysql-data-to-hadoop.png" alt="MySQL 同步数据到 Hadoop"></p><h2 id="2-MySQL-数据湖"><a href="#2-MySQL-数据湖" class="headerlink" title="2. MySQL + 数据湖"></a>2. MySQL + 数据湖</h2><p>借助数据湖平台，通过 ETL 工具将 MySQL 数据同步至数据湖，再基于数据湖进行数据、报表、BI 等分析。</p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/sync-mysql-data-to-data-lake.png" alt="MySQL 同步数据到数据湖"></p><h2 id="3-MySQL-ClickHouse-Greenplum"><a href="#3-MySQL-ClickHouse-Greenplum" class="headerlink" title="3. MySQL + ClickHouse/Greenplum"></a>3. MySQL + ClickHouse/Greenplum</h2><p>通过 ETL 等数据迁移工具将 MySQL 数据迁移到 ClickHouse/Greenplum 做分析。</p><p>ClickHouse 官方在 20 年下半年发布了社区版 MaterializeMySQL 引擎 ，可以将 ClickHouse 作为 MySQL 的一个从库同步主节点数据，除了 ETL 工具，业内也有直接将 ClickHouse 作为一个 MySQL 从库直接挂载的方案。</p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/sync-mysql-data-to-greenplum-or-clickhouse.png" alt="MySQL 同步数据到 ClickHouse/Greenplum"></p><h2 id="4-基于多副本的-Divergent-Design"><a href="#4-基于多副本的-Divergent-Design" class="headerlink" title="4. 基于多副本的 Divergent Design"></a>4. 基于多副本的 Divergent Design</h2><p>比如兼容 MySQL 协议的 TiDB，在一个 Raft Group 其中一个副本上，通过自研列式存储 (TiFlash) 来响应复杂 AP 查询，并通过 TiDB 的智能路由功能来自动选取数据源，实现一套分布式 HTAP 数据库系统，在分布式领域这块做的是比较好的。</p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/htap-tidb.png" alt="TiDB HTAP 架构图"></p><h2 id="以上方案存在的问题"><a href="#以上方案存在的问题" class="headerlink" title="以上方案存在的问题"></a>以上方案存在的问题</h2><p>以上几种 HTAP 解决方案，虽然是行业内的主流，但依然存在着一些问题，包括：</p><ol><li>系统架构过重，运维复杂度较高；</li><li>TP 数据通过 ETL 方式同步到 AP 系统中，数据延时较大，难以满足服务对分析的实时性要求；</li><li>异构数据库组合，技术上需要维护两套数据库系统，涉及到众多技术栈，对技术人员要求较高；</li><li>NewSQL 系统，需要进行各种兼容性适配，适配工作会比较复杂，对技术人员要求也比较高。</li></ol><p>为此，我们带来了在 HTAP 方面的解决方案：StoneDB，一款开源的一体化实时 HTAP 数据库。</p><h1 id="StoneDB：完全兼容-MySQL-生态的一体化行列混合存储-HTAP-数据库"><a href="#StoneDB：完全兼容-MySQL-生态的一体化行列混合存储-HTAP-数据库" class="headerlink" title="StoneDB：完全兼容 MySQL 生态的一体化行列混合存储 HTAP 数据库"></a>StoneDB：完全兼容 MySQL 生态的一体化行列混合存储 HTAP 数据库</h1><p>StoneDB 是一款刚刚开源的基于原生 MySQL 的一体化实时 HTAP 数据库，用国内首创的一体化行列混存架构，以极低成本实现高性能的实时 HTAP 。</p><p>StoneDB 采用一体化的行列混合存储，跟分布式多副本 Divergent Design 做法不同，是在同一个数据库实例中采用行列混合存储的方案，高度集成，运维复杂度较低，用户使用体验更好。这套架构的设计初衷是用一套数据库，同时解决 TP 和 AP 的问题，<strong>更轻量，更优雅，更便捷。</strong> 目前国外厂商如 Oracle / SQL Server / DB2 等都采用了类似的方案，但是它们都不开源。</p><p>StoneDB 一体化架构图概览（v1.0）:</p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-architecture-v1.0.png" alt="StoneDB 一体化架构图概览（v1.0）"></p><p>StoneDB 以插件的方式接入 MySQL，通过 查询/写入接口和 MySQL server 层进行交互， 当前一体化架构主要特性有：</p><ul><li>按列式存储方式组织数据，并结合高效压缩算法，使得 StoneDB 在获得高性能的同时也具有存储成本优势。</li><li>基于知识网格（Knowledge Grid）的近似查询及并行处理等机制，使得 StoneDB 在处理海量数据以及复杂查询时候，能够最大限度的减少无关数据的 IO。</li><li>利用直方图，数据块位图等众多统计信息来进一步加速查询处理的速度。</li><li>采用带有延后重构模型的 Column-at-a-time 的面向列式存储的执行引擎，又进一步提高执行引擎的效率。</li><li>提供高速的数据载入能力。</li></ul><p>接下来我们看一下 StoneDB 的架构设计。</p><p><strong>架构设计：数据组织形式</strong></p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-data-form.png" alt="StoneDB 数据组织形式"></p><p>在 StoneDB 中，数据按列进行组织。这种数据组织形式，对各类压缩算法友好，可依据各列类型、数据等因素选择合适的高效压缩算法，以达到节约 IO 和 Memory 资源的目的。另外还具备以下优点 ：</p><ul><li>Cache Line 友好。</li><li>查询过程中，针对各列的运算并发执行,最后在内存中聚合完整记录集。</li><li>即席查询时，只需扫描特定列即可，无需消耗 IO 资源去读取其他列的值。</li><li>无需维护索引，支持任意列组合的即席查询。</li><li>可以提供基于知识网格能力， 提升数据查找效率。</li></ul><p><strong>架构设计：基于列的数据压缩</strong></p><p>正如上面所提到的，数据按列进行组织，列中所有记录的类型一致，可以根据数据类型选择对应的高效压缩算法，因为：</p><ul><li>列中重复值出现概率高，压缩效果明显。</li><li>数据节点大小固定，可以最大化压缩性能和效率。</li><li>根据特定的数值类型压缩（int，float，date/time，string 等）。</li></ul><p>StoneDB 可以支持多达 20+种自适应压缩算法，目前主要使用：</p><ul><li>PPM</li><li>LZ4</li><li>B2</li><li>Delta 等等</li></ul><p><strong>架构设计：数据组织结构与知识网格</strong></p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-data-structure-and-knowledge-grid.png" alt="StoneDB 数据组织结构与知识网格"></p><p>StoneDB 的查询处理部分如上图所示。查询处理作为整个数据库的大脑，查询优化算法好坏，直接影响查询效率。</p><p>我们再来讨论一下数据组织结构和知识网格。之前在介绍架构的时候，我们也提到数据的按列组织，而且在每个列中，数据又按更细粒度的数据块进行划分。该种方式所带来的优点有：</p><p>（1）物理数据按固定数据块，进行存储，通常称之为：Data Node，通常为：128KB，系统方便进行 IO 效率的优化。同时，也可为系统提供基于块（Block）的高效压缩/加密算法。</p><p>（2）知识网格可以为查询优化器，执行和压缩算法等提供支持。例如：基于知识网格的查询，优化器会利用知识网格来决定需要抓取哪些 Data Node 来执行数据操作。</p><p>我们解释一下相关概念，以下数据节点、元数据节点皆为逻辑概念：</p><ul><li>数据节点（Data Node，DN）：数据块大小固定（典型值 128KB），优化 IO 效率，提供基于块（Block）的高效压缩/加密算法。</li><li>知识网格（Knowledge Grid，KG）：用于元数据存储。</li><li>元数据节点（Metadata Node，MDN）：描述数据节点的元数据信息。由知识节点（Knowledge Node，KN）组成，为查询优化器，计划执行和压缩算法等提供支持。</li></ul><p><strong>架构设计 - 查询：知识网格（ Knowlegde Grid ）概览</strong></p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-knowledge-grid-overview.png" alt="StoneDB 知识网格（ Knowlegde Grid ）概览"></p><p><strong>架构设计 - 查询：基于 Knowlegde Grid 的优化器</strong></p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-knowledge-grid-optimizer.png" alt="StoneDB 知识网格（ Knowlegde Grid ）优化器"></p><p>如上图所示：首先由查询优化器进行基于知识网格的优化，对其所需要处理的数据进行剪枝，其采取的策略为：对于满足查询条件的数据节点，即关联性数据节点，对其采取直接读取并返回的策略；对不确定性数据节点，先进行解压，然后在进行基于查询条件的处理，最后返回处理结果；而对与查询条件完全不相关的数据节点，则直接忽略。</p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-data-pruning-1.png" alt="StoneDB 数据剪枝"></p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-data-pruning-2.png" alt="StoneDB 数据剪枝"></p><p>然后再基于知识网格中的信息进行粗糙集（Rough Set）构建，并确定此次请求所需使用到的数据节点。基于 KN 和 MD ，确定查询涉及到的 DN 节点集合，并将 DN 节点分类。执行计划构建时，会完全规避非关联 DN，仅读取并解压关联 DN，按照特定情况决定是否读取不确定的 DN。如果查询请求的结果可以直接从元数据节点（MDN）中产生（例如 count，max，min 等操作），则直接返回元数据节点中的数据，无需访问物理数据文件。</p><p><strong>架构设计 - 查询：处理流程</strong></p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-query-processing-process.png" alt="StoneDB 查询处理流程"></p><p>例如对于一个查询请求，通过 KG（知识网格）可以确定 3 个关联性 DN 和 1 个不确定性 DN。如果，此请求包含聚合函数。此时只需要解压不确定性 DN，并计算聚合值，再结合 3 个关联性 DN 中 MD 上的统计值即可得出最终结果。如果，此请求需要返回具体数据，那么无论关联性 DN 还是不确定性 DN，都需要读取数据块并进行并行解压缩，以便获得最终结果集。</p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-query-processing-example.png" alt="StoneDB 查询处理示例"></p><p>比如，执行一条 <code>select * from xx where seller = 86</code>，内部执行流程如下：</p><ol><li><p>执行计划优化与执行：</p><ol><li>基于知识网格进行 Cost-based 优化</li><li>IO 线程池维护</li><li>内存分配与管理</li></ol></li><li><p>SMP 支持（并发查询）</p></li><li><p>向量化执行</p></li></ol><h1 id="完全兼容-MySQL-生态的-StoneDB-一体化-HTAP-系统的优势"><a href="#完全兼容-MySQL-生态的-StoneDB-一体化-HTAP-系统的优势" class="headerlink" title="完全兼容 MySQL 生态的 StoneDB 一体化 HTAP 系统的优势"></a>完全兼容 MySQL 生态的 StoneDB 一体化 HTAP 系统的优势</h1><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-product-advantage.png" alt="StoneDB 产品优势"></p><p>完全兼容 MySQL 的 StoneDB 一体化 HTAP 数据库。其具有以下几个特点 ：</p><p>（1）完全兼容 MySQL。无论是语法还是生态 MySQL 用户均可以无缝切换至 StoneDB。</p><p>（2）事务、分析一体化。无需 ETL，事务型数据实时同步到分析引擎。使得用户可以获取实时业务分析结果。</p><p>（3）<strong>完全开源。</strong></p><p>（4）相较于 MySQL 提供<strong>10-100 倍的 AP 能力。</strong> 亿级多表关联急速响应，决策结果无需等待。</p><p>（5）<strong>10 倍导入速度。</strong> 由于 AP 场景下，分析数据量巨大，高效导入速度，能给带来良好的用户体验。</p><p>（6）<strong>1/10 的 TCO 成本</strong>，StoneDB 拥有高效的压缩算法，无缝的业务迁移能力，还有它的简单架构，都能为用户带来 TCO 的降低。</p><h1 id="StoneDB-2-0-将带来全新架构"><a href="#StoneDB-2-0-将带来全新架构" class="headerlink" title="StoneDB 2.0 将带来全新架构"></a>StoneDB 2.0 将带来全新架构</h1><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-architecture-v2.0.png" alt="StoneDB 2.0 全新架构"></p><p>上文介绍的是 StoneDB 单机版本的 1.0 架构。虽然 StoneDB 基于磁盘的列存引擎在 AP 场景下的表现已经非常出色，但是毕竟其是基于磁盘的解决方案。我们知道，IO 和内存在数据库领域又属于极度宝贵的资源，以为进一步提升 StoneDB 的性能，同时也为了减少 AP 负载在执行时候对于 TP 负载的影响。未来我们将在 2.0 版本中将推出了类似于 HEATWAVE 的基于内存计算的列存引擎的全新架构。该版本将基于 MySQL 8.0 构建，基于此引擎我们将实现 AP 负载的全内存计算。</p><p>有关于 2.0 更多的信息欢迎关注 StoneDB 的官方网站 <a href="https://stonedb.io/">https://stonedb.io</a></p><p>同时，StoneDB 在 6 月 29 日已宣布正式开源。如果您感兴趣，可以通过下方链接查看 StoneDB 源码、阅读文档，期待你的贡献！</p><p>StoneDB 开源仓库：<a href="https://github.com/stoneatom/stonedb">https://github.com/stoneatom/stonedb</a></p><blockquote><p>作者：高日耀</p><p>Title：StoneDB PMC、HTAP 内核架构师</p><p>简介：毕业于华中科技大学，喜欢研究主流数据库架构和源码。8 年的数据库内核开发经验，曾从事分布式数据库 CirroData 、RadonDB 和 TDengine 的内核研发工作，现担任 StoneDB 的内核架构师及 StoneDB 项目 PMC。</p></blockquote><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本文首发于 2022-07-06 09:10:34&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;推荐语&quot;&gt;&lt;a href=&quot;#推荐语&quot; class=&quot;headerlink&quot; title=&quot;推荐语&quot;&gt;&lt;/a&gt;推荐语&lt;/h1&gt;&lt;p&gt;本文为数据库圈内好友&lt;strong&gt;高日耀&lt;/strong&gt;首发于“CSDN 微信公众号”的文章。&lt;/p&gt;
&lt;p&gt;最近几年基于 PostgreSQL 开发的国产数据库如雨后春笋般涌现，而受限于 MySQL 的 GPL Licence（感兴趣的可移步我的博文&lt;a href=&quot;https://dbkernel.github.io/2021/08/19/how-to-choose-open-source-licence/&quot;&gt;《技术分享 | 如何为你的代码选择一个合适的开源协议？》&lt;/a&gt;），二次开发必须开源，这导致基于 MySQL 开发的国产数据库相对较少（比如：万里开源的 &lt;a href=&quot;https://github.com/GreatSQL/GreatSQL&quot;&gt;GreatSQL&lt;/a&gt;），因此，当听说 StoneDB 开源的消息时，我个人还是很兴奋的。&lt;/p&gt;
&lt;p&gt;废话不多说，以下为正文。&lt;/p&gt;</summary>
    
    
    
    <category term="StoneDB" scheme="http://dbkernel.github.io/categories/StoneDB/"/>
    
    
    <category term="MySQL" scheme="http://dbkernel.github.io/tags/MySQL/"/>
    
    <category term="StoneDB" scheme="http://dbkernel.github.io/tags/StoneDB/"/>
    
  </entry>
  
  <entry>
    <title>技术分享 | 如何为你的代码选择一个合适的开源协议？</title>
    <link href="http://dbkernel.github.io/2021/08/19/how-to-choose-open-source-licence/"/>
    <id>http://dbkernel.github.io/2021/08/19/how-to-choose-open-source-licence/</id>
    <published>2021-08-18T16:37:15.000Z</published>
    <updated>2023-04-25T02:31:08.769Z</updated>
    
    <content type="html"><![CDATA[<p><strong>作者：卢文双 资深数据库内核研发</strong></p><p>近期公司全面拥抱开源，在选择开源协议方面遇到了一些问题，查阅了很多资料，特此总结~~</p><span id="more"></span><blockquote><p><strong>本文首发于 2021-08-19 00:37:15</strong></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于很多刚踏入开源软件这个行业的小伙伴来说，在编码过程中难免会用到其他人的成果，如果你足够细心，很容易注意到即使是一小段代码，优秀的作者都在文件开头附上一段关于版权的声明，比如 <code>Licensed under the MIT license</code>。同时，一些博客也会标明”此文章采用 <code>CC BY 4.0 CN</code> 协议“。</p><p>如果我们拷贝了别人的代码或文章却没注意版权问题，在国外法律意识特别强的环境下（国内版权意识也在逐步加强），那么我们的作品会因触犯别人的权益而违法。即使是最开放的开源协议，最低要求也是保留原作者对代码的声明，所以<code>开源不等于免费，也不等于没有约束</code>。</p><p><strong>何为 LICENCE？</strong></p><blockquote><p>LICENCE 是软件的授权许可，详细说明了获得代码后拥有的权利，哪些操作是允许的，哪些操作是禁止的。软件的版权许可证可有很多方式，本文仅限于讨论开源软件协议 Open Source License。</p></blockquote><p>对于大多数人来说，没必要花大把时间去写许可协议，选择一种比较流行的开源协议就足够了，省时省力，更便于自己作品的传播，于人于己都有利。</p><p><strong>PS：</strong></p><blockquote><p>说句题外话，很多国外开发者在尊重他人劳动成果方面做得很好，如果 A 的作品是因为 B 的作品的启发而来，A 甚至都没有使用 B 任何一句代码，但 A 会在他的作品里面指明是受到了 B 的启发：<code>Inspired by XXX link: http://www.xxxx.com</code>。</p></blockquote><h2 id="快速选择开源协议"><a href="#快速选择开源协议" class="headerlink" title="快速选择开源协议"></a>快速选择开源协议</h2><p>如果你不想了解太多，只是想要一个简直直接的答案，下面给出的建议或许适合你。本小节关于协议地址来自于 GitHub <a href="http://choosealicense.com/">choosealicence</a> 。</p><p><strong>简单宽松的协议：</strong></p><blockquote><p>如果你只想要一个简单点的协议不想太麻烦的话。</p><p><a href="http://choosealicense.com/licenses/mit">MIT 协议</a>相对宽松，此协议允许别人以任何方式使用你的代码同时署名原作者，但原作者不承担代码使用后的风险，当然也没有技术支持的义务。</p></blockquote><p><strong>考虑有专利的情况：</strong></p><blockquote><p>如果你的作品中涉及到专利相关。</p><p><a href="http://choosealicense.com/licenses/apache/">Apache 协议</a>也是个相对宽松的协议，与 MIT 类似，但它指明了作者对用户专利上的一些授权（我的理解是软件作品中含有专利，但它授权你可以免费使用）。</p></blockquote><p><strong>促进代码分享：</strong></p><blockquote><p>如果你在乎作品的传播和别人的修改，希望别人也以相同的协议分享出来。</p><p>GPL（<a href="http://choosealicense.com/licenses/gpl-v2">V2</a>或<a href="http://choosealicense.com/licenses/gpl-v3">V3</a>）协议要求代码分发者或者以此代码为基础开发出来的衍生作品需要以同样的协议来发布，也必须开源，因此，该协议具有”传染性“。</p></blockquote><p>乌克兰程序员<a href="http://pbagwl.com/post/5078147450/description-of-popular-software-licenses">Paul Bagwell</a>，画了一张分析图，说明应该怎么选择。只用两分钟，你就能搞清楚这六种开源协议之间的最大区别。<br><img src="/2021/08/19/how-to-choose-open-source-licence/paul-bagwell-licence.jpeg" alt="Paul Bagwell的LICENCE分析图"></p><p>国内大神阮一峰的汉化版本：<br><img src="/2021/08/19/how-to-choose-open-source-licence/ruan-yi-feng-licence.jpeg" alt="阮一峰的LICENCE分析图"></p><h2 id="主流开源许可协议（Open-Source-License）"><a href="#主流开源许可协议（Open-Source-License）" class="headerlink" title="主流开源许可协议（Open Source License）"></a>主流开源许可协议（Open Source License）</h2><p>世界上的开源许可协议（Open Source License）大概有<a href="https://www.gnu.org/licenses/license-list.html">上百种</a>，常用的开源软件协议大致有：</p><ul><li><a href="https://www.gnu.org/licenses/gpl-3.0.html">GPL</a></li><li><a href="https://www.gnu.org/licenses/lgpl-3.0.html">LGPL</a></li><li><a href="https://opensource.org/licenses/BSD-3-Clause">BSD</a></li><li><a href="https://opensource.org/licenses/mit-license.php">MIT</a></li><li><a href="https://opensource.org/licenses/MPL-2.0">Mozilla</a></li><li><a href="http://www.apache.org/licenses/LICENSE-2.0">Apache</a></li></ul><p>由宽松到严紧排序，常用的开源协议有：</p><ol><li>MIT</li><li>BSD</li><li>Apache</li><li>LGPL</li><li>GPL</li></ol><p>主要区别：</p><ul><li>MIT、BSD 开源协议都源自大学，体现了简单、开放和包容的特点。</li><li>MIT、BSD、Apache 三者都支持闭源的后续开发。</li><li>GPL、LGPL 传染性开源，编译的代码里用了这里的代码，都必须开源。</li></ul><h3 id="MIT"><a href="#MIT" class="headerlink" title="MIT"></a>MIT</h3><p>来源于大学，MIT 开源协议是史上最为简洁、慷慨的开源协议之一。作者只想保留版权，而无任何其他了限制。也就是说，你必须在你的发行版里包含原许可协议的声明，无论你是以二进制发布的还是以源代码发布的。</p><p><strong>特点：</strong></p><ul><li>用户可以拿你的代码做任何想做的事情。</li><li>用户在项目副本中要包含版权声明和许可声明。</li><li>你无需承担任何责任。</li></ul><p><strong>代表作品：</strong></p><ul><li><a href="https://github.com/jquery/jquery">jQuery</a></li><li><a href="https://github.com/rails/rails">Rails</a> 等。</li></ul><h3 id="BSD"><a href="#BSD" class="headerlink" title="BSD"></a>BSD</h3><ul><li><a href="https://opensource.org/licenses/BSD-2-Clause">BSD-2-Clause</a></li><li><a href="https://opensource.org/licenses/BSD-3-Clause">BSD-3-Clause</a></li></ul><p>BSD 可证也来源于大学，与 MIT 差不多，也非常简单、慷慨。</p><p>BSD 开源协议是一个给于使用者很大自由的协议。基本上使用者可以”为所欲为”,可以自由的使用、修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。前提是当你发布使用了 BSD 协议的代码，或者以 BSD 协议代码为基础开发自己的产品时，需要满足三个条件：</p><ol><li>如果再发布的产品中包含源代码，则在源代码中必须带有原代码中的 BSD 协议。</li><li>如果再发布的只是二进制类库/软件，则需要在类库/软件的文档和版权声明中包含原来代码中的 BSD 协议。</li><li>不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。</li></ol><p>BSD 开源协议鼓励代码共享，但需要尊重代码作者的著作权。BSD 开源协议允许使用者修改和重新发布代码，也允许使用或在 BSD 代码上开发商业软件发布、销售，是对商业集成很友好的协议。因此，很多公司在选用开源产品的时候都首选 BSD 协议。</p><h3 id="Apache-Licence"><a href="#Apache-Licence" class="headerlink" title="Apache Licence"></a>Apache Licence</h3><ul><li><a href="http://www.apache.org/licenses/LICENSE-2.0">Apache License, Version 2.0</a></li><li><a href="https://www.apache.org/licenses/LICENSE-1.1">Apache License, Version 1.1</a></li><li><a href="https://www.apache.org/licenses/LICENSE-1.0">Apache License, Version 1.0</a></li></ul><p>来自 Apache，类似 MIT 开源协议，但它重视专利权。</p><p>Apache Licence 是著名的非盈利开源组织 Apache 采用的协议。该协议和 BSD 类似，同样鼓励代码共享和尊重原作者的著作权，同样允许修改代码、再发布（作为开源或商业软件）。需要满足的条件也和 BSD 类似：</p><ol><li>需要为使用代码的用户提供一份 Apache Licence 。</li><li>如果你修改了代码，需要在被修改的文件中说明。</li><li>在延伸的代码中（修改和由源代码衍生的代码中）需要带有原来代码中的协议、商标、专利声明和其他原作者规定需要包含的说明。</li><li>如果再发布的产品中包含一个<code>Notice</code>文件，则在 Notice 文件中需要带有 Apache Licence 。你可以在<code>Notice</code>中增加自己的许可，但不可对 Apache Licence 构成更改。</li></ol><p>Apache Licence 也是对商业应用友好的许可，使用者也可以在需要的时候修改代码来满足需要并作为开源或商业产品发布/销售。</p><p><strong>代表作品：</strong></p><ul><li><a href="https://github.com/apache/echarts">echarts</a></li><li><a href="https://github.com/apache/superset">superset</a></li><li><a href="https://github.com/apache/dubbo">dubbo</a></li><li><a href="https://github.com/apache/spark">spark</a></li></ul><h3 id="LGPL"><a href="#LGPL" class="headerlink" title="LGPL"></a>LGPL</h3><p>LGPL（GNU LESSER GENERAL PUBLIC LICENSE）来自于自由软件联盟 GNU，可以翻译为更宽松的 GPL 协议，也属于传染性开源协议。</p><p>LGPL 是 GPL 的一个主要为类库使用设计的开源协议。和<code>GPL要求任何使用/修改/衍生之GPL类库的的软件必须采用GPL协议</code>不同，LGPL 允许商业软件通过类库引用(link)方式使用 LGPL 类库而不需要开源商业软件的代码。这使得采用 LGPL 协议的开源代码可以被商业软件作为类库引用并发布和销售。</p><p>但是如果修改 LGPL 协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用 LGPL 协议，因此，LGPL 协议的开源代码很适合作为第三方类库被商业软件引用，但不适合希望以 LGPL 协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。</p><p>GPL/LGPL 都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品。</p><h3 id="GPL"><a href="#GPL" class="headerlink" title="GPL"></a>GPL</h3><p>GPL（GNU GENERAL PUBLIC LICENSE）来源于自由软件联盟 GNU，GPL/LGPL 侧重于代码及衍生代码的开源与免费使用。</p><p>GPL 协议的主要内容是只要在一个软件中使用（”使用”指类库引用，修改后的代码或者衍生代码）GPL 协议的产品，则该软件产品必须也采用 GPL 协议，既必须也是开源和免费。<strong>这就是所谓的”传染性”</strong>。</p><p>由于 GPL 严格要求使用了 GPL 类库的软件产品必须使用 GPL 协议，对于使用 GPL 协议的开源代码，商业软件或者对代码有保密要求的部门就不适合集成/采用作为类库和二次开发的基础。</p><p>我们很熟悉的 Linux 就是采用了 GPL。GPL 协议和 BSD, Apache Licence 等鼓励代码重用的许可很不一样。GPL 的出发点是<code>代码的开源/免费使用/引用/修改</code>和<code>衍生代码的开源/免费使用</code>，但<code>不允许</code>修改后和衍生的代码做为<code>闭源</code>的商业软件发布和销售。</p><p>其它细节和 BSD/Apache 等协议类似。</p><p><strong>代表作品：</strong></p><ul><li><a href="https://github.com/torvalds/linux">Linux</a></li></ul><h2 id="更多开源协议对比"><a href="#更多开源协议对比" class="headerlink" title="更多开源协议对比"></a>更多开源协议对比</h2><p>下方表格中出现的用词的解释：</p><ul><li><strong>协议和版权信息</strong>(License and copyright notice)：在代码中保留作者提供的协议和版权信息。</li><li><strong>声明变更</strong>(State Changes)：在代码中声明对原来代码的重大修改及变更。</li><li><strong>公开源码</strong>(Disclose Source)：代码必需公开。</li><li><strong>库引用</strong>(Library usage)：该库可以用于商业软件中。</li><li><strong>责任承担</strong>(Hold Liable)：代码的作者承担代码使用后的风险及产生的后果。如果禁止，那么作者将不会承担责任，可以理解为免责条款。</li><li><strong>商标使用</strong>(Use Trademark)：可以使用作者的姓名，作品的 Logo，或商标。</li><li><strong>附加协议</strong>(Sublicensing)：允许在软件分发传播过程中附加上原来没有的协议条款等。</li></ul><table><thead><tr><th>协议</th><th>描述</th><th>要求</th><th>允许</th><th>禁止</th></tr></thead><tbody><tr><td><a href="http://choosealicense.com/licenses/apache/">Apache</a></td><td>一个比较宽松且简明地指出了专利授权的协议。</td><td>1. <font color=#0000FF>协议和版权信息</font><br/>2. <font color=#0000FF>声明变更</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>专利授权</font><br/>5. <font color=#00EE00>私用</font><br/>6. <font color=#00EE00>附加协议</font></td><td>1. <font color=#FF3030>责任承担</font>（作者免责）<br/>2. <font color=#FF3030>商标使用</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/gpl-v2/">GPL</a></td><td>应用最广泛的开源协议，拥有较强的版权自由（copyleft）要求。<br/>衍生代码的分发需开源并且也要遵守此协议。<br/>此协议有许多变种，不同变种的要求略有不同。</td><td>1. <font color=#0000FF>公开源码</font><br/>2. <font color=#0000FF>协议和版权信息</font><br/>3. <font color=#0000FF>声明变更</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>专利授权</font><br/>5. <font color=#00EE00>私用</font></td><td>1. <font color=#FF3030>责任承担</font><br/>2. <font color=#FF3030>附加协议</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/mit/">MIT</a></td><td>此协议宽松简单。在适当标明来源及免责的情况下，<br/>它允许你对代码进行任何形式的使用。</td><td>1. <font color=#0000FF>协议和版权信息</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>私用</font><br/>5. <font color=#00EE00>附加协议</font></td><td>1. <font color=#FF3030>责任承担</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/artistic/">Artistic</a></td><td>Perl 社区最钟爱此协议。<br/>要求更改后的软件不能影响原软件的使用。</td><td>1. <font color=#0000FF>协议和版权信息</font><br/>2. <font color=#0000FF>声明变更</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>私用</font><br/>5. <font color=#00EE00>附加协议</font></td><td>1. <font color=#FF3030>责任承担</font><br/>2. <font color=#FF3030>商标使用</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/bsd/">BSD</a></td><td>较为宽松的协议，有两个变种<a href="http://choosealicense.com/licenses/bsd"><strong>BSD 2-Clause</strong></a> 和<a href="http://choosealicense.com/licenses/bsd-3-clause"><strong>BSD 3-Clause</strong></a>，<br/>两者都与 MIT 协议只存在细微差异。</td><td>1. <font color=#0000FF>协议和版权信息</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>私用</font><br/>5. <font color=#00EE00>附加协议</font></td><td>1. <font color=#FF3030>责任承担</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/eclipse/">Eclipse</a></td><td>对商用非常友好的协议，可以用于软件的商业授权。<br/>包含对专利的优雅授权，也可以对相关代码应用商业协议。</td><td>1. <font color=#0000FF>公开源码</font><br/>2. <font color=#0000FF>协议和版权信息</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>专利授权</font><br/>5. <font color=#00EE00>私用</font><br/>6. <font color=#00EE00>附加协议</font></td><td>1. <font color=#FF3030>责任承担</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/lgpl-v2.1/">LGPL</a></td><td>主要用于一些代码库。<br/>衍生代码可以以此协议发布（也可以用其他协议），<br/>但与此协议相关的代码必需遵循此协议。</td><td>1. <font color=#0000FF>公开源码</font><br/>2. <font color=#0000FF>库引用</font><br/>3. <font color=#0000FF>协议和版权信息</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>专利授权</font><br/>5. <font color=#00EE00>私用</font><br/>6. <font color=#00EE00>附加协议</font></td><td>1. <font color=#FF3030>责任承担</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/mozilla/">Mozilla</a></td><td>Mozilla Public License(MPL 2.0)是由 Mozilla 基金创建维护的，<br/>旨在较为宽松的 BSD 协议和更加互惠的 GPL 协议中找一个折衷点。</td><td>1. <font color=#0000FF>公开源码</font><br/>2. <font color=#0000FF>协议和版权信息</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>专利授权</font><br/>5. <font color=#00EE00>私用</font><br/>6. <font color=#00EE00>附加协议</font></td><td>1. <font color=#FF3030>责任承担</font><br/>2. <font color=#FF3030>商标使用</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/no-license/">No license</a></td><td>作者保留所有权利，不允许他人分发，复制或者创造衍生物。<br/>当你将代码发表在一些网站上时需要遵守该网站的协议，<br/>此协议可能包含了一些对你劳动成果的授权许可。<br/>比如将代码发布到 GitHub，那么就必须同意别人查看和 fork。</td><td>1. <font color=#0000FF>协议和版权信息</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>私用</font></td><td>1. <font color=#FF3030>分发</font><br/>2. <font color=#FF3030>修改</font><br/>3. <font color=#FF3030>附加协议</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/unlicense/">Public domain dedication</a></td><td>在许多国家，默认版权归作者自动拥有，<br/>所以<a href="http://unlicense.org/">Unlicense</a>协议提供了一种通用的模板。<br/>此协议表明作者放弃版权，将劳动成果无私贡献出来，<br/>会丧失作品全部权利，包括在 MIT/X11 中定义的无担保权利。</td><td>1. <font color=#0000FF>N/A</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>私用</font></td><td>1. <font color=#FF3030>责任承担</font></td></tr></tbody></table><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/github/choosealicense.com">https://github.com/github/choosealicense.com</a></li><li><a href="https://opensource.org/licenses">https://opensource.org/licenses</a></li><li><a href="https://www.cnblogs.com/Wayou/p/how_to_choose_a_license.html">https://www.cnblogs.com/Wayou/p/how_to_choose_a_license.html</a></li><li><a href="https://zhuanlan.zhihu.com/p/87855729">https://zhuanlan.zhihu.com/p/87855729</a></li></ul><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;作者：卢文双 资深数据库内核研发&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;近期公司全面拥抱开源，在选择开源协议方面遇到了一些问题，查阅了很多资料，特此总结~~&lt;/p&gt;</summary>
    
    
    
    <category term="通用" scheme="http://dbkernel.github.io/categories/%E9%80%9A%E7%94%A8/"/>
    
    
    <category term="开源协议" scheme="http://dbkernel.github.io/tags/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE/"/>
    
    <category term="开源许可证" scheme="http://dbkernel.github.io/tags/%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81/"/>
    
    <category term="LICENCE" scheme="http://dbkernel.github.io/tags/LICENCE/"/>
    
    <category term="github" scheme="http://dbkernel.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>源码分析 | ClickHouse和他的朋友们（15）Group By 为什么这么快</title>
    <link href="http://dbkernel.github.io/2021/01/26/clickhouse-and-friends-15-groupby/"/>
    <id>http://dbkernel.github.io/2021/01/26/clickhouse-and-friends-15-groupby/</id>
    <published>2021-01-26T13:31:12.000Z</published>
    <updated>2022-07-20T02:20:48.778Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2021-01-26 21:31:12</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2021/01/21/clickhouse-and-friends-groupby/">https://bohutang.me/2021/01/21/clickhouse-and-friends-groupby/</a><br>以下为正文。</p></blockquote><p>在揭秘 ClickHouse Group By 之前，先聊聊数据库的性能对比测试问题。</p><p>在虎哥看来，一个“讲武德”的性能对比测试应该提供什么信息呢？</p><p>首先要尊重客观事实，在什么场景下，x 比 y 快？<br>其次是为什么 x 会比 y 快？</p><p>如果以上两条都做到了，还有一点也比较重要： x 的优势可以支撑多久？ 是架构等带来的长期优势，还是一袋烟的优化所得，是否能持续跟上自己的灵魂。</p><p>如果只是贴几个妖艳的数字，算不上是 benchmark，而是 benchmarket。</p><p>好了，回到 Group By 正题。</p><p>相信很多同学已经体验到 ClickHouse Group By 的出色性能，本篇就来分析下快的原因。</p><p>首先安慰一下，ClickHouse 的 Group By 并没有使用高大上的黑科技，只是摸索了一条相对较优的方案。</p><h2 id="一条-SQL"><a href="#一条-SQL" class="headerlink" title="一条 SQL"></a>一条 SQL</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">sum</span>(number) <span class="keyword">FROM</span> numbers(<span class="number">10</span>) <span class="keyword">GROUP</span> <span class="keyword">BY</span> number <span class="operator">%</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>我们就以这条简单的 SQL 作为线索，看看 ClickHouse 怎么实现 Group By 聚合。</p><h2 id="1-生成-AST"><a href="#1-生成-AST" class="headerlink" title="1. 生成 AST"></a>1. 生成 AST</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN AST</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">sum</span>(number)</span><br><span class="line"><span class="keyword">FROM</span> numbers(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> number <span class="operator">%</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">┌─explain─────────────────────────────────────┐</span><br><span class="line">│ SelectWithUnionQuery (children <span class="number">1</span>)           │</span><br><span class="line">│  ExpressionList (children <span class="number">1</span>)                │</span><br><span class="line">│   SelectQuery (children <span class="number">3</span>)                  │</span><br><span class="line">│    ExpressionList (children <span class="number">1</span>)              │</span><br><span class="line">│     <span class="keyword">Function</span> <span class="built_in">sum</span> (children <span class="number">1</span>)               │  <span class="operator">/</span><span class="operator">/</span> sum 聚合</span><br><span class="line">│      ExpressionList (children <span class="number">1</span>)            │</span><br><span class="line">│       Identifier number                     │</span><br><span class="line">│    TablesInSelectQuery (children <span class="number">1</span>)         │</span><br><span class="line">│     TablesInSelectQueryElement (children <span class="number">1</span>) │</span><br><span class="line">│      TableExpression (children <span class="number">1</span>)           │</span><br><span class="line">│       <span class="keyword">Function</span> numbers (children <span class="number">1</span>)         │</span><br><span class="line">│        ExpressionList (children <span class="number">1</span>)          │</span><br><span class="line">│         Literal UInt64_10                   │</span><br><span class="line">│    ExpressionList (children <span class="number">1</span>)              │</span><br><span class="line">│     <span class="keyword">Function</span> modulo (children <span class="number">1</span>)            │  <span class="operator">/</span><span class="operator">/</span> number <span class="operator">%</span> <span class="number">3</span> 函数</span><br><span class="line">│      ExpressionList (children <span class="number">2</span>)            │</span><br><span class="line">│       Identifier number                     │</span><br><span class="line">│       Literal UInt64_3                      │</span><br><span class="line">└─────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="2-生成-Query-Plan"><a href="#2-生成-Query-Plan" class="headerlink" title="2. 生成 Query Plan"></a>2. 生成 Query Plan</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">sum</span>(number)</span><br><span class="line"><span class="keyword">FROM</span> numbers(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> number <span class="operator">%</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">┌─explain───────────────────────────────────────────────────────────────────────┐</span><br><span class="line">│ Expression ((Projection <span class="operator">+</span> Before <span class="keyword">ORDER</span> <span class="keyword">BY</span>))                                   │</span><br><span class="line">│   Aggregating                                                                 │ <span class="operator">/</span><span class="operator">/</span> sum 聚合</span><br><span class="line">│     Expression (Before <span class="keyword">GROUP</span> <span class="keyword">BY</span>)                                              │ <span class="operator">/</span><span class="operator">/</span> number <span class="operator">%</span> <span class="number">3</span></span><br><span class="line">│       SettingQuotaAndLimits (<span class="keyword">Set</span> limits <span class="keyword">and</span> quota after reading <span class="keyword">from</span> storage) │</span><br><span class="line">│         ReadFromStorage (SystemNumbers)                                       │</span><br><span class="line">└───────────────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>代码主要在 <a href="https://github.com/ClickHouse/ClickHouse/blob/27ddf78ba572b893cb5351541f566d1080d8a9c6/src/Interpreters/InterpreterSelectQuery.cpp#L1063">InterpreterSelectQuery::executeImpl@Interpreters/InterpreterSelectQuery.cpp</a></p><h2 id="3-生成-Pipeline"><a href="#3-生成-Pipeline" class="headerlink" title="3. 生成 Pipeline"></a>3. 生成 Pipeline</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN PIPELINE</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">sum</span>(number)</span><br><span class="line"><span class="keyword">FROM</span> numbers(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> number <span class="operator">%</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">┌─explain───────────────────────┐</span><br><span class="line">│ (Expression)                  │</span><br><span class="line">│ ExpressionTransform           │</span><br><span class="line">│   (Aggregating)               │</span><br><span class="line">│   AggregatingTransform        │  <span class="operator">/</span><span class="operator">/</span> sum 计算</span><br><span class="line">│     (Expression)              │</span><br><span class="line">│     ExpressionTransform       │  <span class="operator">/</span><span class="operator">/</span> number <span class="operator">%</span> <span class="number">3</span> 计算</span><br><span class="line">│       (SettingQuotaAndLimits) │</span><br><span class="line">│         (ReadFromStorage)     │</span><br><span class="line">└───────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="4-执行-Pipeline"><a href="#4-执行-Pipeline" class="headerlink" title="4. 执行 Pipeline"></a>4. 执行 Pipeline</h2><p>Pipeline 是从底部往上逐一执行。</p><h3 id="4-1-ReadFromStorage"><a href="#4-1-ReadFromStorage" class="headerlink" title="4.1 ReadFromStorage"></a>4.1 ReadFromStorage</h3><p>首先从 ReadFromStorage 执行，生成一个 block1， 数据如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">┌─number─┐</span><br><span class="line">│      <span class="number">0</span> │</span><br><span class="line">│      <span class="number">1</span> │</span><br><span class="line">│      <span class="number">2</span> │</span><br><span class="line">│      <span class="number">3</span> │</span><br><span class="line">│      <span class="number">4</span> │</span><br><span class="line">│      <span class="number">5</span> │</span><br><span class="line">│      <span class="number">6</span> │</span><br><span class="line">│      <span class="number">7</span> │</span><br><span class="line">│      <span class="number">8</span> │</span><br><span class="line">│      <span class="number">9</span> │</span><br><span class="line">└────────┘</span><br><span class="line">number类型为 UInt64</span><br></pre></td></tr></table></figure><h3 id="4-2-ExpressionTransform"><a href="#4-2-ExpressionTransform" class="headerlink" title="4.2 ExpressionTransform"></a>4.2 ExpressionTransform</h3><p>ExpressionTransform 包含了 2 个 action:</p><ol><li>名字为 number，type 为 INPUT</li><li>名字为 <code>modulo(number, 3)</code>， type 为 FUNCTION</li></ol><p>经过 ExpressionTransform 运行处理后生成一个新的 block2， 数据如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">┌─number─┬─modulo(number, <span class="number">3</span>)─┐</span><br><span class="line">│      <span class="number">0</span> │                 <span class="number">0</span> │</span><br><span class="line">│      <span class="number">1</span> │                 <span class="number">1</span> │</span><br><span class="line">│      <span class="number">2</span> │                 <span class="number">2</span> │</span><br><span class="line">│      <span class="number">3</span> │                 <span class="number">0</span> │</span><br><span class="line">│      <span class="number">4</span> │                 <span class="number">1</span> │</span><br><span class="line">│      <span class="number">5</span> │                 <span class="number">2</span> │</span><br><span class="line">│      <span class="number">6</span> │                 <span class="number">0</span> │</span><br><span class="line">│      <span class="number">7</span> │                 <span class="number">1</span> │</span><br><span class="line">│      <span class="number">8</span> │                 <span class="number">2</span> │</span><br><span class="line">│      <span class="number">9</span> │                 <span class="number">0</span> │</span><br><span class="line">└────────┴───────────────────┘</span><br><span class="line">number 类型为 UInt64</span><br><span class="line">modulo(number, <span class="number">3</span>) 类型为 UInt8</span><br></pre></td></tr></table></figure><p>代码主要在 <a href="https://github.com/ClickHouse/ClickHouse/blob/27ddf78ba572b893cb5351541f566d1080d8a9c6/src/Interpreters/ExpressionActions.cpp#L416">ExpressionActions::execute@Interpreters/ExpressionActions.cpp</a></p><h3 id="4-3-AggregatingTransform"><a href="#4-3-AggregatingTransform" class="headerlink" title="4.3 AggregatingTransform"></a>4.3 AggregatingTransform</h3><p>AggregatingTransform 是 Group By 高性能的核心所在。<br>本示例中的 <code>modulo(number, 3)</code> 类型为 UInt8，在做优化上，ClickHouse 会选择使用数组代替 hashtable 作为分组，区分逻辑见 <a href="https://github.com/ClickHouse/ClickHouse/blob/27ddf78ba572b893cb5351541f566d1080d8a9c6/src/Interpreters/Aggregator.cpp#L526">Interpreters/Aggregator.cpp</a></p><p>在计算 sum 的时候，首先会生成一个数组 [1024]，然后做了一个编译展开(代码 <a href="https://github.com/ClickHouse/ClickHouse/blob/27ddf78ba572b893cb5351541f566d1080d8a9c6/src/AggregateFunctions/IAggregateFunction.h#L412-L487">addBatchLookupTable8@AggregateFunctions/IAggregateFunction.h</a>):</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">size_t</span> UNROLL_COUNT = <span class="number">4</span>;</span><br><span class="line">std::unique_ptr&lt;Data[]&gt; places&#123;<span class="keyword">new</span> Data[<span class="number">256</span> * UNROLL_COUNT]&#125;;</span><br><span class="line"><span class="keyword">bool</span> has_data[<span class="number">256</span> * UNROLL_COUNT]&#123;&#125;; <span class="comment">/// Separate flags array to avoid heavy initialization.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Aggregate data into different lookup tables.</span></span><br><span class="line"><span class="keyword">size_t</span> batch_size_unrolled = batch_size / UNROLL_COUNT * UNROLL_COUNT;</span><br><span class="line"><span class="keyword">for</span> (; i &lt; batch_size_unrolled; i += UNROLL_COUNT)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j &lt; UNROLL_COUNT; ++j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">size_t</span> idx = j * <span class="number">256</span> + key[i + j];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">unlikely</span>(!has_data[idx]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> (&amp;places[idx]) Data;</span><br><span class="line">            has_data[idx] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        func.<span class="built_in">add</span>(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span> *&gt;(&amp;places[idx]), columns, i + j, <span class="literal">nullptr</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>sum(number) … GROUP BY number % 3</code> 计算方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array[0] = 0 + 3 + 6 + 9 = 18</span><br><span class="line">array[1] = 1 + 4 + 7 = 12</span><br><span class="line">array[2] = 2 + 5 + 8 = 15</span><br></pre></td></tr></table></figure><p>这里只是针对 UInt8 做的一个优化分支，那么对于其他类型怎么优化处理呢？<br>ClickHouse 针对不同的类型分别提供了不同的 hashtable，声势比较浩大（代码见 <a href="https://github.com/ClickHouse/ClickHouse/blob/27ddf78ba572b893cb5351541f566d1080d8a9c6/src/Interpreters/Aggregator.h#L68-L103">Aggregator.h</a>）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> AggregatedDataWithUInt8Key = FixedImplicitZeroHashMapWithCalculatedSize&lt;UInt8, AggregateDataPtr&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithUInt16Key = FixedImplicitZeroHashMap&lt;UInt16, AggregateDataPtr&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithUInt32Key = HashMap&lt;UInt32, AggregateDataPtr, HashCRC32&lt;UInt32&gt;&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithUInt64Key = HashMap&lt;UInt64, AggregateDataPtr, HashCRC32&lt;UInt64&gt;&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithShortStringKey = StringHashMap&lt;AggregateDataPtr&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithStringKey = HashMapWithSavedHash&lt;StringRef, AggregateDataPtr&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithKeys128 = HashMap&lt;UInt128, AggregateDataPtr, UInt128HashCRC32&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithKeys256 = HashMap&lt;DummyUInt256, AggregateDataPtr, UInt256HashCRC32&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithUInt32KeyTwoLevel = TwoLevelHashMap&lt;UInt32, AggregateDataPtr, HashCRC32&lt;UInt32&gt;&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithUInt64KeyTwoLevel = TwoLevelHashMap&lt;UInt64, AggregateDataPtr, HashCRC32&lt;UInt64&gt;&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithShortStringKeyTwoLevel = TwoLevelStringHashMap&lt;AggregateDataPtr&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithStringKeyTwoLevel = TwoLevelHashMapWithSavedHash&lt;StringRef, AggregateDataPtr&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithKeys128TwoLevel = TwoLevelHashMap&lt;UInt128, AggregateDataPtr, UInt128HashCRC32&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithKeys256TwoLevel = TwoLevelHashMap&lt;DummyUInt256, AggregateDataPtr, UInt256HashCRC32&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithUInt64KeyHash64 = HashMap&lt;UInt64, AggregateDataPtr, DefaultHash&lt;UInt64&gt;&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithStringKeyHash64 = HashMapWithSavedHash&lt;StringRef, AggregateDataPtr, StringRefHash64&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithKeys128Hash64 = HashMap&lt;UInt128, AggregateDataPtr, UInt128Hash&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithKeys256Hash64 = HashMap&lt;DummyUInt256, AggregateDataPtr, UInt256Hash&gt;;</span><br></pre></td></tr></table></figure><p>如果我们改成 <code>GROUP BY number*100000</code> 后，它会选择 AggregatedDataWithUInt64Key 的 hashtable 作为分组。</p><p>而且 ClickHouse 提供了一种 Two Level 方式，用语应对有大量分组 key 的情况，Level1 先分大组，Level2 小组可以并行计算。</p><p>针对 String 类型，根据不同的长度，hashtable 也做了很多优化，代码见 <a href="https://github.com/ClickHouse/ClickHouse/blob/27ddf78ba572b893cb5351541f566d1080d8a9c6/src/Common/HashTable/StringHashMap.h#L78-L82">HashTable/StringHashMap.h</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>ClickHouse 会根据 Group By 的最终类型，选择一个最优的 hashtable 或数组，作为分组基础数据结构，使内存和计算尽量最优。</p><p>这个”最优解“是怎么找到的？从 test 代码可以看出，是不停的尝试、测试验证出来的，浓厚的 bottom-up 哲学范。</p><p>hashtable 测试代码：<a href="https://github.com/ClickHouse/ClickHouse/tree/27ddf78ba572b893cb5351541f566d1080d8a9c6/src/Interpreters/tests">Interpreters/tests</a></p><p>lookuptable 测试代码： <a href="https://github.com/ClickHouse/ClickHouse/blob/27ddf78ba572b893cb5351541f566d1080d8a9c6/src/Common/tests/average.cpp">tests/average.cpp</a></p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;strong&gt;本文首发于 2021-01-26 21:31:12&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《ClickHouse 和他的朋友们》系列文章转载自圈内好友 &lt;a href=&quot;https://b</summary>
      
    
    
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/categories/ClickHouse/"/>
    
    
    <category term="ClickHouse和他的朋友们" scheme="http://dbkernel.github.io/tags/ClickHouse%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/tags/ClickHouse/"/>
    
    <category term="源码分析" scheme="http://dbkernel.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="group by" scheme="http://dbkernel.github.io/tags/group-by/"/>
    
  </entry>
  
  <entry>
    <title>源码分析 | ClickHouse和他的朋友们（14）存储计算分离方案与实现</title>
    <link href="http://dbkernel.github.io/2020/09/21/clickhouse-and-friends-14-compute-storage/"/>
    <id>http://dbkernel.github.io/2020/09/21/clickhouse-and-friends-14-compute-storage/</id>
    <published>2020-09-21T14:01:12.000Z</published>
    <updated>2022-07-07T02:13:19.298Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-09-21 22:01:12</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/09/18/clickhouse-and-friends-compute-storage/">https://bohutang.me/2020/09/18/clickhouse-and-friends-compute-storage/</a><br>以下为正文。</p></blockquote><p><img src="clickhouse-map-2020-replicatedmergetree.png" alt="clickhouse-map-2020-replicatedmergetree.png"></p><p>如果多个 ClickHouse server 可以挂载同一份数据(分布式存储等)，并且每个 server 都可写，这样会有什么好处呢？</p><p>首先，我们可以把副本机制交给分布式存储来保障，上层架构变得简单朴素；</p><p>其次，clickhouse-server 可以在任意机器上增加、减少，使存储和计算能力得到充分发挥。</p><p>本文就来探讨一下 ClickHouse 的存储计算分离方案，实现上并不复杂。</p><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>ClickHouse 运行时数据由两部分组成：<strong>内存元数据</strong>和<strong>磁盘数据</strong>。</p><p>我们先看写流程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">w1. 开始写入数据</span><br><span class="line">w2. 生成内存part信息，并维护part metadata列表</span><br><span class="line">w3. 把part数据写到磁盘</span><br></pre></td></tr></table></figure><p>再来看读流程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r1. 从part metadata定位需要读取的part</span><br><span class="line">r2. 从磁盘读取part数据</span><br><span class="line">r3. 返回给上层数据</span><br></pre></td></tr></table></figure><p>这样，如果 server1 写了一条数据，只会更新自己内存的 part metadata，其他 server 是感知不到的，这样也就无法查询到刚写入的数据。</p><p>存储计算分离，首先要解决的就是内存状态数据的同步问题。</p><p>在 ClickHouse 里，我们需要解决的是内存中 part metadata 同步问题。</p><h2 id="2-内存数据同步"><a href="#2-内存数据同步" class="headerlink" title="2. 内存数据同步"></a>2. 内存数据同步</h2><p>在上篇 <a href="https://bohutang.me/2020/09/13/clickhouse-and-friends-replicated-merge-tree/">&lt;ReplicatedMergeTree 表引擎及同步机制&gt;</a> 中，我们知道副本间的数据同步机制：<br>首先同步元数据，再通过元数据获取相应 part 数据。</p><p>这里，我们借用 ReplicatedMergeTree 同步通道，然后再做减法，同步完元数据后跳过 part 数据的同步，因为磁盘数据只需一个 server 做更新(需要 fsync 语义)即可。</p><p>核心代码：<br><code>MergeTreeData::renameTempPartAndReplace</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!share_storage)</span><br><span class="line">    part-&gt;<span class="built_in">renameTo</span>(part_name, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h2 id="3-演示-demo"><a href="#3-演示-demo" class="headerlink" title="3. 演示 demo"></a>3. 演示 demo</h2><iframe src="https://bohutang-1253727613.cos.ap-beijing.myqcloud.com/video/clickhouse-storage-compute.mp4" frameborder="0" allowfullscreen="true" style="box-sizing: border-box;"></iframe><p>script：</p><ol><li>首先起 2 个 clickhouse-server，它们都挂载同一份数据 <code>&lt;path&gt;/home/bohu/work/cluster/d1/datas/&lt;/path&gt;</code></li><li>通过 clickhouse-server1(port 9101) 写入一条记录:(111, 3333)</li><li>通过 clickhouse-server2(port 9102) 进行查询正常</li><li>通过 clickhouse-server2(port 9102) truncate 表</li><li>通过 clickhouse-server1(port 9101) 查询正常</li></ol><h2 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4. 代码实现"></a>4. 代码实现</h2><p><a href="https://github.com/BohuTANG/ClickHouse/commit/f67d98ef408fda1a359e4fb17848619ef1f6e59b">原型</a></p><p>需要注意的是，这里只实现了写入数据同步，而且是非常 tricky 的方式。</p><p>由于 DDL 没有实现，所以在 zookeeper 上的注册方式也比较 tricky，demo 里的 replicas 都是手工注册的。</p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>本文提供一个思路，算是抛砖引玉，同时也期待更加系统的工程实现。</p><p><strong>ClickHouse 暂时还不支持 Distributed Query 功能，如果这个能力支持，ClickHouse 存储计算分离就是一个威力无比的小氢弹。</strong></p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;strong&gt;本文首发于 2020-09-21 22:01:12&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《ClickHouse 和他的朋友们》系列文章转载自圈内好友 &lt;a href=&quot;https://b</summary>
      
    
    
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/categories/ClickHouse/"/>
    
    
    <category term="ClickHouse和他的朋友们" scheme="http://dbkernel.github.io/tags/ClickHouse%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/tags/ClickHouse/"/>
    
    <category term="源码分析" scheme="http://dbkernel.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="存储计算分离" scheme="http://dbkernel.github.io/tags/%E5%AD%98%E5%82%A8%E8%AE%A1%E7%AE%97%E5%88%86%E7%A6%BB/"/>
    
  </entry>
  
  <entry>
    <title>源码分析 | ClickHouse和他的朋友们（13）ReplicatedMergeTree表引擎及同步机制</title>
    <link href="http://dbkernel.github.io/2020/09/15/clickhouse-and-friends-13-replicated-merge-tree/"/>
    <id>http://dbkernel.github.io/2020/09/15/clickhouse-and-friends-13-replicated-merge-tree/</id>
    <published>2020-09-15T12:15:14.000Z</published>
    <updated>2022-07-07T02:13:04.093Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-09-15 20:15:14</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/09/13/clickhouse-and-friends-replicated-merge-tree/">https://bohutang.me/2020/09/13/clickhouse-and-friends-replicated-merge-tree/</a><br>以下为正文。</p></blockquote><p><img src="clickhouse-map-2020-replicatedmergetree.png" alt="clickhouse-map-2020-replicatedmergetree.png"></p><p>在 MySQL 里，为了保证高可用以及数据安全性会采取主从模式，数据通过 binlog 来进行同步。</p><p>在 ClickHouse 里，我们可以使用 ReplicatedMergeTree 引擎，数据同步通过 zookeeper 完成。</p><p>本文先从搭建一个多 replica 集群开始，然后一窥底层的机制，简单吃两口。</p><h2 id="1-集群搭建"><a href="#1-集群搭建" class="headerlink" title="1. 集群搭建"></a>1. 集群搭建</h2><p>搭建一个 2 replica 测试集群，由于条件有限，这里在同一台物理机上起 clickhouse-server(2 个 replica) + zookeeper(1 个)，为了避免端口冲突，两个 replica 端口会有所不同。</p><h3 id="1-1-zookeeper"><a href="#1-1-zookeeper" class="headerlink" title="1.1 zookeeper"></a>1.1 zookeeper</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run  -p <span class="number">2181</span>:<span class="number">2181</span> --name some-zookeeper --restart always -d zookeeper</span><br></pre></td></tr></table></figure><h3 id="1-2-replica-集群"><a href="#1-2-replica-集群" class="headerlink" title="1.2 replica 集群"></a>1.2 replica 集群</h3><p>replica-1 config.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">zookeeper</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">node</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">host</span>&gt;</span>172.17.0.2<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">port</span>&gt;</span>2181<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">zookeeper</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">remote_servers</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mycluster_1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">shard_1</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">internal_replication</span>&gt;</span>true<span class="tag">&lt;/<span class="name">internal_replication</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">host</span>&gt;</span>s1<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">host</span>&gt;</span>s2<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span>9001<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">shard_1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mycluster_1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">remote_servers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">macros</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">cluster</span>&gt;</span>mycluster_1<span class="tag">&lt;/<span class="name">cluster</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">shard</span>&gt;</span>1<span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">replica</span>&gt;</span>s1<span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">macros</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tcp_port</span>&gt;</span>9101<span class="tag">&lt;/<span class="name">tcp_port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interserver_http_port</span>&gt;</span>9009<span class="tag">&lt;/<span class="name">interserver_http_port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span>&gt;</span>/cluster/d1/datas/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br></pre></td></tr></table></figure><p>replica-2 config.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">zookeeper</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">node</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">host</span>&gt;</span>172.17.0.2<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">port</span>&gt;</span>2181<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">zookeeper</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">remote_servers</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mycluster_1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">shard_1</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">internal_replication</span>&gt;</span>true<span class="tag">&lt;/<span class="name">internal_replication</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">host</span>&gt;</span>s1<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">host</span>&gt;</span>s2<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span>9001<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">shard_1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mycluster_1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">remote_servers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">macros</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">cluster</span>&gt;</span>mycluster_1<span class="tag">&lt;/<span class="name">cluster</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">shard</span>&gt;</span>1<span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">replica</span>&gt;</span>s2<span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">macros</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tcp_port</span>&gt;</span>9102<span class="tag">&lt;/<span class="name">tcp_port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interserver_http_port</span>&gt;</span>9010<span class="tag">&lt;/<span class="name">interserver_http_port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span>&gt;</span>/cluster/d2/datas/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-创建测试表"><a href="#1-3-创建测试表" class="headerlink" title="1.3 创建测试表"></a>1.3 创建测试表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> default.rtest1 <span class="keyword">ON</span> CLUSTER <span class="string">&#x27;mycluster_1&#x27;</span></span><br><span class="line">(</span><br><span class="line">    `id` Int64,</span><br><span class="line">    `p` Int16</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> ReplicatedMergeTree(<span class="string">&#x27;/clickhouse/tables/replicated/test&#x27;</span>, <span class="string">&#x27;&#123;replica&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> p</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> id</span><br></pre></td></tr></table></figure><h3 id="1-4-查看-zookeeper"><a href="#1-4-查看-zookeeper" class="headerlink" title="1.4 查看 zookeeper"></a>1.4 查看 zookeeper</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it some-zookeeper bash</span><br><span class="line">./bin/zkCli.sh</span><br><span class="line"></span><br><span class="line">[zk: localhost:2181(CONNECTED) 17] ls /clickhouse/tables/replicated/<span class="built_in">test</span>/replicas</span><br><span class="line">[s1, s2]</span><br></pre></td></tr></table></figure><p>两个 replica 都已经注册到 zookeeper。</p><h2 id="2-同步原理"><a href="#2-同步原理" class="headerlink" title="2. 同步原理"></a>2. 同步原理</h2><p>如果在 replica-1 上执行了一条写入:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">replica<span class="number">-1</span><span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> rtest <span class="keyword">VALUES</span>(<span class="number">33</span>,<span class="number">33</span>);</span><br></pre></td></tr></table></figure><p>数据是如何同步到 replica-2 的呢？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">s1.  replica<span class="number">-1</span>&gt; StorageReplicatedMergeTree::write --&gt; ReplicatedMergeTreeBlockOutputStream::<span class="built_in">write</span>(<span class="keyword">const</span> Block &amp; block)</span><br><span class="line">s2.  replica<span class="number">-1</span>&gt; storage.writer.writeTempPart，写入本地磁盘</span><br><span class="line">s3.  replica<span class="number">-1</span>&gt; ReplicatedMergeTreeBlockOutputStream::commitPart</span><br><span class="line">s4.  replica<span class="number">-1</span>&gt; StorageReplicatedMergeTree::getCommitPartOp，提交LogEntry到zookeeper，信息包括:</span><br><span class="line">    ReplicatedMergeTreeLogEntry &#123;</span><br><span class="line">     type: GET_PART,</span><br><span class="line">     source_replica: replica<span class="number">-1</span>,</span><br><span class="line">     new_part_name: part-&gt;name,</span><br><span class="line">     new_part_type: part-&gt;getType</span><br><span class="line">    &#125;</span><br><span class="line">s5.  replica<span class="number">-1</span>&gt; zkutil::<span class="built_in">makeCreateRequest</span>(zookeeper_path + <span class="string">&quot;/log/log-0000000022&quot;</span>)，更新log_pointer到zookeeper</span><br><span class="line"></span><br><span class="line">s6.  replica<span class="number">-2</span>&gt; StorageReplicatedMergeTree::<span class="built_in">queueUpdatingTask</span>()，定时pull任务</span><br><span class="line">s7.  replica<span class="number">-2</span>&gt; ReplicatedMergeTreeQueue::pullLogsToQueue ，拉取</span><br><span class="line">s8.  replica<span class="number">-2</span>&gt; zookeeper-&gt;<span class="built_in">get</span>(replica_path + <span class="string">&quot;/log_pointer&quot;</span>) ，向zookeeper获取当前replica已经同步的位点</span><br><span class="line">s9.  replica<span class="number">-2</span>&gt; zookeeper-&gt;<span class="built_in">getChildrenWatch</span>(zookeeper_path + <span class="string">&quot;/log&quot;</span>) ，向zookeeper获取所有的LogEntry信息</span><br><span class="line">s10. replica<span class="number">-2</span>&gt; 根据同步位点log_pointer从所有LogEntry中筛选需要同步的LogEntry，写到queue</span><br><span class="line">s11. replica<span class="number">-2</span>&gt; StorageReplicatedMergeTree::queueTask，消费queue任务</span><br><span class="line">s12. replica<span class="number">-2</span>&gt; StorageReplicatedMergeTree::<span class="built_in">executeLogEntry</span>(LogEntry &amp; entry)，根据LogEntry type执行消费</span><br><span class="line">s13. replica<span class="number">-2</span>&gt; StorageReplicatedMergeTree::<span class="built_in">executeFetch</span>(LogEntry &amp; entry)</span><br><span class="line">s14. replica<span class="number">-2</span>&gt; StorageReplicatedMergeTree::fetchPart，从replica<span class="number">-1</span>的interserver_http_port下载part目录数据</span><br><span class="line">s15. replica<span class="number">-2</span>&gt; MergeTreeData::renameTempPartAndReplace，把文件写入本地并更新内存meta信息</span><br><span class="line">s16. replica<span class="number">-2</span>&gt; 数据同步完成</span><br></pre></td></tr></table></figure><p>也可以进入 zookeeper docker 内部直接查看某个 LogEntry:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 85] get /clickhouse/tables/replicated/<span class="built_in">test</span>/<span class="built_in">log</span>/log-0000000022</span><br><span class="line">format version: 4</span><br><span class="line">create_time: 2020-09-13 16:39:05</span><br><span class="line"><span class="built_in">source</span> replica: s1</span><br><span class="line">block_id: 33_2673203974107464807_7670041793554220344</span><br><span class="line">get</span><br><span class="line">33_2_2_0</span><br></pre></td></tr></table></figure><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>本文以写入为例，从底层分析了 ClickHouse ReplicatedMergeTree 的工作原理，逻辑并不复杂。</p><p>不同 replica 的数据同步需要 zookeeper(目前社区有人在做 etcd 的集成 <a href="https://github.com/ClickHouse/ClickHouse/pull/10376">pr#10376</a>)做元数据协调，是一个订阅/消费模型，涉及具体数据目录还需要去相应的 replica 通过 interserver_http_port 端口进行下载。</p><p>replica 的同步都是以文件目录为单位，这样就带来一个好处：我们<strong>可以轻松实现 ClickHouse 的存储计算分离</strong>，多个 clickhouse-server 可以同时挂载同一份数据进行计算，而且这些 server 每个节点都是可写，虎哥已经实现了一个可以 work 的原型，详情请参考下篇 <a href="https://bohutang.me/2020/09/18/clickhouse-and-friends-compute-storage/">&lt;存储计算分离方案与实现&gt;</a>。</p><h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h2><ul><li>[1]<a href="https://github.com/ClickHouse/ClickHouse/blob/f37814b36754bf11b52bd9c77d0e15f4d1825033/src/Storages/StorageReplicatedMergeTree.cpp">storagereplicatedmergetree.cpp</a></li><li>[2]<a href="https://github.com/ClickHouse/ClickHouse/blob/f37814b36754bf11b52bd9c77d0e15f4d1825033/src/Storages/MergeTree/ReplicatedMergeTreeBlockOutputStream.cpp">replicatedmergetreeblockoutputstream.cpp</a></li><li>[3]<a href="https://github.com/ClickHouse/ClickHouse/blob/f37814b36754bf11b52bd9c77d0e15f4d1825033/src/Storages/MergeTree/ReplicatedMergeTreeLogEntry.cpp">replicatedmergetreelogentry.cpp</a></li><li>[4]<a href="https://github.com/ClickHouse/ClickHouse/blob/f37814b36754bf11b52bd9c77d0e15f4d1825033/src/Storages/MergeTree/ReplicatedMergeTreeQueue.cpp">replicatedmergetreequeue.cpp</a></li></ul><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;strong&gt;本文首发于 2020-09-15 20:15:14&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《ClickHouse 和他的朋友们》系列文章转载自圈内好友 &lt;a href=&quot;https://b</summary>
      
    
    
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/categories/ClickHouse/"/>
    
    
    <category term="ClickHouse和他的朋友们" scheme="http://dbkernel.github.io/tags/ClickHouse%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/tags/ClickHouse/"/>
    
    <category term="源码分析" scheme="http://dbkernel.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="ReplicatedMergeTree" scheme="http://dbkernel.github.io/tags/ReplicatedMergeTree/"/>
    
  </entry>
  
  <entry>
    <title>源码分析 | ClickHouse和他的朋友们（12）神奇的物化视图(Materialized View)与原理</title>
    <link href="http://dbkernel.github.io/2020/09/03/clickhouse-and-friends-12-materialized-view/"/>
    <id>http://dbkernel.github.io/2020/09/03/clickhouse-and-friends-12-materialized-view/</id>
    <published>2020-09-03T13:22:14.000Z</published>
    <updated>2022-07-07T02:12:49.082Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-09-03 21:22:14</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/08/31/clickhouse-and-friends-materialized-view/">https://bohutang.me/2020/08/31/clickhouse-and-friends-materialized-view/</a><br>以下为正文。</p></blockquote><p><img src="clickhouse-map-2020-materializeview.png" alt="clickhouse-map-2020-materializeview.png"></p><p>在 ClickHouse 里，物化视图(Materialized View)可以说是一个神奇且强大的东西，用途别具一格。</p><p>本文从底层机制进行分析，看看 ClickHouse 的 Materalized View 是怎么工作的，以方便更好的使用它。</p><h2 id="什么是物化视图"><a href="#什么是物化视图" class="headerlink" title="什么是物化视图"></a>什么是物化视图</h2><p>对大部分人来说，物化视图这个概念会比较抽象，物化？视图？。。。</p><p>为了更好的理解它，我们先看一个场景。</p><p>假设你是 <code>*hub</code> 一个“幸福”的小程序员，某天产品经理有个需求：实时统计每小时视频下载量。</p><p>用户下载明细表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">clickhouse<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> download LIMIT <span class="number">10</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">when</span>                <span class="operator">|</span> userid <span class="operator">|</span> bytes  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">06</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span> <span class="number">530314</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">06</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span> <span class="number">872957</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">06</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span> <span class="number">107047</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">07</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span> <span class="number">214876</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">07</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span> <span class="number">820943</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">07</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span> <span class="number">693959</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">08</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span> <span class="number">882151</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">08</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span> <span class="number">644223</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">08</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span> <span class="number">199800</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">09</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span> <span class="number">511439</span> <span class="operator">|</span></span><br><span class="line">... ....</span><br></pre></td></tr></table></figure><p>计算每小时下载量：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">clickhouse<span class="operator">&gt;</span> <span class="keyword">SELECT</span> toStartOfHour(<span class="keyword">when</span>) <span class="keyword">AS</span> <span class="keyword">hour</span>, userid, <span class="built_in">count</span>() <span class="keyword">as</span> downloads, <span class="built_in">sum</span>(bytes) <span class="keyword">AS</span> bytes <span class="keyword">FROM</span> download <span class="keyword">GROUP</span> <span class="keyword">BY</span> userid, <span class="keyword">hour</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> userid, <span class="keyword">hour</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+-----------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">hour</span>                <span class="operator">|</span> userid <span class="operator">|</span> downloads <span class="operator">|</span> bytes      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+-----------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>      <span class="number">6822</span> <span class="operator">|</span> <span class="number">3378623036</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">19</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5424173178</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">20</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5418656068</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">21</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5404309443</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">22</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5354077456</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5390852563</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5369839540</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5384161012</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">02</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5404581759</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">03</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>      <span class="number">6778</span> <span class="operator">|</span> <span class="number">3399557322</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+-----------+------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.13</span> sec)</span><br></pre></td></tr></table></figure><p>很容易嘛，不过有个问题：每次都要以 <code>download</code> 表为基础数据进行计算，<code>*hub</code> 数据量太大，无法忍受。</p><p>想到一个办法：如果对 <code>download</code> 进行预聚合，把结果保存到一个新表 <code>download_hour_mv</code>，并随着 <code>download</code> 增量实时更新，每次去查询<code>download_hour_mv</code> 不就可以了。</p><p>这个新表可以看做是一个物化视图，它在 ClickHouse 是一个普通表。</p><h2 id="创建物化视图"><a href="#创建物化视图" class="headerlink" title="创建物化视图"></a>创建物化视图</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">clickhouse<span class="operator">&gt;</span> <span class="keyword">CREATE</span> MATERIALIZED <span class="keyword">VIEW</span> download_hour_mv</span><br><span class="line">ENGINE <span class="operator">=</span> SummingMergeTree</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> toYYYYMM(<span class="keyword">hour</span>) <span class="keyword">ORDER</span> <span class="keyword">BY</span> (userid, <span class="keyword">hour</span>)</span><br><span class="line"><span class="keyword">AS</span> <span class="keyword">SELECT</span></span><br><span class="line">  toStartOfHour(<span class="keyword">when</span>) <span class="keyword">AS</span> <span class="keyword">hour</span>,</span><br><span class="line">  userid,</span><br><span class="line">  <span class="built_in">count</span>() <span class="keyword">as</span> downloads,</span><br><span class="line">  <span class="built_in">sum</span>(bytes) <span class="keyword">AS</span> bytes</span><br><span class="line"><span class="keyword">FROM</span> download <span class="keyword">WHERE</span> <span class="keyword">when</span> <span class="operator">&gt;=</span> toDateTime(<span class="string">&#x27;2020-09-01 04:00:00&#x27;</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> userid, <span class="keyword">hour</span></span><br></pre></td></tr></table></figure><p>这个语句主要做了：</p><ul><li>创建一个引擎为 <code>SummingMergeTree</code> 的物化视图 <code>download_hour_mv</code></li><li>物化视图的数据来源于 <code>download</code> 表，并根据 <code>select</code> 语句中的表达式进行相应“物化”操作</li><li>选取一个未来时间(当前时间是 <code>2020-08-31 18:00:00</code>)作为开始点 <code>WHERE when &gt;= toDateTime(&#39;2020-09-01 04:00:00&#39;)</code>，表示在<code>2020-09-01 04:00:00</code> 之后的数据才会被同步到 <code>download_hour_mv</code></li></ul><p>这样，目前 <code>download_hour_mv</code> 是一个空表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clickhouse<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> download_hour_mv <span class="keyword">ORDER</span> <span class="keyword">BY</span> userid, <span class="keyword">hour</span>;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><p>注意：官方有 <a href="https://clickhouse.tech/docs/en/sql-reference/statements/create/view/#materialized">POPULATE</a> 关键字，但是不建议使用，因为视图创建期间 <code>download</code> 如果有写入数据会丢失，这也是我们加一个 <code>WHERE</code> 作为数据同步点的原因。</p><p>那么，我们如何让源表数据可以一致性的同步到 <code>download_hour_mv</code> 呢？</p><h2 id="物化全量数据"><a href="#物化全量数据" class="headerlink" title="物化全量数据"></a>物化全量数据</h2><p>在<code>2020-09-01 04:00:00</code>之后，我们可以通过一个带 <code>WHERE</code> 快照的<code>INSERT INTO SELECT...</code> 对 <code>download</code> 历史数据进行物化：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">clickhouse<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> download_hour_mv</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  toStartOfHour(<span class="keyword">when</span>) <span class="keyword">AS</span> <span class="keyword">hour</span>,</span><br><span class="line">  userid,</span><br><span class="line">  <span class="built_in">count</span>() <span class="keyword">as</span> downloads,</span><br><span class="line">  <span class="built_in">sum</span>(bytes) <span class="keyword">AS</span> bytes</span><br><span class="line"><span class="keyword">FROM</span> download <span class="keyword">WHERE</span> <span class="keyword">when</span> <span class="operator">&lt;</span> toDateTime(<span class="string">&#x27;2020-09-01 04:00:00&#x27;</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> userid, <span class="keyword">hour</span></span><br></pre></td></tr></table></figure><p>查询物化视图：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">clickhouse<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> download_hour_mv <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">hour</span>, userid, downloads <span class="keyword">DESC</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+-----------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">hour</span>                <span class="operator">|</span> userid <span class="operator">|</span> downloads <span class="operator">|</span> bytes      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+-----------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>      <span class="number">6822</span> <span class="operator">|</span> <span class="number">3378623036</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">19</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5424173178</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">20</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5418656068</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">21</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5404309443</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">22</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5354077456</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5390852563</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5369839540</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5384161012</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">02</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5404581759</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">03</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>      <span class="number">6778</span> <span class="operator">|</span> <span class="number">3399557322</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+-----------+------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.05</span> sec)</span><br></pre></td></tr></table></figure><p>可以看到数据已经“物化”到 <code>download_hour_mv</code>。</p><h2 id="物化增量数据"><a href="#物化增量数据" class="headerlink" title="物化增量数据"></a>物化增量数据</h2><p>写一些数据到 <code>download</code>表:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">clickhouse<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> download</span><br><span class="line">       <span class="keyword">SELECT</span></span><br><span class="line">         toDateTime(<span class="string">&#x27;2020-09-01 04:00:00&#x27;</span>) <span class="operator">+</span> number<span class="operator">*</span>(<span class="number">1</span><span class="operator">/</span><span class="number">3</span>) <span class="keyword">as</span> <span class="keyword">when</span>,</span><br><span class="line">         <span class="number">19</span>,</span><br><span class="line">         rand() <span class="operator">%</span> <span class="number">1000000</span></span><br><span class="line">       <span class="keyword">FROM</span> system.numbers</span><br><span class="line">       LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>查询物化视图 <code>download_hour_mv</code>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">clickhouse<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> download_hour_mv <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">hour</span>, userid, downloads;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+-----------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">hour</span>                <span class="operator">|</span> userid <span class="operator">|</span> downloads <span class="operator">|</span> bytes      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+-----------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>      <span class="number">6822</span> <span class="operator">|</span> <span class="number">3378623036</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">19</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5424173178</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">20</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5418656068</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">21</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5404309443</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">22</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5354077456</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5390852563</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5369839540</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5384161012</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">02</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5404581759</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">03</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>      <span class="number">6778</span> <span class="operator">|</span> <span class="number">3399557322</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>        <span class="number">10</span> <span class="operator">|</span>    <span class="number">5732600</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+-----------+------------+</span></span><br><span class="line"><span class="number">11</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>可以看到最后一条数据就是我们增量的一个物化聚合，已经实时同步，这是如何做到的呢？</p><h2 id="物化视图原理"><a href="#物化视图原理" class="headerlink" title="物化视图原理"></a>物化视图原理</h2><p>ClickHouse 的物化视图原理并不复杂，在 <code>download</code> 表有新的数据写入时，如果检测到有物化视图跟它关联，会针对这批写入的数据进行物化操作。</p><p>比如上面新增数据是通过以下 SQL 生成的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">clickhouse<span class="operator">&gt;</span> <span class="keyword">SELECT</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          toDateTime(<span class="string">&#x27;2020-09-01 04:00:00&#x27;</span>) <span class="operator">+</span> number<span class="operator">*</span>(<span class="number">1</span><span class="operator">/</span><span class="number">3</span>) <span class="keyword">as</span> <span class="keyword">when</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          <span class="number">19</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          rand() <span class="operator">%</span> <span class="number">1000000</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>        <span class="keyword">FROM</span> system.numbers</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>        LIMIT <span class="number">10</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+------+-------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">when</span>                <span class="operator">|</span> <span class="number">19</span>   <span class="operator">|</span> modulo(rand(), <span class="number">1000000</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+------+-------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span>                  <span class="number">870495</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span>                  <span class="number">322270</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span>                  <span class="number">983422</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">01</span> <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span>                  <span class="number">759708</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">01</span> <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span>                  <span class="number">975636</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">01</span> <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span>                  <span class="number">365507</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">02</span> <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span>                  <span class="number">865569</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">02</span> <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span>                  <span class="number">975742</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">02</span> <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span>                   <span class="number">85827</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">03</span> <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span>                  <span class="number">992779</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+------+-------------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><p>物化视图执行的语句类似：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> download_hour_mv</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  toStartOfHour(<span class="keyword">when</span>) <span class="keyword">AS</span> <span class="keyword">hour</span>,</span><br><span class="line">  userid,</span><br><span class="line">  <span class="built_in">count</span>() <span class="keyword">as</span> downloads,</span><br><span class="line">  <span class="built_in">sum</span>(bytes) <span class="keyword">AS</span> bytes</span><br><span class="line"><span class="keyword">FROM</span> [新增的<span class="number">10</span>条数据] <span class="keyword">WHERE</span> <span class="keyword">when</span> <span class="operator">&gt;=</span> toDateTime(<span class="string">&#x27;2020-09-01 04:00:00&#x27;</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> userid, <span class="keyword">hour</span></span><br></pre></td></tr></table></figure><p>代码导航：</p><ol><li><p>添加视图 OutputStream， <a href="https://github.com/ClickHouse/ClickHouse/blob/cb4644ea6d04b3d5900868b4f8d686a03082379a/src/Interpreters/InterpreterInsertQuery.cpp#L313">InterpreterInsertQuery.cpp</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (table-&gt;<span class="built_in">noPushingToViews</span>() &amp;&amp; !no_destination)</span><br><span class="line">    out = table-&gt;<span class="built_in">write</span>(query_ptr, metadata_snapshot, context);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    out = std::make_shared&lt;PushingToViewsBlockOutputStream&gt;(table, metadata_snapshot, context, query_ptr, no_destination);</span><br></pre></td></tr></table></figure></li><li><p>构造 Insert ， <a href="https://github.com/ClickHouse/ClickHouse/blob/cb4644ea6d04b3d5900868b4f8d686a03082379a/src/DataStreams/PushingToViewsBlockOutputStream.cpp#L85">PushingToViewsBlockOutputStream.cpp</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ASTPtr <span class="title">insert_query_ptr</span><span class="params">(insert.release())</span></span>;</span><br><span class="line"><span class="function">InterpreterInsertQuery <span class="title">interpreter</span><span class="params">(insert_query_ptr, *insert_context)</span></span>;</span><br><span class="line">BlockIO io = interpreter.<span class="built_in">execute</span>();</span><br><span class="line">out = io.out;</span><br></pre></td></tr></table></figure></li><li><p>物化新增数据：<a href="https://github.com/ClickHouse/ClickHouse/blob/cb4644ea6d04b3d5900868b4f8d686a03082379a/src/DataStreams/PushingToViewsBlockOutputStream.cpp#L331">PushingToViewsBlockOutputStream.cpp</a></p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Context local_context = *select_context;</span><br><span class="line">local_context.<span class="built_in">addViewSource</span>(</span><br><span class="line">    StorageValues::<span class="built_in">create</span>(</span><br><span class="line">        storage-&gt;<span class="built_in">getStorageID</span>(), metadata_snapshot-&gt;<span class="built_in">getColumns</span>(), block, storage-&gt;<span class="built_in">getVirtuals</span>()));</span><br><span class="line">select.<span class="built_in">emplace</span>(view.query, local_context, <span class="built_in">SelectQueryOptions</span>());</span><br><span class="line">in = std::make_shared&lt;MaterializingBlockInputStream&gt;(select-&gt;<span class="built_in">execute</span>().<span class="built_in">getInputStream</span>()</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>物化视图的用途较多。</p><p>比如可以解决表索引问题，我们可以用物化视图创建另外一种物理序，来满足某些条件下的查询问题。</p><p>还有就是通过物化视图的实时同步数据能力，我们可以做到更加灵活的表结构变更。</p><p>更强大的地方是它可以借助 MergeTree 家族引擎(SummingMergeTree、Aggregatingmergetree 等)，得到一个实时的预聚合，满足快速查询。</p><p>原理是把增量的数据根据 <code>AS SELECT ...</code> 对其进行处理并写入到物化视图表，物化视图是一种普通表，可以直接读取和写入。</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;strong&gt;本文首发于 2020-09-03 21:22:14&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《ClickHouse 和他的朋友们》系列文章转载自圈内好友 &lt;a href=&quot;https://b</summary>
      
    
    
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/categories/ClickHouse/"/>
    
    
    <category term="ClickHouse和他的朋友们" scheme="http://dbkernel.github.io/tags/ClickHouse%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/tags/ClickHouse/"/>
    
    <category term="源码分析" scheme="http://dbkernel.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="Materialized View" scheme="http://dbkernel.github.io/tags/Materialized-View/"/>
    
  </entry>
  
  <entry>
    <title>源码分析 | ClickHouse和他的朋友们（11）MySQL实时复制之GTID模式</title>
    <link href="http://dbkernel.github.io/2020/08/28/clickhouse-and-friends-11-mysql-gtid-replication/"/>
    <id>http://dbkernel.github.io/2020/08/28/clickhouse-and-friends-11-mysql-gtid-replication/</id>
    <published>2020-08-28T12:40:14.000Z</published>
    <updated>2022-07-07T02:12:30.582Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-08-28 20:40:14</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/08/26/clickhouse-and-friends-mysql-gtid-replication/">https://bohutang.me/2020/08/26/clickhouse-and-friends-mysql-gtid-replication/</a><br>以下为正文。</p></blockquote><p><img src="clickhouse-map-2020-materialzemysql.png" alt="clickhouse-map-2020-materialzemysql.png"></p><p><a href="https://bohutang.me/2020/07/26/clickhouse-and-friends-mysql-replication/">MySQL 实时复制原理篇</a></p><p>几天前 ClickHouse 官方发布了 <a href="https://github.com/ClickHouse/ClickHouse/releases/tag/v20.8.1.4447-testing">v20.8.1.4447-testing</a>，这个版本已经包含了 MaterializeMySQL 引擎，实现了 ClickHouse 实时复制 MySQL 数据的能力，感兴趣的朋友可以通过官方安装包来做体验，安装方式参考 <a href="https://clickhouse.tech/#quick-start">https://clickhouse.tech/#quick-start</a>，需要注意的是要选择 testing 分支。</p><h2 id="基于位点同步"><a href="#基于位点同步" class="headerlink" title="基于位点同步"></a>基于位点同步</h2><p>MaterializeMySQL 在 v20.8.1.4447-testing 版本是基于 binlog 位点模式进行同步的。</p><p>每次消费完一批 binlog event，就会记录 event 的位点信息到 .metadata 文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Version:1</span><br><span class="line">Binlog File:mysql-bin.000002</span><br><span class="line">Binlog Position:328</span><br><span class="line">Data Version:1</span><br></pre></td></tr></table></figure><p>这样当 ClickHouse 再次启动时，它会把 <code>&#123;‘mysql-bin.000002’, 328&#125;</code> 二元组通过协议告知 MySQL Server，MySQL 从这个位点开始发送数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1&gt; ClickHouse 发送 &#123;&#x27;mysql-bin.000002&#x27;, 328&#125; 位点信息给 MySQL</span><br><span class="line">s2&gt; MySQL 找到本地 mysql-bin.000002 文件并定位到 328 偏移位置，读取下一个 event 发送给 ClickHouse</span><br><span class="line">s3&gt; ClickHouse 接收 binlog event 并更新 .metadata位点</span><br></pre></td></tr></table></figure><p>看起来不错哦，但是有个问题：<br>如果 MySQL Server 是一个集群(比如１主２从)，通过 VIP 对外服务，MaterializeMySQL 的 host 指向的是这个 vip。<br>当集群主从发生切换后，<code>&#123;binlog-name, binlog-position&#125;</code> 二元组其实是不准确的，因为集群里主从 binlog 不一定是完全一致的(binlog 可以做 reset 操作)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1&gt; ClickHouse 发送 &#123;&#x27;mysql-bin.000002&#x27;, 328&#125; 给集群新主 MySQL</span><br><span class="line">s2&gt; 新主 MySQL 发现本地没有 mysql-bin.000002 文件，因为它做过 reset master 操作，binlog 文件是 mysql-bin.000001</span><br><span class="line">... oops ...</span><br></pre></td></tr></table></figure><p>为了解决这个问题，我们开发了 GTID 同步模式，废弃了不安全的位点同步模式，目前已被 upstream merged <a href="https://github.com/ClickHouse/ClickHouse/pull/13820">#PR13820</a>，下一个 testing 版本即可体验。</p><p>着急的话可以自己编译或通过 <a href="https://clickhouse-builds.s3.yandex.net/0/2b8ad576cc3892d2d760f3f8b670adf17db0c2a0/clickhouse_build_check/report.html">ClickHouse Build Check for master-20.9.1</a> 下载安装。</p><h2 id="基于-GTID-同步"><a href="#基于-GTID-同步" class="headerlink" title="基于 GTID 同步"></a>基于 GTID 同步</h2><p>GTID 是 MySQL 复制增强版，从 MySQL 5.6 版本开始支持，目前已经是 MySQL 主流复制模式。</p><p>它为每个 event 分配一个全局唯一 ID 和序号，我们可以不用关心 MySQL 集群主从拓扑结构，直接告知 MySQL 这个 GTID 即可，.metadata 变为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Version:2</span><br><span class="line">Executed GTID:f4aee41e-e36f-11ea-8b37-0242ac110002:1-5</span><br><span class="line">Data Version:1</span><br></pre></td></tr></table></figure><p><code>f4aee41e-e36f-11ea-8b37-0242ac110002</code> 是生成 event 的主机 UUID，<code>1-5</code>是已经同步的 event 区间。</p><p>这样流程就变为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1&gt; ClickHouse 发送 GTID:f4aee41e-e36f-11ea-8b37-0242ac110002:1-5 给 MySQL</span><br><span class="line">s2&gt; MySQL 根据 GTID:f4aee41e-e36f-11ea-8b37-0242ac110002:1-5 找到本地位点，读取下一个 event 发送给 ClickHouse</span><br><span class="line">s3&gt; ClickHouse 接收 binlog event 并更新 .metadata GTID信息</span><br></pre></td></tr></table></figure><h2 id="MySQL-开启-GTID"><a href="#MySQL-开启-GTID" class="headerlink" title="MySQL 开启 GTID"></a>MySQL 开启 GTID</h2><p>那么，MySQL 侧怎么开启 GTID 呢？增加以下两个参数即可:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--gtid-mode=ON --enforce-gtid-consistency</span></span><br></pre></td></tr></table></figure><p>比如启动一个启用 GTID 的 MySQL docker：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="operator">-</span>d <span class="operator">-</span>e MYSQL_ROOT_PASSWORD<span class="operator">=</span><span class="number">123</span> mysql:<span class="number">5.7</span> mysqld <span class="comment">--datadir=/var/lib/mysql --server-id=1 --log-bin=/var/lib/mysql/mysql-bin.log --gtid-mode=ON --enforce-gtid-consistency</span></span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>启用 GTID 复制模式后，metadata Version 会变为 2，也就是老版本启动时会直接报错，database 需要重建。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>MaterializeMySQL 引擎还处于不停迭代中，对于它我们有一个初步的规划：</p><ul><li><strong>稳定性保证</strong><br>这块需要更多测试，更多试用反馈</li><li><strong>索引优化</strong><br>OLTP 索引一般不是为 OLAP 设计，目前索引转换还是依赖 MySQL 表结构，需要更加智能化</li><li><strong>可观测性</strong><br>在 ClickHouse 侧可以方便的查看当前同步信息，类似 MySQL <code>show slave status</code></li><li><strong>数据一致性校验</strong><br>需要提供方式可以校验 MySQL 和 ClickHouse 数据一致性</li></ul><p>MaterializeMySQL 已经是社区功能，仍然有不少的工作要做。期待更多的力量加入，我们的征途不止星辰大海。</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;strong&gt;本文首发于 2020-08-28 20:40:14&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《ClickHouse 和他的朋友们》系列文章转载自圈内好友 &lt;a href=&quot;https://b</summary>
      
    
    
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/categories/ClickHouse/"/>
    
    
    <category term="MySQL" scheme="http://dbkernel.github.io/tags/MySQL/"/>
    
    <category term="ClickHouse和他的朋友们" scheme="http://dbkernel.github.io/tags/ClickHouse%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/tags/ClickHouse/"/>
    
    <category term="源码分析" scheme="http://dbkernel.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>问题定位 | Peronca Xtrabackup 8.0近日踩坑总结 - xtrabackup 2.4和8.0区别</title>
    <link href="http://dbkernel.github.io/2020/08/27/percona-xtrabackup-2.4-vs-8.0/"/>
    <id>http://dbkernel.github.io/2020/08/27/percona-xtrabackup-2.4-vs-8.0/</id>
    <published>2020-08-27T05:46:15.000Z</published>
    <updated>2023-04-25T02:22:34.198Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><blockquote><p><strong>本文首发于 2020-08-27 13:46:15</strong></p></blockquote><p><strong>作者：卢文双 资深数据库内核研发</strong></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>近期在给 <code>radondb/xenon</code> 适配 percona xtrabackup 8.0 时，遇到了一些问题，经过多日调研、尝试终于解决，特此分享。</p><p><strong>版本信息：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Percona-Server 8.0.19-10</span><br><span class="line">Percona-Xtrabackup 8.0.13</span><br></pre></td></tr></table></figure><p>版本各字段含义参考 <a href="https://www.percona.com/blog/2020/08/18/aligning-percona-xtrabackup-versions-with-percona-server-for-mysql/">https://www.percona.com/blog/2020/08/18/aligning-percona-xtrabackup-versions-with-percona-server-for-mysql/</a></p><h3 id="适配过程中遇到的坑"><a href="#适配过程中遇到的坑" class="headerlink" title="适配过程中遇到的坑"></a>适配过程中遇到的坑</h3><p>一、MySQL 8.0 + Semi-Sync + 持续写入数据期间执行重建后，change master to &amp;&amp; start slave 报错：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Last_Error: Could <span class="keyword">not</span> execute Write_rows <span class="keyword">event</span> on <span class="keyword">table</span> db1<span class="variable">.t1</span>; Duplicate entry &#x27;<span class="number">28646</span>&#x27; <span class="keyword">for</span> key &#x27;t1<span class="variable">.PRIMARY</span>&#x27;, Error_code: <span class="number">1062</span>; handler error HA_ERR_FOUND_DUPP_KEY; the <span class="keyword">event</span>&#x27;s master log mysql-bin<span class="variable">.000052</span>, end_log_pos <span class="number">437</span></span><br></pre></td></tr></table></figure><p>二、MySQL 8.0 + Group Replication + 持续写入数据期间执行重建后，change master to &amp;&amp; start group_replication 报错：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">21</span>T14:<span class="number">51</span>:<span class="number">09</span><span class="variable">.977606</span>+<span class="number">08</span>:<span class="number">00</span> <span class="number">61</span> [System] [MY-<span class="number">010597</span>] [Repl] &#x27;CHANGE MASTER TO FOR CHANNEL &#x27;group_replication_applier&#x27; executed&#x27;. Previous state master_host=&#x27;&lt;NULL&gt;&#x27;, master_port= <span class="number">0</span>, master_log_file=&#x27;&#x27;, master_log_pos= <span class="number">4</span>, master_bind=&#x27;&#x27;. New state master_host=&#x27;&lt;NULL&gt;&#x27;, master_port= <span class="number">0</span>, master_log_file=&#x27;&#x27;, master_log_pos= <span class="number">4</span>, master_bind=&#x27;&#x27;.</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">21</span>T14:<span class="number">51</span>:<span class="number">09</span><span class="variable">.987494</span>+<span class="number">08</span>:<span class="number">00</span> <span class="number">61</span> [ERROR] [MY-<span class="number">013124</span>] [Repl] Slave SQL <span class="keyword">for</span> channel &#x27;group_replication_applier&#x27;: Slave failed to initialize relay log info structure from the repository, Error_code: MY-<span class="number">013124</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">21</span>T14:<span class="number">51</span>:<span class="number">09</span><span class="variable">.987542</span>+<span class="number">08</span>:<span class="number">00</span> <span class="number">61</span> [ERROR] [MY-<span class="number">011534</span>] [Repl] Plugin group_replication reported: &#x27;Error <span class="keyword">while</span> starting the group replication applier thread&#x27;</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">21</span>T14:<span class="number">51</span>:<span class="number">09</span><span class="variable">.987651</span>+<span class="number">08</span>:<span class="number">00</span> <span class="number">7</span> [ERROR] [MY-<span class="number">011669</span>] [Repl] Plugin group_replication reported: &#x27;Unable to initialize the Group Replication applier <span class="keyword">module</span>.&#x27;</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">21</span>T14:<span class="number">51</span>:<span class="number">09</span><span class="variable">.987831</span>+<span class="number">08</span>:<span class="number">00</span> <span class="number">7</span> [ERROR] [MY-<span class="number">011735</span>] [Repl] Plugin group_replication reported: &#x27;[GCS] The member is leaving a group without being on one.&#x27;</span><br></pre></td></tr></table></figure><p>要解释这个问题，首先要弄清楚 xtrabackup 2.4 和 8.0 的区别。</p><h3 id="xtrabackup-2-4-和-8-0-区别"><a href="#xtrabackup-2-4-和-8-0-区别" class="headerlink" title="xtrabackup 2.4 和 8.0 区别"></a>xtrabackup 2.4 和 8.0 区别</h3><p><strong>google 查到 xtrabackup 8.0 与 2.4 版本行为有所不同：</strong></p><blockquote><ol><li>Xtrabackup 2.4 备份后生成的 <code>xtrabackup_binlog_info</code> 文件记录的 GTID 信息是准确的，但是备份恢复后 <code>show master status</code> 显示的 GTID 是不准确的。</li><li>Xtrabackup 8.0 在备份只有 InnoDB 表的实例时，<code>xtrabackup_binlog_info</code> 文件记录的 GTID 信息不一定是准确的，但是备份恢复后 <code>show master status</code> 显示的 GTID 是准确的。</li><li>Xtrabackup 8.0 在备份有非 InnoDB 表格的实例时，<code>xtrabackup_binlog_info</code> 文件记录的 GTID 信息是准确的，备份恢复后 <code>show master status</code> 显示的 GTID 也是准确的。</li></ol></blockquote><p><strong>之前研究过 xtrabackup 2.4 ，其过程大致如下：</strong></p><blockquote><ol><li>start backup</li><li>copy ibdata1 / copy .ibd file</li><li>excuted FTWRL</li><li>backup non-InnoDB tables and files</li><li>writing xtrabackup_binlog_info</li><li>executed FLUSH NO_WRITE_TO_BINLOG ENGINE LOGS</li><li>executed UNLOCK TABLES</li><li>copying ib_buffer_pool</li><li>completed OK!</li></ol></blockquote><p><strong>问题 1：xtrabackup 8.0 的执行过程是什么样？</strong></p><p>首先，查看重建期间的 <code>general log</code>：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.136376</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySET SESSION wait_timeout=<span class="number">2147483</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.136439</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySET SESSION autocommit=<span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.136523</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySET NAMES utf8</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.136595</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySHOW VARIABLES</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.138840</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySELECT COUNT(*) FROM information_schema<span class="variable">.tables</span> WHERE engine = &#x27;MyISAM&#x27; OR engine = &#x27;RocksDB&#x27;</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.140203</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySHOW ENGINES</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.140407</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySHOW ENGINE INNODB STATUS</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.141570</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySELECT PLUGIN_NAME, PLUGIN_LIBRARY FROM information_schema<span class="variable">.plugins</span> WHERE PLUGIN_STATUS = &#x27;ACTIVE&#x27; AND PLUGIN_TYPE = &#x27;KEYRING&#x27;</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.142140</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySELECT  CONCAT(table_schema, &#x27;/&#x27;, table_name), engine FROM information_schema<span class="variable">.tables</span> WHERE engine NOT IN (&#x27;MyISAM&#x27;, &#x27;InnoDB&#x27;, &#x27;CSV&#x27;, &#x27;MRG_MYISAM&#x27;, &#x27;ROCKSDB&#x27;) AND table_schema NOT IN (  &#x27;performance_schema&#x27;, &#x27;information_schema&#x27;,   &#x27;mysql&#x27;)</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.209819</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">171</span> QuerySET SESSION wait_timeout=<span class="number">2147483</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.209879</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">171</span> QuerySET SESSION autocommit=<span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.209950</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">171</span> QuerySET NAMES utf8</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.210015</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">171</span> QuerySHOW VARIABLES</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.214030</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySELECT T2<span class="variable">.PATH</span>,        T2<span class="variable">.NAME</span>,        T1<span class="variable">.SPACE_TYPE</span> FROM   INFORMATION_SCHEMA<span class="variable">.INNODB_TABLESPACES</span> T1        JOIN INFORMATION_SCHEMA<span class="variable">.INNODB_TABLESPACES_BRIEF</span> T2 USING (SPACE) WHERE  T1<span class="variable">.SPACE_TYPE</span> = &#x27;Single&#x27; &amp;&amp; T1<span class="variable">.ROW_FORMAT</span> != &#x27;Undo&#x27;UNION SELECT T2<span class="variable">.PATH</span>,        SUBSTRING_INDEX(SUBSTRING_INDEX(T2<span class="variable">.PATH</span>, &#x27;/&#x27;, -<span class="number">1</span>), &#x27;.&#x27;, <span class="number">1</span>) NAME,        T1<span class="variable">.SPACE_TYPE</span> FROM   INFORMATION_SCHEMA <span class="variable">.INNODB_TABLESPACES</span> T1        JOIN INFORMATION_SCHEMA <span class="variable">.INNODB_TABLESPACES_BRIEF</span> T2 USING (SPACE) WHERE  T1<span class="variable">.SPACE_TYPE</span> = &#x27;General&#x27; &amp;&amp; T1<span class="variable">.ROW_FORMAT</span> != &#x27;Undo&#x27;</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">19</span><span class="variable">.533904</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QueryFLUSH NO_WRITE_TO_BINLOG BINARY LOGS</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">19</span><span class="variable">.543095</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySELECT server_uuid, <span class="keyword">local</span>, replication, storage_engines FROM performance_schema<span class="variable">.log_status</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">19</span><span class="variable">.543418</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySHOW VARIABLES</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">19</span><span class="variable">.545383</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySHOW VARIABLES</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">19</span><span class="variable">.550641</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QueryFLUSH NO_WRITE_TO_BINLOG ENGINE LOGS</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">20</span><span class="variable">.556885</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySELECT UUID()</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">20</span><span class="variable">.557118</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySELECT VERSION()</span><br></pre></td></tr></table></figure><p>可见，<strong>xtrabackup 8.0 默认情况下大致过程如下：</strong></p><blockquote><ol><li>start backup</li><li>copy .ibd file</li><li>backup non-InnoDB tables and files</li><li>executed FLUSH NO_WRITE_TO_BINLOG BINARY LOGS</li><li>selecting LSN and binary log position from p_s.log_status</li><li>copy last binlog file</li><li>writing /mysql/backup/backup/binlog.index</li><li>writing xtrabackup_binlog_info</li><li>executing FLUSH NO_WRITE_TO_BINLOG ENGINE LOGS</li><li>copy ib_buffer_pool</li><li>completed OK!</li></ol><p><strong>注意：</strong> 当存在非 InnoDB 表时，xtrabackup 8.0 会执行 FTWRL。</p></blockquote><p>从上述步骤可知，xtrabackup 8.0 与 2.4 的步骤<strong>主要区别</strong>为：</p><p>当只存在 InnoDB 引擎的表时，不再执行 FTWRL，而是通过 上述第 5 步（<code>SELECT server_uuid, local, replication, storage_engines FROM performance_schema.log_status</code> ）来获取 LSN、binlog position、GTID 。</p><p>手册中对于表 <a href="https://dev.mysql.com/doc/refman/8.0/en/performance-schema-log-status-table.html">log_status</a> 的描述如下：</p><blockquote><p>The <a href="https://dev.mysql.com/doc/refman/8.0/en/performance-schema-log-status-table.html"><code>log_status</code></a> table provides information that enables an online backup tool to copy the required log files without locking those resources for the duration of the copy process.</p><p>When the <a href="https://dev.mysql.com/doc/refman/8.0/en/performance-schema-log-status-table.html"><code>log_status</code></a> table is queried, the server blocks logging and related administrative changes for just long enough to populate the table, then releases the resources. The <a href="https://dev.mysql.com/doc/refman/8.0/en/performance-schema-log-status-table.html"><code>log_status</code></a> table informs the online backup which point it should copy up to in the source’s binary log and <code>gtid_executed</code> record, and the relay log for each replication channel. It also provides relevant information for individual storage engines, such as the last log sequence number (LSN) and the LSN of the last checkpoint taken for the <code>InnoDB</code> storage engine.</p></blockquote><p>从上述手册描述可知，<code>performance_schema.log_status</code>是 MySQL 8.0 提供给在线备份工具获取复制信息的表格，查询该表时，mysql server 将阻止日志的记录和相关的更改来获取足够的时间以填充该表，然后释放资源。</p><p>log_status 表通知在线备份工具当前主库的 binlog 的位点和 gtid_executed 的值以及每个复制通道的 relay log。另外，它还提供了各个存储引擎的相关信息，比如，提供了 InnoDB 引擎使用的最后一个日志序列号（LSN）和最后一个检查点的 LSN。</p><p><code>performance_schema.log_status</code>表定义为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Semi-Sync</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> performance_schema.log_status\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">    SERVER_UUID: <span class="number">6</span>b437e80<span class="operator">-</span>e5d5<span class="number">-11</span>ea<span class="number">-88e3</span><span class="number">-52549922</span>fdbb</span><br><span class="line">          <span class="keyword">LOCAL</span>: &#123;&quot;gtid_executed&quot;: &quot;6b437e80-e5d5-11ea-88e3-52549922fdbb:1-201094&quot;, &quot;binary_log_file&quot;: &quot;mysql-bin.000079&quot;, &quot;binary_log_position&quot;: <span class="number">195</span>&#125;</span><br><span class="line">    REPLICATION: &#123;&quot;channels&quot;: []&#125;</span><br><span class="line">STORAGE_ENGINES: &#123;&quot;InnoDB&quot;: &#123;&quot;LSN&quot;: <span class="number">23711425885</span>, &quot;LSN_checkpoint&quot;: <span class="number">23711425885</span>&#125;&#125;</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Group Replication</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> performance_schema.log_status\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">    SERVER_UUID: <span class="number">7</span>bd32480<span class="operator">-</span>e5d5<span class="number">-11</span>ea<span class="number">-8</span>f8a<span class="number">-525499</span>cfbb7d</span><br><span class="line">          <span class="keyword">LOCAL</span>: &#123;&quot;gtid_executed&quot;: &quot;aaaaaaaa-aaaa-aaaa-aaaa-53ab6ea1210a:1-11&quot;, &quot;binary_log_file&quot;: &quot;mysql-bin.000003&quot;, &quot;binary_log_position&quot;: <span class="number">1274</span>&#125;</span><br><span class="line">    REPLICATION: &#123;&quot;channels&quot;: [&#123;&quot;channel_name&quot;: &quot;group_replication_applier&quot;, &quot;relay_log_file&quot;: &quot;mysql-relay-bin-group_replication_applier.000004&quot;, &quot;relay_log_position&quot;: <span class="number">311</span>, &quot;relay_master_log_file&quot;: &quot;&quot;, &quot;exec_master_log_position&quot;: <span class="number">0</span>&#125;, &#123;&quot;channel_name&quot;: &quot;group_replication_recovery&quot;, &quot;relay_log_file&quot;: &quot;mysql-relay-bin-group_replication_recovery.000003&quot;, &quot;relay_log_position&quot;: <span class="number">151</span>, &quot;relay_master_log_file&quot;: &quot;&quot;, &quot;exec_master_log_position&quot;: <span class="number">0</span>&#125;]&#125;</span><br><span class="line">STORAGE_ENGINES: &#123;&quot;InnoDB&quot;: &#123;&quot;LSN&quot;: <span class="number">20257208</span>, &quot;LSN_checkpoint&quot;: <span class="number">20257208</span>&#125;&#125;</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>问题 2：<code>performance_schema.log_status</code>提供的信息是否准确呢？</strong></p><p>当写入压力大时，该表中的 binlog position 与 GTID 信息不一致。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> performance_schema.log_status\G  <span class="keyword">show</span> master status;</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">    SERVER_UUID: <span class="number">6</span>b437e80<span class="operator">-</span>e5d5<span class="number">-11</span>ea<span class="number">-88e3</span><span class="number">-52549922</span>fdbb</span><br><span class="line">          <span class="keyword">LOCAL</span>: &#123;&quot;gtid_executed&quot;: &quot;6b437e80-e5d5-11ea-88e3-52549922fdbb:1-448709&quot;, &quot;binary_log_file&quot;: &quot;mysql-bin.000087&quot;, &quot;binary_log_position&quot;: <span class="number">341265185</span>&#125;</span><br><span class="line">    REPLICATION: &#123;&quot;channels&quot;: []&#125;</span><br><span class="line">STORAGE_ENGINES: &#123;&quot;InnoDB&quot;: &#123;&quot;LSN&quot;: <span class="number">33797305275</span>, &quot;LSN_checkpoint&quot;: <span class="number">33433316246</span>&#125;&#125;</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.11</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------+--------------+------------------+-----------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> File             <span class="operator">|</span> Position  <span class="operator">|</span> Binlog_Do_DB <span class="operator">|</span> Binlog_Ignore_DB <span class="operator">|</span> Executed_Gtid_Set                             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------+--------------+------------------+-----------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> mysql<span class="operator">-</span>bin<span class="number">.000087</span> <span class="operator">|</span> <span class="number">343317905</span> <span class="operator">|</span>              <span class="operator">|</span>                  <span class="operator">|</span> <span class="number">6</span>b437e80<span class="operator">-</span>e5d5<span class="number">-11</span>ea<span class="number">-88e3</span><span class="number">-52549922</span>fdbb:<span class="number">1</span><span class="number">-448709</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------+--------------+------------------+-----------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p><strong>问题 3：既然 log_status 中的 binlog position 不准确，为什么备份恢复后 GTID 并没有缺失，数据也没问题？</strong></p><p>原因是 xtrabackup 8.0 在第 4 步 <code>FLUSH NO_WRITE_TO_BINLOG BINARY LOGS</code>之后，在第 6 步 <code>copy last binlog file</code>，这样备份恢复出的新实例在启动后不仅会读取 <code>gtid_executed</code> 表，还会读取拷贝的那个 binlog 文件来更新 GTID。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ mysqlbinlog -vv /data/mysql/mysql-bin<span class="variable">.000096</span></span><br><span class="line"><span class="comment">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/</span>;</span><br><span class="line"><span class="comment">/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/</span>;</span><br><span class="line">DELIMITER <span class="comment">/*!*/</span>;</span><br><span class="line"># at <span class="number">4</span></span><br><span class="line">#<span class="number">200827</span> <span class="number">11</span>:<span class="number">26</span>:<span class="number">47</span> server id <span class="number">575010000</span>  end_log_pos <span class="number">124</span> CRC32 <span class="number">0</span>xb026e372 Start: binlog v <span class="number">4</span>, server v <span class="number">8</span><span class="variable">.0</span><span class="variable">.19</span>-<span class="number">10</span> created <span class="number">200827</span> <span class="number">11</span>:<span class="number">26</span>:<span class="number">47</span></span><br><span class="line"># Warning: <span class="keyword">this</span> binlog is either in <span class="keyword">use</span> <span class="keyword">or</span> was <span class="keyword">not</span> closed properly.</span><br><span class="line">BINLOG &#x27;</span><br><span class="line"><span class="number">9</span>ydHXw/Q9EUieAAAAHwAAAABAAQAOC4wLjE5LTEwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAEwANAAgAAAAABAAEAAAAYAAEGggAAAAICAgCAAAACgoKKioAEjQA</span><br><span class="line">CgFy4yaw</span><br><span class="line">&#x27;<span class="comment">/*!*/</span>;</span><br><span class="line"># at <span class="number">124</span></span><br><span class="line">#<span class="number">200827</span> <span class="number">11</span>:<span class="number">26</span>:<span class="number">47</span> server id <span class="number">575010000</span>  end_log_pos <span class="number">195</span> CRC32 <span class="number">0</span>xad060415 Previous-GTIDs</span><br><span class="line"># <span class="number">6</span>b437e80-e5d5-<span class="number">11</span>ea-<span class="number">88</span>e3-<span class="number">52549922</span>fdbb:<span class="number">1</span>-<span class="number">465503</span></span><br><span class="line">SET @@SESSION<span class="variable">.GTID_NEXT</span>= &#x27;AUTOMATIC&#x27; <span class="comment">/* added by mysqlbinlog */</span> <span class="comment">/*!*/</span>;</span><br><span class="line">DELIMITER ;</span><br><span class="line"># End of log file</span><br><span class="line"><span class="comment">/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/</span>;</span><br><span class="line"><span class="comment">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/</span>;</span><br></pre></td></tr></table></figure><h3 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h3><h4 id="坑一：MySQL-8-0-Semi-Sync-重建问题"><a href="#坑一：MySQL-8-0-Semi-Sync-重建问题" class="headerlink" title="坑一：MySQL 8.0 + Semi-Sync 重建问题"></a>坑一：MySQL 8.0 + Semi-Sync 重建问题</h4><p>xenon 原有的重建逻辑是适配于 MySQL 5.6、5.7 的（重建过程中 xenon 进程存活），一直无问题：</p><blockquote><ol><li>禁用 raft，将 xenon 状态设为 LEARNER ；</li><li>如 mysql 进程存在，则 stop mysql；</li><li>清空 MySQL 数据目录；</li><li>执行 <code>xtrabackup --backup</code>以 <code>xbstream</code>方式获取对端数据；</li><li>执行 <code>xtrabackup --prepare</code>应用 redo log；</li><li>启动 mysql；</li><li>执行 <code>stop slave; reset slave all</code>；</li><li>执行 <code>reset master</code>，以 <code>xtrabackup_binlog_info</code>文件中的 GTID 为准设置 <code>gtid_purged</code>；</li><li>启用 raft，将 xenon 状态设为 FOLLOWER 或 IDLE；</li><li>等待 xenon 自动 <code>change master to</code>到主节点。</li><li>执行 <code>start slave</code>。</li></ol></blockquote><p><strong>问题 1：为什么在 MySQL 8.0 + Semi-Sync 组合下会出现 Duplicate entry ？</strong></p><p>跟踪重建过程中的 general log，发现在第 6 和第 7 步中间，也就是设置 <code>gtid_purged</code>之前凭空多出了 <code>change master to</code> 和 <code>start slave</code> 操作：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">22</span><span class="variable">.817859</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL rpl_semi_sync_master_enabled=OFF</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">22</span><span class="variable">.818025</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL read_only = <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">22</span><span class="variable">.818143</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL super_read_only = <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">22</span><span class="variable">.818323</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     START SLAVE</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">22</span><span class="variable">.824449</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     STOP SLAVE</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">22</span><span class="variable">.824610</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     CHANGE MASTER TO MASTER_HOST = &#x27;<span class="number">192</span><span class="variable">.168</span><span class="variable">.0</span><span class="variable">.3</span>&#x27;, MASTER_USER = &#x27;qc_repl&#x27;, MASTER_PASSWORD = &lt;secret&gt;, MASTER_PORT = <span class="number">3306</span>, MASTER_AUTO_POSITION = <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">22</span><span class="variable">.833710</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     START SLAVE</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">22</span><span class="variable">.935973</span>+<span class="number">08</span>:<span class="number">00</span>           <span class="number">10</span> Query     BEGIN</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">22</span><span class="variable">.936084</span>+<span class="number">08</span>:<span class="number">00</span>           <span class="number">10</span> Query     COMMIT <span class="comment">/* implicit, from Xid_log_event */</span></span><br><span class="line">......</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">24</span><span class="variable">.701711</span>+<span class="number">08</span>:<span class="number">00</span>           <span class="number">10</span> Query     BEGIN</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">24</span><span class="variable">.701901</span>+<span class="number">08</span>:<span class="number">00</span>           <span class="number">10</span> Query     COMMIT <span class="comment">/* implicit, from Xid_log_event */</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">24</span><span class="variable">.816571</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL rpl_semi_sync_master_enabled=OFF</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">24</span><span class="variable">.816886</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL read_only = <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">24</span><span class="variable">.817177</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL super_read_only = <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">24</span><span class="variable">.817281</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     START SLAVE</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.039581</span>+<span class="number">08</span>:<span class="number">00</span>           <span class="number">10</span> Query     BEGIN</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.039749</span>+<span class="number">08</span>:<span class="number">00</span>           <span class="number">10</span> Query     COMMIT <span class="comment">/* implicit, from Xid_log_event */</span></span><br><span class="line">......</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.152919</span>+<span class="number">08</span>:<span class="number">00</span>           <span class="number">10</span> Query     BEGIN</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.153082</span>+<span class="number">08</span>:<span class="number">00</span>           <span class="number">10</span> Query     COMMIT <span class="comment">/* implicit, from Xid_log_event */</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.389776</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     STOP SLAVE</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.392581</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     RESET SLAVE ALL</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.407434</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     RESET MASTER</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.417292</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL gtid_purged=&#x27;<span class="number">6</span>b437e80-e5d5-<span class="number">11</span>ea-<span class="number">88</span>e3-<span class="number">52549922</span>fdbb:<span class="number">1</span>-<span class="number">102610</span></span><br><span class="line">&#x27;</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.419835</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     START SLAVE</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.427071</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL read_only = <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.427178</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL super_read_only = <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.427271</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL sync_binlog=<span class="number">1000</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.427339</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL innodb_flush_log_at_trx_commit=<span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.427423</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SHOW SLAVE STATUS</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.427600</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SHOW MASTER STATUS</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">26</span><span class="variable">.817622</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL rpl_semi_sync_master_enabled=OFF</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">26</span><span class="variable">.817794</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL read_only = <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">26</span><span class="variable">.817897</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL super_read_only = <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">26</span><span class="variable">.817988</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     START SLAVE</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">26</span><span class="variable">.818381</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SHOW SLAVE STATUS</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">26</span><span class="variable">.818570</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SHOW MASTER STATUS</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">26</span><span class="variable">.818715</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     STOP SLAVE</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">26</span><span class="variable">.818823</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     CHANGE MASTER TO MASTER_HOST = &#x27;<span class="number">192</span><span class="variable">.168</span><span class="variable">.0</span><span class="variable">.3</span>&#x27;, MASTER_USER = &#x27;qc_repl&#x27;, MASTER_PASSWORD = &lt;secret&gt;, MASTER_PORT = <span class="number">3306</span>, MASTER_AUTO_POSITION = <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">26</span><span class="variable">.832164</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     START SLAVE</span><br></pre></td></tr></table></figure><p>这就是说在设置 gtid_purged 之前已经启用复制获取了一部分数据，那么 xtrabackup_binlog_info 中的内容就不再准确，之后设置的 GTID 与实际数据就不一致，实际的数据比设置的 GTID 要多，引起主键冲突。</p><p><strong>问题 2：为什么之前 MySQL 5.6、5.7 从没遇到过这个问题呢？</strong></p><p>测试了很多次，发现在 MySQL 5.6 &amp; 5.7 在 <code>set gtid_purged</code> 前执行 <code>change master to &amp; start slave</code> 后会报复制错误 <code>Slave failed to initialize relay log info structure from the repository</code> ，而在 <code>reset slave all; reset master、set gtid_purged</code>后再执行 <code>change master to &amp; start slave</code> 就可以正常复制，数据无误。</p><p><strong>问题 3：xenon 中哪块逻辑引起的额外的 change master to 和 start slave ？</strong></p><p>问题根源在重建期间 xenon 会设为 LEARNER 角色，而该角色在探测到 MySQL Alive 后，会 change master 到主节点。正常来说，要等 raft 状态设为 FOLLOWER 后由 FOLLOWER 的监听线程 change master 到主节点。（代码见 <a href="https://github.com/radondb/xenon/pull/104">pr104</a> 、<a href="https://github.com/radondb/xenon/pull/102">pr102</a> ）</p><h4 id="坑二：MySQL-8-0-Group-Replication-重建后无法启动-MGR"><a href="#坑二：MySQL-8-0-Group-Replication-重建后无法启动-MGR" class="headerlink" title="坑二：MySQL 8.0 + Group-Replication 重建后无法启动 MGR"></a>坑二：MySQL 8.0 + Group-Replication 重建后无法启动 MGR</h4><p>根据报错信息 <code>Slave failed to initialize relay log info structure from the repository</code>看，应该是 xtrabackup 重建后的数据目录保留了 slave 复制信息导致的，尝试在启动组复制前执行 <code>reset slave或reset slave all</code>即可解决。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><ol><li>Xtrabackup 2.4 备份后生成的 <code>xtrabackup_binlog_info</code> 文件记录的 GTID 信息是准确的，但是备份恢复后 <code>show master status</code> 显示的 GTID 是不准确的。</li><li>Xtrabackup 8.0 在备份只有 InnoDB 表的实例时，<code>xtrabackup_binlog_info</code> 文件记录的 GTID 信息不一定是准确的，但是备份恢复后 <code>show master status</code> 显示的 GTID 是准确的。</li><li>Xtrabackup 8.0 在备份有非 InnoDB 表格的实例时，<code>xtrabackup_binlog_info</code> 文件记录的 GTID 信息是准确的，备份恢复后 <code>show master status</code> 显示的 GTID 也是准确的。</li><li>使用 Xtrabackup 8.0 重建集群节点后，无需执行 <code>reset master &amp; set gtid_purged</code> 操作。</li><li>使用 Xtrabackup 8.0 重建 Group-Replication 集群节点后，启动组复制前需要先执行 <code>reset slave或reset slave all</code>清除 slave 信息，否则 <code>start group_replication</code> 会失败。</li></ol></blockquote><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本文首发于 2020-08-27 13:46:15&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;作者：卢文双 资深数据库内核研发&lt;/strong&gt;&lt;/</summary>
      
    
    
    
    <category term="MySQL" scheme="http://dbkernel.github.io/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://dbkernel.github.io/tags/MySQL/"/>
    
    <category term="问题定位" scheme="http://dbkernel.github.io/tags/%E9%97%AE%E9%A2%98%E5%AE%9A%E4%BD%8D/"/>
    
    <category term="Percona" scheme="http://dbkernel.github.io/tags/Percona/"/>
    
    <category term="Xtrabackup" scheme="http://dbkernel.github.io/tags/Xtrabackup/"/>
    
    <category term="RadonDB" scheme="http://dbkernel.github.io/tags/RadonDB/"/>
    
    <category term="Xenon" scheme="http://dbkernel.github.io/tags/Xenon/"/>
    
  </entry>
  
  <entry>
    <title>源码分析 | ClickHouse和他的朋友们（10）MergeTree Write-Ahead Log</title>
    <link href="http://dbkernel.github.io/2020/08/20/clickhouse-and-friends-10-merge-tree-wal/"/>
    <id>http://dbkernel.github.io/2020/08/20/clickhouse-and-friends-10-merge-tree-wal/</id>
    <published>2020-08-20T11:55:14.000Z</published>
    <updated>2022-07-07T02:12:17.110Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-08-20 19:55:14</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/08/18/clickhouse-and-friends-merge-tree-wal/">https://bohutang.me/2020/08/18/clickhouse-and-friends-merge-tree-wal/</a><br>以下为正文。</p></blockquote><p>数据库系统为了提高写入性能，会把数据先写到内存，等“攒”到一定程度后再回写到磁盘，比如 MySQL 的 buffer pool 机制。</p><p>因为数据先写到内存，为了数据的安全性，我们需要一个 Write-Ahead Log (WAL) 来保证内存数据的安全性。</p><p>今天我们来看看 ClickHouse 新增的 <a href="https://github.com/ClickHouse/ClickHouse/pull/8290">MergeTreeWriteAheadLog</a> 模块，它到底解决了什么问题。</p><h2 id="高频写问题"><a href="#高频写问题" class="headerlink" title="高频写问题"></a>高频写问题</h2><p>对于 ClickHouse MergeTree 引擎，每次写入(即使１条数据)都会在磁盘生成一个分区目录(part)，等着 merge 线程合并。</p><p>如果有多个客户端，每个客户端写入的数据量较少、次数较频繁的情况下，就会引发 <code>DB::Exception: Too many parts</code> 错误。</p><p>这样就对客户端有一定的要求，比如需要做 batch 写入。</p><p>或者，写入到 Buffer 引擎，定时的刷回 MergeTree，缺点是在宕机时可能会丢失数据。</p><h2 id="MergeTree-WAL"><a href="#MergeTree-WAL" class="headerlink" title="MergeTree WAL"></a>MergeTree WAL</h2><h3 id="1-默认模式"><a href="#1-默认模式" class="headerlink" title="1. 默认模式"></a>1. 默认模式</h3><p>我们先看看在没有 WAL 情况下，MergeTree 是如何写入的：</p><p><img src="mergetree-part-raw.png" alt="mergetree-part-raw.png"></p><p>每次写入 MergeTree 都会直接在磁盘上创建分区目录，并生成分区数据，这种模式其实就是 WAL + 数据的融合。</p><p>很显然，这种模式不适合频繁写操作的情况，否则会生成非常多的分区目录和文件，引发 <code>Too many parts</code> 错误。</p><h3 id="2-WAL-模式"><a href="#2-WAL-模式" class="headerlink" title="2. WAL 模式"></a>2. WAL 模式</h3><p>设置 SETTINGS: <code>min_rows_for_compact_part=2</code>，分别执行２条写 SQL，数据会先写到 wal.bin 文件：</p><p><img src="mergetree-part-wal.png" alt="mergetree-part-wal.png"></p><p>当满足 <code>min_rows_for_compact_part=2</code> 后，merger 线程触发合并操作，生成 <code>1_1_2_1</code> 分区，也就是完成了 wal.bin 里的 <code>1_1_1_0</code> 和 <code>1_2_2_0</code> 两个分区的合并操作。当我们执行第三条 SQL 写入:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> default.mt(a,b,c) <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>数据块(分区)会继续追加到 wal.bin 尾部：</p><p><img src="mergetree-part-wal-merge.png" alt="mergetree-part-wal-merge.png"></p><p>此时，3 条数据分布在两个地方：分区 <code>1_1_2_1</code>， wal.bin 里的 <code>1_3_3_0</code>。</p><p>这样就有一个问题：当我们执行查询的时候，数据是怎么合并的呢？</p><p>MergeTree 使用全局结构 <code>data_parts_indexes</code> 维护分区信息，当服务启动的时候，<code>MergeTreeData::loadDataParts</code>方法：</p><ol><li><code>data_parts_indexes.insert(1_1_2_1)</code></li><li>读取 <code>wal.bin</code>，通过 <code>getActiveContainingPart</code> 判断分区是否已经 merge 到磁盘：<code>1_1_1_0</code> 已经存在, <code>1_2_2_0</code> 已经存在，<code>data_parts_indexes.insert(1_3_3_0)</code></li><li><code>data_parts_indexes:&#123;1_1_2_1,1_3_3_0&#125;</code></li></ol><p>这样，它总是能维护全局的分区信息。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>WAL 功能在 <a href="https://github.com/ClickHouse/ClickHouse/pull/8290">PR＃8290</a> 实现，master 分支已经默认开启。</p><p>MergeTree 通过 WAL 来保护客户端的高频、少量写机制，减少服务端目录和文件数量，让客户端操作尽可能简单、高效。</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;strong&gt;本文首发于 2020-08-20 19:55:14&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《ClickHouse 和他的朋友们》系列文章转载自圈内好友 &lt;a href=&quot;https://b</summary>
      
    
    
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/categories/ClickHouse/"/>
    
    
    <category term="ClickHouse和他的朋友们" scheme="http://dbkernel.github.io/tags/ClickHouse%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/tags/ClickHouse/"/>
    
    <category term="源码分析" scheme="http://dbkernel.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="WAL" scheme="http://dbkernel.github.io/tags/WAL/"/>
    
    <category term="MergeTree" scheme="http://dbkernel.github.io/tags/MergeTree/"/>
    
  </entry>
  
  <entry>
    <title>源码分析 | ClickHouse和他的朋友们（9）MySQL实时复制与实现</title>
    <link href="http://dbkernel.github.io/2020/07/28/clickhouse-and-friends-09-mysql-replication/"/>
    <id>http://dbkernel.github.io/2020/07/28/clickhouse-and-friends-09-mysql-replication/</id>
    <published>2020-07-28T13:50:10.000Z</published>
    <updated>2022-07-07T02:12:02.194Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-07-28 21:50:10</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/07/25/clickhouse-and-friends-parser/">https://bohutang.me/2020/07/25/clickhouse-and-friends-parser/</a><br>以下为正文。</p></blockquote><p><img src="clickhouse-map-2020-materialzemysql.png" alt="clickhouse-map-2020-materialzemysql.png"></p><p>很多人看到标题还以为自己走错了夜场，其实没有。</p><p>ClickHouse 可以挂载为 MySQL 的一个从库 ，先全量再增量的实时同步 MySQL 数据，这个功能可以说是今年最亮眼、最刚需的功能，基于它我们可以轻松的打造一套企业级解决方案，让 OLTP 和 OLAP 的融合从此不再头疼。</p><p>目前支持 MySQL 5.6/5.7/8.0 版本，兼容 Delete/Update 语句，及大部分常用的 DDL 操作。</p><p><a href="https://github.com/ClickHouse/ClickHouse/pull/10851">代码</a>已经合并到 upstream master 分支，预计在 20.8 版本作为 experimental 功能发布。</p><p>毕竟是两个异构生态的融合，仍然有不少的工作要做，同时也期待着社区用户的反馈，以加速迭代。</p><h3 id="代码获取"><a href="#代码获取" class="headerlink" title="代码获取"></a>代码获取</h3><p>获取 <a href="https://github.com/ClickHouse/ClickHouse">clickhouse/master</a> 代码编译即可，方法见 <a href="https://bohutang.me/2020/06/05/clickhouse-and-friends-development/">ClickHouse 和他的朋友们（1）编译、开发、测试</a>…</p><h3 id="MySQL-Master"><a href="#MySQL-Master" class="headerlink" title="MySQL Master"></a>MySQL Master</h3><p>我们需要一个开启 binlog 的 MySQL 作为 master:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -e MYSQL_ROOT_PASSWORD=123 mysql:5.7 mysqld --datadir=/var/lib/mysql --server-id=1 --log-bin=/var/lib/mysql/mysql-bin.log --gtid-mode=ON --enforce-gtid-consistency</span><br></pre></td></tr></table></figure><p>创建数据库和表，并写入数据:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> database ckdb;</span><br><span class="line">mysql<span class="operator">&gt;</span> use ckdb;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> t1(a <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key, b <span class="type">int</span>);</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t1 <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">1</span>),(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> a <span class="operator">|</span> b    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="ClickHouse-Slave"><a href="#ClickHouse-Slave" class="headerlink" title="ClickHouse Slave"></a>ClickHouse Slave</h3><p>目前以 database 为单位进行复制，不同的 database 可以来自不同的 MySQL master，这样就可以实现多个 MySQL 源数据同步到一个 ClickHouse 做 OLAP 分析功能。</p><p>首先开启体验开关:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clickhouse :) <span class="keyword">SET</span> allow_experimental_database_materialize_mysql<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>创建一个复制通道：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">clickhouse :) <span class="keyword">CREATE</span> DATABASE ckdb ENGINE <span class="operator">=</span> MaterializeMySQL(<span class="string">&#x27;172.17.0.2:3306&#x27;</span>, <span class="string">&#x27;ckdb&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">clickhouse :) use ckdb;</span><br><span class="line">clickhouse :) <span class="keyword">show</span> tables;</span><br><span class="line">┌─name─┐</span><br><span class="line">│ t1   │</span><br><span class="line">└──────┘</span><br><span class="line">clickhouse :) <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line">┌─a─┬─b─┐</span><br><span class="line">│ <span class="number">1</span> │ <span class="number">1</span> │</span><br><span class="line">└───┴───┘</span><br><span class="line">┌─a─┬─b─┐</span><br><span class="line">│ <span class="number">2</span> │ <span class="number">2</span> │</span><br><span class="line">└───┴───┘</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> set. Elapsed: <span class="number">0.017</span> sec.</span><br></pre></td></tr></table></figure><p>看下 ClickHouse 的同步位点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat ckdatas/metadata/ckdb/.metadata</span><br><span class="line">Version:1</span><br><span class="line">Binlog File:mysql-bin.000001</span><br><span class="line">Binlog Position:913</span><br><span class="line">Data Version:0</span><br></pre></td></tr></table></figure><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>首先在 MySQL Master 上执行一个删除操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">delete</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> a<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>然后在 ClickHouse Slave 侧查看记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">clickhouse :) <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"></span><br><span class="line">┌─a─┬─b─┐</span><br><span class="line">│ <span class="number">2</span> │ <span class="number">2</span> │</span><br><span class="line">└───┴───┘</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="keyword">rows</span> <span class="keyword">in</span> set. Elapsed: <span class="number">0.032</span> sec.</span><br></pre></td></tr></table></figure><p>此时的 metadata 里 Data Version 已经递增到 2:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat ckdatas<span class="operator">/</span>metadata<span class="operator">/</span>ckdb<span class="operator">/</span>.metadata</span><br><span class="line">Version:<span class="number">1</span></span><br><span class="line">Binlog File:mysql<span class="operator">-</span>bin<span class="number">.000001</span></span><br><span class="line">Binlog Position:<span class="number">1171</span></span><br><span class="line">Data Version:<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><p>MySQL Master:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> a <span class="operator">|</span> b    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> update t1 <span class="keyword">set</span> b<span class="operator">=</span>b<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> a <span class="operator">|</span> b    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>ClickHouse Slave:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">clickhouse :) <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"></span><br><span class="line">┌─a─┬─b─┐</span><br><span class="line">│ <span class="number">2</span> │ <span class="number">3</span> │</span><br><span class="line">└───┴───┘</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="keyword">rows</span> <span class="keyword">in</span> set. Elapsed: <span class="number">0.023</span> sec.</span><br></pre></td></tr></table></figure><h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><h4 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MySQL          8C16G 云主机, 192.168.0.3，基础数据 10188183 条记录</span><br><span class="line">ClickHouse     8C16G 云主机, 192.168.0.4</span><br><span class="line">benchyou       8C8G  云主机, 192.168.0.5, 256并发写, https://github.com/xelabs/benchyou</span><br></pre></td></tr></table></figure><p>性能测试跟硬件环境有较大关系，这里使用的是云主机模式，数据供参考。</p><h4 id="全量性能"><a href="#全量性能" class="headerlink" title="全量性能"></a>全量性能</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span>c16G<span class="operator">-</span>vm :) <span class="keyword">create</span> database sbtest engine<span class="operator">=</span>MaterializeMySQL(<span class="string">&#x27;192.168.0.3:3306&#x27;</span>, <span class="string">&#x27;sbtest&#x27;</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;123&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">8</span>c16G<span class="operator">-</span>vm :) watch lv1;</span><br><span class="line"></span><br><span class="line">WATCH lv1</span><br><span class="line"></span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│       <span class="number">0</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">04</span> │        <span class="number">1</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│ <span class="number">1113585</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">05</span> │        <span class="number">2</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│ <span class="number">2227170</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">07</span> │        <span class="number">3</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│ <span class="number">3340755</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">10</span> │        <span class="number">4</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│ <span class="number">4454340</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">13</span> │        <span class="number">5</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│ <span class="number">5567925</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">16</span> │        <span class="number">6</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│ <span class="number">6681510</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">18</span> │        <span class="number">7</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│ <span class="number">7795095</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">22</span> │        <span class="number">8</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│ <span class="number">8908680</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">25</span> │        <span class="number">9</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌──<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│ <span class="number">10022265</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">28</span> │       <span class="number">10</span> │</span><br><span class="line">└──────────┴─────────────────────┴──────────┘</span><br><span class="line">┌──<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│ <span class="number">10188183</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">28</span> │       <span class="number">11</span> │</span><br><span class="line">└──────────┴─────────────────────┴──────────┘</span><br><span class="line">← Progress: <span class="number">11.00</span> <span class="keyword">rows</span>, <span class="number">220.00</span> B (<span class="number">0.16</span> <span class="keyword">rows</span><span class="operator">/</span>s., <span class="number">3.17</span> B<span class="operator">/</span>s.)</span><br></pre></td></tr></table></figure><p>在这个硬件环境下，全量同步性能大概是 <strong>424507/s</strong>，<strong>42w</strong> 事务每秒。</p><p>因为全量的数据之间没有依赖关系，可以进一步优化成并行，加速同步。</p><p>全量的性能直接决定 ClickHouse slave 坏掉后重建的速度，如果你的 MySQL 有 <strong>10 亿</strong>条数据，大概 <strong>40 分钟</strong>就可以重建完成。</p><h4 id="增量性能-实时同步"><a href="#增量性能-实时同步" class="headerlink" title="增量性能(实时同步)"></a>增量性能(实时同步)</h4><p>在当前配置下，ClickHouse slave 单线程回放消费能力大于 MySQL master 256 并发下生产能力，通过测试可以看到它们保持<strong>实时同步</strong>。</p><p>benchyou 压测数据，<strong>2.1w</strong> 事务/秒(MySQL 在当前环境下 TPS 上不去):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">./bin/benchyou --mysql-host=192.168.0.3 --mysql-user=test --mysql-password=123 --oltp-tables-count=1 --write-threads=256 --read-threads=0</span><br><span class="line"></span><br><span class="line">time            thds               tps     wtps    rtps</span><br><span class="line">[13s]        [r:0,w:256,u:0,d:0]  19962    19962   0</span><br><span class="line"></span><br><span class="line">time            thds               tps     wtps    rtps</span><br><span class="line">[14s]        [r:0,w:256,u:0,d:0]  20415    20415   0</span><br><span class="line"></span><br><span class="line">time            thds               tps     wtps    rtps</span><br><span class="line">[15s]        [r:0,w:256,u:0,d:0]  21131    21131   0</span><br><span class="line"></span><br><span class="line">time            thds               tps     wtps    rtps</span><br><span class="line">[16s]        [r:0,w:256,u:0,d:0]  21606    21606   0</span><br><span class="line"></span><br><span class="line">time            thds               tps     wtps    rtps</span><br><span class="line">[17s]        [r:0,w:256,u:0,d:0]  22505    22505   0</span><br></pre></td></tr></table></figure><p>ClickHouse 侧单线程回放能力，<strong>2.1w</strong> 事务/秒，实时同步：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">150732</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">15</span> │       <span class="number">17</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">155477</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">16</span> │       <span class="number">18</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">160222</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">16</span> │       <span class="number">19</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">164967</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">16</span> │       <span class="number">20</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">169712</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">16</span> │       <span class="number">21</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">174457</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">16</span> │       <span class="number">22</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">179202</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">17</span> │       <span class="number">23</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">183947</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">17</span> │       <span class="number">24</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">188692</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">17</span> │       <span class="number">25</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">193437</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">17</span> │       <span class="number">26</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">198182</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">17</span> │       <span class="number">27</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br></pre></td></tr></table></figure><h3 id="实现机制"><a href="#实现机制" class="headerlink" title="实现机制"></a>实现机制</h3><p>在探讨机制之前，首先需要了解下 MySQL 的 binlog event ，主要有以下几种类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. MYSQL_QUERY_EVENT　　　　-- DDL</span><br><span class="line">2. MYSQL_WRITE_ROWS_EVENT　-- insert数据</span><br><span class="line">3. MYSQL_UPDATE_ROWS_EVENT -- update数据</span><br><span class="line">4. MYSQL_DELETE_ROWS_EVENT -- delete数据</span><br></pre></td></tr></table></figure><p>当一个事务提交后，MySQL 会把执行的 SQL 处理成相应的 binlog event，并持久化到 binlog 文件。</p><p>binlog 是 MySQL 对外输出的重要途径，只要你实现 MySQL Replication Protocol，就可以流式的消费 MySQL 生产的 binlog event，具体协议见 <a href="https://dev.mysql.com/doc/internals/en/replication-protocol.html">Replication Protocol</a>。</p><p>由于历史原因，协议繁琐而诡异，这不是本文重点。</p><p>对于 ClickHouse 消费 MySQL binlog 来说，主要有以下３个难点：</p><ul><li>DDL 兼容</li><li>Delete/Update 支持</li><li>Query 过滤</li></ul><h4 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h4><p>DDL 兼容花费了大量的代码去实现。</p><p>首先，我们看看 MySQL 的表复制到 ClickHouse 后会变成什么样子。</p><p>MySQL master:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> t1\G;</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">       <span class="keyword">Table</span>: t1</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span>: <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t1` (</span><br><span class="line">  `a` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `b` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`a`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>latin1</span><br></pre></td></tr></table></figure><p>ClickHouse slave:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ATTACH <span class="keyword">TABLE</span> t1</span><br><span class="line">(</span><br><span class="line">    `a` Int32,</span><br><span class="line">    `b` Nullable(Int32),</span><br><span class="line">    `_sign` Int8,</span><br><span class="line">    `_version` UInt64</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> ReplacingMergeTree(_version)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> intDiv(a, <span class="number">4294967</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> tuple(a)</span><br><span class="line">SETTINGS index_granularity <span class="operator">=</span> <span class="number">8192</span></span><br></pre></td></tr></table></figure><p>可以看到：</p><ul><li>默认增加了 2 个隐藏字段：<code>_sign</code>(-1 删除, 1 写入) 和 <code>_version</code>(数据版本)</li><li>引擎转换成了 ReplacingMergeTree，以 _version 作为 column version</li><li>原主键字段 a 作为排序和分区键</li></ul><p>这只是一个表的复制，其他还有非常多的 DDL 处理，比如增加列、索引等，感兴趣可以观摩 Parsers/MySQL 下代码。</p><h4 id="Update-和-Delete"><a href="#Update-和-Delete" class="headerlink" title="Update 和 Delete"></a>Update 和 Delete</h4><p>当我们在 MySQL master 执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">delete</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> a<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> update t1 <span class="keyword">set</span> b<span class="operator">=</span>b<span class="operator">+</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>ClickHouse t1 数据（把 <code>_sign</code> 和 <code>_version</code> 一并查询）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">clickhouse :) <span class="keyword">select</span> a,b,_sign, _version <span class="keyword">from</span> t1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a,</span><br><span class="line">    b,</span><br><span class="line">    _sign,</span><br><span class="line">    _version</span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"></span><br><span class="line">┌─a─┬─b─┬─_sign─┬─_version─┐</span><br><span class="line">│ <span class="number">1</span> │ <span class="number">1</span> │     <span class="number">1</span> │        <span class="number">1</span> │</span><br><span class="line">│ <span class="number">2</span> │ <span class="number">2</span> │     <span class="number">1</span> │        <span class="number">1</span> │</span><br><span class="line">└───┴───┴───────┴──────────┘</span><br><span class="line">┌─a─┬─b─┬─_sign─┬─_version─┐</span><br><span class="line">│ <span class="number">1</span> │ <span class="number">1</span> │    <span class="number">-1</span> │        <span class="number">2</span> │</span><br><span class="line">└───┴───┴───────┴──────────┘</span><br><span class="line">┌─a─┬─b─┬─_sign─┬─_version─┐</span><br><span class="line">│ <span class="number">2</span> │ <span class="number">3</span> │     <span class="number">1</span> │        <span class="number">3</span> │</span><br><span class="line">└───┴───┴───────┴──────────┘</span><br></pre></td></tr></table></figure><p>根据返回结果，可以看到是由 3 个 part 组成。</p><p>part1 由 <code>mysql&gt; insert into t1 values(1,1),(2,2)</code> 生成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─a─┬─b─┬─_sign─┬─_version─┐</span><br><span class="line">│ 1 │ 1 │     1 │        1 │</span><br><span class="line">│ 2 │ 2 │     1 │        1 │</span><br><span class="line">└───┴───┴───────┴──────────┘</span><br></pre></td></tr></table></figure><p>part2 由 <code>mysql&gt; delete from t1 where a=1</code> 生成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">┌─a─┬─b─┬─_sign─┬─_version─┐</span><br><span class="line">│ 1 │ 1 │    -1 │        2 │</span><br><span class="line">└───┴───┴───────┴──────────┘</span><br><span class="line">说明：</span><br><span class="line">_sign = -1表明处于删除状态</span><br></pre></td></tr></table></figure><p>part3 由 <code>update t1 set b=b+1</code> 生成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─a─┬─b─┬─_sign─┬─_version─┐</span><br><span class="line">│ 2 │ 3 │     1 │        3 │</span><br><span class="line">└───┴───┴───────┴──────────┘</span><br></pre></td></tr></table></figure><p>使用 final 查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">clickhouse :) <span class="keyword">select</span> a,b,_sign,_version <span class="keyword">from</span> t1 <span class="keyword">final</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a,</span><br><span class="line">    b,</span><br><span class="line">    _sign,</span><br><span class="line">    _version</span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"><span class="keyword">FINAL</span></span><br><span class="line"></span><br><span class="line">┌─a─┬─b─┬─_sign─┬─_version─┐</span><br><span class="line">│ <span class="number">1</span> │ <span class="number">1</span> │    <span class="number">-1</span> │        <span class="number">2</span> │</span><br><span class="line">└───┴───┴───────┴──────────┘</span><br><span class="line">┌─a─┬─b─┬─_sign─┬─_version─┐</span><br><span class="line">│ <span class="number">2</span> │ <span class="number">3</span> │     <span class="number">1</span> │        <span class="number">3</span> │</span><br><span class="line">└───┴───┴───────┴──────────┘</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> set. Elapsed: <span class="number">0.016</span> sec.</span><br></pre></td></tr></table></figure><p>可以看到 ReplacingMergeTree 已经根据 <code>_version</code> 和 OrderBy 对记录进行去重。</p><h4 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h4><p>MySQL master:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> a <span class="operator">|</span> b    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>ClickHouse slave:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">clickhouse :) <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"></span><br><span class="line">┌─a─┬─b─┐</span><br><span class="line">│ <span class="number">2</span> │ <span class="number">3</span> │</span><br><span class="line">└───┴───┘</span><br><span class="line"></span><br><span class="line">clickhouse :) <span class="keyword">select</span> <span class="operator">*</span>,_sign,_version <span class="keyword">from</span> t1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="operator">*</span>,</span><br><span class="line">    _sign,</span><br><span class="line">    _version</span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"></span><br><span class="line">┌─a─┬─b─┬─_sign─┬─_version─┐</span><br><span class="line">│ <span class="number">1</span> │ <span class="number">1</span> │    <span class="number">-1</span> │        <span class="number">2</span> │</span><br><span class="line">│ <span class="number">2</span> │ <span class="number">3</span> │     <span class="number">1</span> │        <span class="number">3</span> │</span><br><span class="line">└───┴───┴───────┴──────────┘</span><br><span class="line">说明：这里还有一条删除记录，_sign为<span class="number">-1</span></span><br></pre></td></tr></table></figure><p>MaterializeMySQL 被定义成一种存储引擎，所以在读取的时候，会根据 <code>_sign</code> 状态进行判断，如果是-1 则是已经删除，进行过滤。</p><h3 id="并行回放"><a href="#并行回放" class="headerlink" title="并行回放"></a>并行回放</h3><p>为什么 MySQL 需要并行回放？</p><p>假设 MySQL master 有 1024 个并发同时写入、更新数据，瞬间产生大量的 binlog event ，MySQL slave 上只有一个线程一个 event 接着一个 event 式回放，于是 MySQL 实现了并行回放功能！</p><p>那么，MySQL slave 回放时能否完全(或接近)模拟出 master 当时的 1024 并发行为呢？</p><p>要想并行首先要解决的就是依赖问题：我们需要 master 标记出哪些 event 可以并行，哪些 event 有先后关系，因为它是第一现场。</p><p>MySQL 通过在 binlog 里增加:</p><ul><li>last_committed，相同则可以并行</li><li>sequece_number，较小先执行，描述先后依赖</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">last_committed=3   sequece_number=4   -- event1</span><br><span class="line">last_committed=4   sequece_number=5   -- event2</span><br><span class="line">last_committed=4   sequece_number=6   -- event3</span><br><span class="line">last_committed=5   sequece_number=7   -- event4</span><br></pre></td></tr></table></figure><p>event2 和 event3 则可以并行，event4 需要等待前面 event 完成才可以回放。</p><p>以上只是一个大体原理，目前 MySQL 有３种并行模式可以选择：</p><ol><li>基于 database 并行</li><li>基于 group commit 并行</li><li>基于主键不冲突的 write set 并行</li></ol><p>最大程度上让 MySQL slave 加速回放，整套机制还是异常复杂的。</p><p>回到 ClickHouse slave 问题，我们采用的单线程回放，延迟已经不是主要问题，这是由它们的机制决定的：</p><ul><li>MySQL slave 回放时，需要把 binlog event 转换成 SQL，然后模拟 master 的写入，这种逻辑复制是导致性能低下的最重要原因。</li><li>而 ClickHouse 在回放上，直接把 binlog event 转换成 底层 block 结构，然后直接写入底层的存储引擎，接近于物理复制，可以理解为把 binlog event 直接回放到 InnoDB 的 page。</li></ul><h3 id="读取最新"><a href="#读取最新" class="headerlink" title="读取最新"></a>读取最新</h3><p>虽然 ClickHouse slave 回放非常快，接近于实时，如何在 ClickHouse slave 上总是读取到最新的数据呢？</p><p>其实非常简单，借助 MySQL binlog GTID 特性，每次读的时候，我们跟 ｍ aster 做一次 executed_gtid 同步，然后等待这些 executed_gtid 回放完毕即可。</p><h3 id="数据一致性"><a href="#数据一致性" class="headerlink" title="数据一致性"></a>数据一致性</h3><p>对一致性要求较高的场景，我们怎么验证 MySQL master 的数据和 ClickHouse slave 的数据一致性呢？</p><p>这块初步想法是提供一个兼容 MySQL checksum 算法的函数，我们只需对比两边的 checksum 值即可。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>ClickHouse 实时复制同步 MySQL 数据是 upstream 2020 的一个 roadmap，在整体构架上比较有挑战一直无人接单，挑战主要来自两方面：</p><ul><li>对 MySQL 复制通道与协议非常熟悉</li><li>对 ClickHouse 整体机制非常熟悉</li></ul><p>这样，在两个本来有点遥远的山头中间架起了一座高速，这条 <a href="https://github.com/ClickHouse/ClickHouse/pull/10851">10851 号</a> 高速由 zhang1024(ClickHouse 侧) 和 BohuTANG(MySQL 复制) 两个修路工联合承建，目前已经合并到 upstream 分支。</p><p>关于同步 MySQL 的数据，目前大家的方案基本都是在中间安置一个 binlog 消费工具，这个工具对 event 进行解析，然后再转换成 ClickHouse 的 SQL 语句，写到 ClickHouse server，链路较长，性能损耗较大。</p><p><a href="https://github.com/ClickHouse/ClickHouse/pull/10851">10851 号</a> 高速是在 ClickHouse 内部实现一套 binlog 消费方案，然后根据 event 解析成 ClickHouse 内部的 block 结构，再直接回写到底层存储引擎，几乎是最高效的一种实现方式，实现与 MySQL 实时同步的能力，让分析更接近现实。</p><p>基于 database 级的复制，实现了多源复制的功能，如果复制通道坏掉，我们只需在 ClickHouse 侧删掉 database 再重建一次即可，非常快速、方便，OLTP+OLAP 就是这么简单！</p><p>要想富，先修路！</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;strong&gt;本文首发于 2020-07-28 21:50:10&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《ClickHouse 和他的朋友们》系列文章转载自圈内好友 &lt;a href=&quot;https://b</summary>
      
    
    
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/categories/ClickHouse/"/>
    
    
    <category term="MySQL" scheme="http://dbkernel.github.io/tags/MySQL/"/>
    
    <category term="ClickHouse和他的朋友们" scheme="http://dbkernel.github.io/tags/ClickHouse%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/tags/ClickHouse/"/>
    
    <category term="源码分析" scheme="http://dbkernel.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>源码分析 | ClickHouse和他的朋友们 (８) 纯手工打造的SQL解析器</title>
    <link href="http://dbkernel.github.io/2020/07/26/clickhouse-and-friends-08-parser/"/>
    <id>http://dbkernel.github.io/2020/07/26/clickhouse-and-friends-08-parser/</id>
    <published>2020-07-26T13:55:10.000Z</published>
    <updated>2022-07-07T02:11:26.090Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-07-26 21:55:10</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/07/25/clickhouse-and-friends-parser/">https://bohutang.me/2020/07/25/clickhouse-and-friends-parser/</a><br>以下为正文。</p></blockquote><p>现实生活中的物品一旦被标记为“纯手工打造”，给人的第一感觉就是“上乘之品”，一个字“贵”，比如北京老布鞋。</p><p>但是在计算机世界里，如果有人告诉你 ClickHouse 的 SQL 解析器是纯手工打造的，是不是很惊讶！</p><p>这个问题引起了不少网友的关注，所以本篇聊聊 ClickHouse 的纯手工解析器，看看它们的底层工作机制及优缺点。</p><p>枯燥先从一个 SQL 开始：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> a,b <span class="keyword">FROM</span> t1</span><br></pre></td></tr></table></figure><h2 id="token"><a href="#token" class="headerlink" title="token"></a>token</h2><p>首先对 SQL 里的字符逐个做判断，然后根据其关联性做 token 分割：</p><p><img src="parser.png" alt="parser.png"></p><p>比如连续的 WordChar，那它就是 BareWord，解析函数在 <a href="https://github.com/ClickHouse/ClickHouse/blob/558f9c76306ffc4e6add8fd34c2071b64e914103/src/Parsers/Lexer.cpp#L61">Lexer::nextTokenImpl()</a>，解析调用栈：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DB::Lexer::<span class="built_in">nextTokenImpl</span>() Lexer.cpp:<span class="number">63</span></span><br><span class="line">DB::Lexer::<span class="built_in">nextToken</span>() Lexer.cpp:<span class="number">52</span></span><br><span class="line">DB::Tokens::<span class="keyword">operator</span>[](<span class="keyword">unsigned</span> <span class="keyword">long</span>) TokenIterator.h:<span class="number">36</span></span><br><span class="line">DB::TokenIterator::<span class="built_in">get</span>() TokenIterator.h:<span class="number">62</span></span><br><span class="line">DB::TokenIterator::<span class="keyword">operator</span>-&gt;() TokenIterator.h:<span class="number">64</span></span><br><span class="line">DB::<span class="built_in">tryParseQuery</span>(DB::IParser&amp;, <span class="keyword">char</span> <span class="keyword">const</span>*&amp;, <span class="keyword">char</span> <span class="keyword">const</span>*, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt;&amp;, <span class="keyword">bool</span>, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, <span class="keyword">bool</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>) parseQuery.cpp:<span class="number">224</span></span><br><span class="line">DB::<span class="built_in">parseQueryAndMovePosition</span>(DB::IParser&amp;, <span class="keyword">char</span> <span class="keyword">const</span>*&amp;, <span class="keyword">char</span> <span class="keyword">const</span>*, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, <span class="keyword">bool</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>) parseQuery.cpp:<span class="number">314</span></span><br><span class="line">DB::<span class="built_in">parseQuery</span>(DB::IParser&amp;, <span class="keyword">char</span> <span class="keyword">const</span>*, <span class="keyword">char</span> <span class="keyword">const</span>*, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>) parseQuery.cpp:<span class="number">332</span></span><br><span class="line">DB::<span class="built_in">executeQueryImpl</span>(<span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *, DB::Context &amp;, <span class="keyword">bool</span>, DB::QueryProcessingStage::Enum, <span class="keyword">bool</span>, DB::ReadBuffer *) executeQuery.cpp:<span class="number">272</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">731</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">313</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">150</span></span><br></pre></td></tr></table></figure><h2 id="ast"><a href="#ast" class="headerlink" title="ast"></a>ast</h2><p>token 是最基础的元组，他们之间没有任何关联，只是一堆生冷的词组与符号，所以我们还需对其进行<strong>语法解析</strong>，让这些 token 之间建立一定的关系，达到一个可描述的活力。</p><p>ClickHouse 在解每一个 token 的时候，会根据当前的 token 进行状态空间进行预判（parse 返回 true 则进入子状态空间继续），然后决定状态跳转，比如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN  <span class="comment">-- TokenType::BareWord</span></span><br></pre></td></tr></table></figure><p>逻辑首先会进入 Parsers/ParserQuery.cpp 的 <a href="https://github.com/ClickHouse/ClickHouse/blob/558f9c76306ffc4e6add8fd34c2071b64e914103/src/Parsers/ParserQuery.cpp#L26">ParserQuery::parseImpl</a> 方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> res = query_with_output_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || insert_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || use_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || set_role_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || set_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || system_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || create_user_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || create_role_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || create_quota_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || create_row_policy_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || create_settings_profile_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || drop_access_entity_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || grant_p.<span class="built_in">parse</span>(pos, node, expected);</span><br></pre></td></tr></table></figure><p>这里会对所有 query 类型进行 parse 方法的调用，直到有分支返回 true。</p><p>我们来看<strong>第一层</strong> query_with_output_p.parse <a href="https://github.com/ClickHouse/ClickHouse/blob/558f9c76306ffc4e6add8fd34c2071b64e914103/src/Parsers/ParserQueryWithOutput.cpp#L31">Parsers/ParserQueryWithOutput.cpp</a>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> parsed =</span><br><span class="line">       explain_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || select_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || show_create_access_entity_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || show_tables_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || table_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || describe_table_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || show_processlist_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || create_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || alter_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || rename_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || drop_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || check_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || kill_query_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || optimize_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || watch_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || show_access_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || show_access_entities_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || show_grants_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || show_privileges_p.<span class="built_in">parse</span>(pos, query, expected</span><br></pre></td></tr></table></figure><p>跳进<strong>第二层</strong> explain_p.parse <a href="https://github.com/ClickHouse/ClickHouse/blob/558f9c76306ffc4e6add8fd34c2071b64e914103/src/Parsers/ParserExplainQuery.cpp#L10">ParserExplainQuery::parseImpl</a>状态空间：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ParserExplainQuery::parseImpl</span><span class="params">(Pos &amp; pos, ASTPtr &amp; node, Expected &amp; expected)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ASTExplainQuery::ExplainKind kind;</span><br><span class="line">    <span class="keyword">bool</span> old_syntax = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_ast</span><span class="params">(<span class="string">&quot;AST&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_analyze</span><span class="params">(<span class="string">&quot;ANALYZE&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_explain</span><span class="params">(<span class="string">&quot;EXPLAIN&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_syntax</span><span class="params">(<span class="string">&quot;SYNTAX&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_pipeline</span><span class="params">(<span class="string">&quot;PIPELINE&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_plan</span><span class="params">(<span class="string">&quot;PLAN&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    ... ...</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (s_explain.<span class="built_in">ignore</span>(pos, expected))</span><br><span class="line">    &#123;</span><br><span class="line">       ... ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ... ...</span><br><span class="line"></span><br><span class="line">    ParserSelectWithUnionQuery select_p;</span><br><span class="line">    ASTPtr query;</span><br><span class="line">    <span class="keyword">if</span> (!select_p.<span class="built_in">parse</span>(pos, query, expected))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    ... ...</span><br></pre></td></tr></table></figure><p>s_explain.ignore 方法会进行一个 keyword 解析，解析出 ast node:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="comment">-- keyword</span></span><br></pre></td></tr></table></figure><p>跃进<strong>第三层</strong> select_p.parse <a href="https://github.com/ClickHouse/ClickHouse/blob/558f9c76306ffc4e6add8fd34c2071b64e914103/src/Parsers/ParserSelectWithUnionQuery.cpp#L26">ParserSelectWithUnionQuery::parseImpl</a>状态空间：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ParserSelectWithUnionQuery::parseImpl</span><span class="params">(Pos &amp; pos, ASTPtr &amp; node, Expected &amp; expected)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ASTPtr list_node;</span><br><span class="line"></span><br><span class="line">    <span class="function">ParserList <span class="title">parser</span><span class="params">(std::make_unique&lt;ParserUnionQueryElement&gt;(), std::make_unique&lt;ParserKeyword&gt;(<span class="string">&quot;UNION ALL&quot;</span>), <span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!parser.<span class="built_in">parse</span>(pos, list_node, expected))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>parser.parse 里又调用<strong>第四层</strong> <a href="https://github.com/ClickHouse/ClickHouse/blob/558f9c76306ffc4e6add8fd34c2071b64e914103/src/Parsers/ParserSelectQuery.cpp#L24">ParserSelectQuery::parseImpl</a> 状态空间：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ParserSelectQuery::parseImpl</span><span class="params">(Pos &amp; pos, ASTPtr &amp; node, Expected &amp; expected)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> select_query = std::make_shared&lt;ASTSelectQuery&gt;();</span><br><span class="line">    node = select_query;</span><br><span class="line"></span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_select</span><span class="params">(<span class="string">&quot;SELECT&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_distinct</span><span class="params">(<span class="string">&quot;DISTINCT&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_from</span><span class="params">(<span class="string">&quot;FROM&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_prewhere</span><span class="params">(<span class="string">&quot;PREWHERE&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_where</span><span class="params">(<span class="string">&quot;WHERE&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_group_by</span><span class="params">(<span class="string">&quot;GROUP BY&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_with</span><span class="params">(<span class="string">&quot;WITH&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_totals</span><span class="params">(<span class="string">&quot;TOTALS&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_having</span><span class="params">(<span class="string">&quot;HAVING&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_order_by</span><span class="params">(<span class="string">&quot;ORDER BY&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_limit</span><span class="params">(<span class="string">&quot;LIMIT&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_settings</span><span class="params">(<span class="string">&quot;SETTINGS&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_by</span><span class="params">(<span class="string">&quot;BY&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_rollup</span><span class="params">(<span class="string">&quot;ROLLUP&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_cube</span><span class="params">(<span class="string">&quot;CUBE&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_top</span><span class="params">(<span class="string">&quot;TOP&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_with_ties</span><span class="params">(<span class="string">&quot;WITH TIES&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_offset</span><span class="params">(<span class="string">&quot;OFFSET&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ParserNotEmptyExpressionList <span class="title">exp_list</span><span class="params">(<span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserNotEmptyExpressionList <span class="title">exp_list_for_with_clause</span><span class="params">(<span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserNotEmptyExpressionList <span class="title">exp_list_for_select_clause</span><span class="params">(<span class="literal">true</span>)</span></span>;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!exp_list_for_select_clause.<span class="built_in">parse</span>(pos, select_expression_list, expected))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p><strong>第五层</strong> exp_list_for_select_clause.parse <a href="https://github.com/ClickHouse/ClickHouse/blob/558f9c76306ffc4e6add8fd34c2071b64e914103/src/Parsers/ExpressionListParsers.cpp#L520">ParserExpressionList::parseImpl</a>状态空间继续：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ParserExpressionList::parseImpl</span><span class="params">(Pos &amp; pos, ASTPtr &amp; node, Expected &amp; expected)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">ParserList</span>(</span><br><span class="line">        std::make_unique&lt;ParserExpressionWithOptionalAlias&gt;(allow_alias_without_as_keyword),</span><br><span class="line">        std::make_unique&lt;ParserToken&gt;(TokenType::Comma))</span><br><span class="line">        .<span class="built_in">parse</span>(pos, node, expected);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>… … 写不下去个鸟！</p><p>可以发现，ast parser 的时候，预先构造好状态空间，比如 select 的状态空间:</p><ol><li>expression list</li><li>from tables</li><li>where</li><li>group by</li><li>with …</li><li>order by</li><li>limit</li></ol><p>在一个状态空间內，还可以根据 parse 返回的 bool 判断是否继续进入子状态空间，一直递归解析出整个 ast。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>手工 parser 的好处是代码清晰简洁，每个细节可防可控，以及友好的错误处理，改动起来不会一发动全身。</p><p>缺点是手工成本太高，需要大量的测试来保证其正确性，还需要一些 fuzz 来保证可靠性。</p><p>好在 ClickHouse 已经实现的比较全面，即使有新的需求，在现有基础上修修补补即可。</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;strong&gt;本文首发于 2020-07-26 21:55:10&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《ClickHouse 和他的朋友们》系列文章转载自圈内好友 &lt;a href=&quot;https://b</summary>
      
    
    
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/categories/ClickHouse/"/>
    
    
    <category term="ClickHouse和他的朋友们" scheme="http://dbkernel.github.io/tags/ClickHouse%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/tags/ClickHouse/"/>
    
    <category term="源码分析" scheme="http://dbkernel.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="Parser" scheme="http://dbkernel.github.io/tags/Parser/"/>
    
  </entry>
  
  <entry>
    <title>源码分析 | ClickHouse和他的朋友们（6）MergeTree存储结构</title>
    <link href="http://dbkernel.github.io/2020/06/30/clickhouse-and-friends-06-merge-tree-disk-layout/"/>
    <id>http://dbkernel.github.io/2020/06/30/clickhouse-and-friends-06-merge-tree-disk-layout/</id>
    <published>2020-06-30T13:41:12.000Z</published>
    <updated>2022-07-07T02:11:07.822Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-06-30 21:41:12</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/06/26/clickhouse-and-friends-merge-tree-disk-layout/">https://bohutang.me/2020/06/26/clickhouse-and-friends-merge-tree-disk-layout/</a><br>以下为正文。</p></blockquote><p>上篇的 <a href="https://bohutang.me/2020/06/20/clickhouse-and-friends-merge-tree-algo/">存储引擎技术进化与 MergeTree</a> 介绍了存储算法的演进。</p><p>存储引擎是一个数据库的底盘，一定要稳和动力澎湃。</p><p>接下来我们将一起来探索下 ClickHouse MergeTree 列式存储引擎，解构下这台“跑车”最重要的部件。</p><p>所有的存储引擎，无论精良与粗制滥造，最终都是要把数据回写到磁盘，来满足存储和索引目的。</p><p>磁盘文件的构造可以说是算法的物理体现，我们甚至可以通过这些存储结构反推出其算法实现。</p><p>所以，要想深入了解一个存储引擎，最好的入手点是它的磁盘存储结构，然后再反观它的读、写机制就会有一种水到渠成的感觉。</p><p>如果这个分析顺序搞反了，会有一种生硬的感觉，网上大部分教程都是这种“生硬”式教学，本文将直击灵魂从最底层谈起，彻底搞明白４个问题：</p><ol><li>MergeTree 有哪些文件？</li><li>MergeTree 数据如何分布？</li><li>MergeTree 索引如何组织？</li><li>MergeTree 如何利用索引加速？</li></ol><p>话不多说，上表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> default.mt</span><br><span class="line">(</span><br><span class="line">    `a` Int32,</span><br><span class="line">    `b` Int32,</span><br><span class="line">    `c` Int32,</span><br><span class="line">    INDEX `idx_c` (c) TYPE minmax GRANULARITY <span class="number">1</span></span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> MergeTree</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> a</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> b</span><br><span class="line">SETTINGS index_granularity<span class="operator">=</span><span class="number">3</span></span><br></pre></td></tr></table></figure><p>造点数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> default.mt(a,b,c) <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> default.mt(a,b,c) <span class="keyword">values</span>(<span class="number">5</span>,<span class="number">2</span>,<span class="number">2</span>),(<span class="number">5</span>,<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> default.mt(a,b,c) <span class="keyword">values</span>(<span class="number">3</span>,<span class="number">10</span>,<span class="number">4</span>),(<span class="number">3</span>,<span class="number">9</span>,<span class="number">5</span>),(<span class="number">3</span>,<span class="number">8</span>,<span class="number">6</span>),(<span class="number">3</span>,<span class="number">7</span>,<span class="number">7</span>),(<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>),(<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>),(<span class="number">3</span>,<span class="number">4</span>,<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h2 id="磁盘文件"><a href="#磁盘文件" class="headerlink" title="磁盘文件"></a>磁盘文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls ckdatas/data/default/mt/</span><br><span class="line">1_4_4_0  3_6_6_0  5_5_5_0  detached  format_version.txt</span><br></pre></td></tr></table></figure><p>可以看到，生成了 3 个数据目录，每个目录在 ClickHouse 里称作一个分区(part)，目录名的前缀正是我们写入时字段 a 的值: 1,3,5，因为表分区是这样定位的：<code>PARTITION BY a</code>。</p><p>现在我们看看 a=3 分区：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls ckdatas/data/default/mt/3_6_6_0/</span><br><span class="line">a.bin  a.mrk2  b.bin  b.mrk2  c.bin  checksums.txt  c.mrk2  columns.txt  count.txt  minmax_a.idx  partition.dat  primary.idx  skp_idx_idx_c.idx  skp_idx_idx_c.mrk2</span><br></pre></td></tr></table></figure><ul><li><code>*.bin</code> 是列数据文件，按主键排序(ORDER BY)，这里是按照字段 b 进行排序</li><li><code>*.mrk2</code> mark 文件，目的是快速定位 bin 文件数据位置</li><li><code>minmax_a.idx</code> 分区键 min-max 索引文件，目的是加速分区键 a 查找</li><li><code>primay.idx</code> 主键索引文件，目的是加速主键 b 查找</li><li><code>skp_idx_idx_c.*</code> 字段 c 索引文件，目的是加速 c 的查找</li></ul><p>在磁盘上，MergeTree 只有一种物理排序，就是 ORDER BY 的主键序，其他文件(比如 .mrk/.idx)是一种逻辑加速，围绕仅有的一份物理排序，要解决的问题是：</p><p><strong>在以字段 b 物理排序上，如何实现字段 a、字段 c 的快速查找？</strong></p><p>MergeTree 引擎概括起来很简单：<br>整个数据集通过分区字段被划分为多个物理分区，每个分区內又通过逻辑文件围绕仅有的一种物理排序进行加速查找。</p><h2 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h2><h3 id="数据文件"><a href="#数据文件" class="headerlink" title="数据文件"></a>数据文件</h3><p>对于单个物理分区內的存储结构，首先要明确一点，MergeTree 的数据只有一份：<code>*.bin</code>。</p><p>a.bin 是字段 a 的数据，b.bin 是字段 b 的数据，c.bin 是字段 c 的数据，也就是大家熟悉的列存储。</p><p>各个 bin 文件以 b.bin 排序对齐（b 是排序键），如图：<br><img src="merge-tree-bin-without-granule.png" alt="merge-tree-bin-without-granule.png"></p><p>这样会有一个比较严重的问题：<br>如果 <code>*.bin</code> 文件较大，即使读取一行数据，也要加载整个 bin 文件，浪费了大量的 IO，没法忍。</p><h3 id="granule"><a href="#granule" class="headerlink" title="granule"></a>granule</h3><p>高、黑科技来了，ClickHouse MergeTree 把 bin 文件根据颗粒度(GRANULARITY)划分为多个颗粒(granule)，每个 granule 单独压缩存储。</p><p><code>SETTINGS index_granularity=3</code> 表示每 ３ 行数据为一个 granule，分区目前只有 ７ 条数据，所以被划分成 3 个 granule(三个色块)：<br><img src="merge-tree-bin-granule.png" alt="merge-tree-bin-granule.png"></p><p>为方便读取某个 granule，使用 <code>*.mrk</code> 文件记录每个 granule 的 offset，每个 granule 的 header 里会记录一些元信息，用于读取解析:<br><img src="merge-tree-bin-marker.png" alt="merge-tree-bin-marker.png"></p><p>这样，我们就可以根据 ｍ ark 文件，直接定位到想要的 granule，然后对这个单独的 granule 进行读取、校验。</p><p>目前，我们还有缺少一种映射：每个 mark 与字段值之间的对应，哪些值区间落在 mark0，哪些落在 mark1 …？</p><p>有了这个映射，就可以实现最小化读取 granule 来加速查询：</p><ol><li>根据查询条件确定需要哪些 mark</li><li>根据 mark 读取相应的 granule</li></ol><h3 id="存储排序"><a href="#存储排序" class="headerlink" title="存储排序"></a>存储排序</h3><p>在了解 MergeTree 索引机制之前，需要明白以下两点：</p><ol><li>只有一份全量数据，存储在 <code>*.bin</code> 文件</li><li><code>*.bin</code> 按照 ORDER BY 字段降序存储<br><img src="merge-tree-bin-orderby-sort.png" alt="merge-tree-bin-orderby-sort.png"></li></ol><h3 id="稀疏索引"><a href="#稀疏索引" class="headerlink" title="稀疏索引"></a>稀疏索引</h3><p>因为数据只有一份且只有一种物理排序，MergeTree 在索引设计上选择了简单、高效的稀疏索引模式。</p><p>什么是稀疏索引呢？就是从已经排序的全量数据里，间隔性的选取一些点，并记录这些点属于哪个 mark。</p><h4 id="1-primary-index"><a href="#1-primary-index" class="headerlink" title="1. primary index"></a>1. primary index</h4><p>主键索引，可通过<code>[PRIMARY KEY expr]</code>指定，默认是 ORDER BY 字段值。</p><p>注意 ClickHouse primary index 跟 MySQL primary key 不是一个概念。</p><p>在稀疏点的选择上，取每个 granule 最小值：</p><p><img src="merge-tree-primary-key.png" alt="merge-tree-primary-key.png"></p><h4 id="2-skipping-index"><a href="#2-skipping-index" class="headerlink" title="2. skipping index"></a>2. skipping index</h4><p>普通索引。</p><p><code>INDEX idx_c(c) TYPE minmax GRANULARITY 1</code> 针对字段 c 创建一个 minmax 模式索引。</p><p><code>GRANULARITY</code> 是稀疏点选择上的 granule 颗粒度，<code>GRANULARITY 1</code> 表示每 1 个 granule 选取一个：<br><img src="merge-tree-skipping-index-g1.png" alt="merge-tree-skipping-index-g1.png"></p><p>如果定义为<code>GRANULARITY 2</code> ，则 2 个 granule 选取一个：<br><img src="merge-tree-skipping-index-g2.png" alt="merge-tree-skipping-index-g2.png"></p><h4 id="3-partition-minmax-index"><a href="#3-partition-minmax-index" class="headerlink" title="3. partition minmax index"></a>3. partition minmax index</h4><p>针对分区键，MergeTree 还会创建一个 min/max 索引，来加速分区选择。</p><p><img src="merge-tree-minmax-idx.png" alt="merge-tree-minmax-idx.png"></p><h4 id="4-全景图"><a href="#4-全景图" class="headerlink" title="4. 全景图"></a>4. 全景图</h4><p><img src="merge-tree-layout.png" alt="merge-tree-layout.png"></p><h2 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h2><p>现在熟悉了 MergeTree 的存储结构，我们通过几个查询来体验下。</p><h3 id="1-分区键查询"><a href="#1-分区键查询" class="headerlink" title="1. 分区键查询"></a>1. 分区键查询</h3><p>语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> default.mt <span class="keyword">where</span> a<span class="operator">=</span><span class="number">3</span></span><br></pre></td></tr></table></figure><p>查询会直接根据 <code>a=3</code> 定位到单个分区:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;Debug&gt; InterpreterSelectQuery: MergeTreeWhereOptimizer: condition <span class="string">&quot;a = 3&quot;</span> moved to PREWHERE</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): Key condition: unknown</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): MinMax index condition: (column <span class="number">0</span> in [<span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): Selected <span class="number">1</span> parts by a, <span class="number">1</span> parts by key, <span class="number">3</span> marks by primary key, <span class="number">3</span> marks to read from <span class="number">1</span> ranges</span><br><span class="line">┌─a─┬──b─┬──c─┐</span><br><span class="line">│ <span class="number">3</span> │  <span class="number">4</span> │ <span class="number">10</span> │</span><br><span class="line">│ <span class="number">3</span> │  <span class="number">5</span> │  <span class="number">9</span> │</span><br><span class="line">│ <span class="number">3</span> │  <span class="number">6</span> │  <span class="number">8</span> │</span><br><span class="line">│ <span class="number">3</span> │  <span class="number">7</span> │  <span class="number">7</span> │</span><br><span class="line">│ <span class="number">3</span> │  <span class="number">8</span> │  <span class="number">6</span> │</span><br><span class="line">│ <span class="number">3</span> │  <span class="number">9</span> │  <span class="number">5</span> │</span><br><span class="line">│ <span class="number">3</span> │ <span class="number">10</span> │  <span class="number">4</span> │</span><br><span class="line">└───┴────┴────┘</span><br></pre></td></tr></table></figure><h3 id="2-主键索引查询"><a href="#2-主键索引查询" class="headerlink" title="2. 主键索引查询"></a>2. 主键索引查询</h3><p>语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> default.mt <span class="keyword">where</span> b<span class="operator">=</span><span class="number">5</span></span><br></pre></td></tr></table></figure><p>查询会先从 3 个分区读取 prmary.idx，然后定位到只有一个分区符合条件，找到要读取的 mark:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): Key condition: (column <span class="number">0</span> in [<span class="number">5</span>, <span class="number">5</span>])</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): MinMax index condition: unknown</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): Selected <span class="number">3</span> parts by a, <span class="number">1</span> parts by key, <span class="number">1</span> marks by primary key, <span class="number">1</span> marks to read from <span class="number">1</span> ranges</span><br><span class="line">┌─a─┬─b─┬─c─┐</span><br><span class="line">│ <span class="number">3</span> │ <span class="number">5</span> │ <span class="number">9</span> │</span><br><span class="line">└───┴───┴───┘</span><br></pre></td></tr></table></figure><h3 id="3-索引查询"><a href="#3-索引查询" class="headerlink" title="3. 索引查询"></a>3. 索引查询</h3><p>语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> default.mt <span class="keyword">where</span> c<span class="operator">=</span><span class="number">5</span></span><br></pre></td></tr></table></figure><p>查询会先从 3 个分区读取 prmary.idx 和 skp_idx_idx_c.idx 进行 granule 过滤（没用的 drop 掉），然后定位到只有 3_x_x_x 分区的一个 granule 符合条件:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;Debug&gt; InterpreterSelectQuery: MergeTreeWhereOptimizer: condition <span class="string">&quot;b = 5&quot;</span> moved to PREWHERE</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): Key condition: unknown</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): MinMax index condition: unknown</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): Index `idx_c` has dropped <span class="number">1</span> / <span class="number">1</span> granules.</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): Index `idx_c` has dropped <span class="number">1</span> / <span class="number">1</span> granules.</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): Index `idx_c` has dropped <span class="number">2</span> / <span class="number">3</span> granules.</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): Selected <span class="number">3</span> parts by a, <span class="number">1</span> parts by key, <span class="number">5</span> marks by primary key, <span class="number">1</span> marks to read from <span class="number">1</span> ranges</span><br><span class="line">┌─a─┬─b─┬─c─┐</span><br><span class="line">│ <span class="number">3</span> │ <span class="number">9</span> │ <span class="number">5</span> │</span><br><span class="line">└───┴───┴───┘</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文从磁盘存储结构入手，分析 ClickHouse MergeTree 的存储、索引设计。</p><p>只有了解了这些底层机制，我们才好对自己的 SQL 和表结构进行优化，使其执行更加高效。</p><p>ClickHouse MergeTree 设计简单、高效，它首要解决的问题是：在一种物理排序上，如何实现快速查找。</p><p>针对这个问题，ClickHouse 使用稀疏索引来解决。</p><p>在官方 roadmap 上，列举了一个有意思的索引方向：Z-Order Indexing，目的是把多个维度编码到一维存储，当我们给出多维度条件的时候，可以快速定位到这个条件点集的空间位置，目前 ClickHouse 针对这个索引设计暂无进展。</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;strong&gt;本文首发于 2020-06-30 21:41:12&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《ClickHouse 和他的朋友们》系列文章转载自圈内好友 &lt;a href=&quot;https://b</summary>
      
    
    
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/categories/ClickHouse/"/>
    
    
    <category term="ClickHouse和他的朋友们" scheme="http://dbkernel.github.io/tags/ClickHouse%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/tags/ClickHouse/"/>
    
    <category term="源码分析" scheme="http://dbkernel.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="MergeTree" scheme="http://dbkernel.github.io/tags/MergeTree/"/>
    
  </entry>
  
  <entry>
    <title>源码分析 | ClickHouse和他的朋友们（5）存储引擎技术进化与MergeTree</title>
    <link href="http://dbkernel.github.io/2020/06/22/clickhouse-and-friends-05-merge-tree-algo/"/>
    <id>http://dbkernel.github.io/2020/06/22/clickhouse-and-friends-05-merge-tree-algo/</id>
    <published>2020-06-22T13:55:10.000Z</published>
    <updated>2022-07-07T02:10:49.942Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-06-22 21:55:10</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/06/20/clickhouse-and-friends-merge-tree-algo/">https://bohutang.me/2020/06/20/clickhouse-and-friends-merge-tree-algo/</a><br>以下为正文。</p></blockquote><p>21 世纪的第二个 10 年，虎哥已经在存储引擎一线奋战近 10 年，由于强大的兴趣驱动，这么多年来几乎不放过 arXiv 上与存储相关的每一篇 paper。</p><p>尤其是看到带有 draft 的 paper 时，有一种乞丐听到“叮当”响时的愉悦。</p><p>看 paper 这玩意就像鉴宝，多数是“赝品”，需要你有“鉴真”的本领，否则今天是张三的算法超越 xx，明儿又是王二的硬件提升了 yy，让你永远跟不上节奏 zz，湮灭在这些没有营养的技术垃圾中，浪费大好青春。</p><p>言归正传，接下来的 3 篇，跟 ClickHouse 的 MergeTree 引擎有关：</p><p><strong>上篇介绍存储引擎的技术演进史</strong>，从”远古”的 B-tree 出发推演到目前主流的技术架构。</p><p><strong><a href="https://bohutang.me/2020/06/26/clickhouse-and-friends-merge-tree-disk-layout/">中篇会从存储结构介绍 MergeTree 原理</a></strong> ，对 ClickHouse MergeTree 有一个深入的认识，如何合理设计来进行科学加速。</p><p><strong>下篇会从 MergeTree 代码出发</strong>，看看 ClickHouse MergeTree 如何实现读、写。</p><p>本文为上篇，先来个热身，相信本篇大部分内容对大家来说都比较陌生，很少人写过。</p><h2 id="地位"><a href="#地位" class="headerlink" title="地位"></a>地位</h2><p>存储引擎(事务型)在一个数据库(DBMS)中的地位如何呢？</p><p>MySQL 的商业成功可以说大部分来自于 InnoDB 引擎，Oracle 收购 InnoDB 比 MySQL 早好几年呢！</p><p>20 年前，能亲手撸一套 <a href="https://en.wikipedia.org/wiki/Algorithms_for_Recovery_and_Isolation_Exploiting_Semantics">ARIES (Algorithms for Recovery and Isolation Exploiting Semantics)</a> 规范引擎，实力还是相当震撼的，相信 Oracle 收购的不仅是 InnoDB 这个引擎，更重要的是人， InnoDB 作者在哪里，在干什么？！</p><p>Fork 出来的 MariaDB 这么多年一直找不到自己的灵魂，在 Server 层磨磨蹭蹭可谓是江河日下，只能四处收购碰碰运气，当年 TokuDB 战斗过的 commit 依在，但这些已经是历史了。</p><p>另，WiredTiger 被 MongoDB 收购并使用，对整个生态所起的作用也是无可估量的，这些发动机引擎对于一辆汽车是非常重要的。</p><p>有人问道，都已经 2020 年了，开发一个存储引擎还这么难吗？不难，但是造出来的未必有 RocksDB 好用？！</p><p>如大家所见，很多的分布式存储引擎都是基于 RocksDB 研发，可谓短期内还算明智的选择。</p><p>从工程角度来看，一个 ACID 引擎要打磨的东西非常之多，到处充斥着人力、钱力、耐心的消耗，一种可能是写到一半就停滞了(如 <a href="https://github.com/BohuTANG/nessDB">nessDB</a>)，还有一种可能是写着写着发现跟 xx 很像，沃茨法克。</p><p>当然，这里并不是鼓励大家都去基于 RocksDB 去构建自己的产品，而是要根据自己的情况去做选择。</p><h2 id="B-tree"><a href="#B-tree" class="headerlink" title="B-tree"></a>B-tree</h2><p>首先要尊称一声大爷，这个大爷年方 50，目前支撑着数据库产业的半壁江山。</p><p>50 年来不变而且人们还没有改变它的意向，这个大爷厉害的很！</p><p>鉴定一个算法的优劣，有一个学派叫 <strong>IO 复杂度分析</strong>，简单推演真假便知。</p><p>下面就用此法分析下 B-tree(traditional b-tree) 的 IO 复杂度，对读、写 IO 一目了然，真正明白读为什么快，写为什么慢，如何优化。</p><p>为了可以愉快的阅读，本文不会做任何公式推导，复杂度分析怎么可能没有公式呢！</p><h3 id="读-IO-分析"><a href="#读-IO-分析" class="headerlink" title="读 IO 分析"></a>读 IO 分析</h3><p>这里有一个 3-level 的 B-tree，每个方块代表一个 page，数字代表 page ID。</p><p><img src="btree-read.png" alt="btree-read.png"></p><p>上图 B-tree 结构是<strong>内存</strong>的一个表现形式，如果我们要读取的记录在 leaf-8 上，read-path 如蓝色箭头所示:</p><p>root-9 –&gt; branch-6 –&gt; leaf-8</p><p>下图是 B-tree 在<strong>磁盘</strong>上的存储形式，meta page 是起点:</p><p><img src="btree-read-disk.png" alt="btree-read-disk.png"></p><p>这样读取的随机 IO (假设内存里没有 page 缓存且 page 存储是随机的)总数就是(蓝色箭头):</p><p>1(meta-10)IO + 1(root-9)IO + 1(branch-6)IO + 1(leaf-8)IO = 4 次 IO，这里忽略一直缓存的 meta 和 root，就是 <strong>2</strong> 次随机 IO。<br>如果磁盘 seek 是 1ms，读取延迟就是 <strong>2ms</strong>。</p><p>通过推演就会发现，B-tree 是一种读优化(Read-Optimized)的数据结构，无论 LSM-tree 还是 Fractal-tree 等在读上只能比它慢，因为读放大(Read Amplification)问题。</p><p>存储引擎算法可谓日新月异，但是大部分都是在跟写优化(Write-Optimized)做斗争，那怕是一个常数项的优化那就是突破，自从 Fractal-tree 突破后再无来者了！</p><h3 id="写-IO-分析"><a href="#写-IO-分析" class="headerlink" title="写 IO 分析"></a>写 IO 分析</h3><p>现在写一条记录到 leaf-8。</p><p><img src="btree-update-raw.png" alt="btree-update-raw.png"></p><p>可以发现，每次写都需要先读取一遍，如上图蓝色路径所示。</p><p>假设这次写入导致 root, branch 都发生了变化，这种 in-place 的更新反映到磁盘上就是：</p><p><img src="btree-update-raw-disk.png" alt="btree-update-raw-disk.png"></p><p>基本是 <strong>2</strong> 次读 IO 和写 <strong>2</strong> 次写 IO+WAL fsync，粗略为 <strong>4</strong> 次随机 IO。</p><p>通过分析发现，B-tree 对写操作不太友好，随机 IO 次数较多，而且 in-place 更新必须增加一个 page 级的 WAL 保证失败回滚，简直是要命。</p><h3 id="Write-Optimized-B-tree"><a href="#Write-Optimized-B-tree" class="headerlink" title="Write-Optimized B-tree"></a>Write-Optimized B-tree</h3><p>说到写优化，在机械盘的年代，大家的方向基本是把随机 IO 转换为顺序 IO，充分发挥磁盘的机械优势，于是出现一种 Append-only B-tree：</p><p><img src="btree-aof.png" alt="btree-aof.png"></p><ol><li>更新生成新的 page(蓝色)</li><li>page 回写磁盘时 append only 到文件末尾</li><li>无需 page WAL，数据不 overwrite，有写放大(Write Amplification)问题，需要做空洞重利用机制</li></ol><p>Append-only B-tree 节省了回写时的 2 次随机 IO，转换为常数级(constant)的 1 次顺序 IO，写性能大幅提升，总结起来就是：</p><blockquote><p><strong>随机变顺序，空间换时间</strong></p></blockquote><p>LSM-tree, Fractal-tree 等写优化算法的核心思想也是这个，只不过其实现机制不同。</p><h2 id="LSM-trees"><a href="#LSM-trees" class="headerlink" title="LSM-trees"></a>LSM-trees</h2><p>随着 LevelDB 的问世，LSM-tree 逐渐被大家所熟知。</p><p>LSM-tree 更像一种思想，模糊了 B-tree 里 tree 的严肃性，通过文件组织成一个更加松散的 tree。</p><p>这里不谈一个具体的 LSM-tree 是 Leveled 还是 Size-tiered，只谈大体思想。</p><p><img src="lsm-tree.png" alt="lsm-tree.png"></p><h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><ol><li>先写入内存的 C0</li><li>后台线程根据规则(Leveled/Sized)进行 merge，C0 –&gt; C1, C1 –&gt; C2 … CL</li><li>写入 C0 即可返回，IO 放到后台的 Merge 过程</li><li>每次 Merge 是硬伤，动作大就抖，动作小性能不好，每次 Merge 的数据流向不明确</li><li>写放大问题</li></ol><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><ol><li>读取 C0</li><li>读取 C1 .. CL</li><li>合并记录返回</li><li>读放大问题</li></ol><h2 id="Fractal-tree"><a href="#Fractal-tree" class="headerlink" title="Fractal-tree"></a>Fractal-tree</h2><p>终于发展到了“终极”优化(目前最先进的索引算法)，Fractal-tree。</p><p>它是在 Append-only B-tree 的基础上，对每个 branch 节点增加了一个 message buffer 作为缓冲，可以看做是 LSM-tree 和 Append-only B-tree 完美合体。</p><p>相对于 LSM-tree 它的优势非常明显:<br>Merge 更加有序，数据流向非常分明，消除了 Merge 的抖动问题，大家一直寻找的 compaction 防抖方案一直存在的！</p><p>这个高科技目前只有 <a href="https://github.com/xelabs/tokudb">TokuDB</a> 在使用，这个算法可以开篇新介，这里不做累述，感兴趣的可以参考原型实现 <a href="https://github.com/BohuTANG/nessDB">nessDB</a>。</p><h2 id="Cache-oblivious"><a href="#Cache-oblivious" class="headerlink" title="Cache-oblivious"></a>Cache-oblivious</h2><p>这个词对于大部分人都是陌生的，不过别怕。</p><p>在存储引擎里，有一个数据结构非常非常重要，它负责 page 数据有序性维护，比如在一个 page 里怎么快速定位到我要的记录。</p><p>在 LevelDB 里使用 skiplist，但大部分引擎使用的是一个有序数组来表示，比如 [1, 2, 3, … 100]，然后使用二分查找。</p><p>大概 10 年前一位内核开发者发表了一篇 &lt;<a href="https://queue.acm.org/detail.cfm?id=1814327">You’re Doing It Wrong</a>&gt;，这个小文讲了一个很有意思的事情：</p><p>数据的组织形式对性能有很大的影响，因为 CPU 有 cache line。</p><p>抛开这篇文章不谈，咱们来看一张“神仙”图：</p><p><img src="veb-layout.png" alt="veb-layout.png"></p><p>这是一个 binary-tree 的 4 种 layout 表示形式，那么哪种 layout 对 CPU cache line 最友好？</p><p>也许你已经猜对了，那就是 van Emde Boas，简称 vEB。</p><p>因为它的相邻数据“扎堆”存储，point-query 和 range-query 的 cache line 可以最大化共享，skiplist 对 cache line 是非常不友好的，还可以更快！</p><p>对于 cache oblivious 数据结构，这里有一个简单的原型实现: <a href="https://github.com/BohuTANG/omt">omt</a></p><h2 id="B-tree-优化魔力象限"><a href="#B-tree-优化魔力象限" class="headerlink" title="B-tree 优化魔力象限"></a>B-tree 优化魔力象限</h2><p>写优化算法从原生的 B-tree 到 Append-only B-tree(代表作 LMDB)，又到 LSM-tree(LevelDB/RocksDB 等)，最后进化到目前最先进的 Fractal-tree (TokuDB)。</p><p>这些算法耗费了很多年才在工程上实现并被认可，研发一款存储引擎缺的不是算法而是“鉴宝”的能力，这个“宝”可能已经躺了几十年了。</p><p>其实，”科学家”们已经总结出一个 B-tree 优化魔力象限:</p><p><img src="btree-optimal-curve.png" alt="btree-optimal-curve.png"></p><p>横坐标是写性能，纵坐标是读性能，B-tree 和 Logging 数据结构分布在曲线的两个极端。</p><p>B-tree 的读性能非常好，但是写性能差。</p><p>Logging 的写性能非常好，但是读性能差(想想我们每次写都把数据追加到文件末尾，是不是很快？但是读…)。</p><p>在它们中间有一个优化曲度(Optimal Curve)。</p><p>在这个曲度上，你可以通过增加/减少一个常数(1-epsilon)来做读和写优化组合，LSM-tree/Fractal-tree 都在这个曲度之上。</p><p><img src="btree-epsilon.png" alt="btree-epsilon.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要讨论事务性引擎的技术演进，其中包含了 IO 复杂度分析，其实这个分析是基于一个 DAM(Disk Access Machine) 模型，这里不再展开。<br>这个模型要解决什么问题呢？</p><p>如果工程中涉及硬件层级关系，比如 Disk / Memory / CPU，数据在 Disk，读取(以 block 为单位)到 Memory，查找计算(cache-line)在 CPU，不同介质间性能差距又非常之大，我们怎么做才能让整体性能更优的问题。</p><p>和当今的硬件相融合，这个模型也一样适用。</p><p>最后回到 ClickHouse 的 MergeTree 引擎，它只使用了本文中的部分优化，实现也比较简洁、高效，毕竟没有事务，撸起来也没啥心理负担。</p><p><strong>随机变顺序，空间换时间</strong>， MergeTree 原理，请听下回分解。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li>[1] <a href="https://www.cs.au.dk/~gerth/papers/cacheoblivious05.pdf">Cache-Oblivious Data Structures</a></li><li>[2] <a href="https://www3.cs.stonybrook.edu/~bender/talks/2013-BenderKuszmaul-xldb-tutorial.pdf">Data Structures and Algorithms for Big Databases</a></li><li>[3] <a href="https://link.springer.com/chapter/10.1007%2F3-540-60220-8_74">The buffer tree: A new technique for optimal I/O-algorithms</a></li><li>[4] <a href="http://www.bzero.se/ldapd/btree.html">how the append-only btree works</a></li><li>[5] <a href="https://www.douban.com/note/269741273/">写优化的数据结构(1):AOF 和 b-tree 之间</a></li><li>[6] <a href="https://www.douban.com/note/269744617/">写优化的数据结构(2):buffered tree</a></li><li>[7] <a href="https://www.douban.com/note/304123656/">存储引擎数据结构优化(1):cpu bound</a></li><li>[8] <a href="https://www.douban.com/note/304349195/">存储引擎数据结构优化(2):io bound</a></li><li>[9] <a href="https://github.com/BohuTANG/nessDB">nessDB</a></li><li>[10] <a href="https://github.com/BohuTANG/omt">omt</a></li></ul><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;strong&gt;本文首发于 2020-06-22 21:55:10&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《ClickHouse 和他的朋友们》系列文章转载自圈内好友 &lt;a href=&quot;https://b</summary>
      
    
    
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/categories/ClickHouse/"/>
    
    
    <category term="ClickHouse和他的朋友们" scheme="http://dbkernel.github.io/tags/ClickHouse%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/tags/ClickHouse/"/>
    
    <category term="源码分析" scheme="http://dbkernel.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="B-Tree" scheme="http://dbkernel.github.io/tags/B-Tree/"/>
    
    <category term="LSM-Tree" scheme="http://dbkernel.github.io/tags/LSM-Tree/"/>
    
  </entry>
  
  <entry>
    <title>源码分析 | ClickHouse和他的朋友们（4）Pipeline处理器和调度器</title>
    <link href="http://dbkernel.github.io/2020/06/12/clickhouse-and-friends-04-processor/"/>
    <id>http://dbkernel.github.io/2020/06/12/clickhouse-and-friends-04-processor/</id>
    <published>2020-06-12T12:57:10.000Z</published>
    <updated>2022-07-07T02:10:34.045Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-06-12 19:57:10</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/06/11/clickhouse-and-friends-processor/">https://bohutang.me/2020/06/11/clickhouse-and-friends-processor/</a><br>以下为正文。</p></blockquote><p><strong>最后更新: 2020-08-15</strong></p><p>本文谈下 ClickHouse 核心科技：处理器 Processor 和有向无环调度器 DAG Scheduler。</p><p>这些概念并不是 ClickHouse 首创，感兴趣的同学可以关注下 <a href="https://github.com/MaterializeInc/materialize">materialize</a> 的 <a href="https://github.com/TimelyDataflow/timely-dataflow">timely-dataflow</a>，虎哥用 golang 也写过一个<a href="https://github.com/vectorengine/vectorsql/tree/master/src/processors">原型</a>。</p><p>拼的是实现细节，正是这些模块的精良设计，才有了 ClickHous e 整体的高性能。</p><h2 id="Pipeline-问题"><a href="#Pipeline-问题" class="headerlink" title="Pipeline 问题"></a>Pipeline 问题</h2><p>在传统数据库系统中，一个 Query 处理流程大体是:</p><p><img src="processor-plan.png" alt="processor-plan.png"></p><p>其中在 Plan 阶段，往往会增加一个 Pipeline 组装(一个 transformer 代表一次数据处理)：</p><p><img src="processor-transformer.png" alt="processor-transformer.png"></p><p>所有 transformer 被编排成一个流水线(pipeline)，然后交给 executor 串行式执行，每执行一个 transformer 数据集就会被加工并输出，一直到下游的 sinker。</p><p>可以看到，这种模型的优点是<strong>简单</strong>，缺点是<strong>性能低</strong>，无法发挥 CPU 的<strong>并行</strong>能力，通常叫火山模型(<strong>volcano</strong>-style)，对于 OLTP 低延迟来说足够，对于计算密集的 OLAP 来说是远远不够的，CPU 不到 100% 就是犯罪！</p><p>对于上面的例子，如果 transformer1 和 transformer2 没有交集，那么它们就可以并行处理：</p><p><img src="processor-transformer2.png" alt="processor-transformer2.png"></p><p>这样就涉及到一些比较灵魂的问题：</p><ol><li>如何实现 transformer 的灵活编排？</li><li>如何实现 transformer 间的数据同步？</li><li>如何实现 transformer 间的并行调度？</li></ol><h2 id="Processor-和-DAG-Scheduler"><a href="#Processor-和-DAG-Scheduler" class="headerlink" title="Processor 和 DAG Scheduler"></a>Processor 和 DAG Scheduler</h2><h3 id="1-Transformer-编排"><a href="#1-Transformer-编排" class="headerlink" title="1. Transformer 编排"></a>1. Transformer 编排</h3><p>ClickHouse 实现了一系列基础 transformer 模块，见 <a href="https://github.com/ClickHouse/ClickHouse/tree/master/src/Processors/Transforms">src/Processors/Transforms</a>，比如:</p><ul><li>FilterTransform – WHERE 条件过滤</li><li>SortingTransform – ORDER BY 排序</li><li>LimitByTransform – LIMIT 裁剪</li></ul><p>当我们执行:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="type">time</span> <span class="keyword">DESC</span> LIMIT <span class="number">10</span></span><br></pre></td></tr></table></figure><p>对于 ClickHouse 的 QueryPipeline 来说，它会按照以下方式进行编排组装：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">QueryPipeline::<span class="built_in">addSimpleTransform</span>(Source)</span><br><span class="line">QueryPipeline::<span class="built_in">addSimpleTransform</span>(FilterTransform)</span><br><span class="line">QueryPipeline::<span class="built_in">addSimpleTransform</span>(SortingTransform)</span><br><span class="line">QueryPipeline::<span class="built_in">addSimpleTransform</span>(LimitByTransform)</span><br><span class="line">QueryPipeline::<span class="built_in">addSimpleTransform</span>(Sinker)</span><br></pre></td></tr></table></figure><p>这样就实现了 Transformer 的编排，但是执行时数据如何进行同步呢？</p><h3 id="2-Transformer-数据同步"><a href="#2-Transformer-数据同步" class="headerlink" title="2. Transformer 数据同步"></a>2. Transformer 数据同步</h3><p>当 QueryPipeline 进行 transformer 编排时，我们还需要进行更加底层的 DAG 连通构建。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">connect</span>(Source.OutPort, FilterTransform.InPort)</span><br><span class="line"><span class="built_in">connect</span>(FilterTransform.OutPort, SortingTransform.InPort)</span><br><span class="line"><span class="built_in">connect</span>(SortingTransform.OutPort, LimitByTransform.InPort)</span><br><span class="line"><span class="built_in">connect</span>(LimitByTransform.OutPort, Sinker.InPort)</span><br></pre></td></tr></table></figure><p>这样就实现了数据的流向关系，一个 transformer 的 OutPort 对接另外一个的 InPort，就像我们现实中的水管管道一样，接口有 3 通甚至多通。</p><h3 id="3-Transformer-执行调度"><a href="#3-Transformer-执行调度" class="headerlink" title="3. Transformer 执行调度"></a>3. Transformer 执行调度</h3><p>现在管道组装起来了，那么管道内的水如何进行处理和给压流动呢？</p><p>ClickHouse 定义了一套 transform 状态，processor 根据这些状态来实现调度。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title">Status</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    NeedData  <span class="comment">// 等待数据流进入</span></span><br><span class="line">    PortFull, <span class="comment">// 管道流出端阻塞</span></span><br><span class="line">    Finished, <span class="comment">// 完成状态，退出</span></span><br><span class="line">    Ready,    <span class="comment">// 切换到 work 函数，进行逻辑处理</span></span><br><span class="line">    Async,    <span class="comment">// 切换到 schedule 函数，进行异步处理</span></span><br><span class="line">    Wait,     <span class="comment">// 等待异步处理</span></span><br><span class="line">    ExpandPipeline,      <span class="comment">// Pipeline 需要裂变</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当 source 生成数据后，它的状态会设置为 PortFull，意思是等着流入其他 transformer 的 InPort，processor 会开始调度 FilterTransformer(NeedData) 的 Prepare，进行 PullData，然后它的状态设置为 Ready，等待 processor 调度 Work 方法进行数据 Filter 处理，大家就这样靠状态让 processor 去感知，来调度和做状态迁移，直到 Finished 状态。</p><p>这里值得一提的是 ExpandPipeline 状态，它会根据 transformer 的实现，可以把一个 transformer 裂变出更多个 transformer 并行执行，达到一个爆炸效果。</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> number <span class="operator">+</span> <span class="number">1</span> <span class="keyword">FROM</span> t1;</span><br></pre></td></tr></table></figure><p>为了更加深入理解 ClickHouse 的 processor 和 scheduler 机制，我们来一个原生态的 example:</p><ol><li>一个 Source:{0,1,2,3,4}</li><li>AdderTransformer 对每个数字做加 1 操作</li><li>一个 Sinker，输出结果</li></ol><h3 id="1-Source"><a href="#1-Source" class="headerlink" title="1. Source"></a>1. Source</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySource</span> :</span> <span class="keyword">public</span> ISource</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;MySource&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MySource</span>(UInt64 end_)</span><br><span class="line">        : <span class="built_in">ISource</span>(<span class="built_in">Block</span>(&#123;ColumnWithTypeAndName&#123;ColumnUInt64::<span class="built_in">create</span>(), std::make_shared&lt;DataTypeUInt64&gt;(), <span class="string">&quot;number&quot;</span>&#125;&#125;)), <span class="built_in">end</span>(end_)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    UInt64 end;</span><br><span class="line">    <span class="keyword">bool</span> done = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Chunk <span class="title">generate</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (done)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Chunk</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        MutableColumns columns;</span><br><span class="line">        columns.<span class="built_in">emplace_back</span>(ColumnUInt64::<span class="built_in">create</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="number">0U</span>; i &lt; end; i++)</span><br><span class="line">            columns[<span class="number">0</span>]-&gt;<span class="built_in">insert</span>(i);</span><br><span class="line"></span><br><span class="line">        done = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Chunk</span>(std::<span class="built_in">move</span>(columns), end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-MyAddTransform"><a href="#2-MyAddTransform" class="headerlink" title="2. MyAddTransform"></a>2. MyAddTransform</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAddTransformer</span> :</span> <span class="keyword">public</span> IProcessor</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;MyAddTransformer&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MyAddTransformer</span>()</span><br><span class="line">        : <span class="built_in">IProcessor</span>(</span><br><span class="line">            &#123;<span class="built_in">Block</span>(&#123;ColumnWithTypeAndName&#123;ColumnUInt64::<span class="built_in">create</span>(), std::make_shared&lt;DataTypeUInt64&gt;(), <span class="string">&quot;number&quot;</span>&#125;&#125;)&#125;,</span><br><span class="line">            &#123;<span class="built_in">Block</span>(&#123;ColumnWithTypeAndName&#123;ColumnUInt64::<span class="built_in">create</span>(), std::make_shared&lt;DataTypeUInt64&gt;(), <span class="string">&quot;number&quot;</span>&#125;&#125;)&#125;)</span><br><span class="line">        , <span class="built_in">input</span>(inputs.<span class="built_in">front</span>())</span><br><span class="line">        , <span class="built_in">output</span>(outputs.<span class="built_in">front</span>())</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Status <span class="title">prepare</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (output.<span class="built_in">isFinished</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            input.<span class="built_in">close</span>();</span><br><span class="line">            <span class="keyword">return</span> Status::Finished;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!output.<span class="built_in">canPush</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            input.<span class="built_in">setNotNeeded</span>();</span><br><span class="line">            <span class="keyword">return</span> Status::PortFull;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (has_process_data)</span><br><span class="line">        &#123;</span><br><span class="line">            output.<span class="built_in">push</span>(std::<span class="built_in">move</span>(current_chunk));</span><br><span class="line">            has_process_data = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (input.<span class="built_in">isFinished</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            output.<span class="built_in">finish</span>();</span><br><span class="line">            <span class="keyword">return</span> Status::Finished;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!input.<span class="built_in">hasData</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            input.<span class="built_in">setNeeded</span>();</span><br><span class="line">            <span class="keyword">return</span> Status::NeedData;</span><br><span class="line">        &#125;</span><br><span class="line">        current_chunk = input.<span class="built_in">pull</span>(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> Status::Ready;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> num_rows = current_chunk.<span class="built_in">getNumRows</span>();</span><br><span class="line">        <span class="keyword">auto</span> result_columns = current_chunk.<span class="built_in">cloneEmptyColumns</span>();</span><br><span class="line">        <span class="keyword">auto</span> columns = current_chunk.<span class="built_in">detachColumns</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="number">0U</span>; i &lt; num_rows; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> val = columns[<span class="number">0</span>]-&gt;<span class="built_in">getUInt</span>(i);</span><br><span class="line">            result_columns[<span class="number">0</span>]-&gt;<span class="built_in">insert</span>(val+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        current_chunk.<span class="built_in">setColumns</span>(std::<span class="built_in">move</span>(result_columns), num_rows);</span><br><span class="line">        has_process_data = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">InputPort &amp; <span class="title">getInputPort</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> input; &#125;</span><br><span class="line">    <span class="function">OutputPort &amp; <span class="title">getOutputPort</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> output; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">bool</span> has_input = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">bool</span> has_process_data = <span class="literal">false</span>;</span><br><span class="line">    Chunk current_chunk;</span><br><span class="line">    InputPort &amp; input;</span><br><span class="line">    OutputPort &amp; output;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-MySink"><a href="#3-MySink" class="headerlink" title="3. MySink"></a>3. MySink</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySink</span> :</span> <span class="keyword">public</span> ISink</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;MySinker&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MySink</span>() : <span class="built_in">ISink</span>(<span class="built_in">Block</span>(&#123;ColumnWithTypeAndName&#123;ColumnUInt64::<span class="built_in">create</span>(), std::make_shared&lt;DataTypeUInt64&gt;(), <span class="string">&quot;number&quot;</span>&#125;&#125;)) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    WriteBufferFromFileDescriptor out&#123;STDOUT_FILENO&#125;;</span><br><span class="line">    FormatSettings settings;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">consume</span><span class="params">(Chunk chunk)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">size_t</span> rows = chunk.<span class="built_in">getNumRows</span>();</span><br><span class="line">        <span class="keyword">size_t</span> columns = chunk.<span class="built_in">getNumColumns</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> row_num = <span class="number">0</span>; row_num &lt; rows; ++row_num)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">writeString</span>(<span class="string">&quot;prefix-&quot;</span>, out);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">size_t</span> column_num = <span class="number">0</span>; column_num &lt; columns; ++column_num)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (column_num != <span class="number">0</span>)</span><br><span class="line">                    <span class="built_in">writeChar</span>(<span class="string">&#x27;\t&#x27;</span>, out);</span><br><span class="line">                <span class="built_in">getPort</span>()</span><br><span class="line">                    .<span class="built_in">getHeader</span>()</span><br><span class="line">                    .<span class="built_in">getByPosition</span>(column_num)</span><br><span class="line">                    .type-&gt;<span class="built_in">serializeAsText</span>(*chunk.<span class="built_in">getColumns</span>()[column_num], row_num, out, settings);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">writeChar</span>(<span class="string">&#x27;\n&#x27;</span>, out);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        out.<span class="built_in">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-DAG-Scheduler"><a href="#4-DAG-Scheduler" class="headerlink" title="4. DAG Scheduler"></a>4. DAG Scheduler</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">char</span> **)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> source0 = std::make_shared&lt;MySource&gt;(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">auto</span> add0 = std::make_shared&lt;MyAddTransformer&gt;();</span><br><span class="line">    <span class="keyword">auto</span> sinker0 = std::make_shared&lt;MySink&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Connect.</span></span><br><span class="line">    <span class="built_in">connect</span>(source0-&gt;<span class="built_in">getPort</span>(), add0-&gt;<span class="built_in">getInputPort</span>());</span><br><span class="line">    <span class="built_in">connect</span>(add0-&gt;<span class="built_in">getOutputPort</span>(), sinker0-&gt;<span class="built_in">getPort</span>());</span><br><span class="line"></span><br><span class="line">    std::vector&lt;ProcessorPtr&gt; processors = &#123;source0, add0, sinker0&#125;;</span><br><span class="line">    <span class="function">PipelineExecutor <span class="title">executor</span><span class="params">(processors)</span></span>;</span><br><span class="line">    executor.<span class="built_in">execute</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从开发者角度看还是比较复杂，状态迁移还需要开发者自己控制，不过 upstream 已经做了大量的基础工作，比如对 source 的封装 ISource，对 sink 的封装 ISink，还有一个基础的 ISimpleTransform，让开发者在上层使用 processor 时更加容易，可以积木式搭建出自己想要的 pipeline。</p><p>ClickHouse 的 transformer 数据单元是 Chunk，transformer 对上游 OutPort 流过来的 Chunk 进行加工，然后输出给下游的 InPort，图连通式的流水线并行工作，让 CPU 尽量满负荷工作。</p><p>当一个 SQL 被解析成 AST 后，ClickHouse 根据 AST 构建 Query Plan，然后根据 QueryPlan 构建出 pipeline，最后由 processor 负责调度和执行。</p><p>目前，ClickHouse 新版本已经默认开启 QueryPipeline，同时这块代码也在不停的迭代。</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;strong&gt;本文首发于 2020-06-12 19:57:10&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《ClickHouse 和他的朋友们》系列文章转载自圈内好友 &lt;a href=&quot;https://b</summary>
      
    
    
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/categories/ClickHouse/"/>
    
    
    <category term="ClickHouse和他的朋友们" scheme="http://dbkernel.github.io/tags/ClickHouse%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/tags/ClickHouse/"/>
    
    <category term="源码分析" scheme="http://dbkernel.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="DAG Scheduler" scheme="http://dbkernel.github.io/tags/DAG-Scheduler/"/>
    
    <category term="pipeline" scheme="http://dbkernel.github.io/tags/pipeline/"/>
    
    <category term="processor" scheme="http://dbkernel.github.io/tags/processor/"/>
    
  </entry>
  
  <entry>
    <title>源码分析 | ClickHouse和他的朋友们（3）MySQL Protocol和Write调用栈</title>
    <link href="http://dbkernel.github.io/2020/06/08/clickhouse-and-friends-03-mysql-protocol-write-stack/"/>
    <id>http://dbkernel.github.io/2020/06/08/clickhouse-and-friends-03-mysql-protocol-write-stack/</id>
    <published>2020-06-08T11:57:10.000Z</published>
    <updated>2022-07-07T02:10:19.401Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-06-08 19:57:10</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/06/08/clickhouse-and-friends-mysql-protocol-write-stack/">https://bohutang.me/2020/06/08/clickhouse-and-friends-mysql-protocol-write-stack/</a><br>以下为正文。</p></blockquote><p>上篇的<a href="https://dbkernel.github.io/2020/06/07/clickhouse-and-friends-02-mysql-protocol-read-stack/">MySQL Protocol 和 Read 调用</a>里介绍了 ClickHouse 一条查询语句的调用栈，本文继续介绍写的调用栈，开整。</p><h2 id="Write-请求"><a href="#Write-请求" class="headerlink" title="Write 请求"></a><strong>Write 请求</strong></h2><ol><li><p>建表:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test(a UInt8, b UInt8, c UInt8) ENGINE<span class="operator">=</span>MergeTree() <span class="keyword">PARTITION</span> <span class="keyword">BY</span> (a, b) <span class="keyword">ORDER</span> <span class="keyword">BY</span> c;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>写入数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>), (<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="调用栈分析"><a href="#调用栈分析" class="headerlink" title="调用栈分析"></a><strong>调用栈分析</strong></h2><h3 id="1-获取存储引擎-OutputStream"><a href="#1-获取存储引擎-OutputStream" class="headerlink" title="1. 获取存储引擎 OutputStream"></a>1. 获取存储引擎 OutputStream</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DB::StorageMergeTree::<span class="built_in">write</span>(std::__1::shared_ptr&lt;DB::IAST&gt; <span class="keyword">const</span>&amp;, DB::Context <span class="keyword">const</span>&amp;) StorageMergeTree.cpp:<span class="number">174</span></span><br><span class="line">DB::PushingToViewsBlockOutputStream::<span class="built_in">PushingToViewsBlockOutputStream</span>(std::__1::shared_ptr&lt;DB::IStorage&gt; <span class="keyword">const</span>&amp;, DB::Context <span class="keyword">const</span>&amp;, std::__1::shared_ptr&lt;DB::IAST&gt; <span class="keyword">const</span>&amp;, <span class="keyword">bool</span>) PushingToViewsBlockOutputStream.cpp:<span class="number">110</span></span><br><span class="line">DB::InterpreterInsertQuery::<span class="built_in">execute</span>() InterpreterInsertQuery.cpp:<span class="number">229</span></span><br><span class="line">DB::<span class="built_in">executeQueryImpl</span>(<span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *, DB::Context &amp;, <span class="keyword">bool</span>, DB::QueryProcessingStage::Enum, <span class="keyword">bool</span>, DB::ReadBuffer *) executeQuery.cpp:<span class="number">364</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">696</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">311</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">141</span></span><br></pre></td></tr></table></figure><h3 id="2-从-SQL-组装-InputStream"><a href="#2-从-SQL-组装-InputStream" class="headerlink" title="2. 从 SQL 组装 InputStream"></a>2. 从 SQL 组装 InputStream</h3><p><code>(1,1,1), (2,2,2)</code> 如何组装成 inputstream 结构呢？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DB::InputStreamFromASTInsertQuery::<span class="built_in">InputStreamFromASTInsertQuery</span>(std::__1::shared_ptr&lt;DB::IAST&gt; <span class="keyword">const</span>&amp;, DB::ReadBuffer*,</span><br><span class="line">DB::InterpreterInsertQuery::<span class="built_in">execute</span>() InterpreterInsertQuery.cpp:<span class="number">300</span></span><br><span class="line">DB::<span class="built_in">executeQueryImpl</span>(<span class="keyword">char</span> <span class="keyword">const</span>*, <span class="keyword">char</span> <span class="keyword">const</span>*, DB::Context&amp;, <span class="keyword">bool</span>, DB::QueryProcessingStage::Enum, <span class="keyword">bool</span>, DB::ReadBuffer*) executeQuery.cpp:<span class="number">386</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">313</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">150</span></span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.in = std::make_shared&lt;InputStreamFromASTInsertQuery&gt;(query_ptr, <span class="literal">nullptr</span>, query_sample_block, context, <span class="literal">nullptr</span>);</span><br><span class="line">res.in = std::make_shared&lt;NullAndDoCopyBlockInputStream&gt;(res.in, out_streams.<span class="built_in">at</span>(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>通过 NullAndDoCopyBlockInputStream 的 copyData 方法构造出 Block：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">DB::ValuesBlockInputFormat::<span class="built_in">readRow</span>(std::__1::vector&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt; &gt; &gt;&amp;, <span class="keyword">unsigned</span> <span class="keyword">long</span>) ValuesBlockInputFormat.cpp:<span class="number">93</span></span><br><span class="line">DB::ValuesBlockInputFormat::<span class="built_in">generate</span>() ValuesBlockInputFormat.cpp:<span class="number">55</span></span><br><span class="line">DB::ISource::<span class="built_in">work</span>() ISource.cpp:<span class="number">48</span></span><br><span class="line">DB::InputStreamFromInputFormat::<span class="built_in">readImpl</span>() InputStreamFromInputFormat.h:<span class="number">48</span></span><br><span class="line">DB::IBlockInputStream::<span class="built_in">read</span>() IBlockInputStream.cpp:<span class="number">57</span></span><br><span class="line">DB::InputStreamFromASTInsertQuery::<span class="built_in">readImpl</span>() InputStreamFromASTInsertQuery.h:<span class="number">31</span></span><br><span class="line">DB::IBlockInputStream::<span class="built_in">read</span>() IBlockInputStream.cpp:<span class="number">57</span></span><br><span class="line"><span class="keyword">void</span> DB::copyDataImpl&lt;DB::<span class="built_in">copyData</span>(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::atomic&lt;<span class="keyword">bool</span>&gt;*)::$_0&amp;, <span class="built_in"><span class="keyword">void</span></span> (&amp;)(DB::Block <span class="keyword">const</span>&amp;)&gt;(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, DB::<span class="built_in">copyData</span>(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::atomic&lt;<span class="keyword">bool</span>&gt;*)::$_0&amp;, <span class="built_in"><span class="keyword">void</span></span> (&amp;)(DB::Block <span class="keyword">const</span>&amp;)) copyData.cpp:<span class="number">26</span></span><br><span class="line">DB::<span class="built_in">copyData</span>(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::atomic&lt;<span class="keyword">bool</span>&gt;*) copyData.cpp:<span class="number">62</span></span><br><span class="line">DB::NullAndDoCopyBlockInputStream::<span class="built_in">readImpl</span>() NullAndDoCopyBlockInputStream.h:<span class="number">47</span></span><br><span class="line">DB::IBlockInputStream::<span class="built_in">read</span>() IBlockInputStream.cpp:<span class="number">57</span></span><br><span class="line"><span class="keyword">void</span> DB::copyDataImpl&lt;std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;&gt;(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;) copyData.cpp:<span class="number">26</span></span><br><span class="line">DB::<span class="built_in">copyData</span>(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;) copyData.cpp:<span class="number">73</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">785</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">313</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">150</span></span><br></pre></td></tr></table></figure><h3 id="3-组装-OutputStream"><a href="#3-组装-OutputStream" class="headerlink" title="3. 组装 OutputStream"></a>3. 组装 OutputStream</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DB::InterpreterInsertQuery::<span class="built_in">execute</span>() InterpreterInsertQuery.cpp:<span class="number">107</span></span><br><span class="line">DB::<span class="built_in">executeQueryImpl</span>(<span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *, DB::Context &amp;, <span class="keyword">bool</span>, DB::QueryProcessingStage::Enum, <span class="keyword">bool</span>, DB::ReadBuffer *) executeQuery.cpp:<span class="number">364</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">696</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">311</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">141</span></span><br></pre></td></tr></table></figure><p>组装顺序:</p><ol><li>NullAndDoCopyBlockInputStream</li><li>CountingBlockOutputStream</li><li>AddingDefaultBlockOutputStream</li><li>SquashingBlockOutputStream</li><li>PushingToViewsBlockOutputStream</li><li>MergeTreeBlockOutputStream</li></ol><h3 id="4-写入-OutputStream"><a href="#4-写入-OutputStream" class="headerlink" title="4. 写入 OutputStream"></a>4. 写入 OutputStream</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">DB::MergeTreeBlockOutputStream::<span class="built_in">write</span>(DB::Block <span class="keyword">const</span>&amp;) MergeTreeBlockOutputStream.cpp:<span class="number">17</span></span><br><span class="line">DB::PushingToViewsBlockOutputStream::<span class="built_in">write</span>(DB::Block <span class="keyword">const</span>&amp;) PushingToViewsBlockOutputStream.cpp:<span class="number">145</span></span><br><span class="line">DB::SquashingBlockOutputStream::<span class="built_in">finalize</span>() SquashingBlockOutputStream.cpp:<span class="number">30</span></span><br><span class="line">DB::SquashingBlockOutputStream::<span class="built_in">writeSuffix</span>() SquashingBlockOutputStream.cpp:<span class="number">50</span></span><br><span class="line">DB::AddingDefaultBlockOutputStream::<span class="built_in">writeSuffix</span>() AddingDefaultBlockOutputStream.cpp:<span class="number">25</span></span><br><span class="line">DB::CountingBlockOutputStream::<span class="built_in">writeSuffix</span>() CountingBlockOutputStream.h:<span class="number">37</span></span><br><span class="line">DB::copyDataImpl&lt;DB::<span class="built_in">copyData</span>(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::atomic&lt;<span class="keyword">bool</span>&gt;*)::&lt;<span class="built_in">lambda</span>()&gt;&amp;, <span class="built_in"><span class="keyword">void</span></span> (&amp;)(<span class="keyword">const</span> DB::Block&amp;)&gt;(DB::IBlockInputStream &amp;, DB::IBlockOutputStream &amp;, &lt;<span class="built_in">lambda</span>()&gt; &amp;, <span class="built_in"><span class="keyword">void</span></span> (&amp;)(<span class="keyword">const</span> DB::Block &amp;)) copyData.cpp:<span class="number">52</span></span><br><span class="line">DB::<span class="built_in">copyData</span>(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::atomic&lt;<span class="keyword">bool</span>&gt;*) copyData.cpp:<span class="number">138</span></span><br><span class="line">DB::NullAndDoCopyBlockInputStream::<span class="built_in">readImpl</span>() NullAndDoCopyBlockInputStream.h:<span class="number">57</span></span><br><span class="line">DB::IBlockInputStream::<span class="built_in">read</span>() IBlockInputStream.cpp:<span class="number">60</span></span><br><span class="line"><span class="keyword">void</span> DB::copyDataImpl&lt;std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;&gt;(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;) copyData.cpp:<span class="number">29</span></span><br><span class="line">DB::<span class="built_in">copyData</span>(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;) copyData.cpp:<span class="number">154</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">748</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">311</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">141</span></span><br></pre></td></tr></table></figure><p>通过 copyData 方法，让数据在 OutputStream 间层层透传，一直到 MergeTreeBlockOutputStream。</p><h3 id="5-返回-Client"><a href="#5-返回-Client" class="headerlink" title="5. 返回 Client"></a>5. 返回 Client</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DB::MySQLOutputFormat::<span class="built_in">finalize</span>() MySQLOutputFormat.cpp:<span class="number">62</span></span><br><span class="line">DB::IOutputFormat::<span class="built_in">doWriteSuffix</span>() IOutputFormat.h:<span class="number">78</span></span><br><span class="line">DB::OutputStreamToOutputFormat::<span class="built_in">writeSuffix</span>() OutputStreamToOutputFormat.cpp:<span class="number">18</span></span><br><span class="line">DB::MaterializingBlockOutputStream::<span class="built_in">writeSuffix</span>() MaterializingBlockOutputStream.h:<span class="number">22</span></span><br><span class="line"><span class="keyword">void</span> DB::copyDataImpl&lt;std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;&gt;(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;) copyData.cpp:<span class="number">52</span></span><br><span class="line">DB::<span class="built_in">copyData</span>(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;) copyData.cpp:<span class="number">154</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">748</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">311</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">141</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>), (<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>首先内核解析 SQL 语句生成 AST，根据 AST 获取 Interpreter：InterpreterInsertQuery。</p><p>其次 Interpreter 依次添加相应的 OutputStream。</p><p>然后从 InputStream 读取数据，写入到 OutputStream，stream 会层层渗透，一直写到底层的存储引擎。</p><p>最后写入到 Socket Output，返回结果。</p><p>ClickHouse 的 OutputStream 编排还是比较复杂，缺少类似 Pipeline 的调度和编排，但是由于模式比较固化，目前看还算清晰。</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;strong&gt;本文首发于 2020-06-08 19:57:10&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《ClickHouse 和他的朋友们》系列文章转载自圈内好友 &lt;a href=&quot;https://b</summary>
      
    
    
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/categories/ClickHouse/"/>
    
    
    <category term="MySQL" scheme="http://dbkernel.github.io/tags/MySQL/"/>
    
    <category term="ClickHouse和他的朋友们" scheme="http://dbkernel.github.io/tags/ClickHouse%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/tags/ClickHouse/"/>
    
    <category term="源码分析" scheme="http://dbkernel.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>源码分析 | ClickHouse和他的朋友们（2）MySQL Protocol和Read调用栈</title>
    <link href="http://dbkernel.github.io/2020/06/07/clickhouse-and-friends-02-mysql-protocol-read-stack/"/>
    <id>http://dbkernel.github.io/2020/06/07/clickhouse-and-friends-02-mysql-protocol-read-stack/</id>
    <published>2020-06-07T09:17:10.000Z</published>
    <updated>2022-07-07T02:10:01.592Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-06-07 17:17:10</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/06/07/clickhouse-and-friends-mysql-protocol-read-stack/">https://bohutang.me/2020/06/07/clickhouse-and-friends-mysql-protocol-read-stack/</a><br>以下为正文。</p></blockquote><p>作为一个 OLAP 的 DBMS 来说，有 2 个端非常重要：</p><ul><li>用户如何方便的链进来，这是入口端<ul><li>ClickHouse 除了自己的 client 外，还提供了 MySQL/PG/GRPC/HTTP 等接入方式</li></ul></li><li>数据如何方便的挂上去，这是数据源端<ul><li>ClickHouse 除了自己的引擎外，还可以挂载 MySQL/Kafka 等外部数据源</li></ul></li></ul><p>这样内外互通，多条朋友多条路，以实现“数据”级的编排能力。</p><p>今天谈的是入口端的 MySQL 协议，也是本系列 ClickHouse 的第一个好朋友，用户可通过 MySQL 客户端或相关 Driver 直接链接到 ClickHouse，进行数据读写等操作。</p><p>本文通过 MySQL 的 Query 请求，借用调用栈来了解下 ClickHouse 的数据读取全过程。</p><h2 id="如何实现？"><a href="#如何实现？" class="headerlink" title="如何实现？"></a><strong>如何实现？</strong></h2><p>入口文件在:<br><a href="https://github.com/ClickHouse/ClickHouse/blob/master/src/Server/MySQLHandler.cpp">MySQLHandler.cpp</a></p><h3 id="握手协议"><a href="#握手协议" class="headerlink" title="握手协议"></a><strong>握手协议</strong></h3><ol><li>MySQLClient 发送 Greeting 数据报文到 MySQLHandler</li><li>MySQLHandler 回复一个 Greeting-Response 报文</li><li>MySQLClient 发送认证报文</li><li>MySQLHandler 对认证报文进行鉴权，并返回鉴权结果</li></ol><p>MySQL Protocol 实现在: <a href="https://github.com/ClickHouse/ClickHouse/blob/master/src/Core/MySQLProtocol.h">Core/MySQLProtocol.h</a></p><blockquote><p>最近的代码中调整为了 <a href="https://github.com/ClickHouse/ClickHouse/blob/master/src/Core/MySQL/PacketsProtocolText.h">Core/MySQL/PacketsProtocolText.h</a></p></blockquote><h3 id="Query-请求"><a href="#Query-请求" class="headerlink" title="Query 请求"></a><strong>Query 请求</strong></h3><p>当认证通过后，就可以进行正常的数据交互了。</p><ol><li><p>当 MySQLClient 发送请求:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> system.numbers LIMIT <span class="number">5</span>;</span><br></pre></td></tr></table></figure></li><li><p>MySQLHandler 的调用栈：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-&gt;MySQLHandler::comQuery -&gt; executeQuery -&gt; pipeline-&gt;execute -&gt; MySQLOutputFormat::consume</span><br></pre></td></tr></table></figure></li><li><p>MySQLClient 接收到结果</p></li></ol><p>在步骤 2 里，executeQuery(executeQuery.cpp)非常重要。</p><p>它是所有前端 Server 和 ClickHouse 内核的接入口，第一个参数是 SQL 文本(‘select 1’)，第二个参数是结果集要发送到哪里去(socket net)。</p><h2 id="调用栈分析"><a href="#调用栈分析" class="headerlink" title="调用栈分析"></a><strong>调用栈分析</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM system.numbers LIMIT 5</span><br></pre></td></tr></table></figure><h3 id="1-获取数据源"><a href="#1-获取数据源" class="headerlink" title="1. 获取数据源"></a>1. 获取数据源</h3><p>StorageSystemNumbers 数据源：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DB::StorageSystemNumbers::<span class="built_in">read</span>(std::__1::vector&lt;std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; &gt; &gt; <span class="keyword">const</span>&amp;, std::__1::shared_ptr&lt;DB::StorageInMemoryMetadata <span class="keyword">const</span>&gt; <span class="keyword">const</span>&amp;, DB::SelectQueryInfo <span class="keyword">const</span>&amp;, DB::Context <span class="keyword">const</span>&amp;, DB::QueryProcessingStage::Enum, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span>) StorageSystemNumbers.cpp:<span class="number">135</span></span><br><span class="line">DB::ReadFromStorageStep::<span class="built_in">ReadFromStorageStep</span>(std::__1::shared_ptr&lt;DB::RWLockImpl::LockHolderImpl&gt;, std::__1::shared_ptr&lt;DB::StorageInMemoryMetadata <span class="keyword">const</span>&gt;&amp;, DB::SelectQueryOptions,</span><br><span class="line">DB::InterpreterSelectQuery::<span class="built_in">executeFetchColumns</span>(DB::QueryProcessingStage::Enum, DB::QueryPlan&amp;, std::__1::shared_ptr&lt;DB::PrewhereInfo&gt; <span class="keyword">const</span>&amp;, std::__1::vector&lt;std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; &gt; &gt; <span class="keyword">const</span>&amp;) memory:<span class="number">3028</span></span><br><span class="line">DB::InterpreterSelectQuery::<span class="built_in">executeFetchColumns</span>(DB::QueryProcessingStage::Enum, DB::QueryPlan&amp;, std::__1::shared_ptr&lt;DB::PrewhereInfo&gt; <span class="keyword">const</span>&amp;, std::__1::vector&lt;std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; &gt; &gt; <span class="keyword">const</span>&amp;) InterpreterSelectQuery.cpp:<span class="number">1361</span></span><br><span class="line">DB::InterpreterSelectQuery::<span class="built_in">executeImpl</span>(DB::QueryPlan&amp;, std::__1::shared_ptr&lt;DB::IBlockInputStream&gt; <span class="keyword">const</span>&amp;, std::__1::optional&lt;DB::Pipe&gt;) InterpreterSelectQuery.cpp:<span class="number">791</span></span><br><span class="line">DB::InterpreterSelectQuery::<span class="built_in">buildQueryPlan</span>(DB::QueryPlan&amp;) InterpreterSelectQuery.cpp:<span class="number">472</span></span><br><span class="line">DB::InterpreterSelectWithUnionQuery::<span class="built_in">buildQueryPlan</span>(DB::QueryPlan&amp;) InterpreterSelectWithUnionQuery.cpp:<span class="number">183</span></span><br><span class="line">DB::InterpreterSelectWithUnionQuery::<span class="built_in">execute</span>() InterpreterSelectWithUnionQuery.cpp:<span class="number">198</span></span><br><span class="line">DB::<span class="built_in">executeQueryImpl</span>(<span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *, DB::Context &amp;, <span class="keyword">bool</span>, DB::QueryProcessingStage::Enum, <span class="keyword">bool</span>, DB::ReadBuffer *) executeQuery.cpp:<span class="number">385</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;,</span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">307</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">141</span></span><br></pre></td></tr></table></figure><p>这里最主要的是 ReadFromStorageStep 函数，从不同 storage 里获取数据源 pipe:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pipes pipes = storage-&gt;<span class="built_in">read</span>(required_columns, metadata_snapshot, query_info, *context, processing_stage, max_block_size, max_streams);</span><br></pre></td></tr></table></figure><h3 id="2-Pipeline-构造"><a href="#2-Pipeline-构造" class="headerlink" title="2. Pipeline 构造"></a>2. Pipeline 构造</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DB::LimitTransform::<span class="built_in">LimitTransform</span>(DB::Block <span class="keyword">const</span>&amp;, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">bool</span>, <span class="keyword">bool</span>, std::__1::vector&lt;DB::SortColumnDescription, std::__1::allocator&lt;DB::SortColumnDescription&gt; &gt;) LimitTransform.cpp:<span class="number">21</span></span><br><span class="line">DB::LimitStep::<span class="built_in">transformPipeline</span>(DB::QueryPipeline&amp;) memory:<span class="number">2214</span></span><br><span class="line">DB::LimitStep::<span class="built_in">transformPipeline</span>(DB::QueryPipeline&amp;) memory:<span class="number">2299</span></span><br><span class="line">DB::LimitStep::<span class="built_in">transformPipeline</span>(DB::QueryPipeline&amp;) memory:<span class="number">3570</span></span><br><span class="line">DB::LimitStep::<span class="built_in">transformPipeline</span>(DB::QueryPipeline&amp;) memory:<span class="number">4400</span></span><br><span class="line">DB::LimitStep::<span class="built_in">transformPipeline</span>(DB::QueryPipeline&amp;) LimitStep.cpp:<span class="number">33</span></span><br><span class="line">DB::ITransformingStep::<span class="built_in">updatePipeline</span>(std::__1::vector&lt;std::__1::unique_ptr&lt;DB::QueryPipeline, std::__1::default_delete&lt;DB::QueryPipeline&gt; &gt;, std::__1::allocator&lt;std::__1::unique_ptr&lt;DB::QueryPipeline, std::__1::default_delete&lt;DB::QueryPipeline&gt; &gt; &gt; &gt;) ITransformingStep.cpp:<span class="number">21</span></span><br><span class="line">DB::QueryPlan::<span class="built_in">buildQueryPipeline</span>() QueryPlan.cpp:<span class="number">154</span></span><br><span class="line">DB::InterpreterSelectWithUnionQuery::<span class="built_in">execute</span>() InterpreterSelectWithUnionQuery.cpp:<span class="number">200</span></span><br><span class="line">DB::<span class="built_in">executeQueryImpl</span>(<span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *, DB::Context &amp;, <span class="keyword">bool</span>, DB::QueryProcessingStage::Enum, <span class="keyword">bool</span>, DB::ReadBuffer *) executeQuery.cpp:<span class="number">385</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">722</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">307</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">141</span></span><br></pre></td></tr></table></figure><h3 id="3-Pipeline-执行"><a href="#3-Pipeline-执行" class="headerlink" title="3. Pipeline 执行"></a>3. Pipeline 执行</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">DB::LimitTransform::<span class="built_in">prepare</span>(std::__1::vector&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::allocator&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::vector&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::allocator&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span>&gt; &gt; <span class="keyword">const</span>&amp;) LimitTransform.cpp:<span class="number">67</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">prepareProcessor</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, std::__1::unique_lock&lt;std::__1::mutex&gt;) PipelineExecutor.cpp:<span class="number">291</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">tryAddProcessorToStackIfUpdated</span>(DB::PipelineExecutor::Edge&amp;, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, <span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">264</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">prepareProcessor</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, std::__1::unique_lock&lt;std::__1::mutex&gt;) PipelineExecutor.cpp:<span class="number">373</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">tryAddProcessorToStackIfUpdated</span>(DB::PipelineExecutor::Edge&amp;, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, <span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">264</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">prepareProcessor</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, std::__1::unique_lock&lt;std::__1::mutex&gt;) PipelineExecutor.cpp:<span class="number">373</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">tryAddProcessorToStackIfUpdated</span>(DB::PipelineExecutor::Edge&amp;, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, <span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">264</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">prepareProcessor</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, std::__1::unique_lock&lt;std::__1::mutex&gt;) PipelineExecutor.cpp:<span class="number">373</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">tryAddProcessorToStackIfUpdated</span>(DB::PipelineExecutor::Edge&amp;, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, <span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">264</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">prepareProcessor</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, std::__1::unique_lock&lt;std::__1::mutex&gt;) PipelineExecutor.cpp:<span class="number">373</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">tryAddProcessorToStackIfUpdated</span>(DB::PipelineExecutor::Edge&amp;, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, <span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">264</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">prepareProcessor</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, std::__1::unique_lock&lt;std::__1::mutex&gt;) PipelineExecutor.cpp:<span class="number">373</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">initializeExecution</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">747</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">executeImpl</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">764</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">execute</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">479</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">833</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">307</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">141</span></span><br></pre></td></tr></table></figure><h3 id="4-Output-执行发送"><a href="#4-Output-执行发送" class="headerlink" title="4. Output 执行发送"></a>4. Output 执行发送</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DB::MySQLOutputFormat::<span class="built_in">consume</span>(DB::Chunk) MySQLOutputFormat.cpp:<span class="number">53</span></span><br><span class="line">DB::IOutputFormat::<span class="built_in">work</span>() IOutputFormat.cpp:<span class="number">62</span></span><br><span class="line">DB::<span class="built_in">executeJob</span>(DB::IProcessor *) PipelineExecutor.cpp:<span class="number">155</span></span><br><span class="line"><span class="built_in"><span class="keyword">operator</span></span>() PipelineExecutor.cpp:<span class="number">172</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">executeStepImpl</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::atomic&lt;<span class="keyword">bool</span>&gt;*) PipelineExecutor.cpp:<span class="number">630</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">executeSingleThread</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">546</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">executeImpl</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">812</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">execute</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">479</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">800</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">311</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">141</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>ClickHouse 的模块化比较清晰，像乐高积木一样可以组合拼装，当我们执行:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> system.numbers LIMIT <span class="number">5</span></span><br></pre></td></tr></table></figure><p>首先内核解析 SQL 语句生成 AST，然后根据 AST 获取数据源 Source，pipeline.Add(Source)。</p><p>其次根据 AST 信息生成 QueryPlan，根据 QueryPlan 再生成相应的 Transform，pipeline.Add(LimitTransform)。</p><p>然后添加 Output Sink 作为数据发送对象，pipeline.Add(OutputSink)。</p><p>执行 pipeline, 各个 Transformer 开始工作。</p><p>ClickHouse 的 Transformer 调度系统叫做 Processor，也是决定性能的重要模块，详情见 <a href="https://bohutang.me/2020/06/11/clickhouse-and-friends-processor/">Pipeline 处理器和调度器</a>。</p><p>ClickHouse 是一辆手动挡的豪华跑车，免费拥有，海啸们！</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;strong&gt;本文首发于 2020-06-07 17:17:10&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《ClickHouse 和他的朋友们》系列文章转载自圈内好友 &lt;a href=&quot;https://b</summary>
      
    
    
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/categories/ClickHouse/"/>
    
    
    <category term="MySQL" scheme="http://dbkernel.github.io/tags/MySQL/"/>
    
    <category term="ClickHouse和他的朋友们" scheme="http://dbkernel.github.io/tags/ClickHouse%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/tags/ClickHouse/"/>
    
    <category term="源码分析" scheme="http://dbkernel.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
</feed>
