<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DBKernel</title>
  
  <subtitle>资深数据库内核研发</subtitle>
  <link href="http://dbkernel.github.io/atom.xml" rel="self"/>
  
  <link href="http://dbkernel.github.io/"/>
  <updated>2023-04-17T15:29:31.671Z</updated>
  <id>http://dbkernel.github.io/</id>
  
  <author>
    <name>DBKernel</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>特性介绍 | MySQL 测试框架 MTR 系列教程（一）：入门篇</title>
    <link href="http://dbkernel.github.io/2023/03/18/mysql-mtr-01-introduction/"/>
    <id>http://dbkernel.github.io/2023/03/18/mysql-mtr-01-introduction/</id>
    <published>2023-03-18T13:58:52.000Z</published>
    <updated>2023-04-17T15:29:31.671Z</updated>
    
    <content type="html"><![CDATA[<p><strong>作者：卢文双 资深数据库内核研发</strong></p><blockquote><p>去年年底通过微信公众号【数据库内核】设定了一个目标——2023 年要写一系列 特性介绍+内核解析 的文章（现阶段还是以 MySQL 为主）。<br>虽然关注者很少，但本着“说到就要做到”的原则，从这篇就开始了。</p></blockquote><p><strong>序言：</strong></p><p>以前对 MySQL 测试框架 MTR 的使用，主要集中于 SQL 正确性验证。近期由于工作需要，深入了解了 MTR 的方方面面，发现 MTR 的能力不仅限于此，还支持单元测试、压力测试、代码覆盖率测试、内存错误检测、线程竞争与死锁等功能，因此，本着分享的精神，将其总结成一个系列。</p><p>主要内容如下：</p><ul><li>入门篇：工作机制、编译安装、参数、指令示例、推荐用法、添加 case、常见问题、异常调试</li><li>进阶篇：高阶用法，包括单元测试、压力测试、代码覆盖率测试、内存错误检测、线程竞争与死锁</li><li>源码篇：分析 MTR 的源码</li><li>语法篇：单元测试、压力测试、mysqltest 语法、异常调试</li></ul><p>由于个人水平有限，所述难免有错误之处，望雅正。</p><p><strong>本文是第一篇入门篇</strong>。</p><span id="more"></span><blockquote><p><strong>本文首发于 2023-03-18 21:58:52</strong></p></blockquote><hr><p>本系列基于 MySQL 8.0.29 版本，且主要在 Ubuntu 22.04 X86_64 验证（部分指令也在 Ubuntu 20.04 X86_64、Ubuntu 22.04 ARM64、MacOS M1 做了验证），如有例外，会特别说明。</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在修改内核代码后，不仅需要测试新增功能，同时也要对原有功能做回归测试，以保证新加代码对原有功能没有影响，这就需要用到 MySQL 源码自带的测试框架 mtr。</p><p>MySQL 测试框架是一个以 MySQL 框架和内部引擎为测试对象的工具，主要执行脚本在安装路径（<code>make install</code>后的路径）下的<code>mysql-test</code>目录，基本覆盖了所有 MySQL 的特性和异常情况。</p><p><strong>MySQL 测试框架 mtr 主要包含如下几个组件：</strong></p><ul><li><a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_MYSQL_TEST_RUN_PL.html">mysql-test-run.pl</a> ：perl 脚本，简称 <strong>mtr</strong>，是 MySQL 最常用的测试工具，负责控制流程，包括启停、识别执行哪些用例、创建文件夹、收集结果等等，主要作用是验证 SQL 语句在各种场景下是否返回正确的结果。</li><li><a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_MYSQLTEST.html">mysqltest</a> ：C++二进制程序，负责执行测试用例，包括读文件、解析特定语法、执行用例。<ul><li>用例的特殊语法（比如，<code>--source</code>，<code>--replace_column</code>等）都在<code>command_names</code>和<code>enum_commands</code>两个枚举结构体中。</li></ul></li><li><a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_MYSQL_CLIENT_TEST.html">mysql_client_test</a> ：C++二进制程序，用于测试 MySQL 客户端 API（<a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_MYSQLTEST.html">mysqltest</a> 无法用于测试 API）。<ul><li>从代码看，只有启用<code>--valgrind</code> 或 <code>--valgrind-mysqltest</code> 选项，才会用到 <code>mysql_client_test</code> 。</li></ul></li><li><a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_MYSQL_STRESS_TEST_PL.html">mysql-stress-test.pl</a> ：perl 脚本，用于 MySQL Server 的压力测试。</li><li>支持 gcov/gprof 代码覆盖率测试工具。</li></ul><p>除此之外，还提供了单元测试工具（严格来说不属于 mtr ），以便为存储引擎和插件创建单独的单元测试程序。</p><p><strong>由于 MySQL 测试框架的入口是 <a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_MYSQL_TEST_RUN_PL.html">mysql-test-run.pl</a>（它会调用上述其他组件），因此，一般将 MySQL 测试框架简称为 mtr</strong>。</p><h1 id="mtr-工作原理"><a href="#mtr-工作原理" class="headerlink" title="mtr 工作原理"></a>mtr 工作原理</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>mtr 采用<code>t/r</code>模式（<code>t</code>目录中存储具体的测试 case，文件以<code>.test</code>结尾；<code>r</code>目录中存储了对应 case 的期望结果，文件以<code>.result</code>结尾），主要测试步骤是“通过执行一个 case，将该 case 的输出结果，与标准的输出结果（期望结果）作 diff”：</p><ul><li>如果完全一样，则说明该 case 通过；</li><li>反之，则说明该 case 失败。<ul><li>可能原因：case 本身写的有问题；MySQL 服务有问题。</li></ul></li></ul><p>如果<code>t</code>目录中的某个 case 在<code>r</code>目录中没有对应<code>.result</code>文件：</p><ul><li>那么，只要该 case 能正常执行完，mtr 就会判定该 case 通过；</li><li>反之，若执行过程中出现 mysql server crash 等异常问题，mtr 就会判定该 case 失败。</li></ul><p>上文说的 case 是指一系列的语句，包括 SQL 语句和一些必要的 mysqltest command。</p><p>所有 case 可分为三部分，分别为：</p><ul><li><strong>main</strong>：测试 case 位于 <code>mysql-test/t</code> 目录，期望结果（如果有的话）位于<code>mysql-test/r</code> 目录，二者中的文件是一一对应的，比如：<code>mysql-test/t/alter_debug.test</code> 、<code>mysql-test/r/alter_debug.result</code>。</li><li><strong>suite</strong> ：路径位于<code>mysql-test/suite</code> 目录，其中包含很多测试 case 的集合，每个集合都是一个单独的子目录（比如 <code>mysql-test/suite/binlog</code>），在子目录中又分别包含 r、t 两个目录。</li><li><strong>extra</strong> ：应该是对上述两种 case 的补充，位于<code>mysql-test/extra/</code> 目录，在 8.0.29 版本中只包含<code>binlog_tests</code>、<code>rpl_tests</code> 两个集合。</li></ul><h2 id="框架流程"><a href="#框架流程" class="headerlink" title="框架流程"></a>框架流程</h2><p><code>mysql-test-run.pl</code>框架运行流程如下：</p><p>1、<strong>初始化（Initialization）</strong>。</p><ul><li>确定用例执行范围，包括运行哪些 suite，skip 哪些用例，在本阶段根据<code>disabled.def</code>文件、<code>--skip-xxx</code>命令（比如<code>skip-rpl</code>）等确定执行用例。</li><li>同时，初始化数据库。后面运行用例启动数据库时，不需要每次初始化，只需从这里的目录中拷贝启动。</li></ul><p>2、<strong>运行用例（run test）</strong>。</p><p>主线程根据参数<code>--parallel</code>（默认是 1）启动一个或者多个<strong>用例执行线程（worker）</strong>，各线程有自己独立的 client port，data dir 等。</p><p>启动的 worker 与主线程之间是 server-client 模式，主线程是 server，worker 是 client。</p><ul><li>主线程与 worker 是一问一答模式，主线程向 worker 发送运行用例的文件路径、配置文件参数等各种参数信息，worker 向主线程返回运行结果，直到所有在 collection 中的用例都运行完毕，主线程 close 各 worker，进行收尾工作。</li><li>主线程先读取各 worker 返回值，对上一个用例进行收尾工作。之后，读取 collection 中的用例，通过本地 socket 发送到 worker 线程，worker 线程接收到主线程命令，运行本次用例测试的核心逻辑，主要包括 3 件事：<strong>启动 mysqld、启动并监控 mysqltest，处理执行结果</strong>。<ul><li><strong>启动 mysqld</strong>： <strong>根据参数启动一个或者多个 mysqld server 进程</strong>，大多数情况下会拷贝主线程初始化后的目录到 worker 的数据目录，作为新实例的启动目录，用 shell 命令启动数据库。</li><li><strong>启动并监控 mysqltest</strong>：用例在 mysqltest 中执行（<strong>会逐行扫描 <code>*.test</code> 文件中的 SQL 或指令并于 MySQL 中执行</strong>），worker 线程会监控 mysqltest 的运行状态，监测其是否运行超时或者运行结束。</li><li><strong>处理执行结果</strong>：mysqltest 执行结束会留下执行日志，框架根据执行日志判断执行是否通过，如果没通过是否需要重试等。</li></ul></li></ul><p>以 <code>rpl.rpl_multi_source_basic</code>（对应于文件 <code>mysql-test/suite/rpl/t/rpl_multi_source_basic.test</code>）测试 case 为例来说明执行过程，用例内容如下（开头注释部分为测试过程）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is the basic test required in for multisource replication</span></span><br><span class="line"><span class="comment"># The aim of this file is to test the basic usecases of msr.</span></span><br><span class="line"><span class="comment"># 0. Create two masters and a slave and setup a multisource replication</span></span><br><span class="line"><span class="comment">#    between them.</span></span><br><span class="line"><span class="comment"># 1. create a different databases on each master and test if they are replicated</span></span><br><span class="line"><span class="comment">#    to the slave.</span></span><br><span class="line"><span class="comment"># 2. create a different table on each master and test if they are replicated to</span></span><br><span class="line"><span class="comment">#    the to the slave.</span></span><br><span class="line"><span class="comment"># 3. Create a table with the same name on both masters and update non conflicting</span></span><br><span class="line"><span class="comment">#    data on that table. Test if the replication is done properly.</span></span><br><span class="line"><span class="comment"># 4. Check if updates happen on different master such that the resulting</span></span><br><span class="line"><span class="comment">#    data on slave is conflicting, check that one of the channels the slave</span></span><br><span class="line"><span class="comment">#    SQL thread is stopped.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note: Out of convention, server 2 is always made a slave for multisource testing.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Skip on group replication runs</span></span><br><span class="line">--<span class="built_in">source</span> include/not_group_replication_plugin.inc</span><br><span class="line"><span class="comment"># Test requires master-info-repository=TABLE, relay-log-info-repository=TABLE</span></span><br><span class="line">--<span class="built_in">source</span> include/have_slave_repository_type_table.inc</span><br><span class="line"></span><br><span class="line">--<span class="built_in">echo</span> <span class="comment">#</span></span><br><span class="line">--<span class="built_in">echo</span> <span class="comment"># set up masters server_1 and server_3 with server_2 being a slave.</span></span><br><span class="line">--<span class="built_in">echo</span> <span class="comment">#.</span></span><br><span class="line">--<span class="built_in">let</span> <span class="variable">$rpl_topology</span>= 1-&gt;2,3-&gt;2</span><br><span class="line">--<span class="built_in">let</span> <span class="variable">$rpl_multi_source</span>= 1</span><br><span class="line">--<span class="built_in">source</span> include/rpl_init.inc</span><br><span class="line"></span><br><span class="line">--<span class="built_in">echo</span> <span class="comment">#</span></span><br><span class="line">--<span class="built_in">echo</span> <span class="comment"># Test case 1: 1.a) create a database and table db1.t1 on server_1</span></span><br><span class="line">--<span class="built_in">echo</span> <span class="comment">#                   and insert values in the table.</span></span><br><span class="line">--<span class="built_in">let</span> <span class="variable">$rpl_connection_name</span>= server_1</span><br><span class="line">--<span class="built_in">source</span> include/rpl_connection.inc</span><br><span class="line">CREATE DATABASE db1;</span><br><span class="line">CREATE TABLE db1.t1 ( a int);</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>启动测试指令 <code>perl mysql-test-run.pl --do-test=rpl_multi_source</code> 后，会启动 3 个 mysqld 进程，其中 2 个 master 节点，1 个 slave 节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">➜  rpl ps -xf | grep mysql</span><br><span class="line">   6982 pts/2    S+     0:00      \_ perl mysql-test-run.pl rpl_multi_source_basic</span><br><span class="line">   7125 pts/2    S+     0:00          \_ perl mysql-test-run.pl rpl_multi_source_basic</span><br><span class="line">   7130 pts/2    S+     0:00              \_ /data/work/mysql/mysql80-install.bak_valgrind/bin//mysqltest_safe_process -- /data/work/mysql/mysql80-install.bak_valgrind/bin/mysqld --defaults-group-suffix=.1 --defaults-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/my.cnf --log-output=file --loose-debug-sync-timeout=600 --binlog-format=mixed --core-file</span><br><span class="line">   7131 pts/2    Sl     0:04              |   \_ /data/work/mysql/mysql80-install.bak_valgrind/bin/mysqld --defaults-group-suffix=.1 --defaults-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/my.cnf --log-output=file --loose-debug-sync-timeout=600 --binlog-format=mixed --core-file</span><br><span class="line">   7132 pts/2    S+     0:00              \_ /data/work/mysql/mysql80-install.bak_valgrind/bin//mysqltest_safe_process -- /data/work/mysql/mysql80-install.bak_valgrind/bin/mysqld --defaults-group-suffix=.2 --defaults-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/my.cnf --log-output=file --loose-debug-sync-timeout=600 --binlog-format=mixed --core-file</span><br><span class="line">   7133 pts/2    Sl     0:06              |   \_ /data/work/mysql/mysql80-install.bak_valgrind/bin/mysqld --defaults-group-suffix=.2 --defaults-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/my.cnf --log-output=file --loose-debug-sync-timeout=600 --binlog-format=mixed --core-file</span><br><span class="line">   7134 pts/2    S+     0:00              \_ /data/work/mysql/mysql80-install.bak_valgrind/bin//mysqltest_safe_process -- /data/work/mysql/mysql80-install.bak_valgrind/bin/mysqld --defaults-group-suffix=.3 --defaults-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/my.cnf --log-output=file --loose-debug-sync-timeout=600 --binlog-format=mixed --core-file</span><br><span class="line">   7135 pts/2    Sl     0:04              |   \_ /data/work/mysql/mysql80-install.bak_valgrind/bin/mysqld --defaults-group-suffix=.3 --defaults-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/my.cnf --log-output=file --loose-debug-sync-timeout=600 --binlog-format=mixed --core-file</span><br><span class="line">   7283 pts/2    S+     0:00              \_ /data/work/mysql/mysql80-install.bak_valgrind/bin//mysqltest_safe_process -- /data/work/mysql/mysql80-install.bak_valgrind/bin/mysqltest --defaults-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/my.cnf --silent --tmpdir=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/tmp --character-sets-dir=/data/work/mysql/mysql80-install.bak_valgrind/share/charsets --logdir=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/<span class="built_in">log</span> --database=<span class="built_in">test</span> --plugin_dir=/data/work/mysql/mysql80-install.bak_valgrind/lib/plugin --timer-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/<span class="built_in">log</span>/timer --test-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/suite/rpl/t/rpl_multi_source_basic.test --tail-lines=20 --result-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/suite/rpl/r/rpl_multi_source_basic.result</span><br><span class="line">   7284 pts/2    R      0:00                  \_ /data/work/mysql/mysql80-install.bak_valgrind/bin/mysqltest --defaults-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/my.cnf --silent --tmpdir=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/tmp --character-sets-dir=/data/work/mysql/mysql80-install.bak_valgrind/share/charsets --logdir=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/<span class="built_in">log</span> --database=<span class="built_in">test</span> --plugin_dir=/data/work/mysql/mysql80-install.bak_valgrind/lib/plugin --timer-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/var/<span class="built_in">log</span>/timer --test-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/suite/rpl/t/rpl_multi_source_basic.test --tail-lines=20 --result-file=/data/work/mysql/mysql80-install.bak_valgrind/mysql-test/suite/rpl/r/rpl_multi_source_basic.result</span><br></pre></td></tr></table></figure><p>可见：</p><ol><li>无论是 mysqldtest 还是 mysqld，都是由 mysqltest_safe_process 程序启动的。</li><li><code>--defaults-group-suffix=.1 到 3</code> 分别对应 3 个 mysqld 进程，说明 <strong>mtr 不是靠 mock 的形式来测试的，而是启动真 mysqld 进程来测试</strong>。</li></ol><h1 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h1><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p><strong>mysql-server 编译需要：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for mysql 8.0</span></span><br><span class="line"></span><br><span class="line">sudo apt install gdb gcc g++ cmake -y</span><br><span class="line">sudo apt install openssl libssl-dev -y</span><br><span class="line">sudo apt install libncurses-dev libudev-dev -y</span><br><span class="line">sudo apt install bison flex libaio-dev libreadline-dev libjemalloc-dev -y</span><br><span class="line">sudo apt install libevent-dev zlib1g-dev libmecab-dev libgcrypt20-dev -y</span><br><span class="line">sudo apt install libsasl2-dev libldap2-dev libtirpc-dev</span><br><span class="line">sudo apt-get install libsasl2-dev <span class="comment"># SASL</span></span><br><span class="line">sudo apt-get install slapd ldap-utils <span class="comment"># LDAP</span></span><br><span class="line">sudo apt install valgrind doxygen libcurl4-gnutls-dev -y <span class="comment"># extra</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># centos 7.6</span></span><br><span class="line">sudo yum install cmake gcc g++ <span class="comment"># 由于 cmake、gcc 版本偏低，需要自行通过源码编译安装</span></span><br><span class="line">sudo yum install readline-devel bison flex libarchive openssl-devel</span><br><span class="line">sudo yum install rpcgen libudev-devel ncurses-devel libtirpc libtirpc-devel</span><br><span class="line">sudo yum install cyrus-sasl-devel <span class="comment"># SASL</span></span><br><span class="line">sudo yum install openldap openldap-devel <span class="comment"># LDAP</span></span><br><span class="line">sudo yum install valgrind <span class="comment"># extra</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># centos stream 9</span></span><br><span class="line">sudo yum install cmake gcc g++ gcc-toolset-12-gcc gcc-toolset-12-gcc-c++ gcc-toolset-12-binutils</span><br><span class="line">sudo yum install readline-devel bison flex libarchive openssl-devel <span class="comment"># libtirpc-devel</span></span><br><span class="line">sudo yum install rpcgen libudev-devel ncurses-devel libtirpc libtirpc-devel</span><br><span class="line">sudo yum install cyrus-sasl-devel <span class="comment"># SASL</span></span><br><span class="line">sudo yum install openldap openldap-devel <span class="comment"># LDAP</span></span><br><span class="line">sudo yum install valgrind <span class="comment"># extra</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># macos</span></span><br><span class="line">brew install lz4</span><br><span class="line">brew install zlib</span><br><span class="line">brew install clang</span><br></pre></td></tr></table></figure><blockquote><p>由于系统及版本差异，这里罗列的软件包可能会有所缺失，版本也可能会有所不同。</p></blockquote><p><strong>对于 mtr 来说，也需要额外安装一些依赖：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># centos</span></span><br><span class="line">yum -y install perl -y</span><br><span class="line">sudo yum install perl-JSON -y</span><br><span class="line">sudo yum install perl-Test-use-ok.noarch -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># ubuntu</span></span><br><span class="line">sudo apt install perl -y</span><br><span class="line">sudo perl -MCPAN -e <span class="string">&#x27;install JSON&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>Debug 版本编译选项示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for MacOS and Ubuntu</span></span><br><span class="line">CURDIR=`<span class="built_in">pwd</span>`</span><br><span class="line">INSTALLDIR=<span class="variable">$CURDIR</span>/../../mysql80-install</span><br><span class="line">DATADIR=<span class="variable">$CURDIR</span>/../../mysql80-default-data</span><br><span class="line">BOOSTDIR=<span class="variable">$CURDIR</span>/../../boost_1_77_0</span><br><span class="line"></span><br><span class="line">rm CMakeCache.txt -f</span><br><span class="line">cmake .. \</span><br><span class="line">-DCMAKE_BUILD_TYPE=Debug \</span><br><span class="line">-DCMAKE_INSTALL_PREFIX=<span class="variable">$INSTALLDIR</span> \</span><br><span class="line">-DSYSCONFDIR=/etc \</span><br><span class="line">-DMYSQL_DATADIR=<span class="variable">$DATADIR</span> \</span><br><span class="line">-DMYSQL_UNIX_ADDR=/tmp/mysqld.sock \</span><br><span class="line">-DMYSQL_TCP_PORT=3306 \</span><br><span class="line">-DWITH_MYISAM_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 \</span><br><span class="line">-DENABLED_LOCAL_INFILE=1 \</span><br><span class="line">-DWITH_DEBUG=1 \ <span class="comment"># 必须是 debug 版本</span></span><br><span class="line">-DWITH_BOOST=<span class="variable">$BOOSTDIR</span> \</span><br><span class="line">-DWITH_SSL=/usr/<span class="built_in">local</span>/openssl-1.1.1 \</span><br><span class="line">-DFORCE_INSOURCE_BUILD=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># -DWITH_ASAN=ON -DWITH_ASAN_SCOPE=ON -DWITH_UBSAN=ON \ # 选择启用哪些组件</span></span><br><span class="line"><span class="comment"># -DWITH_VALGRIND=ON \</span></span><br><span class="line"><span class="comment"># -DENABLE_GCOV=1 -DENABLE_GPROF=1 \</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? != 0 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for MacOS, only need make</span></span><br><span class="line">make -j4</span><br><span class="line">make install</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Release 版本编译选项示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># for MacOS and Ubuntu</span></span><br><span class="line">CURDIR=`<span class="built_in">pwd</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment"># for 8.0.29</span></span><br><span class="line">INSTALLDIR=<span class="variable">$CURDIR</span>/../../mysql80-install</span><br><span class="line"><span class="comment">#INSTALLDIR=/usr</span></span><br><span class="line">DATADIR=<span class="variable">$CURDIR</span>/../../mysql80-default-data</span><br><span class="line">BOOSTDIR=<span class="variable">$CURDIR</span>/../../boost_1_77_0</span><br><span class="line"></span><br><span class="line">rm CMakeCache.txt -f</span><br><span class="line">cmake .. \</span><br><span class="line">-DCMAKE_BUILD_TYPE=Release \</span><br><span class="line">-DBUILD_CONFIG=mysql_release \</span><br><span class="line">-DFEATURE_SET=community \</span><br><span class="line">-DWITH_EMBEDDED_SERVER=OFF \</span><br><span class="line">-DWITHOUT_ROCKSDB=ON \</span><br><span class="line">-DWITH_UNIT_TESTS=OFF \</span><br><span class="line">-DWITH_BOOST=<span class="variable">$BOOSTDIR</span> \</span><br><span class="line">-DFORCE_INSOURCE_BUILD=1 \</span><br><span class="line">-DCOMPILATION_COMMENT=<span class="string">&quot;MySQL build <span class="subst">$(date +%Y%m%d.%H%M%S.$(git rev-parse --short HEAD)</span>)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-DCMAKE_INSTALL_PREFIX=$INSTALLDIR \</span></span><br><span class="line"><span class="comment">#-DSYSCONFDIR=/etc \</span></span><br><span class="line"><span class="comment">#-DMYSQL_DATADIR=$DATADIR \</span></span><br><span class="line"><span class="comment">#-DWITH_MYISAM_STORAGE_ENGINE=1 \</span></span><br><span class="line"><span class="comment">#-DWITH_INNOBASE_STORAGE_ENGINE=1 \</span></span><br><span class="line"><span class="comment">#-DWITH_MEMORY_STORAGE_ENGINE=1 \</span></span><br><span class="line"><span class="comment">#-DWITH_PARTITION_STORAGE_ENGINE=1 \</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? != 0 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># for MacOS, only need make</span></span><br><span class="line">make -j4</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p><a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_cmake_build_type"><code>-DCMAKE_BUILD_TYPE=type</code></a> 选项说明：</p><p>The type of build to produce:</p><ul><li><code>RelWithDebInfo</code>: <strong>default value</strong>。<strong>Enable optimizations and generate debugging information</strong>. This is the default MySQL build type.</li><li><code>Release</code>: Enable optimizations but omit debugging information to reduce the build size. <strong>This build type was added in MySQL 8.0.13</strong> (MySQL 5.7 is not supported).</li><li><code>Debug</code>: Disable optimizations and generate debugging information. This build type is also used if the <a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_debug"><code>WITH_DEBUG</code></a> option is enabled. That is, <a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_with_debug"><code>-DWITH_DEBUG=1</code></a> has the same effect as <a href="https://dev.mysql.com/doc/refman/8.0/en/source-configuration-options.html#option_cmake_cmake_build_type"><code>-DCMAKE_BUILD_TYPE=Debug</code></a>.</li></ul><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><p>编译安装后，<code>mysql-test</code> 目录树结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line">mysql-test</span><br><span class="line">├── README</span><br><span class="line">├── README.gcov <span class="comment"># 代码覆盖率测试说明，最后更新于2006年</span></span><br><span class="line">├── README.stress <span class="comment"># 压力测试说明，针对 mysql-stress-test.pl ，最后更新于2006年</span></span><br><span class="line"></span><br><span class="line">├── collections <span class="comment"># 该目录下的文件是官方推荐的回归测试指令集</span></span><br><span class="line">│   ├── README <span class="comment"># 说明文档</span></span><br><span class="line">│   ├── coverage.ignore <span class="comment"># 指定需要忽略代码覆盖率测试的目录</span></span><br><span class="line">│   ├── disabled.def <span class="comment"># 列出需要临时禁用的测试用例，在运行测试时会跳过</span></span><br><span class="line">│   ├── disabled-asan.list <span class="comment"># 除 disabled.def 文件所列用例之外，还需要临时禁用的测试用例</span></span><br><span class="line">│   ├── disabled-ubsan.list <span class="comment"># 同上</span></span><br><span class="line">│   ├── disabled-valgrind.list <span class="comment"># 同上</span></span><br><span class="line">│   ├── disabled_ndb.def <span class="comment"># 仅在运行 MySQL Cluster 时才需要临时禁用的测试用例</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 适合每天都运行的回归测试指令集</span></span><br><span class="line">        <span class="comment"># 涵盖 default suites、非 default suites、针对复制和binlog的扩展测试（区分不同的复制参数）、InnoDB 扩展测试（区分不同页面大小）</span></span><br><span class="line">│   ├── default.daily</span><br><span class="line">        <span class="comment"># 由于 valgrind 运行比较耗时，因此，该指令集只能涵盖除 big-test 之外的所有 suites 。</span></span><br><span class="line">        <span class="comment"># 需要编译时添加选项 -DWITH_DEBUG=1 -DWITH_VALGRIND=1 的情况下，才能执行 valgrind 测试。</span></span><br><span class="line">        <span class="comment"># 注意：通过实测、分析代码，运行 mtr 时必须添加 --valgrind 选项才能用到 valgrind 组件。</span></span><br><span class="line">│   ├── default.daily-valgrind</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 适合每周运行一次的指令集，运行耗时能达到48小时。</span></span><br><span class="line">        <span class="comment"># 是 default.daily 的超集，同时，还指定了 --debug-server 。</span></span><br><span class="line">        <span class="comment"># 覆盖 default suites + 非 default suites + 复制和binlog的扩展 + InnoDB扩展 + 其他按周运行的指令集。</span></span><br><span class="line">│   ├── default.weekly</span><br><span class="line">│   ├── default.weekly-ndbcluster <span class="comment"># 覆盖 default.daily + ndbcluster + 部分非默认指令集</span></span><br><span class="line">│   ├── default.weekly-protocol <span class="comment"># 编译时需要设置 DWITH_TEST_TRACE_PLUGIN=1，只覆盖 main suite。</span></span><br><span class="line">        <span class="comment"># 在启用 --big-test 和 --debug-server 选项的前提下，运行所有的指令集。</span></span><br><span class="line">        <span class="comment"># 需要编译时添加选项 -DWITH_DEBUG=1 -DWITH_VALGRIND=1 的情况下，才能执行 valgrind 测试。</span></span><br><span class="line">        <span class="comment"># 注意：通过实测、分析代码，运行 mtr 时必须添加 --valgrind 选项才能用到 valgrind 组件。</span></span><br><span class="line">│   ├── default.weekly-valgrind</span><br><span class="line">│   ├── default.weekly.basic <span class="comment"># 在禁用 --big-test 选项的前提下，运行所有的指令集，即包含 default suites + 非 default suites。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 适用于每次push代码时运行的指令集，能控制在一个小时内。</span></span><br><span class="line">        <span class="comment"># 更适用于 mysql 5.7 版本。</span></span><br><span class="line">│   ├── default.push</span><br><span class="line">│   ├── default.push-ndbcluster <span class="comment"># 分为 default suites + 与 ndbcluster 相关的指令集</span></span><br><span class="line">│   ├── default.push-valgrind <span class="comment"># 分为 default suites（排除 rpl）+ ndb 相关 suites + group_replication suite</span></span><br><span class="line">│   ├── mysql-8.0-stage.push <span class="comment"># 在 default.push 基础上，为 mysql-8.0-stage 扩展的测试用例，在merge到main分支前使用</span></span><br><span class="line">│   ├── mysql-8.0-stage.push.basic <span class="comment"># mysql-8.0-stage.push 的子集</span></span><br><span class="line"></span><br><span class="line">│   ├── mysql-trunk-meb-itch.push <span class="comment"># 文件为空</span></span><br><span class="line">        <span class="comment"># default.push 的超集，目的是在 push 到 main 分支前，提前发现问题。</span></span><br><span class="line">│   ├── mysql-trunk-stage.push <span class="comment"># 内容与 mysql-8.0-stage.push 一样，在merge到main分支前使用</span></span><br><span class="line">│   ├── mysql-trunk-stage.push.basic <span class="comment"># mysql-trunk-stage.push 的子集</span></span><br><span class="line">│   └── mysql-trunk-tsan.push <span class="comment"># 由于 ThreadSanitizer 非常慢，因此，只测试 main suite</span></span><br><span class="line"></span><br><span class="line">├── extra <span class="comment"># 不属于 main 和 其他 suites 的测试 case</span></span><br><span class="line">│   ├── binlog_tests</span><br><span class="line">│   │   ├── binlog.test</span><br><span class="line">│   │   ├── binlog_cache_stat.test</span><br><span class="line">│   │   ├── binlog_crash_safe_ddl.inc</span><br><span class="line">│   │   ├── binlog_ddl.inc</span><br><span class="line">        ......</span><br><span class="line">│   │   └── tmp_table.test</span><br><span class="line">│   └── rpl_tests</span><br><span class="line">│       ├── binlog_transaction_compression.inc</span><br><span class="line">│       ├── check_slave_delay.inc</span><br><span class="line">        ......</span><br><span class="line">│       └── type_conversions.test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">├── lib <span class="comment"># 测试框架相关依赖文件，里面主要是一些用perl实现的逻辑。</span></span><br><span class="line">│   ├── My</span><br><span class="line">│   │   ├── Config.pm</span><br><span class="line">│   │   ├── ConfigFactory.pm</span><br><span class="line">        ......</span><br><span class="line">│   │   └── Test.pm</span><br><span class="line">│   ├── mtr_cases.pm</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">├── lock_order_dependencies.txt <span class="comment"># mysql-test-run.pl 读取该文件来控制加锁顺序，与 --lock-order 选项有关。该文件非空。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 mtr 运行对应工具期间，比如 asan，对应的 .supp 文件用于指定需要跳过的测试用例。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ASAN、LSAN、TSAN 出自谷歌的 Sanitizer 项目，包含了 ASAN、LSAN、MSAN、TSAN等内存、线程错误的检测工具。</span></span><br><span class="line">├── asan.supp <span class="comment"># ASAN（Address-Sanitizier），内存错误检测工具。早期是LLVM中的特性，后被加入GCC 4.8。</span></span><br><span class="line">├── lsan.supp <span class="comment"># LSAN（LeakSanitizer），内存泄漏检测工具，已集成在 ASAN（AddressSanitizer）中。</span></span><br><span class="line">├── tsan.supp <span class="comment"># TSAN（ThreadSanitizer），线程间数据竞争的检测工具。</span></span><br><span class="line">├── valgrind.supp <span class="comment"># Valgrind 是一个工具集。集成了：</span></span><br><span class="line">                  <span class="comment"># Memcheck 内存错误检测器。</span></span><br><span class="line">                  <span class="comment"># Cachegrind 缓存和分支预测分析器。</span></span><br><span class="line">                  <span class="comment"># Callgrind 可生成缓存分析器的调用图。</span></span><br><span class="line">                  <span class="comment"># Helgrind 线程错误检测器。</span></span><br><span class="line">                  <span class="comment"># DRD 也是线程错误检测器。</span></span><br><span class="line">                  <span class="comment"># Massif 堆分析器，它可以帮助程序使用更少的内存。</span></span><br><span class="line">                  <span class="comment"># DHAT 一种不同类型的堆分析器。使用它可以了解块寿命，块利用率和布局效率低下的问题。</span></span><br><span class="line"></span><br><span class="line">├── mtr -&gt; ./mysql-test-run.pl <span class="comment"># mysql-test-run.pl 脚本别名</span></span><br><span class="line">├── mysql-stress-test.pl</span><br><span class="line">├── mysql-test-run -&gt; ./mysql-test-run.pl</span><br><span class="line">├── mysql-test-run.dox</span><br><span class="line">├── mysql-test-run.pl <span class="comment"># mtr 入口文件，测试框架核心逻辑</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># include/ 目录包含.inc 文件，在测试用例中通过 source 命令引入，就像 C/C++ 的头文件。建议将多次重复使用的测试语句整合到 .inc 文件中。</span></span><br><span class="line">├── include <span class="comment"># include 下所有 *.inc 都会被 t/ 目录下的 *.test 引用</span></span><br><span class="line">│   ├── Load_data.inc</span><br><span class="line">    ......</span><br><span class="line">│   ├── json_lookup.inc</span><br><span class="line">│   ├── keyring_tests</span><br><span class="line">│   │   ├── binlog</span><br><span class="line">│   │   │   ├── rpl_binlog_cache_encryption.inc</span><br><span class="line">        ......</span><br><span class="line">│   ├── keyring_udf_keyring_plugin_loaded.inc</span><br><span class="line">    ......</span><br><span class="line">│   └── year-engine.test</span><br><span class="line"><span class="comment"># t/ 和 r/ 目录分别对应于 main suite 的测试 case 和 期望结果。</span></span><br><span class="line"><span class="comment"># 测试 case 以 .test 后缀结尾。</span></span><br><span class="line"><span class="comment"># 另外还有 .opt 后缀文件，它里面指定了MySQL的参数。某些测试用例会涉及重启，在重启时可能会变更 mysql 参数，可能会用 .opt 文件中指定的参数。</span></span><br><span class="line">├── t <span class="comment"># 该目录下的每个 *.test 都对应一个测试 case 。</span></span><br><span class="line">│   ├── 1st.test</span><br><span class="line">│   ├── admin_interface.test</span><br><span class="line">    ......</span><br><span class="line">├── r <span class="comment"># 路径和命名 与 t/ 目录一一对应，表示对应测试用例的期望输出。</span></span><br><span class="line">│   ├── 1st.result</span><br><span class="line">│   ├── admin_interface.result</span><br><span class="line">    ......</span><br><span class="line">│   └── year-myisam.result</span><br><span class="line"></span><br><span class="line">├── std_data <span class="comment"># 测试所用的数据文件，某些测试 case 需要使用到。</span></span><br><span class="line">│   ├── 14897.frm</span><br><span class="line">│   ├── 256kb.json</span><br><span class="line">│   ├── 41_decimal.frm</span><br><span class="line">│   ├── 57import.zip</span><br><span class="line">    ......</span><br><span class="line">│   └── x_y_data.csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试框架有 suite 的概念，每个 suite 为一个测试用例集合，默认的 suite 为 main，它的测试集合位于当前目录下的 t/ 目录。</span></span><br><span class="line"><span class="comment"># 除了 main suite 之外，其他的 suite 基本都以子目录的形式存放于当前文件夹，比如 json、binlog 等。</span></span><br><span class="line">├── suite <span class="comment"># 本目录下每个子目录都包含 include/r/t 三个子目录，其中：</span></span><br><span class="line">          <span class="comment"># include/*.inc 会被 t/*.test 引用</span></span><br><span class="line">          <span class="comment"># t/*.test 是各个测试case的主文件</span></span><br><span class="line">          <span class="comment"># r/*.result 是期望的测试输出</span></span><br><span class="line">          <span class="comment"># 另外，t/ 与 r/ 路径中的文件是一一对应的。</span></span><br><span class="line">│   ├── audit_null</span><br><span class="line">    ......</span><br><span class="line">│   ├── innodb</span><br><span class="line">│   │   ├── include</span><br><span class="line">│   │   │   ├── alter_table_pk_no_sort.inc</span><br><span class="line">            ......</span><br><span class="line">│   │   ├── r</span><br><span class="line">│   │   │   ├── add_foreign_key.result</span><br><span class="line">│   │   │   ├── alter_crash.result</span><br><span class="line">            ......</span><br><span class="line">│   │   └── t</span><br><span class="line">│   │       ├── add_foreign_key.test</span><br><span class="line">│   │       ├── alter_crash.test</span><br><span class="line">            ......</span><br><span class="line">│   │       └── zlob_update_purge.test</span><br><span class="line">│   ├── innodb_fts</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">└── var <span class="comment"># 测试开启后 mtr 创建的目录，用于存放测试过程产生的数据目录、日志等。</span></span><br><span class="line">    ├── data</span><br><span class="line">    │   ├── <span class="comment">#ib_16384_0.dblwr</span></span><br><span class="line">        ......</span><br><span class="line">    ......</span><br><span class="line">    ├── my.cnf</span><br><span class="line">    ├── run</span><br><span class="line">    ├── std_data</span><br><span class="line">    │   ├── 14897.frm</span><br><span class="line">    ......</span><br><span class="line">    └── tmp</span><br><span class="line">        └── mysqld.1</span><br></pre></td></tr></table></figure><h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><p>参考：</p><ul><li><a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_MYSQLTEST_PROGRAMS.html">MySQL: MySQL Test Programs</a></li><li><a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_MYSQL_TEST_RUN_PL.html">MySQL: mysql-test-run.pl — Run MySQL Test Suite</a></li></ul><h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><ul><li><code>--force</code><ul><li>默认情况下，只要遇到一个 case 出错，测试程序就会退出。</li><li>加入该参数后，mtr 会忽略错误并继续执行下一个 case 直到所有 case 执行结束再退出。</li><li>但如果脚本存在太多错误还是会退出，可设置<code>--max-test-fail=0</code> 忽略计数。</li></ul></li><li><code>--max-test-fail</code><ul><li>测试过程中失败 case 数达到一定值会退出，默认值是 10，设置为 0 则会忽略计数。</li></ul></li><li><code>--record</code><ul><li><strong>是否记录 results 结果，首次执行建议带上，让其自动生成 <code>.results</code> 文件，再基于该文件修改成我们预期的结果</strong>。</li><li>若一个执行输出结果和 <code>testname.result</code> 文件不同，会生成一个 <code>testname.reject</code> 文件，该文件在下次执行成功之后被删除；</li><li>检查<code>.reject</code>文件的内容，如果里面是期望的输出，则将内容拷贝到 <code>.result</code> 文件中，作为以后判断运行结果是否通过的依据；</li></ul></li><li><code>--parallel</code><ul><li>指定运行测试 case 的并行线程数。</li></ul></li><li><code>—-nowarnings</code><ul><li>忽略 warnings 错误。</li><li>设置该参数后，当出现 warnings 错误，不再累加 <code>--max-test-fail</code> 。</li></ul></li><li><code>--big-test</code><ul><li>执行标记为 <code>big</code> 的 test cases，也就是同时覆盖 <strong>非 big + big</strong>。这是因为标记为 big 的 case 较大、耗时较长，默认不会执行。</li></ul></li><li><code>--only-big-test</code> ：只启用带 big 标记的 test cases，也就是会跳过普通的非 big 标记的 cases。</li><li><code>--suite=[suitename1,...]</code><ul><li>默认情况下 mtr 会执行所有测试 case，但有时候我们要执行一个测试集，就可用该参数来指定，比如<code>./mtr --suite=rpl</code> 只执行 rpl 测试集。</li></ul></li><li><code>--do-test=events</code><ul><li>执行所有以 <code>events</code>为前缀的 case（搜索范围为 t/和所有的 suite）。</li><li><code>--do-test</code> 的参数支持正则表达式，上述命令等效于 <code>./mtr --do-test=events.*</code></li><li>所以如果想测试所有的包括 innodb 的 case，可以用 <code>./mtr --do-test=.*innodb.*</code></li></ul></li><li><strong>连接远程的数据库进行 mtr 执行：</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --extern  一般情况下mtr是启动自己的MySQL服务来进行测试，如果在启动时指定参数 --extern，则可以使用指定的 MySQL 服务进行测试</span></span><br><span class="line">./mtr --extern host=192.168.6.1 --extern port=3306 --extern user=root --extern password=<span class="string">&#x27;123456&#x27;</span>  --record --force example.1</span><br><span class="line">./mtr --extern host=127.0.0.1 --extern port=3306 --extern user=root --extern password= --force --max-test-fail=0 --suite=main</span><br><span class="line">./mtr --extern host=127.0.0.1 --extern port=3306 --extern user=root --extern password= --force --max-test-fail=0 --fast --suite=main</span><br></pre></td></tr></table></figure><ul><li><code>--debug-server</code> ：Use debug version of server, but without turning on tracing.</li><li><code>--platform</code> 和 <code>--exclude-platform</code> ：用于指定或排除平台的选项。<ul><li>如果 MTR 不是运行在 pushbuild test 环境中（存在环境变量<code>PB2WORKDIR</code>，即<code>export PB2WORKDIR=</code>），这两个选项是不生效的。</li></ul></li><li><code>comment=STR</code> ：添加该选项后，mtr 会将注释信息打印到 stdout 。比如 <code>--comment=all-default-big</code>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># all-default-big</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br></pre></td></tr></table></figure><ul><li><code>--vardir=DIR</code> ：指定测试过程中生成的文件存放的目录，默认是当前路径下的<code>var/</code> 。</li><li><code>--report-features</code> ：指定该选项后，mtr 首先运行名为 <code>report_features</code> 的 case，该 case 没有任何输出（设置了<code>--disable_query_log</code>） 。</li><li><code>--unit-tests-report</code> ：加上该参数后，如果在编译后的源码目录执行 mtr，会在测试的最后阶段加上每个测试用例的报告信息。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line">[----------] 1027 tests from Spec/ReuseConnectionTest (404 ms total)</span><br><span class="line"></span><br><span class="line">[----------] Global <span class="built_in">test</span> environment tear-down</span><br><span class="line">[==========] 1027 tests from 1 <span class="built_in">test</span> suite ran. (70804 ms total)</span><br><span class="line"></span><br><span class="line">Total Test time (real) = 3363.87 sec</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">The following tests FAILED:</span><br><span class="line">        203 - routertest_component_metadata_ttl (Subprocess aborted)</span><br><span class="line">        206 - routertest_component_rest_api_enable (Failed)</span><br><span class="line">        222 - routertest_component_routing_splicer (Failed)</span><br><span class="line">        224 - routertest_integration_routing_reuse (Failed)</span><br><span class="line">Errors <span class="keyword">while</span> running CTest</span><br><span class="line">  [  FAILED  ] CheckEdgeHttpsPortValues/UseEdgeHttpsPortValues.ensure_bootstrap_works_for_edge_https_port_values/1, <span class="built_in">where</span> GetParam() = 65535 (1444 ms)</span><br><span class="line">  [  FAILED  ] 1 <span class="built_in">test</span>, listed below:</span><br><span class="line">  [  FAILED  ] CheckEdgeHttpsPortValues/UseEdgeHttpsPortValues.ensure_bootstrap_works_for_edge_https_port_values/1, <span class="built_in">where</span> GetParam() = 65535</span><br><span class="line">   1 FAILED TEST</span><br><span class="line">  [  FAILED  ] Spec/SplicerFailParamTest.fails/client_ssl_dh_params_not_exists, <span class="built_in">where</span> GetParam() = 64-byte object &lt;C8-CE 3D-2F 4D-56 00-00 F0-DA BB-30 4D-56 00-00 B0-DB BB-30 4D-56 00-00 B0-DB BB-30 4D-56 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 3D-D1 F9-2E 4D-56 00-00 AD-D0 F9-2E 4D-56 00-00&gt; (383 ms)</span><br><span class="line">  [  FAILED  ] 1 <span class="built_in">test</span>, listed below:</span><br><span class="line">  [  FAILED  ] Spec/SplicerFailParamTest.fails/client_ssl_dh_params_not_exists, <span class="built_in">where</span> GetParam() = 64-byte object &lt;C8-CE 3D-2F 4D-56 00-00 F0-DA BB-30 4D-56 00-00 B0-DB BB-30 4D-56 00-00 B0-DB BB-30 4D-56 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 3D-D1 F9-2E 4D-56 00-00 AD-D0 F9-2E 4D-56 00-00&gt;</span><br><span class="line">   1 FAILED TEST</span><br><span class="line">  [  FAILED  ] 0 tests, listed below:</span><br><span class="line">   0 FAILED TESTS</span><br><span class="line">  [  FAILED  ] Spec/ReuseConnectionTest: SetUpTestSuite or TearDownTestSuite</span><br><span class="line">   1 FAILED TEST SUITE</span><br><span class="line"></span><br><span class="line">Unit tests: 98% tests passed, 4 tests failed out of 224</span><br><span class="line">  The following tests FAILED:</span><br><span class="line">        206 - routertest_component_rest_api_enable (Failed)</span><br><span class="line">        222 - routertest_component_routing_splicer (Failed)</span><br><span class="line">        224 - routertest_integration_routing_reuse (Failed)</span><br><span class="line">Report from unit tests <span class="keyword">in</span> /data/work/mysql/mysql-server/mysql-test/var-all-default-big/ctest.log</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">The servers were restarted 3 <span class="built_in">times</span></span><br><span class="line">The servers were reinitialized 0 <span class="built_in">times</span></span><br><span class="line">Spent 53.181 of 3579 seconds executing testcases</span><br><span class="line"></span><br><span class="line">Completed: Failed 1/6 tests, 83.33% were successful.</span><br><span class="line"></span><br><span class="line">Failing <span class="built_in">test</span>(s): unit_tests</span><br></pre></td></tr></table></figure><ul><li><code>--no-skip</code> ：指定该选项后，即使 <code>.inc</code> 文件中要求的条件不满足，也会运行所有的 mtr 测试 cases 。特别地，在 <code>include/excludenoskip.list</code> 文件中指定的 <code>.inc</code> 文件列表依然会跳过。</li><li><code>--skip-ndb</code> ：与选项<code>--skip-ndbcluster</code> 含义相同，表示跳过与 ndb 相关的 suites，默认启用。<ul><li>ndb 引擎也是开源的（<code>storage/ndb/</code>），涉及 ndb 引擎的 suites 包括：</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- ndb</span><br><span class="line">- ndb_big</span><br><span class="line">- ndb_opt</span><br><span class="line">- ndb_ddl</span><br><span class="line">- ndb_binlog</span><br><span class="line">- ndb_rpl</span><br><span class="line">- rpl_ndb</span><br><span class="line">- ndbcluster</span><br><span class="line">- gcol_ndb</span><br><span class="line">- json_ndb</span><br></pre></td></tr></table></figure><ul><li><code>--with-ndb-only</code> ：与选项<code>--with-ndbcluster-only</code> 含义相同，只运行与 ndb 相关的 suites 。如果没显示指定<code>--suites</code> 参数，则会跳过所有非 ndb 的 suites ；反之，若指定了，也会额外运行指定的 suites 。</li><li><code>--ps-protocol</code> ：在 client 和 server 端之间使用 prepared-statement 协议（binary），会将<code>--ps-protocol</code> 参数直接传给 mysqltest 程序。</li><li><code>--skip-combinations</code> ：忽略组合文件或选项，也就是忽略：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动 mtr 时的日志：</span></span><br><span class="line">Collecting tests</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> binlog</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> binlog_gtid</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> binlog_nogtid</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> rpl</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> rpl_gtid</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> rpl_nogtid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对应于</span></span><br><span class="line">./suite/rpl_nogtid/combinations</span><br><span class="line">./suite/binlog_gtid/combinations</span><br><span class="line">./suite/binlog/combinations</span><br><span class="line">./suite/rpl/combinations</span><br><span class="line">./suite/rpl_gtid/combinations</span><br><span class="line">./suite/binlog_nogtid/combinations</span><br><span class="line"></span><br><span class="line"><span class="comment"># 除此之外，还有：</span></span><br><span class="line">./suite/ndb_rpl/t/ndb_rpl_innodb2ndb.combinations</span><br><span class="line">./suite/ndb_rpl/t/ndb_rpl_conflict_epoch.combinations</span><br><span class="line">./suite/ndb_rpl/t/ndb_rpl_basic.combinations</span><br></pre></td></tr></table></figure><h2 id="suitename-可选范围"><a href="#suitename-可选范围" class="headerlink" title="suitename 可选范围"></a>suitename 可选范围</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">main,</span><br><span class="line"></span><br><span class="line">audit_null,</span><br><span class="line">auth_sec,</span><br><span class="line"></span><br><span class="line">binlog,</span><br><span class="line">binlog_gtid,</span><br><span class="line">binlog_nogtid,</span><br><span class="line"><span class="built_in">clone</span>,</span><br><span class="line"></span><br><span class="line">collations,</span><br><span class="line"></span><br><span class="line">component_keyring_file,</span><br><span class="line">connection_control,</span><br><span class="line">encryption,</span><br><span class="line"></span><br><span class="line">engines,</span><br><span class="line">engines/funcs,</span><br><span class="line">engines/iuds,</span><br><span class="line">engines/rr_trx,</span><br><span class="line">federated,</span><br><span class="line"></span><br><span class="line">funcs_1, <span class="comment"># 额外功能（包括视图、存储过程、INFORMATION_SCHEMA等）</span></span><br><span class="line">funcs_2, <span class="comment"># 额外功能（字符集等）</span></span><br><span class="line">gcol, <span class="comment"># 虚拟生成列</span></span><br><span class="line">gis,</span><br><span class="line">group_replication,</span><br><span class="line">information_schema,</span><br><span class="line"></span><br><span class="line">innodb,</span><br><span class="line">innodb_fts, <span class="comment"># 全文索引</span></span><br><span class="line">innodb_gis,</span><br><span class="line">innodb_stress,</span><br><span class="line">innodb_undo,</span><br><span class="line">innodb_zip,</span><br><span class="line"></span><br><span class="line">interactive_utilities,</span><br><span class="line">jp, <span class="comment"># 日语字符集</span></span><br><span class="line">json,</span><br><span class="line">large_tests,</span><br><span class="line">lock_order,</span><br><span class="line">max_parts,</span><br><span class="line">memcached,</span><br><span class="line">network_namespace,</span><br><span class="line">opt_trace,</span><br><span class="line">parts,parts/special_tests,</span><br><span class="line">perfschema,</span><br><span class="line">query_rewrite_plugins,</span><br><span class="line"></span><br><span class="line">rpl,</span><br><span class="line">rpl_gtid,</span><br><span class="line">rpl_nogtid,</span><br><span class="line"></span><br><span class="line">secondary_engine,</span><br><span class="line"></span><br><span class="line">service_status_var_registration,</span><br><span class="line">service_sys_var_registration,</span><br><span class="line">service_udf_registration,</span><br><span class="line"></span><br><span class="line">special,</span><br><span class="line">stress,</span><br><span class="line">sys_vars,</span><br><span class="line">sysschema,</span><br><span class="line"></span><br><span class="line">test_service_sql_api,</span><br><span class="line">test_services,</span><br><span class="line"></span><br><span class="line">x</span><br></pre></td></tr></table></figure><h1 id="suites-分类"><a href="#suites-分类" class="headerlink" title="suites 分类"></a>suites 分类</h1><h2 id="default-suites"><a href="#default-suites" class="headerlink" title="default suites:"></a>default suites:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">auth_sec,binlog,binlog_gtid,binlog_nogtid,<span class="built_in">clone</span>,</span><br><span class="line">collations,component_keyring_file,connection_control,encryption,</span><br><span class="line">federated,funcs_2,gcol,gis,information_schema,</span><br><span class="line">innodb,innodb_fts,innodb_gis,innodb_undo,innodb_zip,</span><br><span class="line">interactive_utilities,json,</span><br><span class="line">main,</span><br><span class="line">opt_trace,parts,perfschema,query_rewrite_plugins,rpl,rpl_gtid,rpl_nogtid,secondary_engine,</span><br><span class="line">service_status_var_registration,service_sys_var_registration,service_udf_registration,</span><br><span class="line">sys_vars,sysschema,test_service_sql_api,test_services,x</span><br></pre></td></tr></table></figure><h2 id="非-default-suites："><a href="#非-default-suites：" class="headerlink" title="非 default suites："></a>非 default suites：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">funcs_2, stress, jp, nist</span><br><span class="line">engines, memcached, audit_null</span><br><span class="line">group_replication</span><br></pre></td></tr></table></figure><h1 id="指令示例"><a href="#指令示例" class="headerlink" title="指令示例"></a>指令示例</h1><h2 id="mtr-执行路径："><a href="#mtr-执行路径：" class="headerlink" title="mtr 执行路径："></a><strong>mtr 执行路径：</strong></h2><ul><li>代码覆盖率、单元测试只能在 <code>编译的源码目录/mysql-test</code> 执行。</li><li>其他测试在 <code>编译的源码目录/mysql-test</code> 和 <code>安装目录/mysql-test</code> 都可以执行。</li><li><strong>如无特殊需求，更建议在安装目录执行 mtr 测试</strong>（目录结构更清晰）。</li></ul><h2 id="常用指令："><a href="#常用指令：" class="headerlink" title="常用指令："></a>常用指令：</h2><ul><li>在未编写 <code>.result</code>文件的情况下，可先通过<code>--reocrd</code>选项生成<code>.result</code>文件，再基于该文件修改成期望的结果：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl mysql-test-run.pl --record mytest</span><br></pre></td></tr></table></figure><ul><li>常态下执行，不加 <code>--reocrd</code>选项，这样才会比对实际结果与期望结果是否相同：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">perl mysql-test-run.pl mytestcase1</span><br><span class="line">perl mysql-test-run.pl --suites=main,rpl <span class="comment"># 指定多个 suites</span></span><br></pre></td></tr></table></figure><ul><li>当一些测试 case 频繁失败时，可单独运行这些 case 以便调试：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">./mtr testcasename --record</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只运行基础套餐里的 subquery_all 用例（ t/subquery_all.test ）</span></span><br><span class="line"><span class="comment"># 可选 --charset-for-testdb=utf8mb4</span></span><br><span class="line">./mtr --force --big-test --nowarnings --max-test-fail=0 main.subquery_all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如需执行多个 case，可通过空格分割，比如：</span></span><br><span class="line">./mtr --force --big-test --nowarnings --max-test-fail=0 main.subquery_all main.myisam_explain_json_non_select_none</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>如果不指定任何 suite，mtr 默认会执行所有 default suites（包括 main）</strong>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mtr --force</span><br></pre></td></tr></table></figure><ul><li>执行 main suite 中的所有 case（所有<code>mysql-test/t/*.test</code>），忽略中间的 warnings 报错，强制运行完所有 case：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./mtr  --suite=main --force --max-test-fail=0 --nowarnings --parallel=8</span><br><span class="line">./mtr  --suite=main --force --max-test-fail=0 --nowarnings --parallel=8 --big-test</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>执行所有以 <code>events </code>为前缀的 case，搜索范围为 <code>mysql-test/t</code>、<code>mysql-test/suite</code>，注意不包括<code>extra/</code> ：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --do-test 参数支持正则表达式，该指令等效于./mtr --do-test=events.*</span></span><br><span class="line">./mtr --do-test=events --force --max-test-fail=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想测试所有包含 innodb 的 case，可以用 ./mtr --do-test=.*innodb.*</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="特殊用法："><a href="#特殊用法：" class="headerlink" title="特殊用法："></a>特殊用法：</h2><ul><li><p>1、准备数据库： <code>create database test</code> 。</p><ul><li><p>a）执行 <code>./mtr --extern host=127.0.0.1 --extern port=3306 --extern user=root --extern password= --force --max-test-fail=0 --suite=main</code> ，第一个非 skipped case 可以执行成功，但之后的 case 全部失败。</p></li><li><p>b）分析原因，发现是每执行完一个 case ，mtr 就会 shutdown mysqld server，下一个 case 再启动，而这里是使用的外部 mysql，则不会启动。</p></li></ul></li><li><p>2、查看手册，发现有一个参数可以控制是否每个 case 都重启 mysqld：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--fast</span><br><span class="line"></span><br><span class="line">Do not perform controlled shutdown when servers need to be restarted or at the end of the <span class="built_in">test</span> run. This is equivalent to using --shutdown-timeout=0.</span><br></pre></td></tr></table></figure><ul><li><strong>3、添加后，虽然不重启了，但会导致一些 case 失败。 这是因为有些 case 需要初始化一些参数</strong>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Note</span><br><span class="line"></span><br><span class="line">    If a <span class="built_in">test</span> <span class="keyword">case</span> has an .opt file that requires the server to be restarted with specific options, the</span><br><span class="line">    file will not be used. The <span class="built_in">test</span> <span class="keyword">case</span> likely will fail as a result.</span><br></pre></td></tr></table></figure><p>可见，<strong>官方对这种用法的支持尚不完善</strong>。</p><h1 id="推荐用法"><a href="#推荐用法" class="headerlink" title="推荐用法"></a>推荐用法</h1><p>如果需要验证 release 版本稳定性（适用于 QA、研发），可参考 <code>default.daily</code> 中的指令集。</p><ul><li>该指令集覆盖了单元测试（必须以 DEBUG 编译）、压力测试等。</li></ul><h1 id="如何添加测试用例？"><a href="#如何添加测试用例？" class="headerlink" title="如何添加测试用例？"></a>如何添加测试用例？</h1><h2 id="1-示例一"><a href="#1-示例一" class="headerlink" title="1. 示例一"></a>1. 示例一</h2><p>我们通过一个最简单的例子来说明这个框架是怎么使用的。</p><h3 id="1-1-创建测试用例"><a href="#1-1-创建测试用例" class="headerlink" title="1.1. 创建测试用例"></a>1.1. 创建测试用例</h3><p>在 <code>mysql-test/t</code> 目录下创建一个文件名为 <code>mytest.test</code> 的测试用例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--disable_warnings</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> t1;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@sql</span>_mode<span class="operator">=</span><span class="string">&#x27;NO_ENGINE_SUBSTITUTION&#x27;</span>;</span><br><span class="line"><span class="comment">--enable_warnings</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> SQL_WARNINGS<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--echo #</span></span><br><span class="line"><span class="comment">--echo # test content</span></span><br><span class="line"><span class="comment">--echo #</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1 (a <span class="type">INT</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span> (<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span> (<span class="number">2</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> t1;</span><br></pre></td></tr></table></figure><p>在<code>mysql-test/r</code> 目录下创建名为<code>mytest.result</code> 的文件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> t1;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@sql</span>_mode<span class="operator">=</span><span class="string">&#x27;NO_ENGINE_SUBSTITUTION&#x27;</span>;</span><br><span class="line"><span class="keyword">SET</span> SQL_WARNINGS<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">#</span><br><span class="line"># test content</span><br><span class="line">#</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1 (a <span class="type">INT</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span> (<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span> (<span class="number">2</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1;</span><br><span class="line">a</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> t1;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可见，<code>.result</code> 文件中不仅要记录 SQL，还要记录输出结果。</p><h3 id="1-2-执行测试，成功"><a href="#1-2-执行测试，成功" class="headerlink" title="1.2. 执行测试，成功"></a>1.2. 执行测试，成功</h3><p>指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> mysql80-debug/mysql-test</span><br><span class="line">./mtr main.mytest</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Logging: ./mtr  main.mytest</span><br><span class="line">MySQL Version 8.0.29</span><br><span class="line">Checking supported features</span><br><span class="line"> - Binaries are debug compiled</span><br><span class="line">Using <span class="string">&#x27;all&#x27;</span> suites</span><br><span class="line">Collecting tests</span><br><span class="line">Checking leftover processes</span><br><span class="line">Removing old var directory</span><br><span class="line">Creating var directory <span class="string">&#x27;/Users/wslu/work/mysql/mysql80-debug/mysql-test/var&#x27;</span></span><br><span class="line">Installing system database</span><br><span class="line">Using parallel: 1</span><br><span class="line"></span><br><span class="line">==============================================================================</span><br><span class="line">                  TEST NAME                       RESULT  TIME (ms) COMMENT</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">[ 50%] main.mytest                               [ pass ]     63</span><br><span class="line">[100%] shutdown_report                           [ pass ]</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">The servers were restarted 0 <span class="built_in">times</span></span><br><span class="line">The servers were reinitialized 0 <span class="built_in">times</span></span><br><span class="line">Spent 0.063 of 16 seconds executing testcases</span><br><span class="line"></span><br><span class="line">Completed: All 2 tests were successful.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看到 successful 说明执行成功。</p><h3 id="1-3-修改-result-文件"><a href="#1-3-修改-result-文件" class="headerlink" title="1.3. 修改 result 文件"></a>1.3. 修改 result 文件</h3><p>在 <code>mytest.result</code> 文件中添加一些字符：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS t1;</span><br><span class="line">SET @@sql_mode=<span class="string">&#x27;NO_ENGINE_SUBSTITUTION&#x27;</span>;</span><br><span class="line">SET SQL_WARNINGS=1;</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># test content</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">CREATE TABLE t1 (a INT);</span><br><span class="line">INSERT INTO t1 VALUES (1);</span><br><span class="line">INSERT INTO t1 VALUES (2);</span><br><span class="line">SELECT * FROM t1; <span class="comment"># new comment</span></span><br><span class="line">a</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">DROP TABLE t1;</span><br></pre></td></tr></table></figure><h3 id="1-4-再次执行测试，失败"><a href="#1-4-再次执行测试，失败" class="headerlink" title="1.4. 再次执行测试，失败"></a>1.4. 再次执行测试，失败</h3><p>再次执行指令<code>./mtr main.mytest</code> ，可见<code># new comment</code> 那一行报错：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line">                  TEST NAME                       <span class="keyword">RESULT</span>  <span class="type">TIME</span> (ms) COMMENT</span><br><span class="line"><span class="comment">------------------------------------------------------------------------------</span></span><br><span class="line">[ <span class="number">50</span><span class="operator">%</span>] main.mytest                               [ fail ]</span><br><span class="line">        Test ended <span class="keyword">at</span> <span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">15</span>:<span class="number">07</span>:<span class="number">50</span></span><br><span class="line"></span><br><span class="line">CURRENT_TEST: main.mytest</span><br><span class="line"><span class="comment">--- /Users/wslu/work/mysql/mysql80-debug.bak_asan_ubsan_gcov/mysql-test/r/mytest.result  2023-03-20 10:07:31.000000000 +0300</span></span><br><span class="line"><span class="operator">+</span><span class="operator">+</span><span class="operator">+</span> <span class="operator">/</span>Users<span class="operator">/</span>wslu<span class="operator">/</span>work<span class="operator">/</span>mysql<span class="operator">/</span>mysql80<span class="operator">-</span>debug.bak_asan_ubsan_gcov<span class="operator">/</span>mysql<span class="operator">-</span>test<span class="operator">/</span>var<span class="operator">/</span>log<span class="operator">/</span>mytest.reject  <span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">07</span>:<span class="number">50.000000000</span> <span class="operator">+</span><span class="number">0300</span></span><br><span class="line">@@ <span class="number">-7</span>,<span class="number">7</span> <span class="operator">+</span><span class="number">7</span>,<span class="number">7</span> @@</span><br><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1 (a <span class="type">INT</span>);</span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span> (<span class="number">1</span>);</span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span> (<span class="number">2</span>);</span><br><span class="line"><span class="operator">-</span><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1; # <span class="keyword">new</span> comment</span><br><span class="line"><span class="operator">+</span><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1;</span><br><span class="line"> a</span><br><span class="line"> <span class="number">1</span></span><br><span class="line"> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">mysqltest: <span class="keyword">Result</span> length mismatch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">The <span class="keyword">result</span> <span class="keyword">from</span> queries just before the failure was:</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> t1;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@sql</span>_mode<span class="operator">=</span><span class="string">&#x27;NO_ENGINE_SUBSTITUTION&#x27;</span>;</span><br><span class="line"><span class="keyword">SET</span> SQL_WARNINGS<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">#</span><br><span class="line"># test content</span><br><span class="line">#</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1 (a <span class="type">INT</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span> (<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span> (<span class="number">2</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1;</span><br><span class="line">a</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> t1;</span><br><span class="line">safe_process[<span class="number">19130</span>]: Child process: <span class="number">19131</span>, exit: <span class="number">1</span></span><br><span class="line"></span><br><span class="line"> <span class="operator">-</span> the logfile can be found <span class="keyword">in</span> <span class="string">&#x27;/Users/wslu/work/mysql/mysql80-debug.bak_asan_ubsan_gcov/mysql-test/var/log/main.mytest/mytest.log&#x27;</span></span><br><span class="line"></span><br><span class="line">[<span class="number">100</span><span class="operator">%</span>] shutdown_report                           [ pass ]</span><br><span class="line"><span class="comment">------------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure><p>mtr 会指出具体是哪行导致的 case 失败。</p><h1 id="常见问题-FAQ"><a href="#常见问题-FAQ" class="headerlink" title="常见问题 FAQ"></a>常见问题 FAQ</h1><h2 id="test-case-failed-原因"><a href="#test-case-failed-原因" class="headerlink" title="test case failed 原因"></a>test case failed 原因</h2><ol><li>产生的测试结果文件与预期输出文件 diff 结果不一致：<ol><li>期望输入的 SQL 执行成功，实际执行失败。</li><li>期望输入的 SQL 执行失败，实际执行成功。</li><li>比如：<code>mysql-test/t/select_all.test</code> 这个测试 case，其预期结果在<code>mysql-test/r/select_all.result</code>，在实际执行时，会将执行结果与<code>mysql-test/r/select_all.result</code>作比较，若不一致，则失败，并在<code>mysql-test/var/log</code>目录生成一个<code>.reject</code>文件。</li></ol></li><li>测试过程中 mysql server 挂掉。这种情况一般会报“丢失连接”的错误。</li><li>测试期间 MySQL Server 端写入了未过滤的 warnings 或 errors 日志。</li></ol><blockquote><p>此外，测试用例可以执行外部程序，因此在某些方面，测试框架可以扩展为测试 SQL 语句以外的用途。<br>最后，可以在测试中嵌入一小段 Perl 代码。这有时可用于执行超出测试语言或 SQL 能力的操作或执行逻辑。</p></blockquote><p>可使用一些技巧来定为具体的错误原因，详见下节。</p><h1 id="异常调试"><a href="#异常调试" class="headerlink" title="异常调试"></a>异常调试</h1><h2 id="分析日志"><a href="#分析日志" class="headerlink" title="分析日志"></a>分析日志</h2><p>默认情况下，在目录 <code>mysql-test/var/log/</code>中有日志生成（若指定 <code>--vardir</code> 参数，则以该参数路径为准），分析该日志也能得到一些有用信息。</p><p>比如 启动失败，则可以查看 <code>bootstrap.log</code> 文件，去掉命令中的 <code>--bootstrap</code> 并运行即可启动对应的 MySQL 服务来验证、调试。</p><h2 id="verbose-参数"><a href="#verbose-参数" class="headerlink" title="verbose 参数"></a>verbose 参数</h2><p>启动 mtr 时加 <code>--verbose</code> 参数，定位到引用的脚本位置后可以配置 <code>--echo</code> 命令修改调试。</p><p>如果加上 <code>--verbose</code> 打印的内容还不够详细，可以再加一个，即 <code>--verbose --verbose</code>，能打印出 mtr perl 脚本中的日志信息。</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">wslu@ubuntu:/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test$ perl mysql-test-run.pl --timer  --force --parallel=1 --vardir=var-rpl --suite=rpl --verbose</span><br><span class="line">Logging: mysql-test-run.pl  --timer --force --parallel=1 --vardir=var-rpl --suite=rpl --verbose</span><br><span class="line">&gt; exe_name: mysqld</span><br><span class="line">MySQL Version 8.0.29</span><br><span class="line">Checking supported features</span><br><span class="line"> - Binaries are debug compiled</span><br><span class="line">&gt; Testing FIPS: --test-ssl-fips-mode 0 error:0F06D065:common libcrypto routines:FIPS_mode_set:fips mode not supported</span><br><span class="line"></span><br><span class="line">Using suite(s): rpl</span><br><span class="line">Collecting tests</span><br><span class="line">&gt; Collecting: rpl</span><br><span class="line">&gt; suitedir: /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/suite/rpl</span><br><span class="line">&gt; testdir: /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/suite/rpl/t</span><br><span class="line">&gt; resdir: /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/suite/rpl/r</span><br><span class="line">&gt; Read combinations file /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/suite/rpl/combinations.</span><br><span class="line"> - Adding combinations <span class="keyword">for</span> rpl</span><br><span class="line">&gt; Collecting: i_rpl</span><br><span class="line">Removing old var directory</span><br><span class="line">&gt; opt_vardir: /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl</span><br><span class="line">&gt; Removing /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var</span><br><span class="line">&gt; Removing /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/</span><br><span class="line">&gt; Removing /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/tmp/</span><br><span class="line">Creating var directory <span class="string">&#x27;/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl&#x27;</span></span><br><span class="line">&gt; Creating /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl</span><br><span class="line">Installing system database</span><br><span class="line"><span class="comment">### safe_path: /data/work/mysql/mysql80-install.bak_asan_ubsan/bin//mysqltest_safe_process --verbose -- /data/work/mysql/mysql80-install.bak_asan_ubsan/bin/mysqld --no-defaults --initialize-insecure --loose-skip-ndbcluster --tmpdir=/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/tmp/ --core-file --datadir=/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/data/ --secure-file-priv=/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl --innodb_buffer_pool_size=24M --innodb-log-file-size=5M --innodb_autoextend_increment=8 --character-sets-dir=/data/work/mysql/mysql80-install.bak_asan_ubsan/share/charsets --loose-auto_generate_certs=OFF --loose-sha256_password_auto_generate_rsa_keys=OFF --loose-caching_sha2_password_auto_generate_rsa_keys=OFF --init-file=/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/tmp/bootstrap.sql</span></span><br><span class="line">Using parallel: 1</span><br><span class="line"></span><br><span class="line">==============================================================================</span><br><span class="line">                  TEST NAME                       RESULT  TIME (ms) COMMENT</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">&gt; Client connected</span><br><span class="line">worker[1] &gt; mtr_ping_port: 13000</span><br><span class="line">worker[1] &gt; FREE</span><br><span class="line">worker[1] &gt; mtr_ping_port: 13001</span><br><span class="line">worker[1] &gt; FREE</span><br><span class="line">worker[1] &gt; mtr_ping_port: 13002</span><br><span class="line">worker[1] &gt; FREE</span><br><span class="line">worker[1] &gt; mtr_ping_port: 13003</span><br><span class="line">worker[1] &gt; FREE</span><br><span class="line">......</span><br><span class="line">worker[1] &gt; mtr_ping_port: 13029</span><br><span class="line">worker[1] &gt; FREE</span><br><span class="line">worker[1] &gt; Using MTR_BUILD_THREAD 300, with reserved ports 13000..13029</span><br><span class="line">worker[1] Creating var directory <span class="string">&#x27;/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl&#x27;</span></span><br><span class="line">worker[1] &gt; result: , file_mode: 0</span><br><span class="line">[  0%] rpl.rpl_atomic_ddl                        [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_atomic_ddl_no_binlog              [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_binlog_cache_encryption           [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_filters_error_cases_on_startup    [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_group_commit_deadlock             [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_group_commit_deadlock_myisam      [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_innodb_auto_increment             [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_killed_ddl                        [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_log_info_repository_persistence_assign_gtids_to_anonymous_transactions  [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_log_info_repository_persistence_require_row  [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_log_info_repository_persistence_require_table_primary_key_check  [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_row_crash_safe                    [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_row_mts_rec_crash_safe            [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_stm_mixed_crash_safe              [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_stm_mixed_mts_rec_crash_safe      [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_stm_mixed_mts_rec_crash_safe_checksum  [ skipped ]  Test needs <span class="string">&#x27;big-test&#x27;</span> or <span class="string">&#x27;only-big-test&#x27;</span> option.</span><br><span class="line">[  0%] rpl.rpl_io_thd_wait_for_disk_space_stress  [ disabled ]   BUG<span class="comment">#23581287 Disabled until bug is fixed.</span></span><br><span class="line">[  0%] rpl.rpl_writeset_add_unique_key           [ disabled ]   Bug<span class="comment">#33134835 RPL_WRITESET_ADD_UNIQUE_KEY FAILS SPORADICALLY</span></span><br><span class="line">worker[1] &gt; Running <span class="built_in">test</span>: rpl.rpl_plugin_load</span><br><span class="line">worker[1] &gt; Setting timezone: GMT-3</span><br><span class="line">worker[1] &gt; Cleaning datadirs...</span><br><span class="line">worker[1] &gt; clean_dir: /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/tmp</span><br><span class="line">worker[1] &gt; unlink: <span class="string">&#x27;/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/tmp/bootstrap.sql&#x27;</span></span><br><span class="line">worker[1] &gt; Generating my.cnf from <span class="string">&#x27;/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/suite/rpl/my.cnf&#x27;</span></span><br><span class="line">worker[1] &gt; MASTER_MYPORT = 13000</span><br><span class="line">worker[1] &gt; MASTER_MYSOCK = /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/tmp/mysqld.1.sock</span><br><span class="line">worker[1] &gt; MASTER_X_MYSOCK = /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/tmp/mysqlx.1.sock</span><br><span class="line">worker[1] &gt; SLAVE_MYPORT = 13002</span><br><span class="line">worker[1] &gt; SLAVE_MYSOCK = /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/tmp/mysqld.2.sock</span><br><span class="line">worker[1] &gt; SLAVE_X_MYSOCK = /data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/tmp/mysqlx.2.sock</span><br><span class="line">worker[1] &gt; mysqld_start:  [<span class="string">&#x27; --plugin-dir=/data/work/mysql/mysql80-install.bak_asan_ubsan/lib/plugin&#x27;</span>, <span class="string">&#x27;--binlog-format=mixed &#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">### safe_path: /data/work/mysql/mysql80-install.bak_asan_ubsan/bin//mysqltest_safe_process --verbose -- /data/work/mysql/mysql80-install.bak_asan_ubsan/bin/mysqld --defaults-group-suffix=.1 --defaults-file=/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test/var-rpl/my.cnf --log-output=file --loose-debug-sync-timeout=600 --plugin-dir=/data/work/mysql/mysql80-install.bak_asan_ubsan/lib/plugin --binlog-format=mixed --core-file</span></span><br><span class="line">worker[1] &gt; Started [mysqld.1 - pid: 61921, winpid: 61921]</span><br><span class="line">worker[1] &gt; mysqld_start:  [<span class="string">&#x27; --plugin-dir=/data/work/mysql/mysql80-install.bak_asan_ubsan/lib/plugin&#x27;</span>, <span class="string">&#x27;--binlog-format=mixed &#x27;</span>]</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="debug-参数和-gdb-参数"><a href="#debug-参数和-gdb-参数" class="headerlink" title="debug 参数和 gdb 参数"></a>debug 参数和 gdb 参数</h2><p>mtr 支持的一些 debug 参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">debug                 Dump trace output <span class="keyword">for</span> all servers and client programs.</span><br><span class="line">debug-common          Same as debug, but sets <span class="string">&#x27;d&#x27;</span> debug flags to</span><br><span class="line">                      <span class="string">&quot;query,info,error,enter,exit&quot;</span>; you need this <span class="keyword">if</span> you</span><br><span class="line">                      want both to see debug printouts and to use</span><br><span class="line">                      DBUG_EXECUTE_IF.</span><br><span class="line">debug-server          Use debug version of server, but without turning on</span><br><span class="line">                      tracing.</span><br><span class="line">debugger=NAME         Start mysqld <span class="keyword">in</span> the selected debugger.</span><br><span class="line">gdb                   Start the mysqld(s) <span class="keyword">in</span> gdb.</span><br><span class="line">lldb                  Start the mysqld(s) <span class="keyword">in</span> lldb.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可见，要想跟踪调用过程，只有 <code>--debug</code> 和 <code>--gdb</code> 参数满足要求，会生成 trace 信息。</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这几条指令很耗费内存</span></span><br><span class="line">./mtr --debug --suite=rpl</span><br><span class="line">./mtr --gdb --suite=rpl</span><br><span class="line">./mtr --debug --gdb --suite=rpl</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>指令执行后，生成 trace 文件，比如 <code>var/log/bootstrap.trace</code> 。</p><h2 id="脚本自身支持-debug-参数"><a href="#脚本自身支持-debug-参数" class="headerlink" title="脚本自身支持 debug 参数"></a>脚本自身支持 debug 参数</h2><p>如果引用（<code>source</code>）的脚本支持 debug 参数，比如常用的 <code>$rpl_debug</code>，则可以修改相应的 <code>.inc</code> 文件以获得更多的 debug 信息。</p><h2 id="perl-的调试模式"><a href="#perl-的调试模式" class="headerlink" title="perl 的调试模式"></a>perl 的调试模式</h2><p>添加<code>-d</code> 参数可进入 perl 语言的 debug 模式，便于调试 <code>mysql-test-run.pl</code> 及其调用。示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">wslu@ubuntu:/data/work/mysql/mysql80-install.bak_asan_ubsan/mysql-test$ perl -d mysql-test-run.pl --timer  --force --parallel=1 --vardir=var-rpl --suite=rpl</span><br><span class="line"></span><br><span class="line">Loading DB routines from perl5db.pl version 1.60</span><br><span class="line">Editor support available.</span><br><span class="line"></span><br><span class="line">Enter h or <span class="string">&#x27;h h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>, or <span class="string">&#x27;man perldebug&#x27;</span> <span class="keyword">for</span> more <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line">main::(mysql-test-run.pl:54):  push @INC, <span class="string">&quot;.&quot;</span>;</span><br><span class="line">  DB&lt;1&gt; l</span><br><span class="line">54==&gt;  push @INC, <span class="string">&quot;.&quot;</span>;</span><br><span class="line">55</span><br><span class="line">56:  use My::ConfigFactory;</span><br><span class="line">57:  use My::CoreDump;</span><br><span class="line">58:  use My::File::Path;    <span class="comment"># Patched version of File::Path</span></span><br><span class="line">59:  use My::Find;</span><br><span class="line">60:  use My::Options;</span><br><span class="line">61:  use My::Platform;</span><br><span class="line">62:  use My::SafeProcess;</span><br><span class="line">63:  use My::SysInfo;</span><br><span class="line">  DB&lt;1&gt; n</span><br><span class="line">main::(mysql-test-run.pl:72):  require <span class="string">&quot;lib/mtr_gcov.pl&quot;</span>;</span><br><span class="line">  DB&lt;1&gt; l</span><br><span class="line">72==&gt;  require <span class="string">&quot;lib/mtr_gcov.pl&quot;</span>;</span><br><span class="line">73:  require <span class="string">&quot;lib/mtr_gprof.pl&quot;</span>;</span><br><span class="line">74:  require <span class="string">&quot;lib/mtr_io.pl&quot;</span>;</span><br><span class="line">75:  require <span class="string">&quot;lib/mtr_lock_order.pl&quot;</span>;</span><br><span class="line">76:  require <span class="string">&quot;lib/mtr_misc.pl&quot;</span>;</span><br><span class="line">77:  require <span class="string">&quot;lib/mtr_process.pl&quot;</span>;</span><br><span class="line">78</span><br><span class="line">79:  our <span class="variable">$secondary_engine_support</span> = <span class="built_in">eval</span> <span class="string">&#x27;use mtr_secondary_engine; 1&#x27;</span>;</span><br><span class="line">80</span><br><span class="line">81   <span class="comment"># Global variable to keep track of completed test cases</span></span><br><span class="line">  DB&lt;1&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调试模式常用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">h       查看帮助文档</span><br><span class="line">c line  运行到指定行</span><br><span class="line">n       运行到下一行</span><br><span class="line">s       跳到函数内部运行</span><br><span class="line">l       查看代码</span><br><span class="line">q       退出</span><br></pre></td></tr></table></figure><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;作者：卢文双 资深数据库内核研发&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;去年年底通过微信公众号【数据库内核】设定了一个目标——2023 年要写一系列 特性介绍+内核解析 的文章（现阶段还是以 MySQL 为主）。&lt;br&gt;虽然关注者很少，但本着“说到就要做到”的原则，从这篇就开始了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;序言：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以前对 MySQL 测试框架 MTR 的使用，主要集中于 SQL 正确性验证。近期由于工作需要，深入了解了 MTR 的方方面面，发现 MTR 的能力不仅限于此，还支持单元测试、压力测试、代码覆盖率测试、内存错误检测、线程竞争与死锁等功能，因此，本着分享的精神，将其总结成一个系列。&lt;/p&gt;
&lt;p&gt;主要内容如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;入门篇：工作机制、编译安装、参数、指令示例、推荐用法、添加 case、常见问题、异常调试&lt;/li&gt;
&lt;li&gt;进阶篇：高阶用法，包括单元测试、压力测试、代码覆盖率测试、内存错误检测、线程竞争与死锁&lt;/li&gt;
&lt;li&gt;源码篇：分析 MTR 的源码&lt;/li&gt;
&lt;li&gt;语法篇：单元测试、压力测试、mysqltest 语法、异常调试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于个人水平有限，所述难免有错误之处，望雅正。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文是第一篇入门篇&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL" scheme="http://dbkernel.github.io/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://dbkernel.github.io/tags/MySQL/"/>
    
    <category term="测试框架" scheme="http://dbkernel.github.io/tags/%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MTR" scheme="http://dbkernel.github.io/tags/MTR/"/>
    
  </entry>
  
  <entry>
    <title>推荐 | 一体化实时 HTAP 数据库 StoneDB，如何替换 MySQL 并实现近百倍性能提升</title>
    <link href="http://dbkernel.github.io/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/"/>
    <id>http://dbkernel.github.io/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/</id>
    <published>2022-07-06T01:10:34.000Z</published>
    <updated>2022-07-20T05:10:47.947Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>本文首发于 2022-07-06 09:10:34</strong></p></blockquote><h1 id="推荐语"><a href="#推荐语" class="headerlink" title="推荐语"></a>推荐语</h1><p>本文为数据库圈内好友<strong>高日耀</strong>首发于“CSDN 微信公众号”的文章。</p><p>最近几年基于 PostgreSQL 开发的国产数据库如雨后春笋般涌现，而受限于 MySQL 的 GPL Licence（感兴趣的可移步我的博文<a href="https://dbkernel.github.io/2021/08/19/how-to-choose-open-source-licence/">《技术分享 | 如何为你的代码选择一个合适的开源协议？》</a>），二次开发必须开源，这导致基于 MySQL 开发的国产数据库相对较少（比如：万里开源的 <a href="https://github.com/GreatSQL/GreatSQL">GreatSQL</a>），因此，当听说 StoneDB 开源的消息时，我个人还是很兴奋的。</p><p>废话不多说，以下为正文。</p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>众所周知，MySQL 是世界上最流行的 OLTP 数据库之一，截至 2022 年它在整个数据库行业的市场占有率达到了 43.04%（数据来源：Slintel 网站）。许多企业将各种业务系统应用于 MySQL 上。然而，随着企业数据量的不断增加，除了在线业务逻辑的读写，数据库还要面对日益复杂的分析性业务需求，比如 BI 报表、可视化、大数据应用等。而 MySQL 原生的架构（基于流式迭代器模型 Volcano Iterator 的执行引擎，没有利用现代多核 CPU 并行处理能力，按行存储的存储引擎）在 AP 场景中存在天然的缺陷。针对这种情况，为了补足 MySQL 的 AP 能力缺陷，业内围绕 MySQL 做了很多解决方案。主要是围绕 MySQL 搭建的异构 HTAP 数据库系统。</p><p>什么是 HTAP ？在 2014 年，Gartner 给出了 HTAP 的严格定义，其目的是为了打破，事务型负载和分析型负载之间的“壁垒”, 使系统能够支持更多的“数据”在两个系统之间流动，以及以这些数据为基础的 “实时业务”的决策。</p><p>传统架构形式下，为了解决同时处理 TP 负载和 AP 负载的问题，通常采用一套 TP 系统加上一套 AP 系统的方式，TP 和 AP 之间通过 ETL 的方式进行数据同步的来满足业务对实时性的需求，这也是当前业界搭建 HTAP 的主流方案。</p><h1 id="业内围绕-MySQL-搭建-HTAP-主流方案"><a href="#业内围绕-MySQL-搭建-HTAP-主流方案" class="headerlink" title="业内围绕 MySQL 搭建 HTAP 主流方案"></a>业内围绕 MySQL 搭建 HTAP 主流方案</h1><p>我们先来看看业界主流的基于 MySQL 的 HTAP 解决方案。</p><h2 id="1-MySQL-Hadoop"><a href="#1-MySQL-Hadoop" class="headerlink" title="1. MySQL + Hadoop"></a>1. MySQL + Hadoop</h2><p>借助 Hadoop 体系，将 MySQL 的业务数据，通过 ETL 工具同步至开源大数据系统（如 Hive，Hadoop，Spark 等）搭建的数据仓库，再基于该数仓做数据分析。</p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/sync-mysql-data-to-hadoop.png" alt="MySQL 同步数据到 Hadoop"></p><h2 id="2-MySQL-数据湖"><a href="#2-MySQL-数据湖" class="headerlink" title="2. MySQL + 数据湖"></a>2. MySQL + 数据湖</h2><p>借助数据湖平台，通过 ETL 工具将 MySQL 数据同步至数据湖，再基于数据湖进行数据、报表、BI 等分析。</p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/sync-mysql-data-to-data-lake.png" alt="MySQL 同步数据到数据湖"></p><h2 id="3-MySQL-ClickHouse-Greenplum"><a href="#3-MySQL-ClickHouse-Greenplum" class="headerlink" title="3. MySQL + ClickHouse/Greenplum"></a>3. MySQL + ClickHouse/Greenplum</h2><p>通过 ETL 等数据迁移工具将 MySQL 数据迁移到 ClickHouse/Greenplum 做分析。</p><p>ClickHouse 官方在 20 年下半年发布了社区版 MaterializeMySQL 引擎 ，可以将 ClickHouse 作为 MySQL 的一个从库同步主节点数据，除了 ETL 工具，业内也有直接将 ClickHouse 作为一个 MySQL 从库直接挂载的方案。</p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/sync-mysql-data-to-greenplum-or-clickhouse.png" alt="MySQL 同步数据到 ClickHouse/Greenplum"></p><h2 id="4-基于多副本的-Divergent-Design"><a href="#4-基于多副本的-Divergent-Design" class="headerlink" title="4. 基于多副本的 Divergent Design"></a>4. 基于多副本的 Divergent Design</h2><p>比如兼容 MySQL 协议的 TiDB，在一个 Raft Group 其中一个副本上，通过自研列式存储 (TiFlash) 来响应复杂 AP 查询，并通过 TiDB 的智能路由功能来自动选取数据源，实现一套分布式 HTAP 数据库系统，在分布式领域这块做的是比较好的。</p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/htap-tidb.png" alt="TiDB HTAP 架构图"></p><h2 id="以上方案存在的问题"><a href="#以上方案存在的问题" class="headerlink" title="以上方案存在的问题"></a>以上方案存在的问题</h2><p>以上几种 HTAP 解决方案，虽然是行业内的主流，但依然存在着一些问题，包括：</p><ol><li>系统架构过重，运维复杂度较高；</li><li>TP 数据通过 ETL 方式同步到 AP 系统中，数据延时较大，难以满足服务对分析的实时性要求；</li><li>异构数据库组合，技术上需要维护两套数据库系统，涉及到众多技术栈，对技术人员要求较高；</li><li>NewSQL 系统，需要进行各种兼容性适配，适配工作会比较复杂，对技术人员要求也比较高。</li></ol><p>为此，我们带来了在 HTAP 方面的解决方案：StoneDB，一款开源的一体化实时 HTAP 数据库。</p><h1 id="StoneDB：完全兼容-MySQL-生态的一体化行列混合存储-HTAP-数据库"><a href="#StoneDB：完全兼容-MySQL-生态的一体化行列混合存储-HTAP-数据库" class="headerlink" title="StoneDB：完全兼容 MySQL 生态的一体化行列混合存储 HTAP 数据库"></a>StoneDB：完全兼容 MySQL 生态的一体化行列混合存储 HTAP 数据库</h1><p>StoneDB 是一款刚刚开源的基于原生 MySQL 的一体化实时 HTAP 数据库，用国内首创的一体化行列混存架构，以极低成本实现高性能的实时 HTAP 。</p><p>StoneDB 采用一体化的行列混合存储，跟分布式多副本 Divergent Design 做法不同，是在同一个数据库实例中采用行列混合存储的方案，高度集成，运维复杂度较低，用户使用体验更好。这套架构的设计初衷是用一套数据库，同时解决 TP 和 AP 的问题，<strong>更轻量，更优雅，更便捷。</strong> 目前国外厂商如 Oracle / SQL Server / DB2 等都采用了类似的方案，但是它们都不开源。</p><p>StoneDB 一体化架构图概览（v1.0）:</p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-architecture-v1.0.png" alt="StoneDB 一体化架构图概览（v1.0）"></p><p>StoneDB 以插件的方式接入 MySQL，通过 查询/写入接口和 MySQL server 层进行交互， 当前一体化架构主要特性有：</p><ul><li>按列式存储方式组织数据，并结合高效压缩算法，使得 StoneDB 在获得高性能的同时也具有存储成本优势。</li><li>基于知识网格（Knowledge Grid）的近似查询及并行处理等机制，使得 StoneDB 在处理海量数据以及复杂查询时候，能够最大限度的减少无关数据的 IO。</li><li>利用直方图，数据块位图等众多统计信息来进一步加速查询处理的速度。</li><li>采用带有延后重构模型的 Column-at-a-time 的面向列式存储的执行引擎，又进一步提高执行引擎的效率。</li><li>提供高速的数据载入能力。</li></ul><p>接下来我们看一下 StoneDB 的架构设计。</p><p><strong>架构设计：数据组织形式</strong></p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-data-form.png" alt="StoneDB 数据组织形式"></p><p>在 StoneDB 中，数据按列进行组织。这种数据组织形式，对各类压缩算法友好，可依据各列类型、数据等因素选择合适的高效压缩算法，以达到节约 IO 和 Memory 资源的目的。另外还具备以下优点 ：</p><ul><li>Cache Line 友好。</li><li>查询过程中，针对各列的运算并发执行,最后在内存中聚合完整记录集。</li><li>即席查询时，只需扫描特定列即可，无需消耗 IO 资源去读取其他列的值。</li><li>无需维护索引，支持任意列组合的即席查询。</li><li>可以提供基于知识网格能力， 提升数据查找效率。</li></ul><p><strong>架构设计：基于列的数据压缩</strong></p><p>正如上面所提到的，数据按列进行组织，列中所有记录的类型一致，可以根据数据类型选择对应的高效压缩算法，因为：</p><ul><li>列中重复值出现概率高，压缩效果明显。</li><li>数据节点大小固定，可以最大化压缩性能和效率。</li><li>根据特定的数值类型压缩（int，float，date/time，string 等）。</li></ul><p>StoneDB 可以支持多达 20+种自适应压缩算法，目前主要使用：</p><ul><li>PPM</li><li>LZ4</li><li>B2</li><li>Delta 等等</li></ul><p><strong>架构设计：数据组织结构与知识网格</strong></p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-data-structure-and-knowledge-grid.png" alt="StoneDB 数据组织结构与知识网格"></p><p>StoneDB 的查询处理部分如上图所示。查询处理作为整个数据库的大脑，查询优化算法好坏，直接影响查询效率。</p><p>我们再来讨论一下数据组织结构和知识网格。之前在介绍架构的时候，我们也提到数据的按列组织，而且在每个列中，数据又按更细粒度的数据块进行划分。该种方式所带来的优点有：</p><p>（1）物理数据按固定数据块，进行存储，通常称之为：Data Node，通常为：128KB，系统方便进行 IO 效率的优化。同时，也可为系统提供基于块（Block）的高效压缩/加密算法。</p><p>（2）知识网格可以为查询优化器，执行和压缩算法等提供支持。例如：基于知识网格的查询，优化器会利用知识网格来决定需要抓取哪些 Data Node 来执行数据操作。</p><p>我们解释一下相关概念，以下数据节点、元数据节点皆为逻辑概念：</p><ul><li>数据节点（Data Node，DN）：数据块大小固定（典型值 128KB），优化 IO 效率，提供基于块（Block）的高效压缩/加密算法。</li><li>知识网格（Knowledge Grid，KG）：用于元数据存储。</li><li>元数据节点（Metadata Node，MDN）：描述数据节点的元数据信息。由知识节点（Knowledge Node，KN）组成，为查询优化器，计划执行和压缩算法等提供支持。</li></ul><p><strong>架构设计 - 查询：知识网格（ Knowlegde Grid ）概览</strong></p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-knowledge-grid-overview.png" alt="StoneDB 知识网格（ Knowlegde Grid ）概览"></p><p><strong>架构设计 - 查询：基于 Knowlegde Grid 的优化器</strong></p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-knowledge-grid-optimizer.png" alt="StoneDB 知识网格（ Knowlegde Grid ）优化器"></p><p>如上图所示：首先由查询优化器进行基于知识网格的优化，对其所需要处理的数据进行剪枝，其采取的策略为：对于满足查询条件的数据节点，即关联性数据节点，对其采取直接读取并返回的策略；对不确定性数据节点，先进行解压，然后在进行基于查询条件的处理，最后返回处理结果；而对与查询条件完全不相关的数据节点，则直接忽略。</p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-data-pruning-1.png" alt="StoneDB 数据剪枝"></p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-data-pruning-2.png" alt="StoneDB 数据剪枝"></p><p>然后再基于知识网格中的信息进行粗糙集（Rough Set）构建，并确定此次请求所需使用到的数据节点。基于 KN 和 MD ，确定查询涉及到的 DN 节点集合，并将 DN 节点分类。执行计划构建时，会完全规避非关联 DN，仅读取并解压关联 DN，按照特定情况决定是否读取不确定的 DN。如果查询请求的结果可以直接从元数据节点（MDN）中产生（例如 count，max，min 等操作），则直接返回元数据节点中的数据，无需访问物理数据文件。</p><p><strong>架构设计 - 查询：处理流程</strong></p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-query-processing-process.png" alt="StoneDB 查询处理流程"></p><p>例如对于一个查询请求，通过 KG（知识网格）可以确定 3 个关联性 DN 和 1 个不确定性 DN。如果，此请求包含聚合函数。此时只需要解压不确定性 DN，并计算聚合值，再结合 3 个关联性 DN 中 MD 上的统计值即可得出最终结果。如果，此请求需要返回具体数据，那么无论关联性 DN 还是不确定性 DN，都需要读取数据块并进行并行解压缩，以便获得最终结果集。</p><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-query-processing-example.png" alt="StoneDB 查询处理示例"></p><p>比如，执行一条 <code>select * from xx where seller = 86</code>，内部执行流程如下：</p><ol><li><p>执行计划优化与执行：</p><ol><li>基于知识网格进行 Cost-based 优化</li><li>IO 线程池维护</li><li>内存分配与管理</li></ol></li><li><p>SMP 支持（并发查询）</p></li><li><p>向量化执行</p></li></ol><h1 id="完全兼容-MySQL-生态的-StoneDB-一体化-HTAP-系统的优势"><a href="#完全兼容-MySQL-生态的-StoneDB-一体化-HTAP-系统的优势" class="headerlink" title="完全兼容 MySQL 生态的 StoneDB 一体化 HTAP 系统的优势"></a>完全兼容 MySQL 生态的 StoneDB 一体化 HTAP 系统的优势</h1><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-product-advantage.png" alt="StoneDB 产品优势"></p><p>完全兼容 MySQL 的 StoneDB 一体化 HTAP 数据库。其具有以下几个特点 ：</p><p>（1）完全兼容 MySQL。无论是语法还是生态 MySQL 用户均可以无缝切换至 StoneDB。</p><p>（2）事务、分析一体化。无需 ETL，事务型数据实时同步到分析引擎。使得用户可以获取实时业务分析结果。</p><p>（3）<strong>完全开源。</strong></p><p>（4）相较于 MySQL 提供<strong>10-100 倍的 AP 能力。</strong> 亿级多表关联急速响应，决策结果无需等待。</p><p>（5）<strong>10 倍导入速度。</strong> 由于 AP 场景下，分析数据量巨大，高效导入速度，能给带来良好的用户体验。</p><p>（6）<strong>1/10 的 TCO 成本</strong>，StoneDB 拥有高效的压缩算法，无缝的业务迁移能力，还有它的简单架构，都能为用户带来 TCO 的降低。</p><h1 id="StoneDB-2-0-将带来全新架构"><a href="#StoneDB-2-0-将带来全新架构" class="headerlink" title="StoneDB 2.0 将带来全新架构"></a>StoneDB 2.0 将带来全新架构</h1><p><img src="/2022/07/06/StoneDB-an-integrated-real-time-HTAP-database/stonedb-architecture-v2.0.png" alt="StoneDB 2.0 全新架构"></p><p>上文介绍的是 StoneDB 单机版本的 1.0 架构。虽然 StoneDB 基于磁盘的列存引擎在 AP 场景下的表现已经非常出色，但是毕竟其是基于磁盘的解决方案。我们知道，IO 和内存在数据库领域又属于极度宝贵的资源，以为进一步提升 StoneDB 的性能，同时也为了减少 AP 负载在执行时候对于 TP 负载的影响。未来我们将在 2.0 版本中将推出了类似于 HEATWAVE 的基于内存计算的列存引擎的全新架构。该版本将基于 MySQL 8.0 构建，基于此引擎我们将实现 AP 负载的全内存计算。</p><p>有关于 2.0 更多的信息欢迎关注 StoneDB 的官方网站 <a href="https://stonedb.io/">https://stonedb.io</a></p><p>同时，StoneDB 在 6 月 29 日已宣布正式开源。如果您感兴趣，可以通过下方链接查看 StoneDB 源码、阅读文档，期待你的贡献！</p><p>StoneDB 开源仓库：<a href="https://github.com/stoneatom/stonedb">https://github.com/stoneatom/stonedb</a></p><blockquote><p>作者：高日耀</p><p>Title：StoneDB PMC、HTAP 内核架构师</p><p>简介：毕业于华中科技大学，喜欢研究主流数据库架构和源码。8 年的数据库内核开发经验，曾从事分布式数据库 CirroData 、RadonDB 和 TDengine 的内核研发工作，现担任 StoneDB 的内核架构师及 StoneDB 项目 PMC。</p></blockquote><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本文首发于 2022-07-06 09:10:34&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;推荐语&quot;&gt;&lt;a href=&quot;#推荐语&quot; class=&quot;headerlink&quot; title=&quot;推荐语&quot;&gt;&lt;/a&gt;推荐语&lt;/h1&gt;&lt;p&gt;本文为数据库圈内好友&lt;strong&gt;高日耀&lt;/strong&gt;首发于“CSDN 微信公众号”的文章。&lt;/p&gt;
&lt;p&gt;最近几年基于 PostgreSQL 开发的国产数据库如雨后春笋般涌现，而受限于 MySQL 的 GPL Licence（感兴趣的可移步我的博文&lt;a href=&quot;https://dbkernel.github.io/2021/08/19/how-to-choose-open-source-licence/&quot;&gt;《技术分享 | 如何为你的代码选择一个合适的开源协议？》&lt;/a&gt;），二次开发必须开源，这导致基于 MySQL 开发的国产数据库相对较少（比如：万里开源的 &lt;a href=&quot;https://github.com/GreatSQL/GreatSQL&quot;&gt;GreatSQL&lt;/a&gt;），因此，当听说 StoneDB 开源的消息时，我个人还是很兴奋的。&lt;/p&gt;
&lt;p&gt;废话不多说，以下为正文。&lt;/p&gt;</summary>
    
    
    
    <category term="StoneDB" scheme="http://dbkernel.github.io/categories/StoneDB/"/>
    
    
    <category term="MySQL" scheme="http://dbkernel.github.io/tags/MySQL/"/>
    
    <category term="StoneDB" scheme="http://dbkernel.github.io/tags/StoneDB/"/>
    
  </entry>
  
  <entry>
    <title>技术分享 | 如何为你的代码选择一个合适的开源协议？</title>
    <link href="http://dbkernel.github.io/2021/08/19/how-to-choose-open-source-licence/"/>
    <id>http://dbkernel.github.io/2021/08/19/how-to-choose-open-source-licence/</id>
    <published>2021-08-18T16:37:15.000Z</published>
    <updated>2023-04-25T02:31:08.769Z</updated>
    
    <content type="html"><![CDATA[<p><strong>作者：卢文双 资深数据库内核研发</strong></p><p>近期公司全面拥抱开源，在选择开源协议方面遇到了一些问题，查阅了很多资料，特此总结~~</p><span id="more"></span><blockquote><p><strong>本文首发于 2021-08-19 00:37:15</strong></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于很多刚踏入开源软件这个行业的小伙伴来说，在编码过程中难免会用到其他人的成果，如果你足够细心，很容易注意到即使是一小段代码，优秀的作者都在文件开头附上一段关于版权的声明，比如 <code>Licensed under the MIT license</code>。同时，一些博客也会标明”此文章采用 <code>CC BY 4.0 CN</code> 协议“。</p><p>如果我们拷贝了别人的代码或文章却没注意版权问题，在国外法律意识特别强的环境下（国内版权意识也在逐步加强），那么我们的作品会因触犯别人的权益而违法。即使是最开放的开源协议，最低要求也是保留原作者对代码的声明，所以<code>开源不等于免费，也不等于没有约束</code>。</p><p><strong>何为 LICENCE？</strong></p><blockquote><p>LICENCE 是软件的授权许可，详细说明了获得代码后拥有的权利，哪些操作是允许的，哪些操作是禁止的。软件的版权许可证可有很多方式，本文仅限于讨论开源软件协议 Open Source License。</p></blockquote><p>对于大多数人来说，没必要花大把时间去写许可协议，选择一种比较流行的开源协议就足够了，省时省力，更便于自己作品的传播，于人于己都有利。</p><p><strong>PS：</strong></p><blockquote><p>说句题外话，很多国外开发者在尊重他人劳动成果方面做得很好，如果 A 的作品是因为 B 的作品的启发而来，A 甚至都没有使用 B 任何一句代码，但 A 会在他的作品里面指明是受到了 B 的启发：<code>Inspired by XXX link: http://www.xxxx.com</code>。</p></blockquote><h2 id="快速选择开源协议"><a href="#快速选择开源协议" class="headerlink" title="快速选择开源协议"></a>快速选择开源协议</h2><p>如果你不想了解太多，只是想要一个简直直接的答案，下面给出的建议或许适合你。本小节关于协议地址来自于 GitHub <a href="http://choosealicense.com/">choosealicence</a> 。</p><p><strong>简单宽松的协议：</strong></p><blockquote><p>如果你只想要一个简单点的协议不想太麻烦的话。</p><p><a href="http://choosealicense.com/licenses/mit">MIT 协议</a>相对宽松，此协议允许别人以任何方式使用你的代码同时署名原作者，但原作者不承担代码使用后的风险，当然也没有技术支持的义务。</p></blockquote><p><strong>考虑有专利的情况：</strong></p><blockquote><p>如果你的作品中涉及到专利相关。</p><p><a href="http://choosealicense.com/licenses/apache/">Apache 协议</a>也是个相对宽松的协议，与 MIT 类似，但它指明了作者对用户专利上的一些授权（我的理解是软件作品中含有专利，但它授权你可以免费使用）。</p></blockquote><p><strong>促进代码分享：</strong></p><blockquote><p>如果你在乎作品的传播和别人的修改，希望别人也以相同的协议分享出来。</p><p>GPL（<a href="http://choosealicense.com/licenses/gpl-v2">V2</a>或<a href="http://choosealicense.com/licenses/gpl-v3">V3</a>）协议要求代码分发者或者以此代码为基础开发出来的衍生作品需要以同样的协议来发布，也必须开源，因此，该协议具有”传染性“。</p></blockquote><p>乌克兰程序员<a href="http://pbagwl.com/post/5078147450/description-of-popular-software-licenses">Paul Bagwell</a>，画了一张分析图，说明应该怎么选择。只用两分钟，你就能搞清楚这六种开源协议之间的最大区别。<br><img src="/2021/08/19/how-to-choose-open-source-licence/paul-bagwell-licence.jpeg" alt="Paul Bagwell的LICENCE分析图"></p><p>国内大神阮一峰的汉化版本：<br><img src="/2021/08/19/how-to-choose-open-source-licence/ruan-yi-feng-licence.jpeg" alt="阮一峰的LICENCE分析图"></p><h2 id="主流开源许可协议（Open-Source-License）"><a href="#主流开源许可协议（Open-Source-License）" class="headerlink" title="主流开源许可协议（Open Source License）"></a>主流开源许可协议（Open Source License）</h2><p>世界上的开源许可协议（Open Source License）大概有<a href="https://www.gnu.org/licenses/license-list.html">上百种</a>，常用的开源软件协议大致有：</p><ul><li><a href="https://www.gnu.org/licenses/gpl-3.0.html">GPL</a></li><li><a href="https://www.gnu.org/licenses/lgpl-3.0.html">LGPL</a></li><li><a href="https://opensource.org/licenses/BSD-3-Clause">BSD</a></li><li><a href="https://opensource.org/licenses/mit-license.php">MIT</a></li><li><a href="https://opensource.org/licenses/MPL-2.0">Mozilla</a></li><li><a href="http://www.apache.org/licenses/LICENSE-2.0">Apache</a></li></ul><p>由宽松到严紧排序，常用的开源协议有：</p><ol><li>MIT</li><li>BSD</li><li>Apache</li><li>LGPL</li><li>GPL</li></ol><p>主要区别：</p><ul><li>MIT、BSD 开源协议都源自大学，体现了简单、开放和包容的特点。</li><li>MIT、BSD、Apache 三者都支持闭源的后续开发。</li><li>GPL、LGPL 传染性开源，编译的代码里用了这里的代码，都必须开源。</li></ul><h3 id="MIT"><a href="#MIT" class="headerlink" title="MIT"></a>MIT</h3><p>来源于大学，MIT 开源协议是史上最为简洁、慷慨的开源协议之一。作者只想保留版权，而无任何其他了限制。也就是说，你必须在你的发行版里包含原许可协议的声明，无论你是以二进制发布的还是以源代码发布的。</p><p><strong>特点：</strong></p><ul><li>用户可以拿你的代码做任何想做的事情。</li><li>用户在项目副本中要包含版权声明和许可声明。</li><li>你无需承担任何责任。</li></ul><p><strong>代表作品：</strong></p><ul><li><a href="https://github.com/jquery/jquery">jQuery</a></li><li><a href="https://github.com/rails/rails">Rails</a> 等。</li></ul><h3 id="BSD"><a href="#BSD" class="headerlink" title="BSD"></a>BSD</h3><ul><li><a href="https://opensource.org/licenses/BSD-2-Clause">BSD-2-Clause</a></li><li><a href="https://opensource.org/licenses/BSD-3-Clause">BSD-3-Clause</a></li></ul><p>BSD 可证也来源于大学，与 MIT 差不多，也非常简单、慷慨。</p><p>BSD 开源协议是一个给于使用者很大自由的协议。基本上使用者可以”为所欲为”,可以自由的使用、修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。前提是当你发布使用了 BSD 协议的代码，或者以 BSD 协议代码为基础开发自己的产品时，需要满足三个条件：</p><ol><li>如果再发布的产品中包含源代码，则在源代码中必须带有原代码中的 BSD 协议。</li><li>如果再发布的只是二进制类库/软件，则需要在类库/软件的文档和版权声明中包含原来代码中的 BSD 协议。</li><li>不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。</li></ol><p>BSD 开源协议鼓励代码共享，但需要尊重代码作者的著作权。BSD 开源协议允许使用者修改和重新发布代码，也允许使用或在 BSD 代码上开发商业软件发布、销售，是对商业集成很友好的协议。因此，很多公司在选用开源产品的时候都首选 BSD 协议。</p><h3 id="Apache-Licence"><a href="#Apache-Licence" class="headerlink" title="Apache Licence"></a>Apache Licence</h3><ul><li><a href="http://www.apache.org/licenses/LICENSE-2.0">Apache License, Version 2.0</a></li><li><a href="https://www.apache.org/licenses/LICENSE-1.1">Apache License, Version 1.1</a></li><li><a href="https://www.apache.org/licenses/LICENSE-1.0">Apache License, Version 1.0</a></li></ul><p>来自 Apache，类似 MIT 开源协议，但它重视专利权。</p><p>Apache Licence 是著名的非盈利开源组织 Apache 采用的协议。该协议和 BSD 类似，同样鼓励代码共享和尊重原作者的著作权，同样允许修改代码、再发布（作为开源或商业软件）。需要满足的条件也和 BSD 类似：</p><ol><li>需要为使用代码的用户提供一份 Apache Licence 。</li><li>如果你修改了代码，需要在被修改的文件中说明。</li><li>在延伸的代码中（修改和由源代码衍生的代码中）需要带有原来代码中的协议、商标、专利声明和其他原作者规定需要包含的说明。</li><li>如果再发布的产品中包含一个<code>Notice</code>文件，则在 Notice 文件中需要带有 Apache Licence 。你可以在<code>Notice</code>中增加自己的许可，但不可对 Apache Licence 构成更改。</li></ol><p>Apache Licence 也是对商业应用友好的许可，使用者也可以在需要的时候修改代码来满足需要并作为开源或商业产品发布/销售。</p><p><strong>代表作品：</strong></p><ul><li><a href="https://github.com/apache/echarts">echarts</a></li><li><a href="https://github.com/apache/superset">superset</a></li><li><a href="https://github.com/apache/dubbo">dubbo</a></li><li><a href="https://github.com/apache/spark">spark</a></li></ul><h3 id="LGPL"><a href="#LGPL" class="headerlink" title="LGPL"></a>LGPL</h3><p>LGPL（GNU LESSER GENERAL PUBLIC LICENSE）来自于自由软件联盟 GNU，可以翻译为更宽松的 GPL 协议，也属于传染性开源协议。</p><p>LGPL 是 GPL 的一个主要为类库使用设计的开源协议。和<code>GPL要求任何使用/修改/衍生之GPL类库的的软件必须采用GPL协议</code>不同，LGPL 允许商业软件通过类库引用(link)方式使用 LGPL 类库而不需要开源商业软件的代码。这使得采用 LGPL 协议的开源代码可以被商业软件作为类库引用并发布和销售。</p><p>但是如果修改 LGPL 协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用 LGPL 协议，因此，LGPL 协议的开源代码很适合作为第三方类库被商业软件引用，但不适合希望以 LGPL 协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。</p><p>GPL/LGPL 都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品。</p><h3 id="GPL"><a href="#GPL" class="headerlink" title="GPL"></a>GPL</h3><p>GPL（GNU GENERAL PUBLIC LICENSE）来源于自由软件联盟 GNU，GPL/LGPL 侧重于代码及衍生代码的开源与免费使用。</p><p>GPL 协议的主要内容是只要在一个软件中使用（”使用”指类库引用，修改后的代码或者衍生代码）GPL 协议的产品，则该软件产品必须也采用 GPL 协议，既必须也是开源和免费。<strong>这就是所谓的”传染性”</strong>。</p><p>由于 GPL 严格要求使用了 GPL 类库的软件产品必须使用 GPL 协议，对于使用 GPL 协议的开源代码，商业软件或者对代码有保密要求的部门就不适合集成/采用作为类库和二次开发的基础。</p><p>我们很熟悉的 Linux 就是采用了 GPL。GPL 协议和 BSD, Apache Licence 等鼓励代码重用的许可很不一样。GPL 的出发点是<code>代码的开源/免费使用/引用/修改</code>和<code>衍生代码的开源/免费使用</code>，但<code>不允许</code>修改后和衍生的代码做为<code>闭源</code>的商业软件发布和销售。</p><p>其它细节和 BSD/Apache 等协议类似。</p><p><strong>代表作品：</strong></p><ul><li><a href="https://github.com/torvalds/linux">Linux</a></li></ul><h2 id="更多开源协议对比"><a href="#更多开源协议对比" class="headerlink" title="更多开源协议对比"></a>更多开源协议对比</h2><p>下方表格中出现的用词的解释：</p><ul><li><strong>协议和版权信息</strong>(License and copyright notice)：在代码中保留作者提供的协议和版权信息。</li><li><strong>声明变更</strong>(State Changes)：在代码中声明对原来代码的重大修改及变更。</li><li><strong>公开源码</strong>(Disclose Source)：代码必需公开。</li><li><strong>库引用</strong>(Library usage)：该库可以用于商业软件中。</li><li><strong>责任承担</strong>(Hold Liable)：代码的作者承担代码使用后的风险及产生的后果。如果禁止，那么作者将不会承担责任，可以理解为免责条款。</li><li><strong>商标使用</strong>(Use Trademark)：可以使用作者的姓名，作品的 Logo，或商标。</li><li><strong>附加协议</strong>(Sublicensing)：允许在软件分发传播过程中附加上原来没有的协议条款等。</li></ul><table><thead><tr><th>协议</th><th>描述</th><th>要求</th><th>允许</th><th>禁止</th></tr></thead><tbody><tr><td><a href="http://choosealicense.com/licenses/apache/">Apache</a></td><td>一个比较宽松且简明地指出了专利授权的协议。</td><td>1. <font color=#0000FF>协议和版权信息</font><br/>2. <font color=#0000FF>声明变更</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>专利授权</font><br/>5. <font color=#00EE00>私用</font><br/>6. <font color=#00EE00>附加协议</font></td><td>1. <font color=#FF3030>责任承担</font>（作者免责）<br/>2. <font color=#FF3030>商标使用</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/gpl-v2/">GPL</a></td><td>应用最广泛的开源协议，拥有较强的版权自由（copyleft）要求。<br/>衍生代码的分发需开源并且也要遵守此协议。<br/>此协议有许多变种，不同变种的要求略有不同。</td><td>1. <font color=#0000FF>公开源码</font><br/>2. <font color=#0000FF>协议和版权信息</font><br/>3. <font color=#0000FF>声明变更</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>专利授权</font><br/>5. <font color=#00EE00>私用</font></td><td>1. <font color=#FF3030>责任承担</font><br/>2. <font color=#FF3030>附加协议</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/mit/">MIT</a></td><td>此协议宽松简单。在适当标明来源及免责的情况下，<br/>它允许你对代码进行任何形式的使用。</td><td>1. <font color=#0000FF>协议和版权信息</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>私用</font><br/>5. <font color=#00EE00>附加协议</font></td><td>1. <font color=#FF3030>责任承担</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/artistic/">Artistic</a></td><td>Perl 社区最钟爱此协议。<br/>要求更改后的软件不能影响原软件的使用。</td><td>1. <font color=#0000FF>协议和版权信息</font><br/>2. <font color=#0000FF>声明变更</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>私用</font><br/>5. <font color=#00EE00>附加协议</font></td><td>1. <font color=#FF3030>责任承担</font><br/>2. <font color=#FF3030>商标使用</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/bsd/">BSD</a></td><td>较为宽松的协议，有两个变种<a href="http://choosealicense.com/licenses/bsd"><strong>BSD 2-Clause</strong></a> 和<a href="http://choosealicense.com/licenses/bsd-3-clause"><strong>BSD 3-Clause</strong></a>，<br/>两者都与 MIT 协议只存在细微差异。</td><td>1. <font color=#0000FF>协议和版权信息</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>私用</font><br/>5. <font color=#00EE00>附加协议</font></td><td>1. <font color=#FF3030>责任承担</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/eclipse/">Eclipse</a></td><td>对商用非常友好的协议，可以用于软件的商业授权。<br/>包含对专利的优雅授权，也可以对相关代码应用商业协议。</td><td>1. <font color=#0000FF>公开源码</font><br/>2. <font color=#0000FF>协议和版权信息</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>专利授权</font><br/>5. <font color=#00EE00>私用</font><br/>6. <font color=#00EE00>附加协议</font></td><td>1. <font color=#FF3030>责任承担</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/lgpl-v2.1/">LGPL</a></td><td>主要用于一些代码库。<br/>衍生代码可以以此协议发布（也可以用其他协议），<br/>但与此协议相关的代码必需遵循此协议。</td><td>1. <font color=#0000FF>公开源码</font><br/>2. <font color=#0000FF>库引用</font><br/>3. <font color=#0000FF>协议和版权信息</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>专利授权</font><br/>5. <font color=#00EE00>私用</font><br/>6. <font color=#00EE00>附加协议</font></td><td>1. <font color=#FF3030>责任承担</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/mozilla/">Mozilla</a></td><td>Mozilla Public License(MPL 2.0)是由 Mozilla 基金创建维护的，<br/>旨在较为宽松的 BSD 协议和更加互惠的 GPL 协议中找一个折衷点。</td><td>1. <font color=#0000FF>公开源码</font><br/>2. <font color=#0000FF>协议和版权信息</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>专利授权</font><br/>5. <font color=#00EE00>私用</font><br/>6. <font color=#00EE00>附加协议</font></td><td>1. <font color=#FF3030>责任承担</font><br/>2. <font color=#FF3030>商标使用</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/no-license/">No license</a></td><td>作者保留所有权利，不允许他人分发，复制或者创造衍生物。<br/>当你将代码发表在一些网站上时需要遵守该网站的协议，<br/>此协议可能包含了一些对你劳动成果的授权许可。<br/>比如将代码发布到 GitHub，那么就必须同意别人查看和 fork。</td><td>1. <font color=#0000FF>协议和版权信息</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>私用</font></td><td>1. <font color=#FF3030>分发</font><br/>2. <font color=#FF3030>修改</font><br/>3. <font color=#FF3030>附加协议</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/unlicense/">Public domain dedication</a></td><td>在许多国家，默认版权归作者自动拥有，<br/>所以<a href="http://unlicense.org/">Unlicense</a>协议提供了一种通用的模板。<br/>此协议表明作者放弃版权，将劳动成果无私贡献出来，<br/>会丧失作品全部权利，包括在 MIT/X11 中定义的无担保权利。</td><td>1. <font color=#0000FF>N/A</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>私用</font></td><td>1. <font color=#FF3030>责任承担</font></td></tr></tbody></table><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/github/choosealicense.com">https://github.com/github/choosealicense.com</a></li><li><a href="https://opensource.org/licenses">https://opensource.org/licenses</a></li><li><a href="https://www.cnblogs.com/Wayou/p/how_to_choose_a_license.html">https://www.cnblogs.com/Wayou/p/how_to_choose_a_license.html</a></li><li><a href="https://zhuanlan.zhihu.com/p/87855729">https://zhuanlan.zhihu.com/p/87855729</a></li></ul><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;作者：卢文双 资深数据库内核研发&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;近期公司全面拥抱开源，在选择开源协议方面遇到了一些问题，查阅了很多资料，特此总结~~&lt;/p&gt;</summary>
    
    
    
    <category term="通用" scheme="http://dbkernel.github.io/categories/%E9%80%9A%E7%94%A8/"/>
    
    
    <category term="开源协议" scheme="http://dbkernel.github.io/tags/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE/"/>
    
    <category term="开源许可证" scheme="http://dbkernel.github.io/tags/%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81/"/>
    
    <category term="LICENCE" scheme="http://dbkernel.github.io/tags/LICENCE/"/>
    
    <category term="github" scheme="http://dbkernel.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>源码分析 | ClickHouse和他的朋友们（15）Group By 为什么这么快</title>
    <link href="http://dbkernel.github.io/2021/01/26/clickhouse-and-friends-15-groupby/"/>
    <id>http://dbkernel.github.io/2021/01/26/clickhouse-and-friends-15-groupby/</id>
    <published>2021-01-26T13:31:12.000Z</published>
    <updated>2022-07-20T02:20:48.778Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2021-01-26 21:31:12</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2021/01/21/clickhouse-and-friends-groupby/">https://bohutang.me/2021/01/21/clickhouse-and-friends-groupby/</a><br>以下为正文。</p></blockquote><p>在揭秘 ClickHouse Group By 之前，先聊聊数据库的性能对比测试问题。</p><p>在虎哥看来，一个“讲武德”的性能对比测试应该提供什么信息呢？</p><p>首先要尊重客观事实，在什么场景下，x 比 y 快？<br>其次是为什么 x 会比 y 快？</p><p>如果以上两条都做到了，还有一点也比较重要： x 的优势可以支撑多久？ 是架构等带来的长期优势，还是一袋烟的优化所得，是否能持续跟上自己的灵魂。</p><p>如果只是贴几个妖艳的数字，算不上是 benchmark，而是 benchmarket。</p><p>好了，回到 Group By 正题。</p><p>相信很多同学已经体验到 ClickHouse Group By 的出色性能，本篇就来分析下快的原因。</p><p>首先安慰一下，ClickHouse 的 Group By 并没有使用高大上的黑科技，只是摸索了一条相对较优的方案。</p><h2 id="一条-SQL"><a href="#一条-SQL" class="headerlink" title="一条 SQL"></a>一条 SQL</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">sum</span>(number) <span class="keyword">FROM</span> numbers(<span class="number">10</span>) <span class="keyword">GROUP</span> <span class="keyword">BY</span> number <span class="operator">%</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>我们就以这条简单的 SQL 作为线索，看看 ClickHouse 怎么实现 Group By 聚合。</p><h2 id="1-生成-AST"><a href="#1-生成-AST" class="headerlink" title="1. 生成 AST"></a>1. 生成 AST</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN AST</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">sum</span>(number)</span><br><span class="line"><span class="keyword">FROM</span> numbers(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> number <span class="operator">%</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">┌─explain─────────────────────────────────────┐</span><br><span class="line">│ SelectWithUnionQuery (children <span class="number">1</span>)           │</span><br><span class="line">│  ExpressionList (children <span class="number">1</span>)                │</span><br><span class="line">│   SelectQuery (children <span class="number">3</span>)                  │</span><br><span class="line">│    ExpressionList (children <span class="number">1</span>)              │</span><br><span class="line">│     <span class="keyword">Function</span> <span class="built_in">sum</span> (children <span class="number">1</span>)               │  <span class="operator">/</span><span class="operator">/</span> sum 聚合</span><br><span class="line">│      ExpressionList (children <span class="number">1</span>)            │</span><br><span class="line">│       Identifier number                     │</span><br><span class="line">│    TablesInSelectQuery (children <span class="number">1</span>)         │</span><br><span class="line">│     TablesInSelectQueryElement (children <span class="number">1</span>) │</span><br><span class="line">│      TableExpression (children <span class="number">1</span>)           │</span><br><span class="line">│       <span class="keyword">Function</span> numbers (children <span class="number">1</span>)         │</span><br><span class="line">│        ExpressionList (children <span class="number">1</span>)          │</span><br><span class="line">│         Literal UInt64_10                   │</span><br><span class="line">│    ExpressionList (children <span class="number">1</span>)              │</span><br><span class="line">│     <span class="keyword">Function</span> modulo (children <span class="number">1</span>)            │  <span class="operator">/</span><span class="operator">/</span> number <span class="operator">%</span> <span class="number">3</span> 函数</span><br><span class="line">│      ExpressionList (children <span class="number">2</span>)            │</span><br><span class="line">│       Identifier number                     │</span><br><span class="line">│       Literal UInt64_3                      │</span><br><span class="line">└─────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="2-生成-Query-Plan"><a href="#2-生成-Query-Plan" class="headerlink" title="2. 生成 Query Plan"></a>2. 生成 Query Plan</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">sum</span>(number)</span><br><span class="line"><span class="keyword">FROM</span> numbers(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> number <span class="operator">%</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">┌─explain───────────────────────────────────────────────────────────────────────┐</span><br><span class="line">│ Expression ((Projection <span class="operator">+</span> Before <span class="keyword">ORDER</span> <span class="keyword">BY</span>))                                   │</span><br><span class="line">│   Aggregating                                                                 │ <span class="operator">/</span><span class="operator">/</span> sum 聚合</span><br><span class="line">│     Expression (Before <span class="keyword">GROUP</span> <span class="keyword">BY</span>)                                              │ <span class="operator">/</span><span class="operator">/</span> number <span class="operator">%</span> <span class="number">3</span></span><br><span class="line">│       SettingQuotaAndLimits (<span class="keyword">Set</span> limits <span class="keyword">and</span> quota after reading <span class="keyword">from</span> storage) │</span><br><span class="line">│         ReadFromStorage (SystemNumbers)                                       │</span><br><span class="line">└───────────────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>代码主要在 <a href="https://github.com/ClickHouse/ClickHouse/blob/27ddf78ba572b893cb5351541f566d1080d8a9c6/src/Interpreters/InterpreterSelectQuery.cpp#L1063">InterpreterSelectQuery::executeImpl@Interpreters/InterpreterSelectQuery.cpp</a></p><h2 id="3-生成-Pipeline"><a href="#3-生成-Pipeline" class="headerlink" title="3. 生成 Pipeline"></a>3. 生成 Pipeline</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN PIPELINE</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">sum</span>(number)</span><br><span class="line"><span class="keyword">FROM</span> numbers(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> number <span class="operator">%</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">┌─explain───────────────────────┐</span><br><span class="line">│ (Expression)                  │</span><br><span class="line">│ ExpressionTransform           │</span><br><span class="line">│   (Aggregating)               │</span><br><span class="line">│   AggregatingTransform        │  <span class="operator">/</span><span class="operator">/</span> sum 计算</span><br><span class="line">│     (Expression)              │</span><br><span class="line">│     ExpressionTransform       │  <span class="operator">/</span><span class="operator">/</span> number <span class="operator">%</span> <span class="number">3</span> 计算</span><br><span class="line">│       (SettingQuotaAndLimits) │</span><br><span class="line">│         (ReadFromStorage)     │</span><br><span class="line">└───────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="4-执行-Pipeline"><a href="#4-执行-Pipeline" class="headerlink" title="4. 执行 Pipeline"></a>4. 执行 Pipeline</h2><p>Pipeline 是从底部往上逐一执行。</p><h3 id="4-1-ReadFromStorage"><a href="#4-1-ReadFromStorage" class="headerlink" title="4.1 ReadFromStorage"></a>4.1 ReadFromStorage</h3><p>首先从 ReadFromStorage 执行，生成一个 block1， 数据如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">┌─number─┐</span><br><span class="line">│      <span class="number">0</span> │</span><br><span class="line">│      <span class="number">1</span> │</span><br><span class="line">│      <span class="number">2</span> │</span><br><span class="line">│      <span class="number">3</span> │</span><br><span class="line">│      <span class="number">4</span> │</span><br><span class="line">│      <span class="number">5</span> │</span><br><span class="line">│      <span class="number">6</span> │</span><br><span class="line">│      <span class="number">7</span> │</span><br><span class="line">│      <span class="number">8</span> │</span><br><span class="line">│      <span class="number">9</span> │</span><br><span class="line">└────────┘</span><br><span class="line">number类型为 UInt64</span><br></pre></td></tr></table></figure><h3 id="4-2-ExpressionTransform"><a href="#4-2-ExpressionTransform" class="headerlink" title="4.2 ExpressionTransform"></a>4.2 ExpressionTransform</h3><p>ExpressionTransform 包含了 2 个 action:</p><ol><li>名字为 number，type 为 INPUT</li><li>名字为 <code>modulo(number, 3)</code>， type 为 FUNCTION</li></ol><p>经过 ExpressionTransform 运行处理后生成一个新的 block2， 数据如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">┌─number─┬─modulo(number, <span class="number">3</span>)─┐</span><br><span class="line">│      <span class="number">0</span> │                 <span class="number">0</span> │</span><br><span class="line">│      <span class="number">1</span> │                 <span class="number">1</span> │</span><br><span class="line">│      <span class="number">2</span> │                 <span class="number">2</span> │</span><br><span class="line">│      <span class="number">3</span> │                 <span class="number">0</span> │</span><br><span class="line">│      <span class="number">4</span> │                 <span class="number">1</span> │</span><br><span class="line">│      <span class="number">5</span> │                 <span class="number">2</span> │</span><br><span class="line">│      <span class="number">6</span> │                 <span class="number">0</span> │</span><br><span class="line">│      <span class="number">7</span> │                 <span class="number">1</span> │</span><br><span class="line">│      <span class="number">8</span> │                 <span class="number">2</span> │</span><br><span class="line">│      <span class="number">9</span> │                 <span class="number">0</span> │</span><br><span class="line">└────────┴───────────────────┘</span><br><span class="line">number 类型为 UInt64</span><br><span class="line">modulo(number, <span class="number">3</span>) 类型为 UInt8</span><br></pre></td></tr></table></figure><p>代码主要在 <a href="https://github.com/ClickHouse/ClickHouse/blob/27ddf78ba572b893cb5351541f566d1080d8a9c6/src/Interpreters/ExpressionActions.cpp#L416">ExpressionActions::execute@Interpreters/ExpressionActions.cpp</a></p><h3 id="4-3-AggregatingTransform"><a href="#4-3-AggregatingTransform" class="headerlink" title="4.3 AggregatingTransform"></a>4.3 AggregatingTransform</h3><p>AggregatingTransform 是 Group By 高性能的核心所在。<br>本示例中的 <code>modulo(number, 3)</code> 类型为 UInt8，在做优化上，ClickHouse 会选择使用数组代替 hashtable 作为分组，区分逻辑见 <a href="https://github.com/ClickHouse/ClickHouse/blob/27ddf78ba572b893cb5351541f566d1080d8a9c6/src/Interpreters/Aggregator.cpp#L526">Interpreters/Aggregator.cpp</a></p><p>在计算 sum 的时候，首先会生成一个数组 [1024]，然后做了一个编译展开(代码 <a href="https://github.com/ClickHouse/ClickHouse/blob/27ddf78ba572b893cb5351541f566d1080d8a9c6/src/AggregateFunctions/IAggregateFunction.h#L412-L487">addBatchLookupTable8@AggregateFunctions/IAggregateFunction.h</a>):</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">size_t</span> UNROLL_COUNT = <span class="number">4</span>;</span><br><span class="line">std::unique_ptr&lt;Data[]&gt; places&#123;<span class="keyword">new</span> Data[<span class="number">256</span> * UNROLL_COUNT]&#125;;</span><br><span class="line"><span class="keyword">bool</span> has_data[<span class="number">256</span> * UNROLL_COUNT]&#123;&#125;; <span class="comment">/// Separate flags array to avoid heavy initialization.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Aggregate data into different lookup tables.</span></span><br><span class="line"><span class="keyword">size_t</span> batch_size_unrolled = batch_size / UNROLL_COUNT * UNROLL_COUNT;</span><br><span class="line"><span class="keyword">for</span> (; i &lt; batch_size_unrolled; i += UNROLL_COUNT)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j &lt; UNROLL_COUNT; ++j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">size_t</span> idx = j * <span class="number">256</span> + key[i + j];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">unlikely</span>(!has_data[idx]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> (&amp;places[idx]) Data;</span><br><span class="line">            has_data[idx] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        func.<span class="built_in">add</span>(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span> *&gt;(&amp;places[idx]), columns, i + j, <span class="literal">nullptr</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>sum(number) … GROUP BY number % 3</code> 计算方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array[0] = 0 + 3 + 6 + 9 = 18</span><br><span class="line">array[1] = 1 + 4 + 7 = 12</span><br><span class="line">array[2] = 2 + 5 + 8 = 15</span><br></pre></td></tr></table></figure><p>这里只是针对 UInt8 做的一个优化分支，那么对于其他类型怎么优化处理呢？<br>ClickHouse 针对不同的类型分别提供了不同的 hashtable，声势比较浩大（代码见 <a href="https://github.com/ClickHouse/ClickHouse/blob/27ddf78ba572b893cb5351541f566d1080d8a9c6/src/Interpreters/Aggregator.h#L68-L103">Aggregator.h</a>）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> AggregatedDataWithUInt8Key = FixedImplicitZeroHashMapWithCalculatedSize&lt;UInt8, AggregateDataPtr&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithUInt16Key = FixedImplicitZeroHashMap&lt;UInt16, AggregateDataPtr&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithUInt32Key = HashMap&lt;UInt32, AggregateDataPtr, HashCRC32&lt;UInt32&gt;&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithUInt64Key = HashMap&lt;UInt64, AggregateDataPtr, HashCRC32&lt;UInt64&gt;&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithShortStringKey = StringHashMap&lt;AggregateDataPtr&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithStringKey = HashMapWithSavedHash&lt;StringRef, AggregateDataPtr&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithKeys128 = HashMap&lt;UInt128, AggregateDataPtr, UInt128HashCRC32&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithKeys256 = HashMap&lt;DummyUInt256, AggregateDataPtr, UInt256HashCRC32&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithUInt32KeyTwoLevel = TwoLevelHashMap&lt;UInt32, AggregateDataPtr, HashCRC32&lt;UInt32&gt;&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithUInt64KeyTwoLevel = TwoLevelHashMap&lt;UInt64, AggregateDataPtr, HashCRC32&lt;UInt64&gt;&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithShortStringKeyTwoLevel = TwoLevelStringHashMap&lt;AggregateDataPtr&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithStringKeyTwoLevel = TwoLevelHashMapWithSavedHash&lt;StringRef, AggregateDataPtr&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithKeys128TwoLevel = TwoLevelHashMap&lt;UInt128, AggregateDataPtr, UInt128HashCRC32&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithKeys256TwoLevel = TwoLevelHashMap&lt;DummyUInt256, AggregateDataPtr, UInt256HashCRC32&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithUInt64KeyHash64 = HashMap&lt;UInt64, AggregateDataPtr, DefaultHash&lt;UInt64&gt;&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithStringKeyHash64 = HashMapWithSavedHash&lt;StringRef, AggregateDataPtr, StringRefHash64&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithKeys128Hash64 = HashMap&lt;UInt128, AggregateDataPtr, UInt128Hash&gt;;</span><br><span class="line"><span class="keyword">using</span> AggregatedDataWithKeys256Hash64 = HashMap&lt;DummyUInt256, AggregateDataPtr, UInt256Hash&gt;;</span><br></pre></td></tr></table></figure><p>如果我们改成 <code>GROUP BY number*100000</code> 后，它会选择 AggregatedDataWithUInt64Key 的 hashtable 作为分组。</p><p>而且 ClickHouse 提供了一种 Two Level 方式，用语应对有大量分组 key 的情况，Level1 先分大组，Level2 小组可以并行计算。</p><p>针对 String 类型，根据不同的长度，hashtable 也做了很多优化，代码见 <a href="https://github.com/ClickHouse/ClickHouse/blob/27ddf78ba572b893cb5351541f566d1080d8a9c6/src/Common/HashTable/StringHashMap.h#L78-L82">HashTable/StringHashMap.h</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>ClickHouse 会根据 Group By 的最终类型，选择一个最优的 hashtable 或数组，作为分组基础数据结构，使内存和计算尽量最优。</p><p>这个”最优解“是怎么找到的？从 test 代码可以看出，是不停的尝试、测试验证出来的，浓厚的 bottom-up 哲学范。</p><p>hashtable 测试代码：<a href="https://github.com/ClickHouse/ClickHouse/tree/27ddf78ba572b893cb5351541f566d1080d8a9c6/src/Interpreters/tests">Interpreters/tests</a></p><p>lookuptable 测试代码： <a href="https://github.com/ClickHouse/ClickHouse/blob/27ddf78ba572b893cb5351541f566d1080d8a9c6/src/Common/tests/average.cpp">tests/average.cpp</a></p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;strong&gt;本文首发于 2021-01-26 21:31:12&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《ClickHouse 和他的朋友们》系列文章转载自圈内好友 &lt;a href=&quot;https://b</summary>
      
    
    
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/categories/ClickHouse/"/>
    
    
    <category term="ClickHouse和他的朋友们" scheme="http://dbkernel.github.io/tags/ClickHouse%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/tags/ClickHouse/"/>
    
    <category term="源码分析" scheme="http://dbkernel.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="group by" scheme="http://dbkernel.github.io/tags/group-by/"/>
    
  </entry>
  
  <entry>
    <title>源码分析 | ClickHouse和他的朋友们（14）存储计算分离方案与实现</title>
    <link href="http://dbkernel.github.io/2020/09/21/clickhouse-and-friends-14-compute-storage/"/>
    <id>http://dbkernel.github.io/2020/09/21/clickhouse-and-friends-14-compute-storage/</id>
    <published>2020-09-21T14:01:12.000Z</published>
    <updated>2022-07-07T02:13:19.298Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-09-21 22:01:12</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/09/18/clickhouse-and-friends-compute-storage/">https://bohutang.me/2020/09/18/clickhouse-and-friends-compute-storage/</a><br>以下为正文。</p></blockquote><p><img src="clickhouse-map-2020-replicatedmergetree.png" alt="clickhouse-map-2020-replicatedmergetree.png"></p><p>如果多个 ClickHouse server 可以挂载同一份数据(分布式存储等)，并且每个 server 都可写，这样会有什么好处呢？</p><p>首先，我们可以把副本机制交给分布式存储来保障，上层架构变得简单朴素；</p><p>其次，clickhouse-server 可以在任意机器上增加、减少，使存储和计算能力得到充分发挥。</p><p>本文就来探讨一下 ClickHouse 的存储计算分离方案，实现上并不复杂。</p><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><p>ClickHouse 运行时数据由两部分组成：<strong>内存元数据</strong>和<strong>磁盘数据</strong>。</p><p>我们先看写流程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">w1. 开始写入数据</span><br><span class="line">w2. 生成内存part信息，并维护part metadata列表</span><br><span class="line">w3. 把part数据写到磁盘</span><br></pre></td></tr></table></figure><p>再来看读流程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r1. 从part metadata定位需要读取的part</span><br><span class="line">r2. 从磁盘读取part数据</span><br><span class="line">r3. 返回给上层数据</span><br></pre></td></tr></table></figure><p>这样，如果 server1 写了一条数据，只会更新自己内存的 part metadata，其他 server 是感知不到的，这样也就无法查询到刚写入的数据。</p><p>存储计算分离，首先要解决的就是内存状态数据的同步问题。</p><p>在 ClickHouse 里，我们需要解决的是内存中 part metadata 同步问题。</p><h2 id="2-内存数据同步"><a href="#2-内存数据同步" class="headerlink" title="2. 内存数据同步"></a>2. 内存数据同步</h2><p>在上篇 <a href="https://bohutang.me/2020/09/13/clickhouse-and-friends-replicated-merge-tree/">&lt;ReplicatedMergeTree 表引擎及同步机制&gt;</a> 中，我们知道副本间的数据同步机制：<br>首先同步元数据，再通过元数据获取相应 part 数据。</p><p>这里，我们借用 ReplicatedMergeTree 同步通道，然后再做减法，同步完元数据后跳过 part 数据的同步，因为磁盘数据只需一个 server 做更新(需要 fsync 语义)即可。</p><p>核心代码：<br><code>MergeTreeData::renameTempPartAndReplace</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!share_storage)</span><br><span class="line">    part-&gt;<span class="built_in">renameTo</span>(part_name, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h2 id="3-演示-demo"><a href="#3-演示-demo" class="headerlink" title="3. 演示 demo"></a>3. 演示 demo</h2><iframe src="https://bohutang-1253727613.cos.ap-beijing.myqcloud.com/video/clickhouse-storage-compute.mp4" frameborder="0" allowfullscreen="true" style="box-sizing: border-box;"></iframe><p>script：</p><ol><li>首先起 2 个 clickhouse-server，它们都挂载同一份数据 <code>&lt;path&gt;/home/bohu/work/cluster/d1/datas/&lt;/path&gt;</code></li><li>通过 clickhouse-server1(port 9101) 写入一条记录:(111, 3333)</li><li>通过 clickhouse-server2(port 9102) 进行查询正常</li><li>通过 clickhouse-server2(port 9102) truncate 表</li><li>通过 clickhouse-server1(port 9101) 查询正常</li></ol><h2 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4. 代码实现"></a>4. 代码实现</h2><p><a href="https://github.com/BohuTANG/ClickHouse/commit/f67d98ef408fda1a359e4fb17848619ef1f6e59b">原型</a></p><p>需要注意的是，这里只实现了写入数据同步，而且是非常 tricky 的方式。</p><p>由于 DDL 没有实现，所以在 zookeeper 上的注册方式也比较 tricky，demo 里的 replicas 都是手工注册的。</p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>本文提供一个思路，算是抛砖引玉，同时也期待更加系统的工程实现。</p><p><strong>ClickHouse 暂时还不支持 Distributed Query 功能，如果这个能力支持，ClickHouse 存储计算分离就是一个威力无比的小氢弹。</strong></p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;strong&gt;本文首发于 2020-09-21 22:01:12&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《ClickHouse 和他的朋友们》系列文章转载自圈内好友 &lt;a href=&quot;https://b</summary>
      
    
    
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/categories/ClickHouse/"/>
    
    
    <category term="ClickHouse和他的朋友们" scheme="http://dbkernel.github.io/tags/ClickHouse%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/tags/ClickHouse/"/>
    
    <category term="源码分析" scheme="http://dbkernel.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="存储计算分离" scheme="http://dbkernel.github.io/tags/%E5%AD%98%E5%82%A8%E8%AE%A1%E7%AE%97%E5%88%86%E7%A6%BB/"/>
    
  </entry>
  
  <entry>
    <title>源码分析 | ClickHouse和他的朋友们（13）ReplicatedMergeTree表引擎及同步机制</title>
    <link href="http://dbkernel.github.io/2020/09/15/clickhouse-and-friends-13-replicated-merge-tree/"/>
    <id>http://dbkernel.github.io/2020/09/15/clickhouse-and-friends-13-replicated-merge-tree/</id>
    <published>2020-09-15T12:15:14.000Z</published>
    <updated>2022-07-07T02:13:04.093Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-09-15 20:15:14</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/09/13/clickhouse-and-friends-replicated-merge-tree/">https://bohutang.me/2020/09/13/clickhouse-and-friends-replicated-merge-tree/</a><br>以下为正文。</p></blockquote><p><img src="clickhouse-map-2020-replicatedmergetree.png" alt="clickhouse-map-2020-replicatedmergetree.png"></p><p>在 MySQL 里，为了保证高可用以及数据安全性会采取主从模式，数据通过 binlog 来进行同步。</p><p>在 ClickHouse 里，我们可以使用 ReplicatedMergeTree 引擎，数据同步通过 zookeeper 完成。</p><p>本文先从搭建一个多 replica 集群开始，然后一窥底层的机制，简单吃两口。</p><h2 id="1-集群搭建"><a href="#1-集群搭建" class="headerlink" title="1. 集群搭建"></a>1. 集群搭建</h2><p>搭建一个 2 replica 测试集群，由于条件有限，这里在同一台物理机上起 clickhouse-server(2 个 replica) + zookeeper(1 个)，为了避免端口冲突，两个 replica 端口会有所不同。</p><h3 id="1-1-zookeeper"><a href="#1-1-zookeeper" class="headerlink" title="1.1 zookeeper"></a>1.1 zookeeper</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run  -p <span class="number">2181</span>:<span class="number">2181</span> --name some-zookeeper --restart always -d zookeeper</span><br></pre></td></tr></table></figure><h3 id="1-2-replica-集群"><a href="#1-2-replica-集群" class="headerlink" title="1.2 replica 集群"></a>1.2 replica 集群</h3><p>replica-1 config.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">zookeeper</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">node</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">host</span>&gt;</span>172.17.0.2<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">port</span>&gt;</span>2181<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">zookeeper</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">remote_servers</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mycluster_1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">shard_1</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">internal_replication</span>&gt;</span>true<span class="tag">&lt;/<span class="name">internal_replication</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">host</span>&gt;</span>s1<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">host</span>&gt;</span>s2<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span>9001<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">shard_1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mycluster_1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">remote_servers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">macros</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">cluster</span>&gt;</span>mycluster_1<span class="tag">&lt;/<span class="name">cluster</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">shard</span>&gt;</span>1<span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">replica</span>&gt;</span>s1<span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">macros</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tcp_port</span>&gt;</span>9101<span class="tag">&lt;/<span class="name">tcp_port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interserver_http_port</span>&gt;</span>9009<span class="tag">&lt;/<span class="name">interserver_http_port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span>&gt;</span>/cluster/d1/datas/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br></pre></td></tr></table></figure><p>replica-2 config.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">zookeeper</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">node</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">host</span>&gt;</span>172.17.0.2<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">port</span>&gt;</span>2181<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">zookeeper</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">remote_servers</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mycluster_1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">shard_1</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">internal_replication</span>&gt;</span>true<span class="tag">&lt;/<span class="name">internal_replication</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">host</span>&gt;</span>s1<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">host</span>&gt;</span>s2<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span>9001<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">shard_1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mycluster_1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">remote_servers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">macros</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">cluster</span>&gt;</span>mycluster_1<span class="tag">&lt;/<span class="name">cluster</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">shard</span>&gt;</span>1<span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">replica</span>&gt;</span>s2<span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">macros</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tcp_port</span>&gt;</span>9102<span class="tag">&lt;/<span class="name">tcp_port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interserver_http_port</span>&gt;</span>9010<span class="tag">&lt;/<span class="name">interserver_http_port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span>&gt;</span>/cluster/d2/datas/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-创建测试表"><a href="#1-3-创建测试表" class="headerlink" title="1.3 创建测试表"></a>1.3 创建测试表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> default.rtest1 <span class="keyword">ON</span> CLUSTER <span class="string">&#x27;mycluster_1&#x27;</span></span><br><span class="line">(</span><br><span class="line">    `id` Int64,</span><br><span class="line">    `p` Int16</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> ReplicatedMergeTree(<span class="string">&#x27;/clickhouse/tables/replicated/test&#x27;</span>, <span class="string">&#x27;&#123;replica&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> p</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> id</span><br></pre></td></tr></table></figure><h3 id="1-4-查看-zookeeper"><a href="#1-4-查看-zookeeper" class="headerlink" title="1.4 查看 zookeeper"></a>1.4 查看 zookeeper</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it some-zookeeper bash</span><br><span class="line">./bin/zkCli.sh</span><br><span class="line"></span><br><span class="line">[zk: localhost:2181(CONNECTED) 17] ls /clickhouse/tables/replicated/<span class="built_in">test</span>/replicas</span><br><span class="line">[s1, s2]</span><br></pre></td></tr></table></figure><p>两个 replica 都已经注册到 zookeeper。</p><h2 id="2-同步原理"><a href="#2-同步原理" class="headerlink" title="2. 同步原理"></a>2. 同步原理</h2><p>如果在 replica-1 上执行了一条写入:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">replica<span class="number">-1</span><span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> rtest <span class="keyword">VALUES</span>(<span class="number">33</span>,<span class="number">33</span>);</span><br></pre></td></tr></table></figure><p>数据是如何同步到 replica-2 的呢？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">s1.  replica<span class="number">-1</span>&gt; StorageReplicatedMergeTree::write --&gt; ReplicatedMergeTreeBlockOutputStream::<span class="built_in">write</span>(<span class="keyword">const</span> Block &amp; block)</span><br><span class="line">s2.  replica<span class="number">-1</span>&gt; storage.writer.writeTempPart，写入本地磁盘</span><br><span class="line">s3.  replica<span class="number">-1</span>&gt; ReplicatedMergeTreeBlockOutputStream::commitPart</span><br><span class="line">s4.  replica<span class="number">-1</span>&gt; StorageReplicatedMergeTree::getCommitPartOp，提交LogEntry到zookeeper，信息包括:</span><br><span class="line">    ReplicatedMergeTreeLogEntry &#123;</span><br><span class="line">     type: GET_PART,</span><br><span class="line">     source_replica: replica<span class="number">-1</span>,</span><br><span class="line">     new_part_name: part-&gt;name,</span><br><span class="line">     new_part_type: part-&gt;getType</span><br><span class="line">    &#125;</span><br><span class="line">s5.  replica<span class="number">-1</span>&gt; zkutil::<span class="built_in">makeCreateRequest</span>(zookeeper_path + <span class="string">&quot;/log/log-0000000022&quot;</span>)，更新log_pointer到zookeeper</span><br><span class="line"></span><br><span class="line">s6.  replica<span class="number">-2</span>&gt; StorageReplicatedMergeTree::<span class="built_in">queueUpdatingTask</span>()，定时pull任务</span><br><span class="line">s7.  replica<span class="number">-2</span>&gt; ReplicatedMergeTreeQueue::pullLogsToQueue ，拉取</span><br><span class="line">s8.  replica<span class="number">-2</span>&gt; zookeeper-&gt;<span class="built_in">get</span>(replica_path + <span class="string">&quot;/log_pointer&quot;</span>) ，向zookeeper获取当前replica已经同步的位点</span><br><span class="line">s9.  replica<span class="number">-2</span>&gt; zookeeper-&gt;<span class="built_in">getChildrenWatch</span>(zookeeper_path + <span class="string">&quot;/log&quot;</span>) ，向zookeeper获取所有的LogEntry信息</span><br><span class="line">s10. replica<span class="number">-2</span>&gt; 根据同步位点log_pointer从所有LogEntry中筛选需要同步的LogEntry，写到queue</span><br><span class="line">s11. replica<span class="number">-2</span>&gt; StorageReplicatedMergeTree::queueTask，消费queue任务</span><br><span class="line">s12. replica<span class="number">-2</span>&gt; StorageReplicatedMergeTree::<span class="built_in">executeLogEntry</span>(LogEntry &amp; entry)，根据LogEntry type执行消费</span><br><span class="line">s13. replica<span class="number">-2</span>&gt; StorageReplicatedMergeTree::<span class="built_in">executeFetch</span>(LogEntry &amp; entry)</span><br><span class="line">s14. replica<span class="number">-2</span>&gt; StorageReplicatedMergeTree::fetchPart，从replica<span class="number">-1</span>的interserver_http_port下载part目录数据</span><br><span class="line">s15. replica<span class="number">-2</span>&gt; MergeTreeData::renameTempPartAndReplace，把文件写入本地并更新内存meta信息</span><br><span class="line">s16. replica<span class="number">-2</span>&gt; 数据同步完成</span><br></pre></td></tr></table></figure><p>也可以进入 zookeeper docker 内部直接查看某个 LogEntry:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 85] get /clickhouse/tables/replicated/<span class="built_in">test</span>/<span class="built_in">log</span>/log-0000000022</span><br><span class="line">format version: 4</span><br><span class="line">create_time: 2020-09-13 16:39:05</span><br><span class="line"><span class="built_in">source</span> replica: s1</span><br><span class="line">block_id: 33_2673203974107464807_7670041793554220344</span><br><span class="line">get</span><br><span class="line">33_2_2_0</span><br></pre></td></tr></table></figure><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>本文以写入为例，从底层分析了 ClickHouse ReplicatedMergeTree 的工作原理，逻辑并不复杂。</p><p>不同 replica 的数据同步需要 zookeeper(目前社区有人在做 etcd 的集成 <a href="https://github.com/ClickHouse/ClickHouse/pull/10376">pr#10376</a>)做元数据协调，是一个订阅/消费模型，涉及具体数据目录还需要去相应的 replica 通过 interserver_http_port 端口进行下载。</p><p>replica 的同步都是以文件目录为单位，这样就带来一个好处：我们<strong>可以轻松实现 ClickHouse 的存储计算分离</strong>，多个 clickhouse-server 可以同时挂载同一份数据进行计算，而且这些 server 每个节点都是可写，虎哥已经实现了一个可以 work 的原型，详情请参考下篇 <a href="https://bohutang.me/2020/09/18/clickhouse-and-friends-compute-storage/">&lt;存储计算分离方案与实现&gt;</a>。</p><h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h2><ul><li>[1]<a href="https://github.com/ClickHouse/ClickHouse/blob/f37814b36754bf11b52bd9c77d0e15f4d1825033/src/Storages/StorageReplicatedMergeTree.cpp">storagereplicatedmergetree.cpp</a></li><li>[2]<a href="https://github.com/ClickHouse/ClickHouse/blob/f37814b36754bf11b52bd9c77d0e15f4d1825033/src/Storages/MergeTree/ReplicatedMergeTreeBlockOutputStream.cpp">replicatedmergetreeblockoutputstream.cpp</a></li><li>[3]<a href="https://github.com/ClickHouse/ClickHouse/blob/f37814b36754bf11b52bd9c77d0e15f4d1825033/src/Storages/MergeTree/ReplicatedMergeTreeLogEntry.cpp">replicatedmergetreelogentry.cpp</a></li><li>[4]<a href="https://github.com/ClickHouse/ClickHouse/blob/f37814b36754bf11b52bd9c77d0e15f4d1825033/src/Storages/MergeTree/ReplicatedMergeTreeQueue.cpp">replicatedmergetreequeue.cpp</a></li></ul><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;strong&gt;本文首发于 2020-09-15 20:15:14&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《ClickHouse 和他的朋友们》系列文章转载自圈内好友 &lt;a href=&quot;https://b</summary>
      
    
    
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/categories/ClickHouse/"/>
    
    
    <category term="ClickHouse和他的朋友们" scheme="http://dbkernel.github.io/tags/ClickHouse%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/tags/ClickHouse/"/>
    
    <category term="源码分析" scheme="http://dbkernel.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="ReplicatedMergeTree" scheme="http://dbkernel.github.io/tags/ReplicatedMergeTree/"/>
    
  </entry>
  
  <entry>
    <title>源码分析 | ClickHouse和他的朋友们（12）神奇的物化视图(Materialized View)与原理</title>
    <link href="http://dbkernel.github.io/2020/09/03/clickhouse-and-friends-12-materialized-view/"/>
    <id>http://dbkernel.github.io/2020/09/03/clickhouse-and-friends-12-materialized-view/</id>
    <published>2020-09-03T13:22:14.000Z</published>
    <updated>2022-07-07T02:12:49.082Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-09-03 21:22:14</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/08/31/clickhouse-and-friends-materialized-view/">https://bohutang.me/2020/08/31/clickhouse-and-friends-materialized-view/</a><br>以下为正文。</p></blockquote><p><img src="clickhouse-map-2020-materializeview.png" alt="clickhouse-map-2020-materializeview.png"></p><p>在 ClickHouse 里，物化视图(Materialized View)可以说是一个神奇且强大的东西，用途别具一格。</p><p>本文从底层机制进行分析，看看 ClickHouse 的 Materalized View 是怎么工作的，以方便更好的使用它。</p><h2 id="什么是物化视图"><a href="#什么是物化视图" class="headerlink" title="什么是物化视图"></a>什么是物化视图</h2><p>对大部分人来说，物化视图这个概念会比较抽象，物化？视图？。。。</p><p>为了更好的理解它，我们先看一个场景。</p><p>假设你是 <code>*hub</code> 一个“幸福”的小程序员，某天产品经理有个需求：实时统计每小时视频下载量。</p><p>用户下载明细表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">clickhouse<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> download LIMIT <span class="number">10</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">when</span>                <span class="operator">|</span> userid <span class="operator">|</span> bytes  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">06</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span> <span class="number">530314</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">06</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span> <span class="number">872957</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">06</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span> <span class="number">107047</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">07</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span> <span class="number">214876</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">07</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span> <span class="number">820943</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">07</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span> <span class="number">693959</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">08</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span> <span class="number">882151</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">08</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span> <span class="number">644223</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">08</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span> <span class="number">199800</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">09</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span> <span class="number">511439</span> <span class="operator">|</span></span><br><span class="line">... ....</span><br></pre></td></tr></table></figure><p>计算每小时下载量：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">clickhouse<span class="operator">&gt;</span> <span class="keyword">SELECT</span> toStartOfHour(<span class="keyword">when</span>) <span class="keyword">AS</span> <span class="keyword">hour</span>, userid, <span class="built_in">count</span>() <span class="keyword">as</span> downloads, <span class="built_in">sum</span>(bytes) <span class="keyword">AS</span> bytes <span class="keyword">FROM</span> download <span class="keyword">GROUP</span> <span class="keyword">BY</span> userid, <span class="keyword">hour</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> userid, <span class="keyword">hour</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+-----------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">hour</span>                <span class="operator">|</span> userid <span class="operator">|</span> downloads <span class="operator">|</span> bytes      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+-----------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>      <span class="number">6822</span> <span class="operator">|</span> <span class="number">3378623036</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">19</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5424173178</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">20</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5418656068</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">21</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5404309443</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">22</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5354077456</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5390852563</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5369839540</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5384161012</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">02</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5404581759</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">03</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>      <span class="number">6778</span> <span class="operator">|</span> <span class="number">3399557322</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+-----------+------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.13</span> sec)</span><br></pre></td></tr></table></figure><p>很容易嘛，不过有个问题：每次都要以 <code>download</code> 表为基础数据进行计算，<code>*hub</code> 数据量太大，无法忍受。</p><p>想到一个办法：如果对 <code>download</code> 进行预聚合，把结果保存到一个新表 <code>download_hour_mv</code>，并随着 <code>download</code> 增量实时更新，每次去查询<code>download_hour_mv</code> 不就可以了。</p><p>这个新表可以看做是一个物化视图，它在 ClickHouse 是一个普通表。</p><h2 id="创建物化视图"><a href="#创建物化视图" class="headerlink" title="创建物化视图"></a>创建物化视图</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">clickhouse<span class="operator">&gt;</span> <span class="keyword">CREATE</span> MATERIALIZED <span class="keyword">VIEW</span> download_hour_mv</span><br><span class="line">ENGINE <span class="operator">=</span> SummingMergeTree</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> toYYYYMM(<span class="keyword">hour</span>) <span class="keyword">ORDER</span> <span class="keyword">BY</span> (userid, <span class="keyword">hour</span>)</span><br><span class="line"><span class="keyword">AS</span> <span class="keyword">SELECT</span></span><br><span class="line">  toStartOfHour(<span class="keyword">when</span>) <span class="keyword">AS</span> <span class="keyword">hour</span>,</span><br><span class="line">  userid,</span><br><span class="line">  <span class="built_in">count</span>() <span class="keyword">as</span> downloads,</span><br><span class="line">  <span class="built_in">sum</span>(bytes) <span class="keyword">AS</span> bytes</span><br><span class="line"><span class="keyword">FROM</span> download <span class="keyword">WHERE</span> <span class="keyword">when</span> <span class="operator">&gt;=</span> toDateTime(<span class="string">&#x27;2020-09-01 04:00:00&#x27;</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> userid, <span class="keyword">hour</span></span><br></pre></td></tr></table></figure><p>这个语句主要做了：</p><ul><li>创建一个引擎为 <code>SummingMergeTree</code> 的物化视图 <code>download_hour_mv</code></li><li>物化视图的数据来源于 <code>download</code> 表，并根据 <code>select</code> 语句中的表达式进行相应“物化”操作</li><li>选取一个未来时间(当前时间是 <code>2020-08-31 18:00:00</code>)作为开始点 <code>WHERE when &gt;= toDateTime(&#39;2020-09-01 04:00:00&#39;)</code>，表示在<code>2020-09-01 04:00:00</code> 之后的数据才会被同步到 <code>download_hour_mv</code></li></ul><p>这样，目前 <code>download_hour_mv</code> 是一个空表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clickhouse<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> download_hour_mv <span class="keyword">ORDER</span> <span class="keyword">BY</span> userid, <span class="keyword">hour</span>;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><p>注意：官方有 <a href="https://clickhouse.tech/docs/en/sql-reference/statements/create/view/#materialized">POPULATE</a> 关键字，但是不建议使用，因为视图创建期间 <code>download</code> 如果有写入数据会丢失，这也是我们加一个 <code>WHERE</code> 作为数据同步点的原因。</p><p>那么，我们如何让源表数据可以一致性的同步到 <code>download_hour_mv</code> 呢？</p><h2 id="物化全量数据"><a href="#物化全量数据" class="headerlink" title="物化全量数据"></a>物化全量数据</h2><p>在<code>2020-09-01 04:00:00</code>之后，我们可以通过一个带 <code>WHERE</code> 快照的<code>INSERT INTO SELECT...</code> 对 <code>download</code> 历史数据进行物化：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">clickhouse<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> download_hour_mv</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  toStartOfHour(<span class="keyword">when</span>) <span class="keyword">AS</span> <span class="keyword">hour</span>,</span><br><span class="line">  userid,</span><br><span class="line">  <span class="built_in">count</span>() <span class="keyword">as</span> downloads,</span><br><span class="line">  <span class="built_in">sum</span>(bytes) <span class="keyword">AS</span> bytes</span><br><span class="line"><span class="keyword">FROM</span> download <span class="keyword">WHERE</span> <span class="keyword">when</span> <span class="operator">&lt;</span> toDateTime(<span class="string">&#x27;2020-09-01 04:00:00&#x27;</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> userid, <span class="keyword">hour</span></span><br></pre></td></tr></table></figure><p>查询物化视图：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">clickhouse<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> download_hour_mv <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">hour</span>, userid, downloads <span class="keyword">DESC</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+-----------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">hour</span>                <span class="operator">|</span> userid <span class="operator">|</span> downloads <span class="operator">|</span> bytes      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+-----------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>      <span class="number">6822</span> <span class="operator">|</span> <span class="number">3378623036</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">19</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5424173178</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">20</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5418656068</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">21</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5404309443</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">22</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5354077456</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5390852563</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5369839540</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5384161012</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">02</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5404581759</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">03</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>      <span class="number">6778</span> <span class="operator">|</span> <span class="number">3399557322</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+-----------+------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.05</span> sec)</span><br></pre></td></tr></table></figure><p>可以看到数据已经“物化”到 <code>download_hour_mv</code>。</p><h2 id="物化增量数据"><a href="#物化增量数据" class="headerlink" title="物化增量数据"></a>物化增量数据</h2><p>写一些数据到 <code>download</code>表:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">clickhouse<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> download</span><br><span class="line">       <span class="keyword">SELECT</span></span><br><span class="line">         toDateTime(<span class="string">&#x27;2020-09-01 04:00:00&#x27;</span>) <span class="operator">+</span> number<span class="operator">*</span>(<span class="number">1</span><span class="operator">/</span><span class="number">3</span>) <span class="keyword">as</span> <span class="keyword">when</span>,</span><br><span class="line">         <span class="number">19</span>,</span><br><span class="line">         rand() <span class="operator">%</span> <span class="number">1000000</span></span><br><span class="line">       <span class="keyword">FROM</span> system.numbers</span><br><span class="line">       LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>查询物化视图 <code>download_hour_mv</code>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">clickhouse<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> download_hour_mv <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">hour</span>, userid, downloads;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+-----------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">hour</span>                <span class="operator">|</span> userid <span class="operator">|</span> downloads <span class="operator">|</span> bytes      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+-----------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">18</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>      <span class="number">6822</span> <span class="operator">|</span> <span class="number">3378623036</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">19</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5424173178</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">20</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5418656068</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">21</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5404309443</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">22</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5354077456</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-31</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5390852563</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5369839540</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5384161012</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">02</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>     <span class="number">10800</span> <span class="operator">|</span> <span class="number">5404581759</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">03</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>      <span class="number">6778</span> <span class="operator">|</span> <span class="number">3399557322</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>     <span class="number">19</span> <span class="operator">|</span>        <span class="number">10</span> <span class="operator">|</span>    <span class="number">5732600</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------+-----------+------------+</span></span><br><span class="line"><span class="number">11</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>可以看到最后一条数据就是我们增量的一个物化聚合，已经实时同步，这是如何做到的呢？</p><h2 id="物化视图原理"><a href="#物化视图原理" class="headerlink" title="物化视图原理"></a>物化视图原理</h2><p>ClickHouse 的物化视图原理并不复杂，在 <code>download</code> 表有新的数据写入时，如果检测到有物化视图跟它关联，会针对这批写入的数据进行物化操作。</p><p>比如上面新增数据是通过以下 SQL 生成的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">clickhouse<span class="operator">&gt;</span> <span class="keyword">SELECT</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          toDateTime(<span class="string">&#x27;2020-09-01 04:00:00&#x27;</span>) <span class="operator">+</span> number<span class="operator">*</span>(<span class="number">1</span><span class="operator">/</span><span class="number">3</span>) <span class="keyword">as</span> <span class="keyword">when</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          <span class="number">19</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          rand() <span class="operator">%</span> <span class="number">1000000</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>        <span class="keyword">FROM</span> system.numbers</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>        LIMIT <span class="number">10</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+------+-------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">when</span>                <span class="operator">|</span> <span class="number">19</span>   <span class="operator">|</span> modulo(rand(), <span class="number">1000000</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+------+-------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span>                  <span class="number">870495</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span>                  <span class="number">322270</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span>                  <span class="number">983422</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">01</span> <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span>                  <span class="number">759708</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">01</span> <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span>                  <span class="number">975636</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">01</span> <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span>                  <span class="number">365507</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">02</span> <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span>                  <span class="number">865569</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">02</span> <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span>                  <span class="number">975742</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">02</span> <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span>                   <span class="number">85827</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-01</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">03</span> <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span>                  <span class="number">992779</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+------+-------------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><p>物化视图执行的语句类似：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> download_hour_mv</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  toStartOfHour(<span class="keyword">when</span>) <span class="keyword">AS</span> <span class="keyword">hour</span>,</span><br><span class="line">  userid,</span><br><span class="line">  <span class="built_in">count</span>() <span class="keyword">as</span> downloads,</span><br><span class="line">  <span class="built_in">sum</span>(bytes) <span class="keyword">AS</span> bytes</span><br><span class="line"><span class="keyword">FROM</span> [新增的<span class="number">10</span>条数据] <span class="keyword">WHERE</span> <span class="keyword">when</span> <span class="operator">&gt;=</span> toDateTime(<span class="string">&#x27;2020-09-01 04:00:00&#x27;</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> userid, <span class="keyword">hour</span></span><br></pre></td></tr></table></figure><p>代码导航：</p><ol><li><p>添加视图 OutputStream， <a href="https://github.com/ClickHouse/ClickHouse/blob/cb4644ea6d04b3d5900868b4f8d686a03082379a/src/Interpreters/InterpreterInsertQuery.cpp#L313">InterpreterInsertQuery.cpp</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (table-&gt;<span class="built_in">noPushingToViews</span>() &amp;&amp; !no_destination)</span><br><span class="line">    out = table-&gt;<span class="built_in">write</span>(query_ptr, metadata_snapshot, context);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    out = std::make_shared&lt;PushingToViewsBlockOutputStream&gt;(table, metadata_snapshot, context, query_ptr, no_destination);</span><br></pre></td></tr></table></figure></li><li><p>构造 Insert ， <a href="https://github.com/ClickHouse/ClickHouse/blob/cb4644ea6d04b3d5900868b4f8d686a03082379a/src/DataStreams/PushingToViewsBlockOutputStream.cpp#L85">PushingToViewsBlockOutputStream.cpp</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ASTPtr <span class="title">insert_query_ptr</span><span class="params">(insert.release())</span></span>;</span><br><span class="line"><span class="function">InterpreterInsertQuery <span class="title">interpreter</span><span class="params">(insert_query_ptr, *insert_context)</span></span>;</span><br><span class="line">BlockIO io = interpreter.<span class="built_in">execute</span>();</span><br><span class="line">out = io.out;</span><br></pre></td></tr></table></figure></li><li><p>物化新增数据：<a href="https://github.com/ClickHouse/ClickHouse/blob/cb4644ea6d04b3d5900868b4f8d686a03082379a/src/DataStreams/PushingToViewsBlockOutputStream.cpp#L331">PushingToViewsBlockOutputStream.cpp</a></p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Context local_context = *select_context;</span><br><span class="line">local_context.<span class="built_in">addViewSource</span>(</span><br><span class="line">    StorageValues::<span class="built_in">create</span>(</span><br><span class="line">        storage-&gt;<span class="built_in">getStorageID</span>(), metadata_snapshot-&gt;<span class="built_in">getColumns</span>(), block, storage-&gt;<span class="built_in">getVirtuals</span>()));</span><br><span class="line">select.<span class="built_in">emplace</span>(view.query, local_context, <span class="built_in">SelectQueryOptions</span>());</span><br><span class="line">in = std::make_shared&lt;MaterializingBlockInputStream&gt;(select-&gt;<span class="built_in">execute</span>().<span class="built_in">getInputStream</span>()</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>物化视图的用途较多。</p><p>比如可以解决表索引问题，我们可以用物化视图创建另外一种物理序，来满足某些条件下的查询问题。</p><p>还有就是通过物化视图的实时同步数据能力，我们可以做到更加灵活的表结构变更。</p><p>更强大的地方是它可以借助 MergeTree 家族引擎(SummingMergeTree、Aggregatingmergetree 等)，得到一个实时的预聚合，满足快速查询。</p><p>原理是把增量的数据根据 <code>AS SELECT ...</code> 对其进行处理并写入到物化视图表，物化视图是一种普通表，可以直接读取和写入。</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;strong&gt;本文首发于 2020-09-03 21:22:14&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《ClickHouse 和他的朋友们》系列文章转载自圈内好友 &lt;a href=&quot;https://b</summary>
      
    
    
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/categories/ClickHouse/"/>
    
    
    <category term="ClickHouse和他的朋友们" scheme="http://dbkernel.github.io/tags/ClickHouse%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/tags/ClickHouse/"/>
    
    <category term="源码分析" scheme="http://dbkernel.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="Materialized View" scheme="http://dbkernel.github.io/tags/Materialized-View/"/>
    
  </entry>
  
  <entry>
    <title>源码分析 | ClickHouse和他的朋友们（11）MySQL实时复制之GTID模式</title>
    <link href="http://dbkernel.github.io/2020/08/28/clickhouse-and-friends-11-mysql-gtid-replication/"/>
    <id>http://dbkernel.github.io/2020/08/28/clickhouse-and-friends-11-mysql-gtid-replication/</id>
    <published>2020-08-28T12:40:14.000Z</published>
    <updated>2022-07-07T02:12:30.582Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-08-28 20:40:14</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/08/26/clickhouse-and-friends-mysql-gtid-replication/">https://bohutang.me/2020/08/26/clickhouse-and-friends-mysql-gtid-replication/</a><br>以下为正文。</p></blockquote><p><img src="clickhouse-map-2020-materialzemysql.png" alt="clickhouse-map-2020-materialzemysql.png"></p><p><a href="https://bohutang.me/2020/07/26/clickhouse-and-friends-mysql-replication/">MySQL 实时复制原理篇</a></p><p>几天前 ClickHouse 官方发布了 <a href="https://github.com/ClickHouse/ClickHouse/releases/tag/v20.8.1.4447-testing">v20.8.1.4447-testing</a>，这个版本已经包含了 MaterializeMySQL 引擎，实现了 ClickHouse 实时复制 MySQL 数据的能力，感兴趣的朋友可以通过官方安装包来做体验，安装方式参考 <a href="https://clickhouse.tech/#quick-start">https://clickhouse.tech/#quick-start</a>，需要注意的是要选择 testing 分支。</p><h2 id="基于位点同步"><a href="#基于位点同步" class="headerlink" title="基于位点同步"></a>基于位点同步</h2><p>MaterializeMySQL 在 v20.8.1.4447-testing 版本是基于 binlog 位点模式进行同步的。</p><p>每次消费完一批 binlog event，就会记录 event 的位点信息到 .metadata 文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Version:1</span><br><span class="line">Binlog File:mysql-bin.000002</span><br><span class="line">Binlog Position:328</span><br><span class="line">Data Version:1</span><br></pre></td></tr></table></figure><p>这样当 ClickHouse 再次启动时，它会把 <code>&#123;‘mysql-bin.000002’, 328&#125;</code> 二元组通过协议告知 MySQL Server，MySQL 从这个位点开始发送数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1&gt; ClickHouse 发送 &#123;&#x27;mysql-bin.000002&#x27;, 328&#125; 位点信息给 MySQL</span><br><span class="line">s2&gt; MySQL 找到本地 mysql-bin.000002 文件并定位到 328 偏移位置，读取下一个 event 发送给 ClickHouse</span><br><span class="line">s3&gt; ClickHouse 接收 binlog event 并更新 .metadata位点</span><br></pre></td></tr></table></figure><p>看起来不错哦，但是有个问题：<br>如果 MySQL Server 是一个集群(比如１主２从)，通过 VIP 对外服务，MaterializeMySQL 的 host 指向的是这个 vip。<br>当集群主从发生切换后，<code>&#123;binlog-name, binlog-position&#125;</code> 二元组其实是不准确的，因为集群里主从 binlog 不一定是完全一致的(binlog 可以做 reset 操作)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1&gt; ClickHouse 发送 &#123;&#x27;mysql-bin.000002&#x27;, 328&#125; 给集群新主 MySQL</span><br><span class="line">s2&gt; 新主 MySQL 发现本地没有 mysql-bin.000002 文件，因为它做过 reset master 操作，binlog 文件是 mysql-bin.000001</span><br><span class="line">... oops ...</span><br></pre></td></tr></table></figure><p>为了解决这个问题，我们开发了 GTID 同步模式，废弃了不安全的位点同步模式，目前已被 upstream merged <a href="https://github.com/ClickHouse/ClickHouse/pull/13820">#PR13820</a>，下一个 testing 版本即可体验。</p><p>着急的话可以自己编译或通过 <a href="https://clickhouse-builds.s3.yandex.net/0/2b8ad576cc3892d2d760f3f8b670adf17db0c2a0/clickhouse_build_check/report.html">ClickHouse Build Check for master-20.9.1</a> 下载安装。</p><h2 id="基于-GTID-同步"><a href="#基于-GTID-同步" class="headerlink" title="基于 GTID 同步"></a>基于 GTID 同步</h2><p>GTID 是 MySQL 复制增强版，从 MySQL 5.6 版本开始支持，目前已经是 MySQL 主流复制模式。</p><p>它为每个 event 分配一个全局唯一 ID 和序号，我们可以不用关心 MySQL 集群主从拓扑结构，直接告知 MySQL 这个 GTID 即可，.metadata 变为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Version:2</span><br><span class="line">Executed GTID:f4aee41e-e36f-11ea-8b37-0242ac110002:1-5</span><br><span class="line">Data Version:1</span><br></pre></td></tr></table></figure><p><code>f4aee41e-e36f-11ea-8b37-0242ac110002</code> 是生成 event 的主机 UUID，<code>1-5</code>是已经同步的 event 区间。</p><p>这样流程就变为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1&gt; ClickHouse 发送 GTID:f4aee41e-e36f-11ea-8b37-0242ac110002:1-5 给 MySQL</span><br><span class="line">s2&gt; MySQL 根据 GTID:f4aee41e-e36f-11ea-8b37-0242ac110002:1-5 找到本地位点，读取下一个 event 发送给 ClickHouse</span><br><span class="line">s3&gt; ClickHouse 接收 binlog event 并更新 .metadata GTID信息</span><br></pre></td></tr></table></figure><h2 id="MySQL-开启-GTID"><a href="#MySQL-开启-GTID" class="headerlink" title="MySQL 开启 GTID"></a>MySQL 开启 GTID</h2><p>那么，MySQL 侧怎么开启 GTID 呢？增加以下两个参数即可:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--gtid-mode=ON --enforce-gtid-consistency</span></span><br></pre></td></tr></table></figure><p>比如启动一个启用 GTID 的 MySQL docker：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="operator">-</span>d <span class="operator">-</span>e MYSQL_ROOT_PASSWORD<span class="operator">=</span><span class="number">123</span> mysql:<span class="number">5.7</span> mysqld <span class="comment">--datadir=/var/lib/mysql --server-id=1 --log-bin=/var/lib/mysql/mysql-bin.log --gtid-mode=ON --enforce-gtid-consistency</span></span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>启用 GTID 复制模式后，metadata Version 会变为 2，也就是老版本启动时会直接报错，database 需要重建。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>MaterializeMySQL 引擎还处于不停迭代中，对于它我们有一个初步的规划：</p><ul><li><strong>稳定性保证</strong><br>这块需要更多测试，更多试用反馈</li><li><strong>索引优化</strong><br>OLTP 索引一般不是为 OLAP 设计，目前索引转换还是依赖 MySQL 表结构，需要更加智能化</li><li><strong>可观测性</strong><br>在 ClickHouse 侧可以方便的查看当前同步信息，类似 MySQL <code>show slave status</code></li><li><strong>数据一致性校验</strong><br>需要提供方式可以校验 MySQL 和 ClickHouse 数据一致性</li></ul><p>MaterializeMySQL 已经是社区功能，仍然有不少的工作要做。期待更多的力量加入，我们的征途不止星辰大海。</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;strong&gt;本文首发于 2020-08-28 20:40:14&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《ClickHouse 和他的朋友们》系列文章转载自圈内好友 &lt;a href=&quot;https://b</summary>
      
    
    
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/categories/ClickHouse/"/>
    
    
    <category term="MySQL" scheme="http://dbkernel.github.io/tags/MySQL/"/>
    
    <category term="ClickHouse和他的朋友们" scheme="http://dbkernel.github.io/tags/ClickHouse%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/tags/ClickHouse/"/>
    
    <category term="源码分析" scheme="http://dbkernel.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>问题定位 | Peronca Xtrabackup 8.0近日踩坑总结 - xtrabackup 2.4和8.0区别</title>
    <link href="http://dbkernel.github.io/2020/08/27/percona-xtrabackup-2.4-vs-8.0/"/>
    <id>http://dbkernel.github.io/2020/08/27/percona-xtrabackup-2.4-vs-8.0/</id>
    <published>2020-08-27T05:46:15.000Z</published>
    <updated>2023-04-25T02:22:34.198Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><blockquote><p><strong>本文首发于 2020-08-27 13:46:15</strong></p></blockquote><p><strong>作者：卢文双 资深数据库内核研发</strong></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>近期在给 <code>radondb/xenon</code> 适配 percona xtrabackup 8.0 时，遇到了一些问题，经过多日调研、尝试终于解决，特此分享。</p><p><strong>版本信息：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Percona-Server 8.0.19-10</span><br><span class="line">Percona-Xtrabackup 8.0.13</span><br></pre></td></tr></table></figure><p>版本各字段含义参考 <a href="https://www.percona.com/blog/2020/08/18/aligning-percona-xtrabackup-versions-with-percona-server-for-mysql/">https://www.percona.com/blog/2020/08/18/aligning-percona-xtrabackup-versions-with-percona-server-for-mysql/</a></p><h3 id="适配过程中遇到的坑"><a href="#适配过程中遇到的坑" class="headerlink" title="适配过程中遇到的坑"></a>适配过程中遇到的坑</h3><p>一、MySQL 8.0 + Semi-Sync + 持续写入数据期间执行重建后，change master to &amp;&amp; start slave 报错：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Last_Error: Could <span class="keyword">not</span> execute Write_rows <span class="keyword">event</span> on <span class="keyword">table</span> db1<span class="variable">.t1</span>; Duplicate entry &#x27;<span class="number">28646</span>&#x27; <span class="keyword">for</span> key &#x27;t1<span class="variable">.PRIMARY</span>&#x27;, Error_code: <span class="number">1062</span>; handler error HA_ERR_FOUND_DUPP_KEY; the <span class="keyword">event</span>&#x27;s master log mysql-bin<span class="variable">.000052</span>, end_log_pos <span class="number">437</span></span><br></pre></td></tr></table></figure><p>二、MySQL 8.0 + Group Replication + 持续写入数据期间执行重建后，change master to &amp;&amp; start group_replication 报错：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">21</span>T14:<span class="number">51</span>:<span class="number">09</span><span class="variable">.977606</span>+<span class="number">08</span>:<span class="number">00</span> <span class="number">61</span> [System] [MY-<span class="number">010597</span>] [Repl] &#x27;CHANGE MASTER TO FOR CHANNEL &#x27;group_replication_applier&#x27; executed&#x27;. Previous state master_host=&#x27;&lt;NULL&gt;&#x27;, master_port= <span class="number">0</span>, master_log_file=&#x27;&#x27;, master_log_pos= <span class="number">4</span>, master_bind=&#x27;&#x27;. New state master_host=&#x27;&lt;NULL&gt;&#x27;, master_port= <span class="number">0</span>, master_log_file=&#x27;&#x27;, master_log_pos= <span class="number">4</span>, master_bind=&#x27;&#x27;.</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">21</span>T14:<span class="number">51</span>:<span class="number">09</span><span class="variable">.987494</span>+<span class="number">08</span>:<span class="number">00</span> <span class="number">61</span> [ERROR] [MY-<span class="number">013124</span>] [Repl] Slave SQL <span class="keyword">for</span> channel &#x27;group_replication_applier&#x27;: Slave failed to initialize relay log info structure from the repository, Error_code: MY-<span class="number">013124</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">21</span>T14:<span class="number">51</span>:<span class="number">09</span><span class="variable">.987542</span>+<span class="number">08</span>:<span class="number">00</span> <span class="number">61</span> [ERROR] [MY-<span class="number">011534</span>] [Repl] Plugin group_replication reported: &#x27;Error <span class="keyword">while</span> starting the group replication applier thread&#x27;</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">21</span>T14:<span class="number">51</span>:<span class="number">09</span><span class="variable">.987651</span>+<span class="number">08</span>:<span class="number">00</span> <span class="number">7</span> [ERROR] [MY-<span class="number">011669</span>] [Repl] Plugin group_replication reported: &#x27;Unable to initialize the Group Replication applier <span class="keyword">module</span>.&#x27;</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">21</span>T14:<span class="number">51</span>:<span class="number">09</span><span class="variable">.987831</span>+<span class="number">08</span>:<span class="number">00</span> <span class="number">7</span> [ERROR] [MY-<span class="number">011735</span>] [Repl] Plugin group_replication reported: &#x27;[GCS] The member is leaving a group without being on one.&#x27;</span><br></pre></td></tr></table></figure><p>要解释这个问题，首先要弄清楚 xtrabackup 2.4 和 8.0 的区别。</p><h3 id="xtrabackup-2-4-和-8-0-区别"><a href="#xtrabackup-2-4-和-8-0-区别" class="headerlink" title="xtrabackup 2.4 和 8.0 区别"></a>xtrabackup 2.4 和 8.0 区别</h3><p><strong>google 查到 xtrabackup 8.0 与 2.4 版本行为有所不同：</strong></p><blockquote><ol><li>Xtrabackup 2.4 备份后生成的 <code>xtrabackup_binlog_info</code> 文件记录的 GTID 信息是准确的，但是备份恢复后 <code>show master status</code> 显示的 GTID 是不准确的。</li><li>Xtrabackup 8.0 在备份只有 InnoDB 表的实例时，<code>xtrabackup_binlog_info</code> 文件记录的 GTID 信息不一定是准确的，但是备份恢复后 <code>show master status</code> 显示的 GTID 是准确的。</li><li>Xtrabackup 8.0 在备份有非 InnoDB 表格的实例时，<code>xtrabackup_binlog_info</code> 文件记录的 GTID 信息是准确的，备份恢复后 <code>show master status</code> 显示的 GTID 也是准确的。</li></ol></blockquote><p><strong>之前研究过 xtrabackup 2.4 ，其过程大致如下：</strong></p><blockquote><ol><li>start backup</li><li>copy ibdata1 / copy .ibd file</li><li>excuted FTWRL</li><li>backup non-InnoDB tables and files</li><li>writing xtrabackup_binlog_info</li><li>executed FLUSH NO_WRITE_TO_BINLOG ENGINE LOGS</li><li>executed UNLOCK TABLES</li><li>copying ib_buffer_pool</li><li>completed OK!</li></ol></blockquote><p><strong>问题 1：xtrabackup 8.0 的执行过程是什么样？</strong></p><p>首先，查看重建期间的 <code>general log</code>：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.136376</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySET SESSION wait_timeout=<span class="number">2147483</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.136439</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySET SESSION autocommit=<span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.136523</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySET NAMES utf8</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.136595</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySHOW VARIABLES</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.138840</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySELECT COUNT(*) FROM information_schema<span class="variable">.tables</span> WHERE engine = &#x27;MyISAM&#x27; OR engine = &#x27;RocksDB&#x27;</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.140203</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySHOW ENGINES</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.140407</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySHOW ENGINE INNODB STATUS</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.141570</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySELECT PLUGIN_NAME, PLUGIN_LIBRARY FROM information_schema<span class="variable">.plugins</span> WHERE PLUGIN_STATUS = &#x27;ACTIVE&#x27; AND PLUGIN_TYPE = &#x27;KEYRING&#x27;</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.142140</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySELECT  CONCAT(table_schema, &#x27;/&#x27;, table_name), engine FROM information_schema<span class="variable">.tables</span> WHERE engine NOT IN (&#x27;MyISAM&#x27;, &#x27;InnoDB&#x27;, &#x27;CSV&#x27;, &#x27;MRG_MYISAM&#x27;, &#x27;ROCKSDB&#x27;) AND table_schema NOT IN (  &#x27;performance_schema&#x27;, &#x27;information_schema&#x27;,   &#x27;mysql&#x27;)</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.209819</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">171</span> QuerySET SESSION wait_timeout=<span class="number">2147483</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.209879</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">171</span> QuerySET SESSION autocommit=<span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.209950</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">171</span> QuerySET NAMES utf8</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.210015</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">171</span> QuerySHOW VARIABLES</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">18</span><span class="variable">.214030</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySELECT T2<span class="variable">.PATH</span>,        T2<span class="variable">.NAME</span>,        T1<span class="variable">.SPACE_TYPE</span> FROM   INFORMATION_SCHEMA<span class="variable">.INNODB_TABLESPACES</span> T1        JOIN INFORMATION_SCHEMA<span class="variable">.INNODB_TABLESPACES_BRIEF</span> T2 USING (SPACE) WHERE  T1<span class="variable">.SPACE_TYPE</span> = &#x27;Single&#x27; &amp;&amp; T1<span class="variable">.ROW_FORMAT</span> != &#x27;Undo&#x27;UNION SELECT T2<span class="variable">.PATH</span>,        SUBSTRING_INDEX(SUBSTRING_INDEX(T2<span class="variable">.PATH</span>, &#x27;/&#x27;, -<span class="number">1</span>), &#x27;.&#x27;, <span class="number">1</span>) NAME,        T1<span class="variable">.SPACE_TYPE</span> FROM   INFORMATION_SCHEMA <span class="variable">.INNODB_TABLESPACES</span> T1        JOIN INFORMATION_SCHEMA <span class="variable">.INNODB_TABLESPACES_BRIEF</span> T2 USING (SPACE) WHERE  T1<span class="variable">.SPACE_TYPE</span> = &#x27;General&#x27; &amp;&amp; T1<span class="variable">.ROW_FORMAT</span> != &#x27;Undo&#x27;</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">19</span><span class="variable">.533904</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QueryFLUSH NO_WRITE_TO_BINLOG BINARY LOGS</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">19</span><span class="variable">.543095</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySELECT server_uuid, <span class="keyword">local</span>, replication, storage_engines FROM performance_schema<span class="variable">.log_status</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">19</span><span class="variable">.543418</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySHOW VARIABLES</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">19</span><span class="variable">.545383</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySHOW VARIABLES</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">19</span><span class="variable">.550641</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QueryFLUSH NO_WRITE_TO_BINLOG ENGINE LOGS</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">20</span><span class="variable">.556885</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySELECT UUID()</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">26</span>T16:<span class="number">20</span>:<span class="number">20</span><span class="variable">.557118</span>+<span class="number">08</span>:<span class="number">00</span>  <span class="number">170</span> QuerySELECT VERSION()</span><br></pre></td></tr></table></figure><p>可见，<strong>xtrabackup 8.0 默认情况下大致过程如下：</strong></p><blockquote><ol><li>start backup</li><li>copy .ibd file</li><li>backup non-InnoDB tables and files</li><li>executed FLUSH NO_WRITE_TO_BINLOG BINARY LOGS</li><li>selecting LSN and binary log position from p_s.log_status</li><li>copy last binlog file</li><li>writing /mysql/backup/backup/binlog.index</li><li>writing xtrabackup_binlog_info</li><li>executing FLUSH NO_WRITE_TO_BINLOG ENGINE LOGS</li><li>copy ib_buffer_pool</li><li>completed OK!</li></ol><p><strong>注意：</strong> 当存在非 InnoDB 表时，xtrabackup 8.0 会执行 FTWRL。</p></blockquote><p>从上述步骤可知，xtrabackup 8.0 与 2.4 的步骤<strong>主要区别</strong>为：</p><p>当只存在 InnoDB 引擎的表时，不再执行 FTWRL，而是通过 上述第 5 步（<code>SELECT server_uuid, local, replication, storage_engines FROM performance_schema.log_status</code> ）来获取 LSN、binlog position、GTID 。</p><p>手册中对于表 <a href="https://dev.mysql.com/doc/refman/8.0/en/performance-schema-log-status-table.html">log_status</a> 的描述如下：</p><blockquote><p>The <a href="https://dev.mysql.com/doc/refman/8.0/en/performance-schema-log-status-table.html"><code>log_status</code></a> table provides information that enables an online backup tool to copy the required log files without locking those resources for the duration of the copy process.</p><p>When the <a href="https://dev.mysql.com/doc/refman/8.0/en/performance-schema-log-status-table.html"><code>log_status</code></a> table is queried, the server blocks logging and related administrative changes for just long enough to populate the table, then releases the resources. The <a href="https://dev.mysql.com/doc/refman/8.0/en/performance-schema-log-status-table.html"><code>log_status</code></a> table informs the online backup which point it should copy up to in the source’s binary log and <code>gtid_executed</code> record, and the relay log for each replication channel. It also provides relevant information for individual storage engines, such as the last log sequence number (LSN) and the LSN of the last checkpoint taken for the <code>InnoDB</code> storage engine.</p></blockquote><p>从上述手册描述可知，<code>performance_schema.log_status</code>是 MySQL 8.0 提供给在线备份工具获取复制信息的表格，查询该表时，mysql server 将阻止日志的记录和相关的更改来获取足够的时间以填充该表，然后释放资源。</p><p>log_status 表通知在线备份工具当前主库的 binlog 的位点和 gtid_executed 的值以及每个复制通道的 relay log。另外，它还提供了各个存储引擎的相关信息，比如，提供了 InnoDB 引擎使用的最后一个日志序列号（LSN）和最后一个检查点的 LSN。</p><p><code>performance_schema.log_status</code>表定义为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Semi-Sync</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> performance_schema.log_status\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">    SERVER_UUID: <span class="number">6</span>b437e80<span class="operator">-</span>e5d5<span class="number">-11</span>ea<span class="number">-88e3</span><span class="number">-52549922</span>fdbb</span><br><span class="line">          <span class="keyword">LOCAL</span>: &#123;&quot;gtid_executed&quot;: &quot;6b437e80-e5d5-11ea-88e3-52549922fdbb:1-201094&quot;, &quot;binary_log_file&quot;: &quot;mysql-bin.000079&quot;, &quot;binary_log_position&quot;: <span class="number">195</span>&#125;</span><br><span class="line">    REPLICATION: &#123;&quot;channels&quot;: []&#125;</span><br><span class="line">STORAGE_ENGINES: &#123;&quot;InnoDB&quot;: &#123;&quot;LSN&quot;: <span class="number">23711425885</span>, &quot;LSN_checkpoint&quot;: <span class="number">23711425885</span>&#125;&#125;</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Group Replication</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> performance_schema.log_status\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">    SERVER_UUID: <span class="number">7</span>bd32480<span class="operator">-</span>e5d5<span class="number">-11</span>ea<span class="number">-8</span>f8a<span class="number">-525499</span>cfbb7d</span><br><span class="line">          <span class="keyword">LOCAL</span>: &#123;&quot;gtid_executed&quot;: &quot;aaaaaaaa-aaaa-aaaa-aaaa-53ab6ea1210a:1-11&quot;, &quot;binary_log_file&quot;: &quot;mysql-bin.000003&quot;, &quot;binary_log_position&quot;: <span class="number">1274</span>&#125;</span><br><span class="line">    REPLICATION: &#123;&quot;channels&quot;: [&#123;&quot;channel_name&quot;: &quot;group_replication_applier&quot;, &quot;relay_log_file&quot;: &quot;mysql-relay-bin-group_replication_applier.000004&quot;, &quot;relay_log_position&quot;: <span class="number">311</span>, &quot;relay_master_log_file&quot;: &quot;&quot;, &quot;exec_master_log_position&quot;: <span class="number">0</span>&#125;, &#123;&quot;channel_name&quot;: &quot;group_replication_recovery&quot;, &quot;relay_log_file&quot;: &quot;mysql-relay-bin-group_replication_recovery.000003&quot;, &quot;relay_log_position&quot;: <span class="number">151</span>, &quot;relay_master_log_file&quot;: &quot;&quot;, &quot;exec_master_log_position&quot;: <span class="number">0</span>&#125;]&#125;</span><br><span class="line">STORAGE_ENGINES: &#123;&quot;InnoDB&quot;: &#123;&quot;LSN&quot;: <span class="number">20257208</span>, &quot;LSN_checkpoint&quot;: <span class="number">20257208</span>&#125;&#125;</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>问题 2：<code>performance_schema.log_status</code>提供的信息是否准确呢？</strong></p><p>当写入压力大时，该表中的 binlog position 与 GTID 信息不一致。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> performance_schema.log_status\G  <span class="keyword">show</span> master status;</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">    SERVER_UUID: <span class="number">6</span>b437e80<span class="operator">-</span>e5d5<span class="number">-11</span>ea<span class="number">-88e3</span><span class="number">-52549922</span>fdbb</span><br><span class="line">          <span class="keyword">LOCAL</span>: &#123;&quot;gtid_executed&quot;: &quot;6b437e80-e5d5-11ea-88e3-52549922fdbb:1-448709&quot;, &quot;binary_log_file&quot;: &quot;mysql-bin.000087&quot;, &quot;binary_log_position&quot;: <span class="number">341265185</span>&#125;</span><br><span class="line">    REPLICATION: &#123;&quot;channels&quot;: []&#125;</span><br><span class="line">STORAGE_ENGINES: &#123;&quot;InnoDB&quot;: &#123;&quot;LSN&quot;: <span class="number">33797305275</span>, &quot;LSN_checkpoint&quot;: <span class="number">33433316246</span>&#125;&#125;</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.11</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------+--------------+------------------+-----------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> File             <span class="operator">|</span> Position  <span class="operator">|</span> Binlog_Do_DB <span class="operator">|</span> Binlog_Ignore_DB <span class="operator">|</span> Executed_Gtid_Set                             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------+--------------+------------------+-----------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> mysql<span class="operator">-</span>bin<span class="number">.000087</span> <span class="operator">|</span> <span class="number">343317905</span> <span class="operator">|</span>              <span class="operator">|</span>                  <span class="operator">|</span> <span class="number">6</span>b437e80<span class="operator">-</span>e5d5<span class="number">-11</span>ea<span class="number">-88e3</span><span class="number">-52549922</span>fdbb:<span class="number">1</span><span class="number">-448709</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------+--------------+------------------+-----------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p><strong>问题 3：既然 log_status 中的 binlog position 不准确，为什么备份恢复后 GTID 并没有缺失，数据也没问题？</strong></p><p>原因是 xtrabackup 8.0 在第 4 步 <code>FLUSH NO_WRITE_TO_BINLOG BINARY LOGS</code>之后，在第 6 步 <code>copy last binlog file</code>，这样备份恢复出的新实例在启动后不仅会读取 <code>gtid_executed</code> 表，还会读取拷贝的那个 binlog 文件来更新 GTID。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ mysqlbinlog -vv /data/mysql/mysql-bin<span class="variable">.000096</span></span><br><span class="line"><span class="comment">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/</span>;</span><br><span class="line"><span class="comment">/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/</span>;</span><br><span class="line">DELIMITER <span class="comment">/*!*/</span>;</span><br><span class="line"># at <span class="number">4</span></span><br><span class="line">#<span class="number">200827</span> <span class="number">11</span>:<span class="number">26</span>:<span class="number">47</span> server id <span class="number">575010000</span>  end_log_pos <span class="number">124</span> CRC32 <span class="number">0</span>xb026e372 Start: binlog v <span class="number">4</span>, server v <span class="number">8</span><span class="variable">.0</span><span class="variable">.19</span>-<span class="number">10</span> created <span class="number">200827</span> <span class="number">11</span>:<span class="number">26</span>:<span class="number">47</span></span><br><span class="line"># Warning: <span class="keyword">this</span> binlog is either in <span class="keyword">use</span> <span class="keyword">or</span> was <span class="keyword">not</span> closed properly.</span><br><span class="line">BINLOG &#x27;</span><br><span class="line"><span class="number">9</span>ydHXw/Q9EUieAAAAHwAAAABAAQAOC4wLjE5LTEwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAEwANAAgAAAAABAAEAAAAYAAEGggAAAAICAgCAAAACgoKKioAEjQA</span><br><span class="line">CgFy4yaw</span><br><span class="line">&#x27;<span class="comment">/*!*/</span>;</span><br><span class="line"># at <span class="number">124</span></span><br><span class="line">#<span class="number">200827</span> <span class="number">11</span>:<span class="number">26</span>:<span class="number">47</span> server id <span class="number">575010000</span>  end_log_pos <span class="number">195</span> CRC32 <span class="number">0</span>xad060415 Previous-GTIDs</span><br><span class="line"># <span class="number">6</span>b437e80-e5d5-<span class="number">11</span>ea-<span class="number">88</span>e3-<span class="number">52549922</span>fdbb:<span class="number">1</span>-<span class="number">465503</span></span><br><span class="line">SET @@SESSION<span class="variable">.GTID_NEXT</span>= &#x27;AUTOMATIC&#x27; <span class="comment">/* added by mysqlbinlog */</span> <span class="comment">/*!*/</span>;</span><br><span class="line">DELIMITER ;</span><br><span class="line"># End of log file</span><br><span class="line"><span class="comment">/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/</span>;</span><br><span class="line"><span class="comment">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/</span>;</span><br></pre></td></tr></table></figure><h3 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h3><h4 id="坑一：MySQL-8-0-Semi-Sync-重建问题"><a href="#坑一：MySQL-8-0-Semi-Sync-重建问题" class="headerlink" title="坑一：MySQL 8.0 + Semi-Sync 重建问题"></a>坑一：MySQL 8.0 + Semi-Sync 重建问题</h4><p>xenon 原有的重建逻辑是适配于 MySQL 5.6、5.7 的（重建过程中 xenon 进程存活），一直无问题：</p><blockquote><ol><li>禁用 raft，将 xenon 状态设为 LEARNER ；</li><li>如 mysql 进程存在，则 stop mysql；</li><li>清空 MySQL 数据目录；</li><li>执行 <code>xtrabackup --backup</code>以 <code>xbstream</code>方式获取对端数据；</li><li>执行 <code>xtrabackup --prepare</code>应用 redo log；</li><li>启动 mysql；</li><li>执行 <code>stop slave; reset slave all</code>；</li><li>执行 <code>reset master</code>，以 <code>xtrabackup_binlog_info</code>文件中的 GTID 为准设置 <code>gtid_purged</code>；</li><li>启用 raft，将 xenon 状态设为 FOLLOWER 或 IDLE；</li><li>等待 xenon 自动 <code>change master to</code>到主节点。</li><li>执行 <code>start slave</code>。</li></ol></blockquote><p><strong>问题 1：为什么在 MySQL 8.0 + Semi-Sync 组合下会出现 Duplicate entry ？</strong></p><p>跟踪重建过程中的 general log，发现在第 6 和第 7 步中间，也就是设置 <code>gtid_purged</code>之前凭空多出了 <code>change master to</code> 和 <code>start slave</code> 操作：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">22</span><span class="variable">.817859</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL rpl_semi_sync_master_enabled=OFF</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">22</span><span class="variable">.818025</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL read_only = <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">22</span><span class="variable">.818143</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL super_read_only = <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">22</span><span class="variable">.818323</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     START SLAVE</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">22</span><span class="variable">.824449</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     STOP SLAVE</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">22</span><span class="variable">.824610</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     CHANGE MASTER TO MASTER_HOST = &#x27;<span class="number">192</span><span class="variable">.168</span><span class="variable">.0</span><span class="variable">.3</span>&#x27;, MASTER_USER = &#x27;qc_repl&#x27;, MASTER_PASSWORD = &lt;secret&gt;, MASTER_PORT = <span class="number">3306</span>, MASTER_AUTO_POSITION = <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">22</span><span class="variable">.833710</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     START SLAVE</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">22</span><span class="variable">.935973</span>+<span class="number">08</span>:<span class="number">00</span>           <span class="number">10</span> Query     BEGIN</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">22</span><span class="variable">.936084</span>+<span class="number">08</span>:<span class="number">00</span>           <span class="number">10</span> Query     COMMIT <span class="comment">/* implicit, from Xid_log_event */</span></span><br><span class="line">......</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">24</span><span class="variable">.701711</span>+<span class="number">08</span>:<span class="number">00</span>           <span class="number">10</span> Query     BEGIN</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">24</span><span class="variable">.701901</span>+<span class="number">08</span>:<span class="number">00</span>           <span class="number">10</span> Query     COMMIT <span class="comment">/* implicit, from Xid_log_event */</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">24</span><span class="variable">.816571</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL rpl_semi_sync_master_enabled=OFF</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">24</span><span class="variable">.816886</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL read_only = <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">24</span><span class="variable">.817177</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL super_read_only = <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">24</span><span class="variable">.817281</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     START SLAVE</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.039581</span>+<span class="number">08</span>:<span class="number">00</span>           <span class="number">10</span> Query     BEGIN</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.039749</span>+<span class="number">08</span>:<span class="number">00</span>           <span class="number">10</span> Query     COMMIT <span class="comment">/* implicit, from Xid_log_event */</span></span><br><span class="line">......</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.152919</span>+<span class="number">08</span>:<span class="number">00</span>           <span class="number">10</span> Query     BEGIN</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.153082</span>+<span class="number">08</span>:<span class="number">00</span>           <span class="number">10</span> Query     COMMIT <span class="comment">/* implicit, from Xid_log_event */</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.389776</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     STOP SLAVE</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.392581</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     RESET SLAVE ALL</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.407434</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     RESET MASTER</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.417292</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL gtid_purged=&#x27;<span class="number">6</span>b437e80-e5d5-<span class="number">11</span>ea-<span class="number">88</span>e3-<span class="number">52549922</span>fdbb:<span class="number">1</span>-<span class="number">102610</span></span><br><span class="line">&#x27;</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.419835</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     START SLAVE</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.427071</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL read_only = <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.427178</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL super_read_only = <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.427271</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL sync_binlog=<span class="number">1000</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.427339</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL innodb_flush_log_at_trx_commit=<span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.427423</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SHOW SLAVE STATUS</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">25</span><span class="variable">.427600</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SHOW MASTER STATUS</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">26</span><span class="variable">.817622</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL rpl_semi_sync_master_enabled=OFF</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">26</span><span class="variable">.817794</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL read_only = <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">26</span><span class="variable">.817897</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SET GLOBAL super_read_only = <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">26</span><span class="variable">.817988</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     START SLAVE</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">26</span><span class="variable">.818381</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SHOW SLAVE STATUS</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">26</span><span class="variable">.818570</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     SHOW MASTER STATUS</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">26</span><span class="variable">.818715</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     STOP SLAVE</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">26</span><span class="variable">.818823</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     CHANGE MASTER TO MASTER_HOST = &#x27;<span class="number">192</span><span class="variable">.168</span><span class="variable">.0</span><span class="variable">.3</span>&#x27;, MASTER_USER = &#x27;qc_repl&#x27;, MASTER_PASSWORD = &lt;secret&gt;, MASTER_PORT = <span class="number">3306</span>, MASTER_AUTO_POSITION = <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">24</span>T21:<span class="number">55</span>:<span class="number">26</span><span class="variable">.832164</span>+<span class="number">08</span>:<span class="number">00</span>            <span class="number">8</span> Query     START SLAVE</span><br></pre></td></tr></table></figure><p>这就是说在设置 gtid_purged 之前已经启用复制获取了一部分数据，那么 xtrabackup_binlog_info 中的内容就不再准确，之后设置的 GTID 与实际数据就不一致，实际的数据比设置的 GTID 要多，引起主键冲突。</p><p><strong>问题 2：为什么之前 MySQL 5.6、5.7 从没遇到过这个问题呢？</strong></p><p>测试了很多次，发现在 MySQL 5.6 &amp; 5.7 在 <code>set gtid_purged</code> 前执行 <code>change master to &amp; start slave</code> 后会报复制错误 <code>Slave failed to initialize relay log info structure from the repository</code> ，而在 <code>reset slave all; reset master、set gtid_purged</code>后再执行 <code>change master to &amp; start slave</code> 就可以正常复制，数据无误。</p><p><strong>问题 3：xenon 中哪块逻辑引起的额外的 change master to 和 start slave ？</strong></p><p>问题根源在重建期间 xenon 会设为 LEARNER 角色，而该角色在探测到 MySQL Alive 后，会 change master 到主节点。正常来说，要等 raft 状态设为 FOLLOWER 后由 FOLLOWER 的监听线程 change master 到主节点。（代码见 <a href="https://github.com/radondb/xenon/pull/104">pr104</a> 、<a href="https://github.com/radondb/xenon/pull/102">pr102</a> ）</p><h4 id="坑二：MySQL-8-0-Group-Replication-重建后无法启动-MGR"><a href="#坑二：MySQL-8-0-Group-Replication-重建后无法启动-MGR" class="headerlink" title="坑二：MySQL 8.0 + Group-Replication 重建后无法启动 MGR"></a>坑二：MySQL 8.0 + Group-Replication 重建后无法启动 MGR</h4><p>根据报错信息 <code>Slave failed to initialize relay log info structure from the repository</code>看，应该是 xtrabackup 重建后的数据目录保留了 slave 复制信息导致的，尝试在启动组复制前执行 <code>reset slave或reset slave all</code>即可解决。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><ol><li>Xtrabackup 2.4 备份后生成的 <code>xtrabackup_binlog_info</code> 文件记录的 GTID 信息是准确的，但是备份恢复后 <code>show master status</code> 显示的 GTID 是不准确的。</li><li>Xtrabackup 8.0 在备份只有 InnoDB 表的实例时，<code>xtrabackup_binlog_info</code> 文件记录的 GTID 信息不一定是准确的，但是备份恢复后 <code>show master status</code> 显示的 GTID 是准确的。</li><li>Xtrabackup 8.0 在备份有非 InnoDB 表格的实例时，<code>xtrabackup_binlog_info</code> 文件记录的 GTID 信息是准确的，备份恢复后 <code>show master status</code> 显示的 GTID 也是准确的。</li><li>使用 Xtrabackup 8.0 重建集群节点后，无需执行 <code>reset master &amp; set gtid_purged</code> 操作。</li><li>使用 Xtrabackup 8.0 重建 Group-Replication 集群节点后，启动组复制前需要先执行 <code>reset slave或reset slave all</code>清除 slave 信息，否则 <code>start group_replication</code> 会失败。</li></ol></blockquote><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本文首发于 2020-08-27 13:46:15&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;作者：卢文双 资深数据库内核研发&lt;/strong&gt;&lt;/</summary>
      
    
    
    
    <category term="MySQL" scheme="http://dbkernel.github.io/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://dbkernel.github.io/tags/MySQL/"/>
    
    <category term="问题定位" scheme="http://dbkernel.github.io/tags/%E9%97%AE%E9%A2%98%E5%AE%9A%E4%BD%8D/"/>
    
    <category term="Percona" scheme="http://dbkernel.github.io/tags/Percona/"/>
    
    <category term="Xtrabackup" scheme="http://dbkernel.github.io/tags/Xtrabackup/"/>
    
    <category term="RadonDB" scheme="http://dbkernel.github.io/tags/RadonDB/"/>
    
    <category term="Xenon" scheme="http://dbkernel.github.io/tags/Xenon/"/>
    
  </entry>
  
  <entry>
    <title>源码分析 | ClickHouse和他的朋友们（10）MergeTree Write-Ahead Log</title>
    <link href="http://dbkernel.github.io/2020/08/20/clickhouse-and-friends-10-merge-tree-wal/"/>
    <id>http://dbkernel.github.io/2020/08/20/clickhouse-and-friends-10-merge-tree-wal/</id>
    <published>2020-08-20T11:55:14.000Z</published>
    <updated>2022-07-07T02:12:17.110Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-08-20 19:55:14</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/08/18/clickhouse-and-friends-merge-tree-wal/">https://bohutang.me/2020/08/18/clickhouse-and-friends-merge-tree-wal/</a><br>以下为正文。</p></blockquote><p>数据库系统为了提高写入性能，会把数据先写到内存，等“攒”到一定程度后再回写到磁盘，比如 MySQL 的 buffer pool 机制。</p><p>因为数据先写到内存，为了数据的安全性，我们需要一个 Write-Ahead Log (WAL) 来保证内存数据的安全性。</p><p>今天我们来看看 ClickHouse 新增的 <a href="https://github.com/ClickHouse/ClickHouse/pull/8290">MergeTreeWriteAheadLog</a> 模块，它到底解决了什么问题。</p><h2 id="高频写问题"><a href="#高频写问题" class="headerlink" title="高频写问题"></a>高频写问题</h2><p>对于 ClickHouse MergeTree 引擎，每次写入(即使１条数据)都会在磁盘生成一个分区目录(part)，等着 merge 线程合并。</p><p>如果有多个客户端，每个客户端写入的数据量较少、次数较频繁的情况下，就会引发 <code>DB::Exception: Too many parts</code> 错误。</p><p>这样就对客户端有一定的要求，比如需要做 batch 写入。</p><p>或者，写入到 Buffer 引擎，定时的刷回 MergeTree，缺点是在宕机时可能会丢失数据。</p><h2 id="MergeTree-WAL"><a href="#MergeTree-WAL" class="headerlink" title="MergeTree WAL"></a>MergeTree WAL</h2><h3 id="1-默认模式"><a href="#1-默认模式" class="headerlink" title="1. 默认模式"></a>1. 默认模式</h3><p>我们先看看在没有 WAL 情况下，MergeTree 是如何写入的：</p><p><img src="mergetree-part-raw.png" alt="mergetree-part-raw.png"></p><p>每次写入 MergeTree 都会直接在磁盘上创建分区目录，并生成分区数据，这种模式其实就是 WAL + 数据的融合。</p><p>很显然，这种模式不适合频繁写操作的情况，否则会生成非常多的分区目录和文件，引发 <code>Too many parts</code> 错误。</p><h3 id="2-WAL-模式"><a href="#2-WAL-模式" class="headerlink" title="2. WAL 模式"></a>2. WAL 模式</h3><p>设置 SETTINGS: <code>min_rows_for_compact_part=2</code>，分别执行２条写 SQL，数据会先写到 wal.bin 文件：</p><p><img src="mergetree-part-wal.png" alt="mergetree-part-wal.png"></p><p>当满足 <code>min_rows_for_compact_part=2</code> 后，merger 线程触发合并操作，生成 <code>1_1_2_1</code> 分区，也就是完成了 wal.bin 里的 <code>1_1_1_0</code> 和 <code>1_2_2_0</code> 两个分区的合并操作。当我们执行第三条 SQL 写入:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> default.mt(a,b,c) <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>数据块(分区)会继续追加到 wal.bin 尾部：</p><p><img src="mergetree-part-wal-merge.png" alt="mergetree-part-wal-merge.png"></p><p>此时，3 条数据分布在两个地方：分区 <code>1_1_2_1</code>， wal.bin 里的 <code>1_3_3_0</code>。</p><p>这样就有一个问题：当我们执行查询的时候，数据是怎么合并的呢？</p><p>MergeTree 使用全局结构 <code>data_parts_indexes</code> 维护分区信息，当服务启动的时候，<code>MergeTreeData::loadDataParts</code>方法：</p><ol><li><code>data_parts_indexes.insert(1_1_2_1)</code></li><li>读取 <code>wal.bin</code>，通过 <code>getActiveContainingPart</code> 判断分区是否已经 merge 到磁盘：<code>1_1_1_0</code> 已经存在, <code>1_2_2_0</code> 已经存在，<code>data_parts_indexes.insert(1_3_3_0)</code></li><li><code>data_parts_indexes:&#123;1_1_2_1,1_3_3_0&#125;</code></li></ol><p>这样，它总是能维护全局的分区信息。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>WAL 功能在 <a href="https://github.com/ClickHouse/ClickHouse/pull/8290">PR＃8290</a> 实现，master 分支已经默认开启。</p><p>MergeTree 通过 WAL 来保护客户端的高频、少量写机制，减少服务端目录和文件数量，让客户端操作尽可能简单、高效。</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;strong&gt;本文首发于 2020-08-20 19:55:14&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《ClickHouse 和他的朋友们》系列文章转载自圈内好友 &lt;a href=&quot;https://b</summary>
      
    
    
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/categories/ClickHouse/"/>
    
    
    <category term="ClickHouse和他的朋友们" scheme="http://dbkernel.github.io/tags/ClickHouse%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/tags/ClickHouse/"/>
    
    <category term="源码分析" scheme="http://dbkernel.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="WAL" scheme="http://dbkernel.github.io/tags/WAL/"/>
    
    <category term="MergeTree" scheme="http://dbkernel.github.io/tags/MergeTree/"/>
    
  </entry>
  
  <entry>
    <title>源码分析 | ClickHouse和他的朋友们（9）MySQL实时复制与实现</title>
    <link href="http://dbkernel.github.io/2020/07/28/clickhouse-and-friends-09-mysql-replication/"/>
    <id>http://dbkernel.github.io/2020/07/28/clickhouse-and-friends-09-mysql-replication/</id>
    <published>2020-07-28T13:50:10.000Z</published>
    <updated>2022-07-07T02:12:02.194Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-07-28 21:50:10</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/07/25/clickhouse-and-friends-parser/">https://bohutang.me/2020/07/25/clickhouse-and-friends-parser/</a><br>以下为正文。</p></blockquote><p><img src="clickhouse-map-2020-materialzemysql.png" alt="clickhouse-map-2020-materialzemysql.png"></p><p>很多人看到标题还以为自己走错了夜场，其实没有。</p><p>ClickHouse 可以挂载为 MySQL 的一个从库 ，先全量再增量的实时同步 MySQL 数据，这个功能可以说是今年最亮眼、最刚需的功能，基于它我们可以轻松的打造一套企业级解决方案，让 OLTP 和 OLAP 的融合从此不再头疼。</p><p>目前支持 MySQL 5.6/5.7/8.0 版本，兼容 Delete/Update 语句，及大部分常用的 DDL 操作。</p><p><a href="https://github.com/ClickHouse/ClickHouse/pull/10851">代码</a>已经合并到 upstream master 分支，预计在 20.8 版本作为 experimental 功能发布。</p><p>毕竟是两个异构生态的融合，仍然有不少的工作要做，同时也期待着社区用户的反馈，以加速迭代。</p><h3 id="代码获取"><a href="#代码获取" class="headerlink" title="代码获取"></a>代码获取</h3><p>获取 <a href="https://github.com/ClickHouse/ClickHouse">clickhouse/master</a> 代码编译即可，方法见 <a href="https://bohutang.me/2020/06/05/clickhouse-and-friends-development/">ClickHouse 和他的朋友们（1）编译、开发、测试</a>…</p><h3 id="MySQL-Master"><a href="#MySQL-Master" class="headerlink" title="MySQL Master"></a>MySQL Master</h3><p>我们需要一个开启 binlog 的 MySQL 作为 master:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -e MYSQL_ROOT_PASSWORD=123 mysql:5.7 mysqld --datadir=/var/lib/mysql --server-id=1 --log-bin=/var/lib/mysql/mysql-bin.log --gtid-mode=ON --enforce-gtid-consistency</span><br></pre></td></tr></table></figure><p>创建数据库和表，并写入数据:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> database ckdb;</span><br><span class="line">mysql<span class="operator">&gt;</span> use ckdb;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> t1(a <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key, b <span class="type">int</span>);</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t1 <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">1</span>),(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> a <span class="operator">|</span> b    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="ClickHouse-Slave"><a href="#ClickHouse-Slave" class="headerlink" title="ClickHouse Slave"></a>ClickHouse Slave</h3><p>目前以 database 为单位进行复制，不同的 database 可以来自不同的 MySQL master，这样就可以实现多个 MySQL 源数据同步到一个 ClickHouse 做 OLAP 分析功能。</p><p>首先开启体验开关:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clickhouse :) <span class="keyword">SET</span> allow_experimental_database_materialize_mysql<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>创建一个复制通道：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">clickhouse :) <span class="keyword">CREATE</span> DATABASE ckdb ENGINE <span class="operator">=</span> MaterializeMySQL(<span class="string">&#x27;172.17.0.2:3306&#x27;</span>, <span class="string">&#x27;ckdb&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">clickhouse :) use ckdb;</span><br><span class="line">clickhouse :) <span class="keyword">show</span> tables;</span><br><span class="line">┌─name─┐</span><br><span class="line">│ t1   │</span><br><span class="line">└──────┘</span><br><span class="line">clickhouse :) <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line">┌─a─┬─b─┐</span><br><span class="line">│ <span class="number">1</span> │ <span class="number">1</span> │</span><br><span class="line">└───┴───┘</span><br><span class="line">┌─a─┬─b─┐</span><br><span class="line">│ <span class="number">2</span> │ <span class="number">2</span> │</span><br><span class="line">└───┴───┘</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> set. Elapsed: <span class="number">0.017</span> sec.</span><br></pre></td></tr></table></figure><p>看下 ClickHouse 的同步位点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat ckdatas/metadata/ckdb/.metadata</span><br><span class="line">Version:1</span><br><span class="line">Binlog File:mysql-bin.000001</span><br><span class="line">Binlog Position:913</span><br><span class="line">Data Version:0</span><br></pre></td></tr></table></figure><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>首先在 MySQL Master 上执行一个删除操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">delete</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> a<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>然后在 ClickHouse Slave 侧查看记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">clickhouse :) <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"></span><br><span class="line">┌─a─┬─b─┐</span><br><span class="line">│ <span class="number">2</span> │ <span class="number">2</span> │</span><br><span class="line">└───┴───┘</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="keyword">rows</span> <span class="keyword">in</span> set. Elapsed: <span class="number">0.032</span> sec.</span><br></pre></td></tr></table></figure><p>此时的 metadata 里 Data Version 已经递增到 2:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat ckdatas<span class="operator">/</span>metadata<span class="operator">/</span>ckdb<span class="operator">/</span>.metadata</span><br><span class="line">Version:<span class="number">1</span></span><br><span class="line">Binlog File:mysql<span class="operator">-</span>bin<span class="number">.000001</span></span><br><span class="line">Binlog Position:<span class="number">1171</span></span><br><span class="line">Data Version:<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><p>MySQL Master:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> a <span class="operator">|</span> b    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> update t1 <span class="keyword">set</span> b<span class="operator">=</span>b<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> a <span class="operator">|</span> b    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>ClickHouse Slave:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">clickhouse :) <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"></span><br><span class="line">┌─a─┬─b─┐</span><br><span class="line">│ <span class="number">2</span> │ <span class="number">3</span> │</span><br><span class="line">└───┴───┘</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="keyword">rows</span> <span class="keyword">in</span> set. Elapsed: <span class="number">0.023</span> sec.</span><br></pre></td></tr></table></figure><h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><h4 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MySQL          8C16G 云主机, 192.168.0.3，基础数据 10188183 条记录</span><br><span class="line">ClickHouse     8C16G 云主机, 192.168.0.4</span><br><span class="line">benchyou       8C8G  云主机, 192.168.0.5, 256并发写, https://github.com/xelabs/benchyou</span><br></pre></td></tr></table></figure><p>性能测试跟硬件环境有较大关系，这里使用的是云主机模式，数据供参考。</p><h4 id="全量性能"><a href="#全量性能" class="headerlink" title="全量性能"></a>全量性能</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span>c16G<span class="operator">-</span>vm :) <span class="keyword">create</span> database sbtest engine<span class="operator">=</span>MaterializeMySQL(<span class="string">&#x27;192.168.0.3:3306&#x27;</span>, <span class="string">&#x27;sbtest&#x27;</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;123&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">8</span>c16G<span class="operator">-</span>vm :) watch lv1;</span><br><span class="line"></span><br><span class="line">WATCH lv1</span><br><span class="line"></span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│       <span class="number">0</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">04</span> │        <span class="number">1</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│ <span class="number">1113585</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">05</span> │        <span class="number">2</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│ <span class="number">2227170</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">07</span> │        <span class="number">3</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│ <span class="number">3340755</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">10</span> │        <span class="number">4</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│ <span class="number">4454340</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">13</span> │        <span class="number">5</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│ <span class="number">5567925</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">16</span> │        <span class="number">6</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│ <span class="number">6681510</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">18</span> │        <span class="number">7</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│ <span class="number">7795095</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">22</span> │        <span class="number">8</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│ <span class="number">8908680</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">25</span> │        <span class="number">9</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌──<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│ <span class="number">10022265</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">28</span> │       <span class="number">10</span> │</span><br><span class="line">└──────────┴─────────────────────┴──────────┘</span><br><span class="line">┌──<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│ <span class="number">10188183</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-29</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">28</span> │       <span class="number">11</span> │</span><br><span class="line">└──────────┴─────────────────────┴──────────┘</span><br><span class="line">← Progress: <span class="number">11.00</span> <span class="keyword">rows</span>, <span class="number">220.00</span> B (<span class="number">0.16</span> <span class="keyword">rows</span><span class="operator">/</span>s., <span class="number">3.17</span> B<span class="operator">/</span>s.)</span><br></pre></td></tr></table></figure><p>在这个硬件环境下，全量同步性能大概是 <strong>424507/s</strong>，<strong>42w</strong> 事务每秒。</p><p>因为全量的数据之间没有依赖关系，可以进一步优化成并行，加速同步。</p><p>全量的性能直接决定 ClickHouse slave 坏掉后重建的速度，如果你的 MySQL 有 <strong>10 亿</strong>条数据，大概 <strong>40 分钟</strong>就可以重建完成。</p><h4 id="增量性能-实时同步"><a href="#增量性能-实时同步" class="headerlink" title="增量性能(实时同步)"></a>增量性能(实时同步)</h4><p>在当前配置下，ClickHouse slave 单线程回放消费能力大于 MySQL master 256 并发下生产能力，通过测试可以看到它们保持<strong>实时同步</strong>。</p><p>benchyou 压测数据，<strong>2.1w</strong> 事务/秒(MySQL 在当前环境下 TPS 上不去):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">./bin/benchyou --mysql-host=192.168.0.3 --mysql-user=test --mysql-password=123 --oltp-tables-count=1 --write-threads=256 --read-threads=0</span><br><span class="line"></span><br><span class="line">time            thds               tps     wtps    rtps</span><br><span class="line">[13s]        [r:0,w:256,u:0,d:0]  19962    19962   0</span><br><span class="line"></span><br><span class="line">time            thds               tps     wtps    rtps</span><br><span class="line">[14s]        [r:0,w:256,u:0,d:0]  20415    20415   0</span><br><span class="line"></span><br><span class="line">time            thds               tps     wtps    rtps</span><br><span class="line">[15s]        [r:0,w:256,u:0,d:0]  21131    21131   0</span><br><span class="line"></span><br><span class="line">time            thds               tps     wtps    rtps</span><br><span class="line">[16s]        [r:0,w:256,u:0,d:0]  21606    21606   0</span><br><span class="line"></span><br><span class="line">time            thds               tps     wtps    rtps</span><br><span class="line">[17s]        [r:0,w:256,u:0,d:0]  22505    22505   0</span><br></pre></td></tr></table></figure><p>ClickHouse 侧单线程回放能力，<strong>2.1w</strong> 事务/秒，实时同步：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">150732</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">15</span> │       <span class="number">17</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">155477</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">16</span> │       <span class="number">18</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">160222</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">16</span> │       <span class="number">19</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">164967</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">16</span> │       <span class="number">20</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">169712</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">16</span> │       <span class="number">21</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">174457</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">16</span> │       <span class="number">22</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">179202</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">17</span> │       <span class="number">23</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">183947</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">17</span> │       <span class="number">24</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">188692</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">17</span> │       <span class="number">25</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">193437</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">17</span> │       <span class="number">26</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br><span class="line">┌─<span class="built_in">count</span>()─┬───────────────now()─┬─_version─┐</span><br><span class="line">│  <span class="number">198182</span> │ <span class="number">2020</span><span class="number">-07</span><span class="number">-30</span> <span class="number">05</span>:<span class="number">17</span>:<span class="number">17</span> │       <span class="number">27</span> │</span><br><span class="line">└─────────┴─────────────────────┴──────────┘</span><br></pre></td></tr></table></figure><h3 id="实现机制"><a href="#实现机制" class="headerlink" title="实现机制"></a>实现机制</h3><p>在探讨机制之前，首先需要了解下 MySQL 的 binlog event ，主要有以下几种类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. MYSQL_QUERY_EVENT　　　　-- DDL</span><br><span class="line">2. MYSQL_WRITE_ROWS_EVENT　-- insert数据</span><br><span class="line">3. MYSQL_UPDATE_ROWS_EVENT -- update数据</span><br><span class="line">4. MYSQL_DELETE_ROWS_EVENT -- delete数据</span><br></pre></td></tr></table></figure><p>当一个事务提交后，MySQL 会把执行的 SQL 处理成相应的 binlog event，并持久化到 binlog 文件。</p><p>binlog 是 MySQL 对外输出的重要途径，只要你实现 MySQL Replication Protocol，就可以流式的消费 MySQL 生产的 binlog event，具体协议见 <a href="https://dev.mysql.com/doc/internals/en/replication-protocol.html">Replication Protocol</a>。</p><p>由于历史原因，协议繁琐而诡异，这不是本文重点。</p><p>对于 ClickHouse 消费 MySQL binlog 来说，主要有以下３个难点：</p><ul><li>DDL 兼容</li><li>Delete/Update 支持</li><li>Query 过滤</li></ul><h4 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h4><p>DDL 兼容花费了大量的代码去实现。</p><p>首先，我们看看 MySQL 的表复制到 ClickHouse 后会变成什么样子。</p><p>MySQL master:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> t1\G;</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">       <span class="keyword">Table</span>: t1</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span>: <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t1` (</span><br><span class="line">  `a` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `b` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`a`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>latin1</span><br></pre></td></tr></table></figure><p>ClickHouse slave:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ATTACH <span class="keyword">TABLE</span> t1</span><br><span class="line">(</span><br><span class="line">    `a` Int32,</span><br><span class="line">    `b` Nullable(Int32),</span><br><span class="line">    `_sign` Int8,</span><br><span class="line">    `_version` UInt64</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> ReplacingMergeTree(_version)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> intDiv(a, <span class="number">4294967</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> tuple(a)</span><br><span class="line">SETTINGS index_granularity <span class="operator">=</span> <span class="number">8192</span></span><br></pre></td></tr></table></figure><p>可以看到：</p><ul><li>默认增加了 2 个隐藏字段：<code>_sign</code>(-1 删除, 1 写入) 和 <code>_version</code>(数据版本)</li><li>引擎转换成了 ReplacingMergeTree，以 _version 作为 column version</li><li>原主键字段 a 作为排序和分区键</li></ul><p>这只是一个表的复制，其他还有非常多的 DDL 处理，比如增加列、索引等，感兴趣可以观摩 Parsers/MySQL 下代码。</p><h4 id="Update-和-Delete"><a href="#Update-和-Delete" class="headerlink" title="Update 和 Delete"></a>Update 和 Delete</h4><p>当我们在 MySQL master 执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">delete</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> a<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> update t1 <span class="keyword">set</span> b<span class="operator">=</span>b<span class="operator">+</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>ClickHouse t1 数据（把 <code>_sign</code> 和 <code>_version</code> 一并查询）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">clickhouse :) <span class="keyword">select</span> a,b,_sign, _version <span class="keyword">from</span> t1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a,</span><br><span class="line">    b,</span><br><span class="line">    _sign,</span><br><span class="line">    _version</span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"></span><br><span class="line">┌─a─┬─b─┬─_sign─┬─_version─┐</span><br><span class="line">│ <span class="number">1</span> │ <span class="number">1</span> │     <span class="number">1</span> │        <span class="number">1</span> │</span><br><span class="line">│ <span class="number">2</span> │ <span class="number">2</span> │     <span class="number">1</span> │        <span class="number">1</span> │</span><br><span class="line">└───┴───┴───────┴──────────┘</span><br><span class="line">┌─a─┬─b─┬─_sign─┬─_version─┐</span><br><span class="line">│ <span class="number">1</span> │ <span class="number">1</span> │    <span class="number">-1</span> │        <span class="number">2</span> │</span><br><span class="line">└───┴───┴───────┴──────────┘</span><br><span class="line">┌─a─┬─b─┬─_sign─┬─_version─┐</span><br><span class="line">│ <span class="number">2</span> │ <span class="number">3</span> │     <span class="number">1</span> │        <span class="number">3</span> │</span><br><span class="line">└───┴───┴───────┴──────────┘</span><br></pre></td></tr></table></figure><p>根据返回结果，可以看到是由 3 个 part 组成。</p><p>part1 由 <code>mysql&gt; insert into t1 values(1,1),(2,2)</code> 生成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─a─┬─b─┬─_sign─┬─_version─┐</span><br><span class="line">│ 1 │ 1 │     1 │        1 │</span><br><span class="line">│ 2 │ 2 │     1 │        1 │</span><br><span class="line">└───┴───┴───────┴──────────┘</span><br></pre></td></tr></table></figure><p>part2 由 <code>mysql&gt; delete from t1 where a=1</code> 生成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">┌─a─┬─b─┬─_sign─┬─_version─┐</span><br><span class="line">│ 1 │ 1 │    -1 │        2 │</span><br><span class="line">└───┴───┴───────┴──────────┘</span><br><span class="line">说明：</span><br><span class="line">_sign = -1表明处于删除状态</span><br></pre></td></tr></table></figure><p>part3 由 <code>update t1 set b=b+1</code> 生成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─a─┬─b─┬─_sign─┬─_version─┐</span><br><span class="line">│ 2 │ 3 │     1 │        3 │</span><br><span class="line">└───┴───┴───────┴──────────┘</span><br></pre></td></tr></table></figure><p>使用 final 查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">clickhouse :) <span class="keyword">select</span> a,b,_sign,_version <span class="keyword">from</span> t1 <span class="keyword">final</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a,</span><br><span class="line">    b,</span><br><span class="line">    _sign,</span><br><span class="line">    _version</span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"><span class="keyword">FINAL</span></span><br><span class="line"></span><br><span class="line">┌─a─┬─b─┬─_sign─┬─_version─┐</span><br><span class="line">│ <span class="number">1</span> │ <span class="number">1</span> │    <span class="number">-1</span> │        <span class="number">2</span> │</span><br><span class="line">└───┴───┴───────┴──────────┘</span><br><span class="line">┌─a─┬─b─┬─_sign─┬─_version─┐</span><br><span class="line">│ <span class="number">2</span> │ <span class="number">3</span> │     <span class="number">1</span> │        <span class="number">3</span> │</span><br><span class="line">└───┴───┴───────┴──────────┘</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> set. Elapsed: <span class="number">0.016</span> sec.</span><br></pre></td></tr></table></figure><p>可以看到 ReplacingMergeTree 已经根据 <code>_version</code> 和 OrderBy 对记录进行去重。</p><h4 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h4><p>MySQL master:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> a <span class="operator">|</span> b    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>ClickHouse slave:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">clickhouse :) <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"></span><br><span class="line">┌─a─┬─b─┐</span><br><span class="line">│ <span class="number">2</span> │ <span class="number">3</span> │</span><br><span class="line">└───┴───┘</span><br><span class="line"></span><br><span class="line">clickhouse :) <span class="keyword">select</span> <span class="operator">*</span>,_sign,_version <span class="keyword">from</span> t1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="operator">*</span>,</span><br><span class="line">    _sign,</span><br><span class="line">    _version</span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"></span><br><span class="line">┌─a─┬─b─┬─_sign─┬─_version─┐</span><br><span class="line">│ <span class="number">1</span> │ <span class="number">1</span> │    <span class="number">-1</span> │        <span class="number">2</span> │</span><br><span class="line">│ <span class="number">2</span> │ <span class="number">3</span> │     <span class="number">1</span> │        <span class="number">3</span> │</span><br><span class="line">└───┴───┴───────┴──────────┘</span><br><span class="line">说明：这里还有一条删除记录，_sign为<span class="number">-1</span></span><br></pre></td></tr></table></figure><p>MaterializeMySQL 被定义成一种存储引擎，所以在读取的时候，会根据 <code>_sign</code> 状态进行判断，如果是-1 则是已经删除，进行过滤。</p><h3 id="并行回放"><a href="#并行回放" class="headerlink" title="并行回放"></a>并行回放</h3><p>为什么 MySQL 需要并行回放？</p><p>假设 MySQL master 有 1024 个并发同时写入、更新数据，瞬间产生大量的 binlog event ，MySQL slave 上只有一个线程一个 event 接着一个 event 式回放，于是 MySQL 实现了并行回放功能！</p><p>那么，MySQL slave 回放时能否完全(或接近)模拟出 master 当时的 1024 并发行为呢？</p><p>要想并行首先要解决的就是依赖问题：我们需要 master 标记出哪些 event 可以并行，哪些 event 有先后关系，因为它是第一现场。</p><p>MySQL 通过在 binlog 里增加:</p><ul><li>last_committed，相同则可以并行</li><li>sequece_number，较小先执行，描述先后依赖</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">last_committed=3   sequece_number=4   -- event1</span><br><span class="line">last_committed=4   sequece_number=5   -- event2</span><br><span class="line">last_committed=4   sequece_number=6   -- event3</span><br><span class="line">last_committed=5   sequece_number=7   -- event4</span><br></pre></td></tr></table></figure><p>event2 和 event3 则可以并行，event4 需要等待前面 event 完成才可以回放。</p><p>以上只是一个大体原理，目前 MySQL 有３种并行模式可以选择：</p><ol><li>基于 database 并行</li><li>基于 group commit 并行</li><li>基于主键不冲突的 write set 并行</li></ol><p>最大程度上让 MySQL slave 加速回放，整套机制还是异常复杂的。</p><p>回到 ClickHouse slave 问题，我们采用的单线程回放，延迟已经不是主要问题，这是由它们的机制决定的：</p><ul><li>MySQL slave 回放时，需要把 binlog event 转换成 SQL，然后模拟 master 的写入，这种逻辑复制是导致性能低下的最重要原因。</li><li>而 ClickHouse 在回放上，直接把 binlog event 转换成 底层 block 结构，然后直接写入底层的存储引擎，接近于物理复制，可以理解为把 binlog event 直接回放到 InnoDB 的 page。</li></ul><h3 id="读取最新"><a href="#读取最新" class="headerlink" title="读取最新"></a>读取最新</h3><p>虽然 ClickHouse slave 回放非常快，接近于实时，如何在 ClickHouse slave 上总是读取到最新的数据呢？</p><p>其实非常简单，借助 MySQL binlog GTID 特性，每次读的时候，我们跟 ｍ aster 做一次 executed_gtid 同步，然后等待这些 executed_gtid 回放完毕即可。</p><h3 id="数据一致性"><a href="#数据一致性" class="headerlink" title="数据一致性"></a>数据一致性</h3><p>对一致性要求较高的场景，我们怎么验证 MySQL master 的数据和 ClickHouse slave 的数据一致性呢？</p><p>这块初步想法是提供一个兼容 MySQL checksum 算法的函数，我们只需对比两边的 checksum 值即可。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>ClickHouse 实时复制同步 MySQL 数据是 upstream 2020 的一个 roadmap，在整体构架上比较有挑战一直无人接单，挑战主要来自两方面：</p><ul><li>对 MySQL 复制通道与协议非常熟悉</li><li>对 ClickHouse 整体机制非常熟悉</li></ul><p>这样，在两个本来有点遥远的山头中间架起了一座高速，这条 <a href="https://github.com/ClickHouse/ClickHouse/pull/10851">10851 号</a> 高速由 zhang1024(ClickHouse 侧) 和 BohuTANG(MySQL 复制) 两个修路工联合承建，目前已经合并到 upstream 分支。</p><p>关于同步 MySQL 的数据，目前大家的方案基本都是在中间安置一个 binlog 消费工具，这个工具对 event 进行解析，然后再转换成 ClickHouse 的 SQL 语句，写到 ClickHouse server，链路较长，性能损耗较大。</p><p><a href="https://github.com/ClickHouse/ClickHouse/pull/10851">10851 号</a> 高速是在 ClickHouse 内部实现一套 binlog 消费方案，然后根据 event 解析成 ClickHouse 内部的 block 结构，再直接回写到底层存储引擎，几乎是最高效的一种实现方式，实现与 MySQL 实时同步的能力，让分析更接近现实。</p><p>基于 database 级的复制，实现了多源复制的功能，如果复制通道坏掉，我们只需在 ClickHouse 侧删掉 database 再重建一次即可，非常快速、方便，OLTP+OLAP 就是这么简单！</p><p>要想富，先修路！</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;strong&gt;本文首发于 2020-07-28 21:50:10&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《ClickHouse 和他的朋友们》系列文章转载自圈内好友 &lt;a href=&quot;https://b</summary>
      
    
    
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/categories/ClickHouse/"/>
    
    
    <category term="MySQL" scheme="http://dbkernel.github.io/tags/MySQL/"/>
    
    <category term="ClickHouse和他的朋友们" scheme="http://dbkernel.github.io/tags/ClickHouse%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/tags/ClickHouse/"/>
    
    <category term="源码分析" scheme="http://dbkernel.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>源码分析 | ClickHouse和他的朋友们 (８) 纯手工打造的SQL解析器</title>
    <link href="http://dbkernel.github.io/2020/07/26/clickhouse-and-friends-08-parser/"/>
    <id>http://dbkernel.github.io/2020/07/26/clickhouse-and-friends-08-parser/</id>
    <published>2020-07-26T13:55:10.000Z</published>
    <updated>2022-07-07T02:11:26.090Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-07-26 21:55:10</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/07/25/clickhouse-and-friends-parser/">https://bohutang.me/2020/07/25/clickhouse-and-friends-parser/</a><br>以下为正文。</p></blockquote><p>现实生活中的物品一旦被标记为“纯手工打造”，给人的第一感觉就是“上乘之品”，一个字“贵”，比如北京老布鞋。</p><p>但是在计算机世界里，如果有人告诉你 ClickHouse 的 SQL 解析器是纯手工打造的，是不是很惊讶！</p><p>这个问题引起了不少网友的关注，所以本篇聊聊 ClickHouse 的纯手工解析器，看看它们的底层工作机制及优缺点。</p><p>枯燥先从一个 SQL 开始：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> a,b <span class="keyword">FROM</span> t1</span><br></pre></td></tr></table></figure><h2 id="token"><a href="#token" class="headerlink" title="token"></a>token</h2><p>首先对 SQL 里的字符逐个做判断，然后根据其关联性做 token 分割：</p><p><img src="parser.png" alt="parser.png"></p><p>比如连续的 WordChar，那它就是 BareWord，解析函数在 <a href="https://github.com/ClickHouse/ClickHouse/blob/558f9c76306ffc4e6add8fd34c2071b64e914103/src/Parsers/Lexer.cpp#L61">Lexer::nextTokenImpl()</a>，解析调用栈：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DB::Lexer::<span class="built_in">nextTokenImpl</span>() Lexer.cpp:<span class="number">63</span></span><br><span class="line">DB::Lexer::<span class="built_in">nextToken</span>() Lexer.cpp:<span class="number">52</span></span><br><span class="line">DB::Tokens::<span class="keyword">operator</span>[](<span class="keyword">unsigned</span> <span class="keyword">long</span>) TokenIterator.h:<span class="number">36</span></span><br><span class="line">DB::TokenIterator::<span class="built_in">get</span>() TokenIterator.h:<span class="number">62</span></span><br><span class="line">DB::TokenIterator::<span class="keyword">operator</span>-&gt;() TokenIterator.h:<span class="number">64</span></span><br><span class="line">DB::<span class="built_in">tryParseQuery</span>(DB::IParser&amp;, <span class="keyword">char</span> <span class="keyword">const</span>*&amp;, <span class="keyword">char</span> <span class="keyword">const</span>*, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt;&amp;, <span class="keyword">bool</span>, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, <span class="keyword">bool</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>) parseQuery.cpp:<span class="number">224</span></span><br><span class="line">DB::<span class="built_in">parseQueryAndMovePosition</span>(DB::IParser&amp;, <span class="keyword">char</span> <span class="keyword">const</span>*&amp;, <span class="keyword">char</span> <span class="keyword">const</span>*, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, <span class="keyword">bool</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>) parseQuery.cpp:<span class="number">314</span></span><br><span class="line">DB::<span class="built_in">parseQuery</span>(DB::IParser&amp;, <span class="keyword">char</span> <span class="keyword">const</span>*, <span class="keyword">char</span> <span class="keyword">const</span>*, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>) parseQuery.cpp:<span class="number">332</span></span><br><span class="line">DB::<span class="built_in">executeQueryImpl</span>(<span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *, DB::Context &amp;, <span class="keyword">bool</span>, DB::QueryProcessingStage::Enum, <span class="keyword">bool</span>, DB::ReadBuffer *) executeQuery.cpp:<span class="number">272</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">731</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">313</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">150</span></span><br></pre></td></tr></table></figure><h2 id="ast"><a href="#ast" class="headerlink" title="ast"></a>ast</h2><p>token 是最基础的元组，他们之间没有任何关联，只是一堆生冷的词组与符号，所以我们还需对其进行<strong>语法解析</strong>，让这些 token 之间建立一定的关系，达到一个可描述的活力。</p><p>ClickHouse 在解每一个 token 的时候，会根据当前的 token 进行状态空间进行预判（parse 返回 true 则进入子状态空间继续），然后决定状态跳转，比如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN  <span class="comment">-- TokenType::BareWord</span></span><br></pre></td></tr></table></figure><p>逻辑首先会进入 Parsers/ParserQuery.cpp 的 <a href="https://github.com/ClickHouse/ClickHouse/blob/558f9c76306ffc4e6add8fd34c2071b64e914103/src/Parsers/ParserQuery.cpp#L26">ParserQuery::parseImpl</a> 方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> res = query_with_output_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || insert_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || use_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || set_role_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || set_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || system_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || create_user_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || create_role_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || create_quota_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || create_row_policy_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || create_settings_profile_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || drop_access_entity_p.<span class="built_in">parse</span>(pos, node, expected)</span><br><span class="line">    || grant_p.<span class="built_in">parse</span>(pos, node, expected);</span><br></pre></td></tr></table></figure><p>这里会对所有 query 类型进行 parse 方法的调用，直到有分支返回 true。</p><p>我们来看<strong>第一层</strong> query_with_output_p.parse <a href="https://github.com/ClickHouse/ClickHouse/blob/558f9c76306ffc4e6add8fd34c2071b64e914103/src/Parsers/ParserQueryWithOutput.cpp#L31">Parsers/ParserQueryWithOutput.cpp</a>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> parsed =</span><br><span class="line">       explain_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || select_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || show_create_access_entity_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || show_tables_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || table_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || describe_table_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || show_processlist_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || create_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || alter_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || rename_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || drop_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || check_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || kill_query_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || optimize_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || watch_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || show_access_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || show_access_entities_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || show_grants_p.<span class="built_in">parse</span>(pos, query, expected)</span><br><span class="line">    || show_privileges_p.<span class="built_in">parse</span>(pos, query, expected</span><br></pre></td></tr></table></figure><p>跳进<strong>第二层</strong> explain_p.parse <a href="https://github.com/ClickHouse/ClickHouse/blob/558f9c76306ffc4e6add8fd34c2071b64e914103/src/Parsers/ParserExplainQuery.cpp#L10">ParserExplainQuery::parseImpl</a>状态空间：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ParserExplainQuery::parseImpl</span><span class="params">(Pos &amp; pos, ASTPtr &amp; node, Expected &amp; expected)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ASTExplainQuery::ExplainKind kind;</span><br><span class="line">    <span class="keyword">bool</span> old_syntax = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_ast</span><span class="params">(<span class="string">&quot;AST&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_analyze</span><span class="params">(<span class="string">&quot;ANALYZE&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_explain</span><span class="params">(<span class="string">&quot;EXPLAIN&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_syntax</span><span class="params">(<span class="string">&quot;SYNTAX&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_pipeline</span><span class="params">(<span class="string">&quot;PIPELINE&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_plan</span><span class="params">(<span class="string">&quot;PLAN&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    ... ...</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (s_explain.<span class="built_in">ignore</span>(pos, expected))</span><br><span class="line">    &#123;</span><br><span class="line">       ... ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ... ...</span><br><span class="line"></span><br><span class="line">    ParserSelectWithUnionQuery select_p;</span><br><span class="line">    ASTPtr query;</span><br><span class="line">    <span class="keyword">if</span> (!select_p.<span class="built_in">parse</span>(pos, query, expected))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    ... ...</span><br></pre></td></tr></table></figure><p>s_explain.ignore 方法会进行一个 keyword 解析，解析出 ast node:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="comment">-- keyword</span></span><br></pre></td></tr></table></figure><p>跃进<strong>第三层</strong> select_p.parse <a href="https://github.com/ClickHouse/ClickHouse/blob/558f9c76306ffc4e6add8fd34c2071b64e914103/src/Parsers/ParserSelectWithUnionQuery.cpp#L26">ParserSelectWithUnionQuery::parseImpl</a>状态空间：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ParserSelectWithUnionQuery::parseImpl</span><span class="params">(Pos &amp; pos, ASTPtr &amp; node, Expected &amp; expected)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ASTPtr list_node;</span><br><span class="line"></span><br><span class="line">    <span class="function">ParserList <span class="title">parser</span><span class="params">(std::make_unique&lt;ParserUnionQueryElement&gt;(), std::make_unique&lt;ParserKeyword&gt;(<span class="string">&quot;UNION ALL&quot;</span>), <span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!parser.<span class="built_in">parse</span>(pos, list_node, expected))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>parser.parse 里又调用<strong>第四层</strong> <a href="https://github.com/ClickHouse/ClickHouse/blob/558f9c76306ffc4e6add8fd34c2071b64e914103/src/Parsers/ParserSelectQuery.cpp#L24">ParserSelectQuery::parseImpl</a> 状态空间：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ParserSelectQuery::parseImpl</span><span class="params">(Pos &amp; pos, ASTPtr &amp; node, Expected &amp; expected)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> select_query = std::make_shared&lt;ASTSelectQuery&gt;();</span><br><span class="line">    node = select_query;</span><br><span class="line"></span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_select</span><span class="params">(<span class="string">&quot;SELECT&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_distinct</span><span class="params">(<span class="string">&quot;DISTINCT&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_from</span><span class="params">(<span class="string">&quot;FROM&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_prewhere</span><span class="params">(<span class="string">&quot;PREWHERE&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_where</span><span class="params">(<span class="string">&quot;WHERE&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_group_by</span><span class="params">(<span class="string">&quot;GROUP BY&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_with</span><span class="params">(<span class="string">&quot;WITH&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_totals</span><span class="params">(<span class="string">&quot;TOTALS&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_having</span><span class="params">(<span class="string">&quot;HAVING&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_order_by</span><span class="params">(<span class="string">&quot;ORDER BY&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_limit</span><span class="params">(<span class="string">&quot;LIMIT&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_settings</span><span class="params">(<span class="string">&quot;SETTINGS&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_by</span><span class="params">(<span class="string">&quot;BY&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_rollup</span><span class="params">(<span class="string">&quot;ROLLUP&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_cube</span><span class="params">(<span class="string">&quot;CUBE&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_top</span><span class="params">(<span class="string">&quot;TOP&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_with_ties</span><span class="params">(<span class="string">&quot;WITH TIES&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserKeyword <span class="title">s_offset</span><span class="params">(<span class="string">&quot;OFFSET&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ParserNotEmptyExpressionList <span class="title">exp_list</span><span class="params">(<span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserNotEmptyExpressionList <span class="title">exp_list_for_with_clause</span><span class="params">(<span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="function">ParserNotEmptyExpressionList <span class="title">exp_list_for_select_clause</span><span class="params">(<span class="literal">true</span>)</span></span>;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!exp_list_for_select_clause.<span class="built_in">parse</span>(pos, select_expression_list, expected))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p><strong>第五层</strong> exp_list_for_select_clause.parse <a href="https://github.com/ClickHouse/ClickHouse/blob/558f9c76306ffc4e6add8fd34c2071b64e914103/src/Parsers/ExpressionListParsers.cpp#L520">ParserExpressionList::parseImpl</a>状态空间继续：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ParserExpressionList::parseImpl</span><span class="params">(Pos &amp; pos, ASTPtr &amp; node, Expected &amp; expected)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">ParserList</span>(</span><br><span class="line">        std::make_unique&lt;ParserExpressionWithOptionalAlias&gt;(allow_alias_without_as_keyword),</span><br><span class="line">        std::make_unique&lt;ParserToken&gt;(TokenType::Comma))</span><br><span class="line">        .<span class="built_in">parse</span>(pos, node, expected);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>… … 写不下去个鸟！</p><p>可以发现，ast parser 的时候，预先构造好状态空间，比如 select 的状态空间:</p><ol><li>expression list</li><li>from tables</li><li>where</li><li>group by</li><li>with …</li><li>order by</li><li>limit</li></ol><p>在一个状态空间內，还可以根据 parse 返回的 bool 判断是否继续进入子状态空间，一直递归解析出整个 ast。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>手工 parser 的好处是代码清晰简洁，每个细节可防可控，以及友好的错误处理，改动起来不会一发动全身。</p><p>缺点是手工成本太高，需要大量的测试来保证其正确性，还需要一些 fuzz 来保证可靠性。</p><p>好在 ClickHouse 已经实现的比较全面，即使有新的需求，在现有基础上修修补补即可。</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;strong&gt;本文首发于 2020-07-26 21:55:10&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《ClickHouse 和他的朋友们》系列文章转载自圈内好友 &lt;a href=&quot;https://b</summary>
      
    
    
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/categories/ClickHouse/"/>
    
    
    <category term="ClickHouse和他的朋友们" scheme="http://dbkernel.github.io/tags/ClickHouse%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/tags/ClickHouse/"/>
    
    <category term="源码分析" scheme="http://dbkernel.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="Parser" scheme="http://dbkernel.github.io/tags/Parser/"/>
    
  </entry>
  
  <entry>
    <title>源码分析 | ClickHouse和他的朋友们（6）MergeTree存储结构</title>
    <link href="http://dbkernel.github.io/2020/06/30/clickhouse-and-friends-06-merge-tree-disk-layout/"/>
    <id>http://dbkernel.github.io/2020/06/30/clickhouse-and-friends-06-merge-tree-disk-layout/</id>
    <published>2020-06-30T13:41:12.000Z</published>
    <updated>2022-07-07T02:11:07.822Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-06-30 21:41:12</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/06/26/clickhouse-and-friends-merge-tree-disk-layout/">https://bohutang.me/2020/06/26/clickhouse-and-friends-merge-tree-disk-layout/</a><br>以下为正文。</p></blockquote><p>上篇的 <a href="https://bohutang.me/2020/06/20/clickhouse-and-friends-merge-tree-algo/">存储引擎技术进化与 MergeTree</a> 介绍了存储算法的演进。</p><p>存储引擎是一个数据库的底盘，一定要稳和动力澎湃。</p><p>接下来我们将一起来探索下 ClickHouse MergeTree 列式存储引擎，解构下这台“跑车”最重要的部件。</p><p>所有的存储引擎，无论精良与粗制滥造，最终都是要把数据回写到磁盘，来满足存储和索引目的。</p><p>磁盘文件的构造可以说是算法的物理体现，我们甚至可以通过这些存储结构反推出其算法实现。</p><p>所以，要想深入了解一个存储引擎，最好的入手点是它的磁盘存储结构，然后再反观它的读、写机制就会有一种水到渠成的感觉。</p><p>如果这个分析顺序搞反了，会有一种生硬的感觉，网上大部分教程都是这种“生硬”式教学，本文将直击灵魂从最底层谈起，彻底搞明白４个问题：</p><ol><li>MergeTree 有哪些文件？</li><li>MergeTree 数据如何分布？</li><li>MergeTree 索引如何组织？</li><li>MergeTree 如何利用索引加速？</li></ol><p>话不多说，上表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> default.mt</span><br><span class="line">(</span><br><span class="line">    `a` Int32,</span><br><span class="line">    `b` Int32,</span><br><span class="line">    `c` Int32,</span><br><span class="line">    INDEX `idx_c` (c) TYPE minmax GRANULARITY <span class="number">1</span></span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> MergeTree</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> a</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> b</span><br><span class="line">SETTINGS index_granularity<span class="operator">=</span><span class="number">3</span></span><br></pre></td></tr></table></figure><p>造点数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> default.mt(a,b,c) <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> default.mt(a,b,c) <span class="keyword">values</span>(<span class="number">5</span>,<span class="number">2</span>,<span class="number">2</span>),(<span class="number">5</span>,<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> default.mt(a,b,c) <span class="keyword">values</span>(<span class="number">3</span>,<span class="number">10</span>,<span class="number">4</span>),(<span class="number">3</span>,<span class="number">9</span>,<span class="number">5</span>),(<span class="number">3</span>,<span class="number">8</span>,<span class="number">6</span>),(<span class="number">3</span>,<span class="number">7</span>,<span class="number">7</span>),(<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>),(<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>),(<span class="number">3</span>,<span class="number">4</span>,<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h2 id="磁盘文件"><a href="#磁盘文件" class="headerlink" title="磁盘文件"></a>磁盘文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls ckdatas/data/default/mt/</span><br><span class="line">1_4_4_0  3_6_6_0  5_5_5_0  detached  format_version.txt</span><br></pre></td></tr></table></figure><p>可以看到，生成了 3 个数据目录，每个目录在 ClickHouse 里称作一个分区(part)，目录名的前缀正是我们写入时字段 a 的值: 1,3,5，因为表分区是这样定位的：<code>PARTITION BY a</code>。</p><p>现在我们看看 a=3 分区：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls ckdatas/data/default/mt/3_6_6_0/</span><br><span class="line">a.bin  a.mrk2  b.bin  b.mrk2  c.bin  checksums.txt  c.mrk2  columns.txt  count.txt  minmax_a.idx  partition.dat  primary.idx  skp_idx_idx_c.idx  skp_idx_idx_c.mrk2</span><br></pre></td></tr></table></figure><ul><li><code>*.bin</code> 是列数据文件，按主键排序(ORDER BY)，这里是按照字段 b 进行排序</li><li><code>*.mrk2</code> mark 文件，目的是快速定位 bin 文件数据位置</li><li><code>minmax_a.idx</code> 分区键 min-max 索引文件，目的是加速分区键 a 查找</li><li><code>primay.idx</code> 主键索引文件，目的是加速主键 b 查找</li><li><code>skp_idx_idx_c.*</code> 字段 c 索引文件，目的是加速 c 的查找</li></ul><p>在磁盘上，MergeTree 只有一种物理排序，就是 ORDER BY 的主键序，其他文件(比如 .mrk/.idx)是一种逻辑加速，围绕仅有的一份物理排序，要解决的问题是：</p><p><strong>在以字段 b 物理排序上，如何实现字段 a、字段 c 的快速查找？</strong></p><p>MergeTree 引擎概括起来很简单：<br>整个数据集通过分区字段被划分为多个物理分区，每个分区內又通过逻辑文件围绕仅有的一种物理排序进行加速查找。</p><h2 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h2><h3 id="数据文件"><a href="#数据文件" class="headerlink" title="数据文件"></a>数据文件</h3><p>对于单个物理分区內的存储结构，首先要明确一点，MergeTree 的数据只有一份：<code>*.bin</code>。</p><p>a.bin 是字段 a 的数据，b.bin 是字段 b 的数据，c.bin 是字段 c 的数据，也就是大家熟悉的列存储。</p><p>各个 bin 文件以 b.bin 排序对齐（b 是排序键），如图：<br><img src="merge-tree-bin-without-granule.png" alt="merge-tree-bin-without-granule.png"></p><p>这样会有一个比较严重的问题：<br>如果 <code>*.bin</code> 文件较大，即使读取一行数据，也要加载整个 bin 文件，浪费了大量的 IO，没法忍。</p><h3 id="granule"><a href="#granule" class="headerlink" title="granule"></a>granule</h3><p>高、黑科技来了，ClickHouse MergeTree 把 bin 文件根据颗粒度(GRANULARITY)划分为多个颗粒(granule)，每个 granule 单独压缩存储。</p><p><code>SETTINGS index_granularity=3</code> 表示每 ３ 行数据为一个 granule，分区目前只有 ７ 条数据，所以被划分成 3 个 granule(三个色块)：<br><img src="merge-tree-bin-granule.png" alt="merge-tree-bin-granule.png"></p><p>为方便读取某个 granule，使用 <code>*.mrk</code> 文件记录每个 granule 的 offset，每个 granule 的 header 里会记录一些元信息，用于读取解析:<br><img src="merge-tree-bin-marker.png" alt="merge-tree-bin-marker.png"></p><p>这样，我们就可以根据 ｍ ark 文件，直接定位到想要的 granule，然后对这个单独的 granule 进行读取、校验。</p><p>目前，我们还有缺少一种映射：每个 mark 与字段值之间的对应，哪些值区间落在 mark0，哪些落在 mark1 …？</p><p>有了这个映射，就可以实现最小化读取 granule 来加速查询：</p><ol><li>根据查询条件确定需要哪些 mark</li><li>根据 mark 读取相应的 granule</li></ol><h3 id="存储排序"><a href="#存储排序" class="headerlink" title="存储排序"></a>存储排序</h3><p>在了解 MergeTree 索引机制之前，需要明白以下两点：</p><ol><li>只有一份全量数据，存储在 <code>*.bin</code> 文件</li><li><code>*.bin</code> 按照 ORDER BY 字段降序存储<br><img src="merge-tree-bin-orderby-sort.png" alt="merge-tree-bin-orderby-sort.png"></li></ol><h3 id="稀疏索引"><a href="#稀疏索引" class="headerlink" title="稀疏索引"></a>稀疏索引</h3><p>因为数据只有一份且只有一种物理排序，MergeTree 在索引设计上选择了简单、高效的稀疏索引模式。</p><p>什么是稀疏索引呢？就是从已经排序的全量数据里，间隔性的选取一些点，并记录这些点属于哪个 mark。</p><h4 id="1-primary-index"><a href="#1-primary-index" class="headerlink" title="1. primary index"></a>1. primary index</h4><p>主键索引，可通过<code>[PRIMARY KEY expr]</code>指定，默认是 ORDER BY 字段值。</p><p>注意 ClickHouse primary index 跟 MySQL primary key 不是一个概念。</p><p>在稀疏点的选择上，取每个 granule 最小值：</p><p><img src="merge-tree-primary-key.png" alt="merge-tree-primary-key.png"></p><h4 id="2-skipping-index"><a href="#2-skipping-index" class="headerlink" title="2. skipping index"></a>2. skipping index</h4><p>普通索引。</p><p><code>INDEX idx_c(c) TYPE minmax GRANULARITY 1</code> 针对字段 c 创建一个 minmax 模式索引。</p><p><code>GRANULARITY</code> 是稀疏点选择上的 granule 颗粒度，<code>GRANULARITY 1</code> 表示每 1 个 granule 选取一个：<br><img src="merge-tree-skipping-index-g1.png" alt="merge-tree-skipping-index-g1.png"></p><p>如果定义为<code>GRANULARITY 2</code> ，则 2 个 granule 选取一个：<br><img src="merge-tree-skipping-index-g2.png" alt="merge-tree-skipping-index-g2.png"></p><h4 id="3-partition-minmax-index"><a href="#3-partition-minmax-index" class="headerlink" title="3. partition minmax index"></a>3. partition minmax index</h4><p>针对分区键，MergeTree 还会创建一个 min/max 索引，来加速分区选择。</p><p><img src="merge-tree-minmax-idx.png" alt="merge-tree-minmax-idx.png"></p><h4 id="4-全景图"><a href="#4-全景图" class="headerlink" title="4. 全景图"></a>4. 全景图</h4><p><img src="merge-tree-layout.png" alt="merge-tree-layout.png"></p><h2 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h2><p>现在熟悉了 MergeTree 的存储结构，我们通过几个查询来体验下。</p><h3 id="1-分区键查询"><a href="#1-分区键查询" class="headerlink" title="1. 分区键查询"></a>1. 分区键查询</h3><p>语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> default.mt <span class="keyword">where</span> a<span class="operator">=</span><span class="number">3</span></span><br></pre></td></tr></table></figure><p>查询会直接根据 <code>a=3</code> 定位到单个分区:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;Debug&gt; InterpreterSelectQuery: MergeTreeWhereOptimizer: condition <span class="string">&quot;a = 3&quot;</span> moved to PREWHERE</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): Key condition: unknown</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): MinMax index condition: (column <span class="number">0</span> in [<span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): Selected <span class="number">1</span> parts by a, <span class="number">1</span> parts by key, <span class="number">3</span> marks by primary key, <span class="number">3</span> marks to read from <span class="number">1</span> ranges</span><br><span class="line">┌─a─┬──b─┬──c─┐</span><br><span class="line">│ <span class="number">3</span> │  <span class="number">4</span> │ <span class="number">10</span> │</span><br><span class="line">│ <span class="number">3</span> │  <span class="number">5</span> │  <span class="number">9</span> │</span><br><span class="line">│ <span class="number">3</span> │  <span class="number">6</span> │  <span class="number">8</span> │</span><br><span class="line">│ <span class="number">3</span> │  <span class="number">7</span> │  <span class="number">7</span> │</span><br><span class="line">│ <span class="number">3</span> │  <span class="number">8</span> │  <span class="number">6</span> │</span><br><span class="line">│ <span class="number">3</span> │  <span class="number">9</span> │  <span class="number">5</span> │</span><br><span class="line">│ <span class="number">3</span> │ <span class="number">10</span> │  <span class="number">4</span> │</span><br><span class="line">└───┴────┴────┘</span><br></pre></td></tr></table></figure><h3 id="2-主键索引查询"><a href="#2-主键索引查询" class="headerlink" title="2. 主键索引查询"></a>2. 主键索引查询</h3><p>语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> default.mt <span class="keyword">where</span> b<span class="operator">=</span><span class="number">5</span></span><br></pre></td></tr></table></figure><p>查询会先从 3 个分区读取 prmary.idx，然后定位到只有一个分区符合条件，找到要读取的 mark:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): Key condition: (column <span class="number">0</span> in [<span class="number">5</span>, <span class="number">5</span>])</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): MinMax index condition: unknown</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): Selected <span class="number">3</span> parts by a, <span class="number">1</span> parts by key, <span class="number">1</span> marks by primary key, <span class="number">1</span> marks to read from <span class="number">1</span> ranges</span><br><span class="line">┌─a─┬─b─┬─c─┐</span><br><span class="line">│ <span class="number">3</span> │ <span class="number">5</span> │ <span class="number">9</span> │</span><br><span class="line">└───┴───┴───┘</span><br></pre></td></tr></table></figure><h3 id="3-索引查询"><a href="#3-索引查询" class="headerlink" title="3. 索引查询"></a>3. 索引查询</h3><p>语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> default.mt <span class="keyword">where</span> c<span class="operator">=</span><span class="number">5</span></span><br></pre></td></tr></table></figure><p>查询会先从 3 个分区读取 prmary.idx 和 skp_idx_idx_c.idx 进行 granule 过滤（没用的 drop 掉），然后定位到只有 3_x_x_x 分区的一个 granule 符合条件:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;Debug&gt; InterpreterSelectQuery: MergeTreeWhereOptimizer: condition <span class="string">&quot;b = 5&quot;</span> moved to PREWHERE</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): Key condition: unknown</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): MinMax index condition: unknown</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): Index `idx_c` has dropped <span class="number">1</span> / <span class="number">1</span> granules.</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): Index `idx_c` has dropped <span class="number">1</span> / <span class="number">1</span> granules.</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): Index `idx_c` has dropped <span class="number">2</span> / <span class="number">3</span> granules.</span><br><span class="line">&lt;Debug&gt; <span class="keyword">default</span>.<span class="built_in">mt</span> (SelectExecutor): Selected <span class="number">3</span> parts by a, <span class="number">1</span> parts by key, <span class="number">5</span> marks by primary key, <span class="number">1</span> marks to read from <span class="number">1</span> ranges</span><br><span class="line">┌─a─┬─b─┬─c─┐</span><br><span class="line">│ <span class="number">3</span> │ <span class="number">9</span> │ <span class="number">5</span> │</span><br><span class="line">└───┴───┴───┘</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文从磁盘存储结构入手，分析 ClickHouse MergeTree 的存储、索引设计。</p><p>只有了解了这些底层机制，我们才好对自己的 SQL 和表结构进行优化，使其执行更加高效。</p><p>ClickHouse MergeTree 设计简单、高效，它首要解决的问题是：在一种物理排序上，如何实现快速查找。</p><p>针对这个问题，ClickHouse 使用稀疏索引来解决。</p><p>在官方 roadmap 上，列举了一个有意思的索引方向：Z-Order Indexing，目的是把多个维度编码到一维存储，当我们给出多维度条件的时候，可以快速定位到这个条件点集的空间位置，目前 ClickHouse 针对这个索引设计暂无进展。</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;strong&gt;本文首发于 2020-06-30 21:41:12&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《ClickHouse 和他的朋友们》系列文章转载自圈内好友 &lt;a href=&quot;https://b</summary>
      
    
    
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/categories/ClickHouse/"/>
    
    
    <category term="ClickHouse和他的朋友们" scheme="http://dbkernel.github.io/tags/ClickHouse%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/tags/ClickHouse/"/>
    
    <category term="源码分析" scheme="http://dbkernel.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="MergeTree" scheme="http://dbkernel.github.io/tags/MergeTree/"/>
    
  </entry>
  
  <entry>
    <title>源码分析 | ClickHouse和他的朋友们（5）存储引擎技术进化与MergeTree</title>
    <link href="http://dbkernel.github.io/2020/06/22/clickhouse-and-friends-05-merge-tree-algo/"/>
    <id>http://dbkernel.github.io/2020/06/22/clickhouse-and-friends-05-merge-tree-algo/</id>
    <published>2020-06-22T13:55:10.000Z</published>
    <updated>2022-07-07T02:10:49.942Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-06-22 21:55:10</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/06/20/clickhouse-and-friends-merge-tree-algo/">https://bohutang.me/2020/06/20/clickhouse-and-friends-merge-tree-algo/</a><br>以下为正文。</p></blockquote><p>21 世纪的第二个 10 年，虎哥已经在存储引擎一线奋战近 10 年，由于强大的兴趣驱动，这么多年来几乎不放过 arXiv 上与存储相关的每一篇 paper。</p><p>尤其是看到带有 draft 的 paper 时，有一种乞丐听到“叮当”响时的愉悦。</p><p>看 paper 这玩意就像鉴宝，多数是“赝品”，需要你有“鉴真”的本领，否则今天是张三的算法超越 xx，明儿又是王二的硬件提升了 yy，让你永远跟不上节奏 zz，湮灭在这些没有营养的技术垃圾中，浪费大好青春。</p><p>言归正传，接下来的 3 篇，跟 ClickHouse 的 MergeTree 引擎有关：</p><p><strong>上篇介绍存储引擎的技术演进史</strong>，从”远古”的 B-tree 出发推演到目前主流的技术架构。</p><p><strong><a href="https://bohutang.me/2020/06/26/clickhouse-and-friends-merge-tree-disk-layout/">中篇会从存储结构介绍 MergeTree 原理</a></strong> ，对 ClickHouse MergeTree 有一个深入的认识，如何合理设计来进行科学加速。</p><p><strong>下篇会从 MergeTree 代码出发</strong>，看看 ClickHouse MergeTree 如何实现读、写。</p><p>本文为上篇，先来个热身，相信本篇大部分内容对大家来说都比较陌生，很少人写过。</p><h2 id="地位"><a href="#地位" class="headerlink" title="地位"></a>地位</h2><p>存储引擎(事务型)在一个数据库(DBMS)中的地位如何呢？</p><p>MySQL 的商业成功可以说大部分来自于 InnoDB 引擎，Oracle 收购 InnoDB 比 MySQL 早好几年呢！</p><p>20 年前，能亲手撸一套 <a href="https://en.wikipedia.org/wiki/Algorithms_for_Recovery_and_Isolation_Exploiting_Semantics">ARIES (Algorithms for Recovery and Isolation Exploiting Semantics)</a> 规范引擎，实力还是相当震撼的，相信 Oracle 收购的不仅是 InnoDB 这个引擎，更重要的是人， InnoDB 作者在哪里，在干什么？！</p><p>Fork 出来的 MariaDB 这么多年一直找不到自己的灵魂，在 Server 层磨磨蹭蹭可谓是江河日下，只能四处收购碰碰运气，当年 TokuDB 战斗过的 commit 依在，但这些已经是历史了。</p><p>另，WiredTiger 被 MongoDB 收购并使用，对整个生态所起的作用也是无可估量的，这些发动机引擎对于一辆汽车是非常重要的。</p><p>有人问道，都已经 2020 年了，开发一个存储引擎还这么难吗？不难，但是造出来的未必有 RocksDB 好用？！</p><p>如大家所见，很多的分布式存储引擎都是基于 RocksDB 研发，可谓短期内还算明智的选择。</p><p>从工程角度来看，一个 ACID 引擎要打磨的东西非常之多，到处充斥着人力、钱力、耐心的消耗，一种可能是写到一半就停滞了(如 <a href="https://github.com/BohuTANG/nessDB">nessDB</a>)，还有一种可能是写着写着发现跟 xx 很像，沃茨法克。</p><p>当然，这里并不是鼓励大家都去基于 RocksDB 去构建自己的产品，而是要根据自己的情况去做选择。</p><h2 id="B-tree"><a href="#B-tree" class="headerlink" title="B-tree"></a>B-tree</h2><p>首先要尊称一声大爷，这个大爷年方 50，目前支撑着数据库产业的半壁江山。</p><p>50 年来不变而且人们还没有改变它的意向，这个大爷厉害的很！</p><p>鉴定一个算法的优劣，有一个学派叫 <strong>IO 复杂度分析</strong>，简单推演真假便知。</p><p>下面就用此法分析下 B-tree(traditional b-tree) 的 IO 复杂度，对读、写 IO 一目了然，真正明白读为什么快，写为什么慢，如何优化。</p><p>为了可以愉快的阅读，本文不会做任何公式推导，复杂度分析怎么可能没有公式呢！</p><h3 id="读-IO-分析"><a href="#读-IO-分析" class="headerlink" title="读 IO 分析"></a>读 IO 分析</h3><p>这里有一个 3-level 的 B-tree，每个方块代表一个 page，数字代表 page ID。</p><p><img src="btree-read.png" alt="btree-read.png"></p><p>上图 B-tree 结构是<strong>内存</strong>的一个表现形式，如果我们要读取的记录在 leaf-8 上，read-path 如蓝色箭头所示:</p><p>root-9 –&gt; branch-6 –&gt; leaf-8</p><p>下图是 B-tree 在<strong>磁盘</strong>上的存储形式，meta page 是起点:</p><p><img src="btree-read-disk.png" alt="btree-read-disk.png"></p><p>这样读取的随机 IO (假设内存里没有 page 缓存且 page 存储是随机的)总数就是(蓝色箭头):</p><p>1(meta-10)IO + 1(root-9)IO + 1(branch-6)IO + 1(leaf-8)IO = 4 次 IO，这里忽略一直缓存的 meta 和 root，就是 <strong>2</strong> 次随机 IO。<br>如果磁盘 seek 是 1ms，读取延迟就是 <strong>2ms</strong>。</p><p>通过推演就会发现，B-tree 是一种读优化(Read-Optimized)的数据结构，无论 LSM-tree 还是 Fractal-tree 等在读上只能比它慢，因为读放大(Read Amplification)问题。</p><p>存储引擎算法可谓日新月异，但是大部分都是在跟写优化(Write-Optimized)做斗争，那怕是一个常数项的优化那就是突破，自从 Fractal-tree 突破后再无来者了！</p><h3 id="写-IO-分析"><a href="#写-IO-分析" class="headerlink" title="写 IO 分析"></a>写 IO 分析</h3><p>现在写一条记录到 leaf-8。</p><p><img src="btree-update-raw.png" alt="btree-update-raw.png"></p><p>可以发现，每次写都需要先读取一遍，如上图蓝色路径所示。</p><p>假设这次写入导致 root, branch 都发生了变化，这种 in-place 的更新反映到磁盘上就是：</p><p><img src="btree-update-raw-disk.png" alt="btree-update-raw-disk.png"></p><p>基本是 <strong>2</strong> 次读 IO 和写 <strong>2</strong> 次写 IO+WAL fsync，粗略为 <strong>4</strong> 次随机 IO。</p><p>通过分析发现，B-tree 对写操作不太友好，随机 IO 次数较多，而且 in-place 更新必须增加一个 page 级的 WAL 保证失败回滚，简直是要命。</p><h3 id="Write-Optimized-B-tree"><a href="#Write-Optimized-B-tree" class="headerlink" title="Write-Optimized B-tree"></a>Write-Optimized B-tree</h3><p>说到写优化，在机械盘的年代，大家的方向基本是把随机 IO 转换为顺序 IO，充分发挥磁盘的机械优势，于是出现一种 Append-only B-tree：</p><p><img src="btree-aof.png" alt="btree-aof.png"></p><ol><li>更新生成新的 page(蓝色)</li><li>page 回写磁盘时 append only 到文件末尾</li><li>无需 page WAL，数据不 overwrite，有写放大(Write Amplification)问题，需要做空洞重利用机制</li></ol><p>Append-only B-tree 节省了回写时的 2 次随机 IO，转换为常数级(constant)的 1 次顺序 IO，写性能大幅提升，总结起来就是：</p><blockquote><p><strong>随机变顺序，空间换时间</strong></p></blockquote><p>LSM-tree, Fractal-tree 等写优化算法的核心思想也是这个，只不过其实现机制不同。</p><h2 id="LSM-trees"><a href="#LSM-trees" class="headerlink" title="LSM-trees"></a>LSM-trees</h2><p>随着 LevelDB 的问世，LSM-tree 逐渐被大家所熟知。</p><p>LSM-tree 更像一种思想，模糊了 B-tree 里 tree 的严肃性，通过文件组织成一个更加松散的 tree。</p><p>这里不谈一个具体的 LSM-tree 是 Leveled 还是 Size-tiered，只谈大体思想。</p><p><img src="lsm-tree.png" alt="lsm-tree.png"></p><h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><ol><li>先写入内存的 C0</li><li>后台线程根据规则(Leveled/Sized)进行 merge，C0 –&gt; C1, C1 –&gt; C2 … CL</li><li>写入 C0 即可返回，IO 放到后台的 Merge 过程</li><li>每次 Merge 是硬伤，动作大就抖，动作小性能不好，每次 Merge 的数据流向不明确</li><li>写放大问题</li></ol><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><ol><li>读取 C0</li><li>读取 C1 .. CL</li><li>合并记录返回</li><li>读放大问题</li></ol><h2 id="Fractal-tree"><a href="#Fractal-tree" class="headerlink" title="Fractal-tree"></a>Fractal-tree</h2><p>终于发展到了“终极”优化(目前最先进的索引算法)，Fractal-tree。</p><p>它是在 Append-only B-tree 的基础上，对每个 branch 节点增加了一个 message buffer 作为缓冲，可以看做是 LSM-tree 和 Append-only B-tree 完美合体。</p><p>相对于 LSM-tree 它的优势非常明显:<br>Merge 更加有序，数据流向非常分明，消除了 Merge 的抖动问题，大家一直寻找的 compaction 防抖方案一直存在的！</p><p>这个高科技目前只有 <a href="https://github.com/xelabs/tokudb">TokuDB</a> 在使用，这个算法可以开篇新介，这里不做累述，感兴趣的可以参考原型实现 <a href="https://github.com/BohuTANG/nessDB">nessDB</a>。</p><h2 id="Cache-oblivious"><a href="#Cache-oblivious" class="headerlink" title="Cache-oblivious"></a>Cache-oblivious</h2><p>这个词对于大部分人都是陌生的，不过别怕。</p><p>在存储引擎里，有一个数据结构非常非常重要，它负责 page 数据有序性维护，比如在一个 page 里怎么快速定位到我要的记录。</p><p>在 LevelDB 里使用 skiplist，但大部分引擎使用的是一个有序数组来表示，比如 [1, 2, 3, … 100]，然后使用二分查找。</p><p>大概 10 年前一位内核开发者发表了一篇 &lt;<a href="https://queue.acm.org/detail.cfm?id=1814327">You’re Doing It Wrong</a>&gt;，这个小文讲了一个很有意思的事情：</p><p>数据的组织形式对性能有很大的影响，因为 CPU 有 cache line。</p><p>抛开这篇文章不谈，咱们来看一张“神仙”图：</p><p><img src="veb-layout.png" alt="veb-layout.png"></p><p>这是一个 binary-tree 的 4 种 layout 表示形式，那么哪种 layout 对 CPU cache line 最友好？</p><p>也许你已经猜对了，那就是 van Emde Boas，简称 vEB。</p><p>因为它的相邻数据“扎堆”存储，point-query 和 range-query 的 cache line 可以最大化共享，skiplist 对 cache line 是非常不友好的，还可以更快！</p><p>对于 cache oblivious 数据结构，这里有一个简单的原型实现: <a href="https://github.com/BohuTANG/omt">omt</a></p><h2 id="B-tree-优化魔力象限"><a href="#B-tree-优化魔力象限" class="headerlink" title="B-tree 优化魔力象限"></a>B-tree 优化魔力象限</h2><p>写优化算法从原生的 B-tree 到 Append-only B-tree(代表作 LMDB)，又到 LSM-tree(LevelDB/RocksDB 等)，最后进化到目前最先进的 Fractal-tree (TokuDB)。</p><p>这些算法耗费了很多年才在工程上实现并被认可，研发一款存储引擎缺的不是算法而是“鉴宝”的能力，这个“宝”可能已经躺了几十年了。</p><p>其实，”科学家”们已经总结出一个 B-tree 优化魔力象限:</p><p><img src="btree-optimal-curve.png" alt="btree-optimal-curve.png"></p><p>横坐标是写性能，纵坐标是读性能，B-tree 和 Logging 数据结构分布在曲线的两个极端。</p><p>B-tree 的读性能非常好，但是写性能差。</p><p>Logging 的写性能非常好，但是读性能差(想想我们每次写都把数据追加到文件末尾，是不是很快？但是读…)。</p><p>在它们中间有一个优化曲度(Optimal Curve)。</p><p>在这个曲度上，你可以通过增加/减少一个常数(1-epsilon)来做读和写优化组合，LSM-tree/Fractal-tree 都在这个曲度之上。</p><p><img src="btree-epsilon.png" alt="btree-epsilon.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要讨论事务性引擎的技术演进，其中包含了 IO 复杂度分析，其实这个分析是基于一个 DAM(Disk Access Machine) 模型，这里不再展开。<br>这个模型要解决什么问题呢？</p><p>如果工程中涉及硬件层级关系，比如 Disk / Memory / CPU，数据在 Disk，读取(以 block 为单位)到 Memory，查找计算(cache-line)在 CPU，不同介质间性能差距又非常之大，我们怎么做才能让整体性能更优的问题。</p><p>和当今的硬件相融合，这个模型也一样适用。</p><p>最后回到 ClickHouse 的 MergeTree 引擎，它只使用了本文中的部分优化，实现也比较简洁、高效，毕竟没有事务，撸起来也没啥心理负担。</p><p><strong>随机变顺序，空间换时间</strong>， MergeTree 原理，请听下回分解。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li>[1] <a href="https://www.cs.au.dk/~gerth/papers/cacheoblivious05.pdf">Cache-Oblivious Data Structures</a></li><li>[2] <a href="https://www3.cs.stonybrook.edu/~bender/talks/2013-BenderKuszmaul-xldb-tutorial.pdf">Data Structures and Algorithms for Big Databases</a></li><li>[3] <a href="https://link.springer.com/chapter/10.1007%2F3-540-60220-8_74">The buffer tree: A new technique for optimal I/O-algorithms</a></li><li>[4] <a href="http://www.bzero.se/ldapd/btree.html">how the append-only btree works</a></li><li>[5] <a href="https://www.douban.com/note/269741273/">写优化的数据结构(1):AOF 和 b-tree 之间</a></li><li>[6] <a href="https://www.douban.com/note/269744617/">写优化的数据结构(2):buffered tree</a></li><li>[7] <a href="https://www.douban.com/note/304123656/">存储引擎数据结构优化(1):cpu bound</a></li><li>[8] <a href="https://www.douban.com/note/304349195/">存储引擎数据结构优化(2):io bound</a></li><li>[9] <a href="https://github.com/BohuTANG/nessDB">nessDB</a></li><li>[10] <a href="https://github.com/BohuTANG/omt">omt</a></li></ul><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;strong&gt;本文首发于 2020-06-22 21:55:10&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《ClickHouse 和他的朋友们》系列文章转载自圈内好友 &lt;a href=&quot;https://b</summary>
      
    
    
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/categories/ClickHouse/"/>
    
    
    <category term="ClickHouse和他的朋友们" scheme="http://dbkernel.github.io/tags/ClickHouse%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/tags/ClickHouse/"/>
    
    <category term="源码分析" scheme="http://dbkernel.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="B-Tree" scheme="http://dbkernel.github.io/tags/B-Tree/"/>
    
    <category term="LSM-Tree" scheme="http://dbkernel.github.io/tags/LSM-Tree/"/>
    
  </entry>
  
  <entry>
    <title>源码分析 | ClickHouse和他的朋友们（4）Pipeline处理器和调度器</title>
    <link href="http://dbkernel.github.io/2020/06/12/clickhouse-and-friends-04-processor/"/>
    <id>http://dbkernel.github.io/2020/06/12/clickhouse-and-friends-04-processor/</id>
    <published>2020-06-12T12:57:10.000Z</published>
    <updated>2022-07-07T02:10:34.045Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-06-12 19:57:10</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/06/11/clickhouse-and-friends-processor/">https://bohutang.me/2020/06/11/clickhouse-and-friends-processor/</a><br>以下为正文。</p></blockquote><p><strong>最后更新: 2020-08-15</strong></p><p>本文谈下 ClickHouse 核心科技：处理器 Processor 和有向无环调度器 DAG Scheduler。</p><p>这些概念并不是 ClickHouse 首创，感兴趣的同学可以关注下 <a href="https://github.com/MaterializeInc/materialize">materialize</a> 的 <a href="https://github.com/TimelyDataflow/timely-dataflow">timely-dataflow</a>，虎哥用 golang 也写过一个<a href="https://github.com/vectorengine/vectorsql/tree/master/src/processors">原型</a>。</p><p>拼的是实现细节，正是这些模块的精良设计，才有了 ClickHous e 整体的高性能。</p><h2 id="Pipeline-问题"><a href="#Pipeline-问题" class="headerlink" title="Pipeline 问题"></a>Pipeline 问题</h2><p>在传统数据库系统中，一个 Query 处理流程大体是:</p><p><img src="processor-plan.png" alt="processor-plan.png"></p><p>其中在 Plan 阶段，往往会增加一个 Pipeline 组装(一个 transformer 代表一次数据处理)：</p><p><img src="processor-transformer.png" alt="processor-transformer.png"></p><p>所有 transformer 被编排成一个流水线(pipeline)，然后交给 executor 串行式执行，每执行一个 transformer 数据集就会被加工并输出，一直到下游的 sinker。</p><p>可以看到，这种模型的优点是<strong>简单</strong>，缺点是<strong>性能低</strong>，无法发挥 CPU 的<strong>并行</strong>能力，通常叫火山模型(<strong>volcano</strong>-style)，对于 OLTP 低延迟来说足够，对于计算密集的 OLAP 来说是远远不够的，CPU 不到 100% 就是犯罪！</p><p>对于上面的例子，如果 transformer1 和 transformer2 没有交集，那么它们就可以并行处理：</p><p><img src="processor-transformer2.png" alt="processor-transformer2.png"></p><p>这样就涉及到一些比较灵魂的问题：</p><ol><li>如何实现 transformer 的灵活编排？</li><li>如何实现 transformer 间的数据同步？</li><li>如何实现 transformer 间的并行调度？</li></ol><h2 id="Processor-和-DAG-Scheduler"><a href="#Processor-和-DAG-Scheduler" class="headerlink" title="Processor 和 DAG Scheduler"></a>Processor 和 DAG Scheduler</h2><h3 id="1-Transformer-编排"><a href="#1-Transformer-编排" class="headerlink" title="1. Transformer 编排"></a>1. Transformer 编排</h3><p>ClickHouse 实现了一系列基础 transformer 模块，见 <a href="https://github.com/ClickHouse/ClickHouse/tree/master/src/Processors/Transforms">src/Processors/Transforms</a>，比如:</p><ul><li>FilterTransform – WHERE 条件过滤</li><li>SortingTransform – ORDER BY 排序</li><li>LimitByTransform – LIMIT 裁剪</li></ul><p>当我们执行:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="type">time</span> <span class="keyword">DESC</span> LIMIT <span class="number">10</span></span><br></pre></td></tr></table></figure><p>对于 ClickHouse 的 QueryPipeline 来说，它会按照以下方式进行编排组装：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">QueryPipeline::<span class="built_in">addSimpleTransform</span>(Source)</span><br><span class="line">QueryPipeline::<span class="built_in">addSimpleTransform</span>(FilterTransform)</span><br><span class="line">QueryPipeline::<span class="built_in">addSimpleTransform</span>(SortingTransform)</span><br><span class="line">QueryPipeline::<span class="built_in">addSimpleTransform</span>(LimitByTransform)</span><br><span class="line">QueryPipeline::<span class="built_in">addSimpleTransform</span>(Sinker)</span><br></pre></td></tr></table></figure><p>这样就实现了 Transformer 的编排，但是执行时数据如何进行同步呢？</p><h3 id="2-Transformer-数据同步"><a href="#2-Transformer-数据同步" class="headerlink" title="2. Transformer 数据同步"></a>2. Transformer 数据同步</h3><p>当 QueryPipeline 进行 transformer 编排时，我们还需要进行更加底层的 DAG 连通构建。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">connect</span>(Source.OutPort, FilterTransform.InPort)</span><br><span class="line"><span class="built_in">connect</span>(FilterTransform.OutPort, SortingTransform.InPort)</span><br><span class="line"><span class="built_in">connect</span>(SortingTransform.OutPort, LimitByTransform.InPort)</span><br><span class="line"><span class="built_in">connect</span>(LimitByTransform.OutPort, Sinker.InPort)</span><br></pre></td></tr></table></figure><p>这样就实现了数据的流向关系，一个 transformer 的 OutPort 对接另外一个的 InPort，就像我们现实中的水管管道一样，接口有 3 通甚至多通。</p><h3 id="3-Transformer-执行调度"><a href="#3-Transformer-执行调度" class="headerlink" title="3. Transformer 执行调度"></a>3. Transformer 执行调度</h3><p>现在管道组装起来了，那么管道内的水如何进行处理和给压流动呢？</p><p>ClickHouse 定义了一套 transform 状态，processor 根据这些状态来实现调度。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title">Status</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    NeedData  <span class="comment">// 等待数据流进入</span></span><br><span class="line">    PortFull, <span class="comment">// 管道流出端阻塞</span></span><br><span class="line">    Finished, <span class="comment">// 完成状态，退出</span></span><br><span class="line">    Ready,    <span class="comment">// 切换到 work 函数，进行逻辑处理</span></span><br><span class="line">    Async,    <span class="comment">// 切换到 schedule 函数，进行异步处理</span></span><br><span class="line">    Wait,     <span class="comment">// 等待异步处理</span></span><br><span class="line">    ExpandPipeline,      <span class="comment">// Pipeline 需要裂变</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当 source 生成数据后，它的状态会设置为 PortFull，意思是等着流入其他 transformer 的 InPort，processor 会开始调度 FilterTransformer(NeedData) 的 Prepare，进行 PullData，然后它的状态设置为 Ready，等待 processor 调度 Work 方法进行数据 Filter 处理，大家就这样靠状态让 processor 去感知，来调度和做状态迁移，直到 Finished 状态。</p><p>这里值得一提的是 ExpandPipeline 状态，它会根据 transformer 的实现，可以把一个 transformer 裂变出更多个 transformer 并行执行，达到一个爆炸效果。</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> number <span class="operator">+</span> <span class="number">1</span> <span class="keyword">FROM</span> t1;</span><br></pre></td></tr></table></figure><p>为了更加深入理解 ClickHouse 的 processor 和 scheduler 机制，我们来一个原生态的 example:</p><ol><li>一个 Source:{0,1,2,3,4}</li><li>AdderTransformer 对每个数字做加 1 操作</li><li>一个 Sinker，输出结果</li></ol><h3 id="1-Source"><a href="#1-Source" class="headerlink" title="1. Source"></a>1. Source</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySource</span> :</span> <span class="keyword">public</span> ISource</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;MySource&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MySource</span>(UInt64 end_)</span><br><span class="line">        : <span class="built_in">ISource</span>(<span class="built_in">Block</span>(&#123;ColumnWithTypeAndName&#123;ColumnUInt64::<span class="built_in">create</span>(), std::make_shared&lt;DataTypeUInt64&gt;(), <span class="string">&quot;number&quot;</span>&#125;&#125;)), <span class="built_in">end</span>(end_)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    UInt64 end;</span><br><span class="line">    <span class="keyword">bool</span> done = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Chunk <span class="title">generate</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (done)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Chunk</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        MutableColumns columns;</span><br><span class="line">        columns.<span class="built_in">emplace_back</span>(ColumnUInt64::<span class="built_in">create</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="number">0U</span>; i &lt; end; i++)</span><br><span class="line">            columns[<span class="number">0</span>]-&gt;<span class="built_in">insert</span>(i);</span><br><span class="line"></span><br><span class="line">        done = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Chunk</span>(std::<span class="built_in">move</span>(columns), end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-MyAddTransform"><a href="#2-MyAddTransform" class="headerlink" title="2. MyAddTransform"></a>2. MyAddTransform</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAddTransformer</span> :</span> <span class="keyword">public</span> IProcessor</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;MyAddTransformer&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MyAddTransformer</span>()</span><br><span class="line">        : <span class="built_in">IProcessor</span>(</span><br><span class="line">            &#123;<span class="built_in">Block</span>(&#123;ColumnWithTypeAndName&#123;ColumnUInt64::<span class="built_in">create</span>(), std::make_shared&lt;DataTypeUInt64&gt;(), <span class="string">&quot;number&quot;</span>&#125;&#125;)&#125;,</span><br><span class="line">            &#123;<span class="built_in">Block</span>(&#123;ColumnWithTypeAndName&#123;ColumnUInt64::<span class="built_in">create</span>(), std::make_shared&lt;DataTypeUInt64&gt;(), <span class="string">&quot;number&quot;</span>&#125;&#125;)&#125;)</span><br><span class="line">        , <span class="built_in">input</span>(inputs.<span class="built_in">front</span>())</span><br><span class="line">        , <span class="built_in">output</span>(outputs.<span class="built_in">front</span>())</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Status <span class="title">prepare</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (output.<span class="built_in">isFinished</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            input.<span class="built_in">close</span>();</span><br><span class="line">            <span class="keyword">return</span> Status::Finished;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!output.<span class="built_in">canPush</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            input.<span class="built_in">setNotNeeded</span>();</span><br><span class="line">            <span class="keyword">return</span> Status::PortFull;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (has_process_data)</span><br><span class="line">        &#123;</span><br><span class="line">            output.<span class="built_in">push</span>(std::<span class="built_in">move</span>(current_chunk));</span><br><span class="line">            has_process_data = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (input.<span class="built_in">isFinished</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            output.<span class="built_in">finish</span>();</span><br><span class="line">            <span class="keyword">return</span> Status::Finished;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!input.<span class="built_in">hasData</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            input.<span class="built_in">setNeeded</span>();</span><br><span class="line">            <span class="keyword">return</span> Status::NeedData;</span><br><span class="line">        &#125;</span><br><span class="line">        current_chunk = input.<span class="built_in">pull</span>(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> Status::Ready;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> num_rows = current_chunk.<span class="built_in">getNumRows</span>();</span><br><span class="line">        <span class="keyword">auto</span> result_columns = current_chunk.<span class="built_in">cloneEmptyColumns</span>();</span><br><span class="line">        <span class="keyword">auto</span> columns = current_chunk.<span class="built_in">detachColumns</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="number">0U</span>; i &lt; num_rows; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> val = columns[<span class="number">0</span>]-&gt;<span class="built_in">getUInt</span>(i);</span><br><span class="line">            result_columns[<span class="number">0</span>]-&gt;<span class="built_in">insert</span>(val+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        current_chunk.<span class="built_in">setColumns</span>(std::<span class="built_in">move</span>(result_columns), num_rows);</span><br><span class="line">        has_process_data = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">InputPort &amp; <span class="title">getInputPort</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> input; &#125;</span><br><span class="line">    <span class="function">OutputPort &amp; <span class="title">getOutputPort</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> output; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">bool</span> has_input = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">bool</span> has_process_data = <span class="literal">false</span>;</span><br><span class="line">    Chunk current_chunk;</span><br><span class="line">    InputPort &amp; input;</span><br><span class="line">    OutputPort &amp; output;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-MySink"><a href="#3-MySink" class="headerlink" title="3. MySink"></a>3. MySink</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySink</span> :</span> <span class="keyword">public</span> ISink</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;MySinker&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MySink</span>() : <span class="built_in">ISink</span>(<span class="built_in">Block</span>(&#123;ColumnWithTypeAndName&#123;ColumnUInt64::<span class="built_in">create</span>(), std::make_shared&lt;DataTypeUInt64&gt;(), <span class="string">&quot;number&quot;</span>&#125;&#125;)) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    WriteBufferFromFileDescriptor out&#123;STDOUT_FILENO&#125;;</span><br><span class="line">    FormatSettings settings;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">consume</span><span class="params">(Chunk chunk)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">size_t</span> rows = chunk.<span class="built_in">getNumRows</span>();</span><br><span class="line">        <span class="keyword">size_t</span> columns = chunk.<span class="built_in">getNumColumns</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> row_num = <span class="number">0</span>; row_num &lt; rows; ++row_num)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">writeString</span>(<span class="string">&quot;prefix-&quot;</span>, out);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">size_t</span> column_num = <span class="number">0</span>; column_num &lt; columns; ++column_num)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (column_num != <span class="number">0</span>)</span><br><span class="line">                    <span class="built_in">writeChar</span>(<span class="string">&#x27;\t&#x27;</span>, out);</span><br><span class="line">                <span class="built_in">getPort</span>()</span><br><span class="line">                    .<span class="built_in">getHeader</span>()</span><br><span class="line">                    .<span class="built_in">getByPosition</span>(column_num)</span><br><span class="line">                    .type-&gt;<span class="built_in">serializeAsText</span>(*chunk.<span class="built_in">getColumns</span>()[column_num], row_num, out, settings);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">writeChar</span>(<span class="string">&#x27;\n&#x27;</span>, out);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        out.<span class="built_in">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-DAG-Scheduler"><a href="#4-DAG-Scheduler" class="headerlink" title="4. DAG Scheduler"></a>4. DAG Scheduler</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">char</span> **)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> source0 = std::make_shared&lt;MySource&gt;(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">auto</span> add0 = std::make_shared&lt;MyAddTransformer&gt;();</span><br><span class="line">    <span class="keyword">auto</span> sinker0 = std::make_shared&lt;MySink&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Connect.</span></span><br><span class="line">    <span class="built_in">connect</span>(source0-&gt;<span class="built_in">getPort</span>(), add0-&gt;<span class="built_in">getInputPort</span>());</span><br><span class="line">    <span class="built_in">connect</span>(add0-&gt;<span class="built_in">getOutputPort</span>(), sinker0-&gt;<span class="built_in">getPort</span>());</span><br><span class="line"></span><br><span class="line">    std::vector&lt;ProcessorPtr&gt; processors = &#123;source0, add0, sinker0&#125;;</span><br><span class="line">    <span class="function">PipelineExecutor <span class="title">executor</span><span class="params">(processors)</span></span>;</span><br><span class="line">    executor.<span class="built_in">execute</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从开发者角度看还是比较复杂，状态迁移还需要开发者自己控制，不过 upstream 已经做了大量的基础工作，比如对 source 的封装 ISource，对 sink 的封装 ISink，还有一个基础的 ISimpleTransform，让开发者在上层使用 processor 时更加容易，可以积木式搭建出自己想要的 pipeline。</p><p>ClickHouse 的 transformer 数据单元是 Chunk，transformer 对上游 OutPort 流过来的 Chunk 进行加工，然后输出给下游的 InPort，图连通式的流水线并行工作，让 CPU 尽量满负荷工作。</p><p>当一个 SQL 被解析成 AST 后，ClickHouse 根据 AST 构建 Query Plan，然后根据 QueryPlan 构建出 pipeline，最后由 processor 负责调度和执行。</p><p>目前，ClickHouse 新版本已经默认开启 QueryPipeline，同时这块代码也在不停的迭代。</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;strong&gt;本文首发于 2020-06-12 19:57:10&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《ClickHouse 和他的朋友们》系列文章转载自圈内好友 &lt;a href=&quot;https://b</summary>
      
    
    
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/categories/ClickHouse/"/>
    
    
    <category term="ClickHouse和他的朋友们" scheme="http://dbkernel.github.io/tags/ClickHouse%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/tags/ClickHouse/"/>
    
    <category term="源码分析" scheme="http://dbkernel.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="DAG Scheduler" scheme="http://dbkernel.github.io/tags/DAG-Scheduler/"/>
    
    <category term="pipeline" scheme="http://dbkernel.github.io/tags/pipeline/"/>
    
    <category term="processor" scheme="http://dbkernel.github.io/tags/processor/"/>
    
  </entry>
  
  <entry>
    <title>源码分析 | ClickHouse和他的朋友们（3）MySQL Protocol和Write调用栈</title>
    <link href="http://dbkernel.github.io/2020/06/08/clickhouse-and-friends-03-mysql-protocol-write-stack/"/>
    <id>http://dbkernel.github.io/2020/06/08/clickhouse-and-friends-03-mysql-protocol-write-stack/</id>
    <published>2020-06-08T11:57:10.000Z</published>
    <updated>2022-07-07T02:10:19.401Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-06-08 19:57:10</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/06/08/clickhouse-and-friends-mysql-protocol-write-stack/">https://bohutang.me/2020/06/08/clickhouse-and-friends-mysql-protocol-write-stack/</a><br>以下为正文。</p></blockquote><p>上篇的<a href="https://dbkernel.github.io/2020/06/07/clickhouse-and-friends-02-mysql-protocol-read-stack/">MySQL Protocol 和 Read 调用</a>里介绍了 ClickHouse 一条查询语句的调用栈，本文继续介绍写的调用栈，开整。</p><h2 id="Write-请求"><a href="#Write-请求" class="headerlink" title="Write 请求"></a><strong>Write 请求</strong></h2><ol><li><p>建表:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test(a UInt8, b UInt8, c UInt8) ENGINE<span class="operator">=</span>MergeTree() <span class="keyword">PARTITION</span> <span class="keyword">BY</span> (a, b) <span class="keyword">ORDER</span> <span class="keyword">BY</span> c;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>写入数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>), (<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="调用栈分析"><a href="#调用栈分析" class="headerlink" title="调用栈分析"></a><strong>调用栈分析</strong></h2><h3 id="1-获取存储引擎-OutputStream"><a href="#1-获取存储引擎-OutputStream" class="headerlink" title="1. 获取存储引擎 OutputStream"></a>1. 获取存储引擎 OutputStream</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DB::StorageMergeTree::<span class="built_in">write</span>(std::__1::shared_ptr&lt;DB::IAST&gt; <span class="keyword">const</span>&amp;, DB::Context <span class="keyword">const</span>&amp;) StorageMergeTree.cpp:<span class="number">174</span></span><br><span class="line">DB::PushingToViewsBlockOutputStream::<span class="built_in">PushingToViewsBlockOutputStream</span>(std::__1::shared_ptr&lt;DB::IStorage&gt; <span class="keyword">const</span>&amp;, DB::Context <span class="keyword">const</span>&amp;, std::__1::shared_ptr&lt;DB::IAST&gt; <span class="keyword">const</span>&amp;, <span class="keyword">bool</span>) PushingToViewsBlockOutputStream.cpp:<span class="number">110</span></span><br><span class="line">DB::InterpreterInsertQuery::<span class="built_in">execute</span>() InterpreterInsertQuery.cpp:<span class="number">229</span></span><br><span class="line">DB::<span class="built_in">executeQueryImpl</span>(<span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *, DB::Context &amp;, <span class="keyword">bool</span>, DB::QueryProcessingStage::Enum, <span class="keyword">bool</span>, DB::ReadBuffer *) executeQuery.cpp:<span class="number">364</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">696</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">311</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">141</span></span><br></pre></td></tr></table></figure><h3 id="2-从-SQL-组装-InputStream"><a href="#2-从-SQL-组装-InputStream" class="headerlink" title="2. 从 SQL 组装 InputStream"></a>2. 从 SQL 组装 InputStream</h3><p><code>(1,1,1), (2,2,2)</code> 如何组装成 inputstream 结构呢？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DB::InputStreamFromASTInsertQuery::<span class="built_in">InputStreamFromASTInsertQuery</span>(std::__1::shared_ptr&lt;DB::IAST&gt; <span class="keyword">const</span>&amp;, DB::ReadBuffer*,</span><br><span class="line">DB::InterpreterInsertQuery::<span class="built_in">execute</span>() InterpreterInsertQuery.cpp:<span class="number">300</span></span><br><span class="line">DB::<span class="built_in">executeQueryImpl</span>(<span class="keyword">char</span> <span class="keyword">const</span>*, <span class="keyword">char</span> <span class="keyword">const</span>*, DB::Context&amp;, <span class="keyword">bool</span>, DB::QueryProcessingStage::Enum, <span class="keyword">bool</span>, DB::ReadBuffer*) executeQuery.cpp:<span class="number">386</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">313</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">150</span></span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.in = std::make_shared&lt;InputStreamFromASTInsertQuery&gt;(query_ptr, <span class="literal">nullptr</span>, query_sample_block, context, <span class="literal">nullptr</span>);</span><br><span class="line">res.in = std::make_shared&lt;NullAndDoCopyBlockInputStream&gt;(res.in, out_streams.<span class="built_in">at</span>(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>通过 NullAndDoCopyBlockInputStream 的 copyData 方法构造出 Block：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">DB::ValuesBlockInputFormat::<span class="built_in">readRow</span>(std::__1::vector&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt; &gt; &gt;&amp;, <span class="keyword">unsigned</span> <span class="keyword">long</span>) ValuesBlockInputFormat.cpp:<span class="number">93</span></span><br><span class="line">DB::ValuesBlockInputFormat::<span class="built_in">generate</span>() ValuesBlockInputFormat.cpp:<span class="number">55</span></span><br><span class="line">DB::ISource::<span class="built_in">work</span>() ISource.cpp:<span class="number">48</span></span><br><span class="line">DB::InputStreamFromInputFormat::<span class="built_in">readImpl</span>() InputStreamFromInputFormat.h:<span class="number">48</span></span><br><span class="line">DB::IBlockInputStream::<span class="built_in">read</span>() IBlockInputStream.cpp:<span class="number">57</span></span><br><span class="line">DB::InputStreamFromASTInsertQuery::<span class="built_in">readImpl</span>() InputStreamFromASTInsertQuery.h:<span class="number">31</span></span><br><span class="line">DB::IBlockInputStream::<span class="built_in">read</span>() IBlockInputStream.cpp:<span class="number">57</span></span><br><span class="line"><span class="keyword">void</span> DB::copyDataImpl&lt;DB::<span class="built_in">copyData</span>(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::atomic&lt;<span class="keyword">bool</span>&gt;*)::$_0&amp;, <span class="built_in"><span class="keyword">void</span></span> (&amp;)(DB::Block <span class="keyword">const</span>&amp;)&gt;(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, DB::<span class="built_in">copyData</span>(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::atomic&lt;<span class="keyword">bool</span>&gt;*)::$_0&amp;, <span class="built_in"><span class="keyword">void</span></span> (&amp;)(DB::Block <span class="keyword">const</span>&amp;)) copyData.cpp:<span class="number">26</span></span><br><span class="line">DB::<span class="built_in">copyData</span>(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::atomic&lt;<span class="keyword">bool</span>&gt;*) copyData.cpp:<span class="number">62</span></span><br><span class="line">DB::NullAndDoCopyBlockInputStream::<span class="built_in">readImpl</span>() NullAndDoCopyBlockInputStream.h:<span class="number">47</span></span><br><span class="line">DB::IBlockInputStream::<span class="built_in">read</span>() IBlockInputStream.cpp:<span class="number">57</span></span><br><span class="line"><span class="keyword">void</span> DB::copyDataImpl&lt;std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;&gt;(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;) copyData.cpp:<span class="number">26</span></span><br><span class="line">DB::<span class="built_in">copyData</span>(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;) copyData.cpp:<span class="number">73</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">785</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">313</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">150</span></span><br></pre></td></tr></table></figure><h3 id="3-组装-OutputStream"><a href="#3-组装-OutputStream" class="headerlink" title="3. 组装 OutputStream"></a>3. 组装 OutputStream</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DB::InterpreterInsertQuery::<span class="built_in">execute</span>() InterpreterInsertQuery.cpp:<span class="number">107</span></span><br><span class="line">DB::<span class="built_in">executeQueryImpl</span>(<span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *, DB::Context &amp;, <span class="keyword">bool</span>, DB::QueryProcessingStage::Enum, <span class="keyword">bool</span>, DB::ReadBuffer *) executeQuery.cpp:<span class="number">364</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">696</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">311</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">141</span></span><br></pre></td></tr></table></figure><p>组装顺序:</p><ol><li>NullAndDoCopyBlockInputStream</li><li>CountingBlockOutputStream</li><li>AddingDefaultBlockOutputStream</li><li>SquashingBlockOutputStream</li><li>PushingToViewsBlockOutputStream</li><li>MergeTreeBlockOutputStream</li></ol><h3 id="4-写入-OutputStream"><a href="#4-写入-OutputStream" class="headerlink" title="4. 写入 OutputStream"></a>4. 写入 OutputStream</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">DB::MergeTreeBlockOutputStream::<span class="built_in">write</span>(DB::Block <span class="keyword">const</span>&amp;) MergeTreeBlockOutputStream.cpp:<span class="number">17</span></span><br><span class="line">DB::PushingToViewsBlockOutputStream::<span class="built_in">write</span>(DB::Block <span class="keyword">const</span>&amp;) PushingToViewsBlockOutputStream.cpp:<span class="number">145</span></span><br><span class="line">DB::SquashingBlockOutputStream::<span class="built_in">finalize</span>() SquashingBlockOutputStream.cpp:<span class="number">30</span></span><br><span class="line">DB::SquashingBlockOutputStream::<span class="built_in">writeSuffix</span>() SquashingBlockOutputStream.cpp:<span class="number">50</span></span><br><span class="line">DB::AddingDefaultBlockOutputStream::<span class="built_in">writeSuffix</span>() AddingDefaultBlockOutputStream.cpp:<span class="number">25</span></span><br><span class="line">DB::CountingBlockOutputStream::<span class="built_in">writeSuffix</span>() CountingBlockOutputStream.h:<span class="number">37</span></span><br><span class="line">DB::copyDataImpl&lt;DB::<span class="built_in">copyData</span>(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::atomic&lt;<span class="keyword">bool</span>&gt;*)::&lt;<span class="built_in">lambda</span>()&gt;&amp;, <span class="built_in"><span class="keyword">void</span></span> (&amp;)(<span class="keyword">const</span> DB::Block&amp;)&gt;(DB::IBlockInputStream &amp;, DB::IBlockOutputStream &amp;, &lt;<span class="built_in">lambda</span>()&gt; &amp;, <span class="built_in"><span class="keyword">void</span></span> (&amp;)(<span class="keyword">const</span> DB::Block &amp;)) copyData.cpp:<span class="number">52</span></span><br><span class="line">DB::<span class="built_in">copyData</span>(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::atomic&lt;<span class="keyword">bool</span>&gt;*) copyData.cpp:<span class="number">138</span></span><br><span class="line">DB::NullAndDoCopyBlockInputStream::<span class="built_in">readImpl</span>() NullAndDoCopyBlockInputStream.h:<span class="number">57</span></span><br><span class="line">DB::IBlockInputStream::<span class="built_in">read</span>() IBlockInputStream.cpp:<span class="number">60</span></span><br><span class="line"><span class="keyword">void</span> DB::copyDataImpl&lt;std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;&gt;(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;) copyData.cpp:<span class="number">29</span></span><br><span class="line">DB::<span class="built_in">copyData</span>(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;) copyData.cpp:<span class="number">154</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">748</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">311</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">141</span></span><br></pre></td></tr></table></figure><p>通过 copyData 方法，让数据在 OutputStream 间层层透传，一直到 MergeTreeBlockOutputStream。</p><h3 id="5-返回-Client"><a href="#5-返回-Client" class="headerlink" title="5. 返回 Client"></a>5. 返回 Client</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DB::MySQLOutputFormat::<span class="built_in">finalize</span>() MySQLOutputFormat.cpp:<span class="number">62</span></span><br><span class="line">DB::IOutputFormat::<span class="built_in">doWriteSuffix</span>() IOutputFormat.h:<span class="number">78</span></span><br><span class="line">DB::OutputStreamToOutputFormat::<span class="built_in">writeSuffix</span>() OutputStreamToOutputFormat.cpp:<span class="number">18</span></span><br><span class="line">DB::MaterializingBlockOutputStream::<span class="built_in">writeSuffix</span>() MaterializingBlockOutputStream.h:<span class="number">22</span></span><br><span class="line"><span class="keyword">void</span> DB::copyDataImpl&lt;std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;&gt;(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;) copyData.cpp:<span class="number">52</span></span><br><span class="line">DB::<span class="built_in">copyData</span>(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;) copyData.cpp:<span class="number">154</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">748</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">311</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">141</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>), (<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>首先内核解析 SQL 语句生成 AST，根据 AST 获取 Interpreter：InterpreterInsertQuery。</p><p>其次 Interpreter 依次添加相应的 OutputStream。</p><p>然后从 InputStream 读取数据，写入到 OutputStream，stream 会层层渗透，一直写到底层的存储引擎。</p><p>最后写入到 Socket Output，返回结果。</p><p>ClickHouse 的 OutputStream 编排还是比较复杂，缺少类似 Pipeline 的调度和编排，但是由于模式比较固化，目前看还算清晰。</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;strong&gt;本文首发于 2020-06-08 19:57:10&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《ClickHouse 和他的朋友们》系列文章转载自圈内好友 &lt;a href=&quot;https://b</summary>
      
    
    
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/categories/ClickHouse/"/>
    
    
    <category term="MySQL" scheme="http://dbkernel.github.io/tags/MySQL/"/>
    
    <category term="ClickHouse和他的朋友们" scheme="http://dbkernel.github.io/tags/ClickHouse%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/tags/ClickHouse/"/>
    
    <category term="源码分析" scheme="http://dbkernel.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>源码分析 | ClickHouse和他的朋友们（2）MySQL Protocol和Read调用栈</title>
    <link href="http://dbkernel.github.io/2020/06/07/clickhouse-and-friends-02-mysql-protocol-read-stack/"/>
    <id>http://dbkernel.github.io/2020/06/07/clickhouse-and-friends-02-mysql-protocol-read-stack/</id>
    <published>2020-06-07T09:17:10.000Z</published>
    <updated>2022-07-07T02:10:01.592Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-06-07 17:17:10</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/06/07/clickhouse-and-friends-mysql-protocol-read-stack/">https://bohutang.me/2020/06/07/clickhouse-and-friends-mysql-protocol-read-stack/</a><br>以下为正文。</p></blockquote><p>作为一个 OLAP 的 DBMS 来说，有 2 个端非常重要：</p><ul><li>用户如何方便的链进来，这是入口端<ul><li>ClickHouse 除了自己的 client 外，还提供了 MySQL/PG/GRPC/HTTP 等接入方式</li></ul></li><li>数据如何方便的挂上去，这是数据源端<ul><li>ClickHouse 除了自己的引擎外，还可以挂载 MySQL/Kafka 等外部数据源</li></ul></li></ul><p>这样内外互通，多条朋友多条路，以实现“数据”级的编排能力。</p><p>今天谈的是入口端的 MySQL 协议，也是本系列 ClickHouse 的第一个好朋友，用户可通过 MySQL 客户端或相关 Driver 直接链接到 ClickHouse，进行数据读写等操作。</p><p>本文通过 MySQL 的 Query 请求，借用调用栈来了解下 ClickHouse 的数据读取全过程。</p><h2 id="如何实现？"><a href="#如何实现？" class="headerlink" title="如何实现？"></a><strong>如何实现？</strong></h2><p>入口文件在:<br><a href="https://github.com/ClickHouse/ClickHouse/blob/master/src/Server/MySQLHandler.cpp">MySQLHandler.cpp</a></p><h3 id="握手协议"><a href="#握手协议" class="headerlink" title="握手协议"></a><strong>握手协议</strong></h3><ol><li>MySQLClient 发送 Greeting 数据报文到 MySQLHandler</li><li>MySQLHandler 回复一个 Greeting-Response 报文</li><li>MySQLClient 发送认证报文</li><li>MySQLHandler 对认证报文进行鉴权，并返回鉴权结果</li></ol><p>MySQL Protocol 实现在: <a href="https://github.com/ClickHouse/ClickHouse/blob/master/src/Core/MySQLProtocol.h">Core/MySQLProtocol.h</a></p><blockquote><p>最近的代码中调整为了 <a href="https://github.com/ClickHouse/ClickHouse/blob/master/src/Core/MySQL/PacketsProtocolText.h">Core/MySQL/PacketsProtocolText.h</a></p></blockquote><h3 id="Query-请求"><a href="#Query-请求" class="headerlink" title="Query 请求"></a><strong>Query 请求</strong></h3><p>当认证通过后，就可以进行正常的数据交互了。</p><ol><li><p>当 MySQLClient 发送请求:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> system.numbers LIMIT <span class="number">5</span>;</span><br></pre></td></tr></table></figure></li><li><p>MySQLHandler 的调用栈：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-&gt;MySQLHandler::comQuery -&gt; executeQuery -&gt; pipeline-&gt;execute -&gt; MySQLOutputFormat::consume</span><br></pre></td></tr></table></figure></li><li><p>MySQLClient 接收到结果</p></li></ol><p>在步骤 2 里，executeQuery(executeQuery.cpp)非常重要。</p><p>它是所有前端 Server 和 ClickHouse 内核的接入口，第一个参数是 SQL 文本(‘select 1’)，第二个参数是结果集要发送到哪里去(socket net)。</p><h2 id="调用栈分析"><a href="#调用栈分析" class="headerlink" title="调用栈分析"></a><strong>调用栈分析</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM system.numbers LIMIT 5</span><br></pre></td></tr></table></figure><h3 id="1-获取数据源"><a href="#1-获取数据源" class="headerlink" title="1. 获取数据源"></a>1. 获取数据源</h3><p>StorageSystemNumbers 数据源：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DB::StorageSystemNumbers::<span class="built_in">read</span>(std::__1::vector&lt;std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; &gt; &gt; <span class="keyword">const</span>&amp;, std::__1::shared_ptr&lt;DB::StorageInMemoryMetadata <span class="keyword">const</span>&gt; <span class="keyword">const</span>&amp;, DB::SelectQueryInfo <span class="keyword">const</span>&amp;, DB::Context <span class="keyword">const</span>&amp;, DB::QueryProcessingStage::Enum, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span>) StorageSystemNumbers.cpp:<span class="number">135</span></span><br><span class="line">DB::ReadFromStorageStep::<span class="built_in">ReadFromStorageStep</span>(std::__1::shared_ptr&lt;DB::RWLockImpl::LockHolderImpl&gt;, std::__1::shared_ptr&lt;DB::StorageInMemoryMetadata <span class="keyword">const</span>&gt;&amp;, DB::SelectQueryOptions,</span><br><span class="line">DB::InterpreterSelectQuery::<span class="built_in">executeFetchColumns</span>(DB::QueryProcessingStage::Enum, DB::QueryPlan&amp;, std::__1::shared_ptr&lt;DB::PrewhereInfo&gt; <span class="keyword">const</span>&amp;, std::__1::vector&lt;std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; &gt; &gt; <span class="keyword">const</span>&amp;) memory:<span class="number">3028</span></span><br><span class="line">DB::InterpreterSelectQuery::<span class="built_in">executeFetchColumns</span>(DB::QueryProcessingStage::Enum, DB::QueryPlan&amp;, std::__1::shared_ptr&lt;DB::PrewhereInfo&gt; <span class="keyword">const</span>&amp;, std::__1::vector&lt;std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; &gt; &gt; <span class="keyword">const</span>&amp;) InterpreterSelectQuery.cpp:<span class="number">1361</span></span><br><span class="line">DB::InterpreterSelectQuery::<span class="built_in">executeImpl</span>(DB::QueryPlan&amp;, std::__1::shared_ptr&lt;DB::IBlockInputStream&gt; <span class="keyword">const</span>&amp;, std::__1::optional&lt;DB::Pipe&gt;) InterpreterSelectQuery.cpp:<span class="number">791</span></span><br><span class="line">DB::InterpreterSelectQuery::<span class="built_in">buildQueryPlan</span>(DB::QueryPlan&amp;) InterpreterSelectQuery.cpp:<span class="number">472</span></span><br><span class="line">DB::InterpreterSelectWithUnionQuery::<span class="built_in">buildQueryPlan</span>(DB::QueryPlan&amp;) InterpreterSelectWithUnionQuery.cpp:<span class="number">183</span></span><br><span class="line">DB::InterpreterSelectWithUnionQuery::<span class="built_in">execute</span>() InterpreterSelectWithUnionQuery.cpp:<span class="number">198</span></span><br><span class="line">DB::<span class="built_in">executeQueryImpl</span>(<span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *, DB::Context &amp;, <span class="keyword">bool</span>, DB::QueryProcessingStage::Enum, <span class="keyword">bool</span>, DB::ReadBuffer *) executeQuery.cpp:<span class="number">385</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;,</span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">307</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">141</span></span><br></pre></td></tr></table></figure><p>这里最主要的是 ReadFromStorageStep 函数，从不同 storage 里获取数据源 pipe:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pipes pipes = storage-&gt;<span class="built_in">read</span>(required_columns, metadata_snapshot, query_info, *context, processing_stage, max_block_size, max_streams);</span><br></pre></td></tr></table></figure><h3 id="2-Pipeline-构造"><a href="#2-Pipeline-构造" class="headerlink" title="2. Pipeline 构造"></a>2. Pipeline 构造</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DB::LimitTransform::<span class="built_in">LimitTransform</span>(DB::Block <span class="keyword">const</span>&amp;, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">bool</span>, <span class="keyword">bool</span>, std::__1::vector&lt;DB::SortColumnDescription, std::__1::allocator&lt;DB::SortColumnDescription&gt; &gt;) LimitTransform.cpp:<span class="number">21</span></span><br><span class="line">DB::LimitStep::<span class="built_in">transformPipeline</span>(DB::QueryPipeline&amp;) memory:<span class="number">2214</span></span><br><span class="line">DB::LimitStep::<span class="built_in">transformPipeline</span>(DB::QueryPipeline&amp;) memory:<span class="number">2299</span></span><br><span class="line">DB::LimitStep::<span class="built_in">transformPipeline</span>(DB::QueryPipeline&amp;) memory:<span class="number">3570</span></span><br><span class="line">DB::LimitStep::<span class="built_in">transformPipeline</span>(DB::QueryPipeline&amp;) memory:<span class="number">4400</span></span><br><span class="line">DB::LimitStep::<span class="built_in">transformPipeline</span>(DB::QueryPipeline&amp;) LimitStep.cpp:<span class="number">33</span></span><br><span class="line">DB::ITransformingStep::<span class="built_in">updatePipeline</span>(std::__1::vector&lt;std::__1::unique_ptr&lt;DB::QueryPipeline, std::__1::default_delete&lt;DB::QueryPipeline&gt; &gt;, std::__1::allocator&lt;std::__1::unique_ptr&lt;DB::QueryPipeline, std::__1::default_delete&lt;DB::QueryPipeline&gt; &gt; &gt; &gt;) ITransformingStep.cpp:<span class="number">21</span></span><br><span class="line">DB::QueryPlan::<span class="built_in">buildQueryPipeline</span>() QueryPlan.cpp:<span class="number">154</span></span><br><span class="line">DB::InterpreterSelectWithUnionQuery::<span class="built_in">execute</span>() InterpreterSelectWithUnionQuery.cpp:<span class="number">200</span></span><br><span class="line">DB::<span class="built_in">executeQueryImpl</span>(<span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *, DB::Context &amp;, <span class="keyword">bool</span>, DB::QueryProcessingStage::Enum, <span class="keyword">bool</span>, DB::ReadBuffer *) executeQuery.cpp:<span class="number">385</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">722</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">307</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">141</span></span><br></pre></td></tr></table></figure><h3 id="3-Pipeline-执行"><a href="#3-Pipeline-执行" class="headerlink" title="3. Pipeline 执行"></a>3. Pipeline 执行</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">DB::LimitTransform::<span class="built_in">prepare</span>(std::__1::vector&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::allocator&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::vector&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::allocator&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span>&gt; &gt; <span class="keyword">const</span>&amp;) LimitTransform.cpp:<span class="number">67</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">prepareProcessor</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, std::__1::unique_lock&lt;std::__1::mutex&gt;) PipelineExecutor.cpp:<span class="number">291</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">tryAddProcessorToStackIfUpdated</span>(DB::PipelineExecutor::Edge&amp;, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, <span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">264</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">prepareProcessor</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, std::__1::unique_lock&lt;std::__1::mutex&gt;) PipelineExecutor.cpp:<span class="number">373</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">tryAddProcessorToStackIfUpdated</span>(DB::PipelineExecutor::Edge&amp;, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, <span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">264</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">prepareProcessor</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, std::__1::unique_lock&lt;std::__1::mutex&gt;) PipelineExecutor.cpp:<span class="number">373</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">tryAddProcessorToStackIfUpdated</span>(DB::PipelineExecutor::Edge&amp;, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, <span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">264</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">prepareProcessor</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, std::__1::unique_lock&lt;std::__1::mutex&gt;) PipelineExecutor.cpp:<span class="number">373</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">tryAddProcessorToStackIfUpdated</span>(DB::PipelineExecutor::Edge&amp;, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, <span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">264</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">prepareProcessor</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, std::__1::unique_lock&lt;std::__1::mutex&gt;) PipelineExecutor.cpp:<span class="number">373</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">tryAddProcessorToStackIfUpdated</span>(DB::PipelineExecutor::Edge&amp;, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, <span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">264</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">prepareProcessor</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, std::__1::unique_lock&lt;std::__1::mutex&gt;) PipelineExecutor.cpp:<span class="number">373</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">initializeExecution</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">747</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">executeImpl</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">764</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">execute</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">479</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">833</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">307</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">141</span></span><br></pre></td></tr></table></figure><h3 id="4-Output-执行发送"><a href="#4-Output-执行发送" class="headerlink" title="4. Output 执行发送"></a>4. Output 执行发送</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DB::MySQLOutputFormat::<span class="built_in">consume</span>(DB::Chunk) MySQLOutputFormat.cpp:<span class="number">53</span></span><br><span class="line">DB::IOutputFormat::<span class="built_in">work</span>() IOutputFormat.cpp:<span class="number">62</span></span><br><span class="line">DB::<span class="built_in">executeJob</span>(DB::IProcessor *) PipelineExecutor.cpp:<span class="number">155</span></span><br><span class="line"><span class="built_in"><span class="keyword">operator</span></span>() PipelineExecutor.cpp:<span class="number">172</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">executeStepImpl</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::atomic&lt;<span class="keyword">bool</span>&gt;*) PipelineExecutor.cpp:<span class="number">630</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">executeSingleThread</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">546</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">executeImpl</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">812</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">execute</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">479</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">800</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">311</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">141</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>ClickHouse 的模块化比较清晰，像乐高积木一样可以组合拼装，当我们执行:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> system.numbers LIMIT <span class="number">5</span></span><br></pre></td></tr></table></figure><p>首先内核解析 SQL 语句生成 AST，然后根据 AST 获取数据源 Source，pipeline.Add(Source)。</p><p>其次根据 AST 信息生成 QueryPlan，根据 QueryPlan 再生成相应的 Transform，pipeline.Add(LimitTransform)。</p><p>然后添加 Output Sink 作为数据发送对象，pipeline.Add(OutputSink)。</p><p>执行 pipeline, 各个 Transformer 开始工作。</p><p>ClickHouse 的 Transformer 调度系统叫做 Processor，也是决定性能的重要模块，详情见 <a href="https://bohutang.me/2020/06/11/clickhouse-and-friends-processor/">Pipeline 处理器和调度器</a>。</p><p>ClickHouse 是一辆手动挡的豪华跑车，免费拥有，海啸们！</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;strong&gt;本文首发于 2020-06-07 17:17:10&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《ClickHouse 和他的朋友们》系列文章转载自圈内好友 &lt;a href=&quot;https://b</summary>
      
    
    
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/categories/ClickHouse/"/>
    
    
    <category term="MySQL" scheme="http://dbkernel.github.io/tags/MySQL/"/>
    
    <category term="ClickHouse和他的朋友们" scheme="http://dbkernel.github.io/tags/ClickHouse%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/tags/ClickHouse/"/>
    
    <category term="源码分析" scheme="http://dbkernel.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>源码分析 | ClickHouse和他的朋友们（1）编译、开发、测试</title>
    <link href="http://dbkernel.github.io/2020/06/05/clickhouse-and-friends-01-development/"/>
    <id>http://dbkernel.github.io/2020/06/05/clickhouse-and-friends-01-development/</id>
    <published>2020-06-05T11:37:10.000Z</published>
    <updated>2022-07-07T02:09:42.180Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><strong>本文首发于 2020-06-05 19:37:10</strong></p><blockquote><p>《ClickHouse 和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/06/05/clickhouse-and-friends-development/">https://bohutang.me/2020/06/05/clickhouse-and-friends-development/</a><br>以下为正文。</p></blockquote><p>一次偶然的机会，和 ClickHouse 团队做了一次线下沟通，Alexey 提到 ClickHouse 的设计哲学:</p><ol><li>The product must solve actual problem</li><li>And do it better than others</li></ol><p>用工程思维解决商业问题的典范啊！</p><p>对用户来说，他们关心的不是什么天花乱坠、上天入地的高科技，只是需要一个能很好解决自己问题的方案，这在开源社区是非常难得的，靠实力“野蛮式”生长。</p><p>于是，我对这个散发着伏特加味道的利器充满了好奇，并参与到 ClickHouse 的社区中一探究竟，第一感觉是开放、友好、战斗力强(AK47 vs CK16, ClickHouse 2016 年开源)。</p><p>本文先从编译和测试入手，再到如何为社区贡献 Patch，希望对那些想参与 CK 社区的同学有所帮助。</p><h2 id="如何本地编译和测试-ClickHouse？"><a href="#如何本地编译和测试-ClickHouse？" class="headerlink" title="如何本地编译和测试 ClickHouse？"></a><strong>如何本地编译和测试 ClickHouse？</strong></h2><h3 id="源码获取"><a href="#源码获取" class="headerlink" title="源码获取"></a><strong>源码获取</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --recursive https://github.com/ClickHouse/ClickHouse</span><br></pre></td></tr></table></figure><h3 id="编译准备"><a href="#编译准备" class="headerlink" title="编译准备"></a><strong>编译准备</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install build-essential</span><br><span class="line">sudo apt-get install software-properties-common</span><br><span class="line">sudo apt-add-repository ppa:ubuntu-toolchain-r/<span class="built_in">test</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install gcc-9 g++-9 git python ninja-build</span><br><span class="line">sudo snap install cmake</span><br></pre></td></tr></table></figure><h3 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a><strong>开始编译</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ClickHouse</span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"><span class="built_in">export</span> CC=gcc-9</span><br><span class="line"><span class="built_in">export</span> CXX=g++-9</span><br><span class="line">cmake ..</span><br><span class="line">ninja</span><br></pre></td></tr></table></figure><h3 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a><strong>测试方法</strong></h3><p>ClickHouse 的测试在官方<a href="https://github.com/ClickHouse/ClickHouse/blob/master/docs/en/development/tests.md">development/tests</a>文档里有详细的介绍，这里列举 3 个常用的测试模式：</p><h4 id="1-Functional-Tests"><a href="#1-Functional-Tests" class="headerlink" title="1. Functional Tests"></a>1. Functional Tests</h4><p>功能测试，主要用于 ClickHouse 内部功能测试，方式：输入一个 sql 文件，输出一个 result，类似 MySQL 里的 mtr，<a href="https://github.com/ClickHouse/ClickHouse/tree/master/tests/queries">测试集合</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> tests</span><br><span class="line">./clickhouse-test -c <span class="string">&quot;../build/programs/clickhouse-client&quot;</span> 00001_select_1</span><br></pre></td></tr></table></figure><h4 id="2-Integration-Tests"><a href="#2-Integration-Tests" class="headerlink" title="2. Integration Tests"></a>2. Integration Tests</h4><p>集成测试，主要用于涉及第三方服务的测试，比如 MySQL/Postgres/MongoDB 等，以容器化方式编排调度(pytest)运行，<a href="https://github.com/ClickHouse/ClickHouse/tree/master/tests/integration">测试集合</a></p><p>由于涉及模块较多，集成测试环境的搭建有一定的难度，建议使用官方的 docker 镜像。比如要跑 test_mysql_protocol 下的集成测试集：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> tests/integration</span><br><span class="line">docker pull yandex/clickhouse-integration-tests-runner</span><br><span class="line">./runner --binary /your/ClickHouse/build/programs/clickhouse  --bridge-binary /your/ClickHouse/build/programs/clickhouse-odbc-bridge --configs-dir /your/ClickHouse/programs/server/ <span class="string">&#x27;test_mysql_protocol/test.py::test_java_client -ss -vv&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="3-Unit-Tests"><a href="#3-Unit-Tests" class="headerlink" title="3. Unit Tests"></a>3. Unit Tests</h4><p>单元测试，主要用于代码模块的测试，测试集在各个模块的 tests 目录，比如: <a href="https://github.com/ClickHouse/ClickHouse/tree/master/src/Core/tests">Core/tests</a></p><p>如果大家想了解某个模块是如何工作的，强烈建议去翻翻该模块的 tests 目录，比如想了解 processor 的工作机制，跟踪调试 <a href="https://github.com/ClickHouse/ClickHouse/blob/master/src/Processors/tests/processors_test.cpp">Processors/tests/</a> 即可。</p><h2 id="如何给-ClickHouse-社区提-Patch？"><a href="#如何给-ClickHouse-社区提-Patch？" class="headerlink" title="如何给 ClickHouse 社区提 Patch？"></a><strong>如何给 ClickHouse 社区提 Patch？</strong></h2><h4 id="1-fork"><a href="#1-fork" class="headerlink" title="1. fork"></a>1. fork</h4><p>首先在自己的 github 上 fork 一份 ClickHouse 代码，比如 <a href="https://github.com/BohuTANG/ClickHouse">https://github.com/BohuTANG/ClickHouse</a></p><h4 id="2-clone-到本地"><a href="#2-clone-到本地" class="headerlink" title="2. clone 到本地"></a>2. clone 到本地</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/BohuTANG/ClickHouse</span><br><span class="line">git checkout -B mysql_replica(branch名字)</span><br></pre></td></tr></table></figure><h4 id="3-创建新的分支"><a href="#3-创建新的分支" class="headerlink" title="3. 创建新的分支"></a>3. 创建新的分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -B mysql_replica(branch名字)</span><br></pre></td></tr></table></figure><h4 id="4-功能开发"><a href="#4-功能开发" class="headerlink" title="4. 功能开发"></a>4. 功能开发</h4><p>开发者可以提交一个 Draft Pull Request 到官方，github 会显示这个 Pull Request 处于 Draft 状态，官方是无法 Merge 的</p><h4 id="5-can-be-testd-标签"><a href="#5-can-be-testd-标签" class="headerlink" title="5. can be testd 标签"></a>5. can be testd 标签</h4><p>等待 Upstream 打[can be tested]标签，一旦被标记 CI 狂魔们就强势开跑，跑一轮大概需要几十个小时。<br>协助开发者发现一些代码 Style、编译以及测试等错误，这样开发者就可以在自己的分支不停的迭代、修正。<br><img src="github-ck-ci.jpeg" alt="img"></p><p>如果只是修改 typo，这个标签 Upstream 通常不会添加。</p><h4 id="6-开发完毕"><a href="#6-开发完毕" class="headerlink" title="6. 开发完毕"></a>6. 开发完毕</h4><p>开发完成，测试 OK，把 Draft 提升为正式 Pull Request，等待 Upstraem Review。</p><h4 id="7-Merge-到-Master"><a href="#7-Merge-到-Master" class="headerlink" title="7. Merge 到 Master"></a>7. Merge 到 Master</h4><p>如果 Upstream 通过，你的代码会被 Merge 到 Master，恭喜你成为 ClickHouse 贡献者</p><h4 id="8-注意事项"><a href="#8-注意事项" class="headerlink" title="8. 注意事项"></a>8. 注意事项</h4><p>ClickHouse Upstream 迭代非常快，一定要多关注 master 分支进度，尽量保持自己的分支代码与 master 同步。否则 Upstream Docker 更新，自己的 test 可能就过不了。</p><p>建议把<a href="https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/development">doc/development</a>读一遍。</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;strong&gt;本文首发于 2020-06-05 19:37:10&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《ClickHouse 和他的朋友们》系列文章转载自圈内好友 &lt;a href=&quot;https://b</summary>
      
    
    
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/categories/ClickHouse/"/>
    
    
    <category term="ClickHouse和他的朋友们" scheme="http://dbkernel.github.io/tags/ClickHouse%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/tags/ClickHouse/"/>
    
    <category term="源码分析" scheme="http://dbkernel.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>特性介绍 | MySQL select count(*) 、count(1)、count(列) 详解（1）：概念及区别</title>
    <link href="http://dbkernel.github.io/2020/05/06/mysql-select-count-functions-01-concepts-and-differences/"/>
    <id>http://dbkernel.github.io/2020/05/06/mysql-select-count-functions-01-concepts-and-differences/</id>
    <published>2020-05-06T07:55:15.000Z</published>
    <updated>2022-07-07T02:17:10.469Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>本文首发于 2020-05-05 21:55:15</strong></p></blockquote><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>从接触 MySQL 开始断断续续的看过一些文章，对<code>count()</code>操作众说纷纭，其中分歧点主要在于<code>count(1)</code>和<code>count(*)</code>哪个效率高，有说<code>count(1)</code>比<code>count(*)</code>快的（<code>这种说法更普遍</code>），有说二者一样快的。个人理解这两种行为可能适用于的是不同的版本，我只关心较新的 MySQL 版本是什么行为，详见下文。</p><h3 id="二、含义"><a href="#二、含义" class="headerlink" title="二、含义"></a>二、含义</h3><p>首先，先说明一下常见<code>count()</code>操作及含义：</p><blockquote><p><code>count(*)</code>：计算包括 NULL 值在内的行数，SQL92 定义的标准统计行数的语法。</p><p><code>count(1)</code>：计算包括 NULL 值在内的行数，其中的 1 是恒真表达式。</p><p><code>count(列名)</code>：计算指定列的行数，但不包含 NULL 值。</p></blockquote><h3 id="三、具体区别"><a href="#三、具体区别" class="headerlink" title="三、具体区别"></a>三、具体区别</h3><p><a href="https://dev.mysql.com/doc/refman/5.7/en/group-by-functions.html#function_count">MySQL 手册</a>中相关描述如下：</p><blockquote><p>For transactional storage engines such as InnoDB, storing an exact row count is problematic. Multiple transactions may be occurring at the same time, each of which may affect the count.</p><p>InnoDB does not keep an internal count of rows in a table because concurrent transactions might “see” different numbers of rows at the same time. Consequently, <code>SELECT COUNT(*)</code> statements only count rows visible to the current transaction.</p><p>Prior to <code>MySQL 5.7.18</code>, InnoDB processes <code>SELECT COUNT(*)</code> statements by scanning the clustered index. As of <code>MySQL 5.7.18</code>, InnoDB processes <code>SELECT COUNT(*)</code> statements by traversing the smallest available secondary index unless an index or optimizer hint directs the optimizer to use a different index. If a secondary index is not present, the clustered index is scanned.</p><p>Processing <code>SELECT COUNT(*)</code> statements takes some time if index records are not entirely in the buffer pool. For a faster count, create a counter table and let your application update it according to the inserts and deletes it does. However, this method may not scale well in situations where thousands of concurrent transactions are initiating updates to the same counter table. If an approximate row count is sufficient, use <code>SHOW TABLE STATUS</code>.</p><p>InnoDB handles <code>SELECT COUNT(*)</code> and <code>SELECT COUNT(1)</code> operations in the same way. There is no performance difference.</p><p>For <code>MyISAM</code> tables, <code>COUNT(*)</code> is optimized to return very quickly if the SELECT retrieves from one table, no other columns are retrieved, and there is no WHERE clause. For example:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><p>This optimization only applies to MyISAM tables, because an exact row count is stored for this storage engine and can be accessed very quickly.COUNT(1) is only subject to the same optimization if the first column is defined as NOT NULL.</p></blockquote><p><strong>官方这段描述要点如下：</strong></p><blockquote><ol><li> InnoDB 是事务引擎，支持 MVCC，并发事务可能同时“看到”不同的行数，所以，<strong>InnoDB 不保留表中的行数</strong>，<code>SELECT COUNT(*)</code>语句只计算当前事务可见的行数。</li><li> 在 MySQL 5.7.18 之前，InnoDB 通过<strong>扫描聚集索引</strong>处理<code>SELECT COUNT(*)</code>语句。从 MySQL 5.7.18 开始，<code>InnoDB</code>通过<strong>遍历最小的可用二级索引</strong>来处理<code>SELECT COUNT(*)</code>语句，除非索引或优化器明确指示使用不同的索引。<strong>如果不存在二级索引，则扫描聚集索引</strong>。这样的设计单从 IO 的角度就节省了很多开销。</li><li> <strong>InnoDB 以同样的方式处理<code>SELECT COUNT(*)</code>和<code>SELECT COUNT(1)</code>操作，没有性能差异。</strong> 因此，建议使用符合 SQL 标准的<code>count(*)</code>。</li><li> 对于<code>MyISAM</code>表，由于 MyISAM 引擎存储了精确的行数，因此，如果<code>SELECT COUNT(*)</code>语句不包含 WHERE 子句，则会很快返回。这个很好理解，如果带了 where 条件，就需要扫表了。</li><li> 如果索引记录不完全在缓冲池中，则处理<code>SELECT(*)</code>语句需要一些时间。为了更快的计数，您可以创建一个计数器表，并让您的应用程序按插入和删除操作更新它。然而，这种方法在同一计数器表中启动成千上万个并发事务的情况下，可能无法很好地扩展。如果一个近似的行数足够，可以使用<code>SHOW TABLE STATUS</code>查询行数。</li></ol></blockquote><p>到这里我们明白了 <code>count(*)</code> 和 <code>count(1)</code> 本质上面其实是一样的，那么 <code>count(column)</code> 又是怎么回事呢？</p><blockquote><p><code>count(column)</code> 也是会遍历整张表，但是不同的是它会<strong>拿到 column 的值以后判断是否为空，然后再进行累加</strong>，那么如果<strong>针对主键需要解析内容</strong>，如果是<strong>二级索引需要再次根据主键获取内容，则要多一次 IO 操作</strong>，所以 <code>count(column)</code> 的性能肯定不如前两者，如果按照效率比较的话：**count(*)=count(1)&gt;count(primary key)&gt;count(非主键 column)**。</p></blockquote><h3 id="四、建议"><a href="#四、建议" class="headerlink" title="四、建议"></a>四、建议</h3><p>基于以上描述，如果要查询 innodb 存储引擎的表的总行数，有如下建议：</p><ol><li>若仅仅是想获取大概的行数，建议使用<code>show table status</code>或查询<code>information_schema.tables</code>：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use db6;</span><br><span class="line">Reading <span class="keyword">table</span> information <span class="keyword">for</span> completion <span class="keyword">of</span> <span class="keyword">table</span> <span class="keyword">and</span> <span class="keyword">column</span> names</span><br><span class="line">You can turn off this feature <span class="keyword">to</span> <span class="keyword">get</span> a quicker startup <span class="keyword">with</span> <span class="operator">-</span>A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_db6 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br><span class="line"><span class="operator">|</span> t1            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">table</span> status\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">           Name: t1</span><br><span class="line">         Engine: InnoDB</span><br><span class="line">        Version: <span class="number">10</span></span><br><span class="line">     Row_format: <span class="keyword">Dynamic</span></span><br><span class="line">           <span class="keyword">Rows</span>: <span class="number">2</span></span><br><span class="line"> Avg_row_length: <span class="number">8192</span></span><br><span class="line">    Data_length: <span class="number">16384</span></span><br><span class="line">Max_data_length: <span class="number">0</span></span><br><span class="line">   Index_length: <span class="number">0</span></span><br><span class="line">      Data_free: <span class="number">0</span></span><br><span class="line"> Auto_increment: <span class="keyword">NULL</span></span><br><span class="line">    Create_time: <span class="number">2020</span><span class="number">-04</span><span class="number">-21</span> <span class="number">12</span>:<span class="number">00</span>:<span class="number">44</span></span><br><span class="line">    Update_time: <span class="keyword">NULL</span></span><br><span class="line">     Check_time: <span class="keyword">NULL</span></span><br><span class="line">      <span class="keyword">Collation</span>: utf8mb4_general_ci</span><br><span class="line">       Checksum: <span class="keyword">NULL</span></span><br><span class="line"> Create_options:</span><br><span class="line">        Comment:</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_name <span class="operator">=</span> <span class="string">&#x27;t1&#x27;</span>\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">  TABLE_CATALOG: def</span><br><span class="line">   TABLE_SCHEMA: db6</span><br><span class="line">     TABLE_NAME: t1</span><br><span class="line">     TABLE_TYPE: BASE <span class="keyword">TABLE</span></span><br><span class="line">         ENGINE: InnoDB</span><br><span class="line">        VERSION: <span class="number">10</span></span><br><span class="line">     ROW_FORMAT: <span class="keyword">Dynamic</span></span><br><span class="line">     TABLE_ROWS: <span class="number">2</span></span><br><span class="line"> AVG_ROW_LENGTH: <span class="number">8192</span></span><br><span class="line">    DATA_LENGTH: <span class="number">16384</span></span><br><span class="line">MAX_DATA_LENGTH: <span class="number">0</span></span><br><span class="line">   INDEX_LENGTH: <span class="number">0</span></span><br><span class="line">      DATA_FREE: <span class="number">0</span></span><br><span class="line"> AUTO_INCREMENT: <span class="keyword">NULL</span></span><br><span class="line">    CREATE_TIME: <span class="number">2020</span><span class="number">-04</span><span class="number">-21</span> <span class="number">12</span>:<span class="number">00</span>:<span class="number">44</span></span><br><span class="line">    UPDATE_TIME: <span class="keyword">NULL</span></span><br><span class="line">     CHECK_TIME: <span class="keyword">NULL</span></span><br><span class="line">TABLE_COLLATION: utf8mb4_general_ci</span><br><span class="line">       CHECKSUM: <span class="keyword">NULL</span></span><br><span class="line"> CREATE_OPTIONS:</span><br><span class="line">  TABLE_COMMENT:</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ol start="2"><li>反之，如果必须要获取准确的总行数，建议：<blockquote><ol><li><p>创建一个计数器表，并让您的应用程序按插入和删除操作更新它。</p></li><li><p>若业务插入和删除相对较少，也可以考虑缓存到 redis。</p></li></ol></blockquote></li></ol><p>篇幅有限，深入验证、源码分析将在下一篇文章中介绍。</p><hr><p>欢迎关注我的微信公众号【数据库内核】：分享主流开源数据库和存储引擎相关技术。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="欢迎关注公众号数据库内核" align="center"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>CSDN</td><td><a href="https://blog.csdn.net/dbkernel">https://blog.csdn.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本文首发于 2020-05-05 21:55:15&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="MySQL" scheme="http://dbkernel.github.io/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://dbkernel.github.io/tags/MySQL/"/>
    
    <category term="Select" scheme="http://dbkernel.github.io/tags/Select/"/>
    
    <category term="Count" scheme="http://dbkernel.github.io/tags/Count/"/>
    
  </entry>
  
  <entry>
    <title>捉虫日记 | MySQL 5.7.20 try_acquire_lock_impl 异常导致mysql crash</title>
    <link href="http://dbkernel.github.io/2020/05/06/mysql-try_acquire_lock_impl-crash-in-5720/"/>
    <id>http://dbkernel.github.io/2020/05/06/mysql-try_acquire_lock_impl-crash-in-5720/</id>
    <published>2020-05-06T07:55:15.000Z</published>
    <updated>2023-04-25T02:22:21.757Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>本文首发于 2021-03-07 21:13:15</strong></p></blockquote><p><strong>作者：卢文双 资深数据库内核研发</strong></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>近期线上 MySQL 5.7.20 集群不定期（多则三周，短则一两天）出现主库 mysql crash、触发主从切换问题，堆栈信息如下；</p><p><img src="/2020/05/06/mysql-try_acquire_lock_impl-crash-in-5720/try_acquire_lock_impl.jpeg" alt="try_acquire_lock_impl crash 堆栈"></p><p>从堆栈信息可以明显看出，在调用 <code>try_acquire_lock_impl</code> 时触发的 crash。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>在官方 Bug 库未搜到类似问题，转而从代码库入手，搜到对应的 BUG —— <a href="https://github.com/mysql/mysql-server/commit/8bc828b982f678d6b57c1853bbe78080c8f84e84">8bc828b982f678d6b57c1853bbe78080c8f84e84</a>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">BUG<span class="comment">#26502135: MYSQLD SEGFAULTS IN</span></span><br><span class="line"></span><br><span class="line">              MDL_CONTEXT::TRY_ACQUIRE_LOCK_IMPL</span><br><span class="line"></span><br><span class="line">ANALYSIS:</span><br><span class="line">=========</span><br><span class="line">Server sometimes exited when multiple threads tried to</span><br><span class="line">acquire and release metadata locks simultaneously (<span class="keyword">for</span></span><br><span class="line">example, necessary to access a table). The same problem</span><br><span class="line">could have occurred when new objects were registered/</span><br><span class="line">deregistered <span class="keyword">in</span> Performance Schema.</span><br><span class="line"></span><br><span class="line">The problem was caused by a bug <span class="keyword">in</span> LF_HASH - our lock free</span><br><span class="line"><span class="built_in">hash</span> implementation <span class="built_in">which</span> is used by metadata locking</span><br><span class="line">subsystem <span class="keyword">in</span> 5.7 branch. In 5.5 and 5.6 we only use LF_HASH</span><br><span class="line"><span class="keyword">in</span> Performance Schema Instrumentation implementation. So</span><br><span class="line"><span class="keyword">for</span> these versions, the problem was limited to P_S.</span><br><span class="line"></span><br><span class="line">The problem was <span class="keyword">in</span> my_lfind() <span class="keyword">function</span>, <span class="built_in">which</span> searches <span class="keyword">for</span></span><br><span class="line">the specific <span class="built_in">hash</span> element by going through the elements</span><br><span class="line">list. During this search it loads information about element</span><br><span class="line">checked such as key pointer and <span class="built_in">hash</span> value into <span class="built_in">local</span></span><br><span class="line">variables. Then it confirms that they are not corrupted by</span><br><span class="line">concurrent delete operation (<span class="built_in">which</span> will <span class="built_in">set</span> pointer to 0)</span><br><span class="line">by checking <span class="keyword">if</span> element is still <span class="keyword">in</span> the list. The latter</span><br><span class="line">check did not take into account that compiler (and</span><br><span class="line">processor) can reorder reads <span class="keyword">in</span> such a way that load of key</span><br><span class="line">pointer will happen after it, making result of the check</span><br><span class="line">invalid.</span><br><span class="line"></span><br><span class="line">FIX:</span><br><span class="line">====</span><br><span class="line">This patch fixes the problem by ensuring that no such</span><br><span class="line">reordering can take place. This is achieved by using</span><br><span class="line">my_atomic_loadptr() <span class="built_in">which</span> contains compiler and processor</span><br><span class="line">memory barriers <span class="keyword">for</span> the check mentioned above and other</span><br><span class="line">similar places.</span><br><span class="line"></span><br><span class="line">The default (<span class="keyword">for</span> non-Windows systems) implementation of</span><br><span class="line">my_atomic*() relies on old __sync intrisics and implements</span><br><span class="line">my_atomic_loadptr() as read-modify operation. To avoid</span><br><span class="line">scalability/performance penalty associated with addition of</span><br><span class="line">my_atomic_loadptr()<span class="string">&#x27;s we change the my_atomic*() to use</span></span><br><span class="line"><span class="string">newer __atomic intrisics when available. This new default</span></span><br><span class="line"><span class="string">implementation doesn&#x27;</span>t have such a drawback.</span><br></pre></td></tr></table></figure><p><strong>大体含义是：</strong></p><p>当多个线程分别同时获取、释放 metadata locks 时，或者在 Performance Schema 中注册/撤销新的 object 时，可能会触发该问题，导致 mysql server crash。</p><p>该问题是 LF_HASH（Lock-Free Extensible Hash Tables） 的 BUG 引起的，那么 LF_HASH 用在什么地方呢？</p><blockquote><ol><li>在 5.5、5.6 中只用在 Performance Schema Instrumentation 模块。</li><li>在 5.7 中也用于 metadata 加锁模块。</li></ol></blockquote><p>问题出在 my_lfind() 函数中，该函数针对 cursor-&gt;prev 的判断未考虑 CAS，该 patch 通过使用 my_atomic_loadptr() 解决了该问题：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/mysys/lf_hash.c b/mysys/lf_hash.c</span><br><span class="line">index dc019b07bd9.<span class="number">.3</span>a3f665a4f1 <span class="number">100644</span></span><br><span class="line">--- a/mysys/lf_hash.c</span><br><span class="line">+++ b/mysys/lf_hash.c</span><br><span class="line">@@ <span class="number">-1</span>,<span class="number">4</span> +<span class="number">1</span>,<span class="number">4</span> @@</span><br><span class="line">-<span class="comment">/* Copyright (c) 2006, 2016, Oracle and/or its affiliates. All rights reserved.</span></span><br><span class="line"><span class="comment">+/* Copyright (c) 2006, 2017, Oracle and/or its affiliates. All rights reserved.</span></span><br><span class="line"><span class="comment">    This program is free software; you can redistribute it and/or modify</span></span><br><span class="line"><span class="comment">    it under the terms of the GNU General Public License as published by</span></span><br><span class="line"><span class="comment">@@ -83,7 +83,8 @@ retry:</span></span><br><span class="line"><span class="comment">   do &#123; /* PTR() isn&#x27;t necessary below, head is a dummy node */</span></span><br><span class="line">     cursor-&gt;curr= (LF_SLIST *)(*cursor-&gt;prev);</span><br><span class="line">     _lf_pin(pins, <span class="number">1</span>, cursor-&gt;curr);</span><br><span class="line">-  &#125; <span class="keyword">while</span> (*cursor-&gt;prev != (intptr)cursor-&gt;curr &amp;&amp; LF_BACKOFF);</span><br><span class="line">+  &#125; <span class="keyword">while</span> (<span class="built_in">my_atomic_loadptr</span>((<span class="keyword">void</span>**)cursor-&gt;prev) != cursor-&gt;curr &amp;&amp;</span><br><span class="line">+                              LF_BACKOFF);</span><br><span class="line">   <span class="keyword">for</span> (;;)</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="built_in">unlikely</span>(!cursor-&gt;curr))</span><br><span class="line">@@ <span class="number">-97</span>,<span class="number">7</span> +<span class="number">98</span>,<span class="number">7</span> @@ retry:</span><br><span class="line">     cur_hashnr= cursor-&gt;curr-&gt;hashnr;</span><br><span class="line">     cur_key= cursor-&gt;curr-&gt;key;</span><br><span class="line">     cur_keylen= cursor-&gt;curr-&gt;keylen;</span><br><span class="line">-    <span class="keyword">if</span> (*cursor-&gt;prev != (intptr)cursor-&gt;curr)</span><br><span class="line">+    <span class="keyword">if</span> (<span class="built_in">my_atomic_loadptr</span>((<span class="keyword">void</span>**)cursor-&gt;prev) != cursor-&gt;curr)</span><br><span class="line">     &#123;</span><br><span class="line">       (<span class="keyword">void</span>)LF_BACKOFF;</span><br><span class="line">       <span class="keyword">goto</span> retry;</span><br></pre></td></tr></table></figure><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>查看 change log，该问题在<a href="https://dev.mysql.com/doc/relnotes/mysql/5.7/en/news-5-7-22.html">5.7.22</a>版本修复的：</p><blockquote><p>A server exit could result from simultaneous attempts by multiple threads to register and deregister metadata Performance Schema objects, or to acquire and release metadata locks. (Bug #26502135)</p></blockquote><p><strong>升级内核版本到 5.7.29，之后巡检 1 个月，该问题未再出现，问题解决。</strong></p><p><strong>PS：</strong></p><blockquote><p>篇幅有限，在后续文章中会单独分析 MDL、LF_HASH 源码，敬请关注。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本文首发于 2021-03-07 21:13:15&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;作者：卢文双 资深数据库内核研发&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="MySQL" scheme="http://dbkernel.github.io/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://dbkernel.github.io/tags/MySQL/"/>
    
    <category term="LF_HASH" scheme="http://dbkernel.github.io/tags/LF-HASH/"/>
    
    <category term="锁" scheme="http://dbkernel.github.io/tags/%E9%94%81/"/>
    
  </entry>
  
</feed>
