<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DBKernel</title>
  
  
  <link href="http://dbkernel.github.io/atom.xml" rel="self"/>
  
  <link href="http://dbkernel.github.io/"/>
  <updated>2021-09-11T09:33:58.644Z</updated>
  <id>http://dbkernel.github.io/</id>
  
  <author>
    <name>DBKernel</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>技术分享 | 如何为你的代码选择一个合适的开源协议？</title>
    <link href="http://dbkernel.github.io/2021/08/19/how-to-choose-open-source-licence/"/>
    <id>http://dbkernel.github.io/2021/08/19/how-to-choose-open-source-licence/</id>
    <published>2021-08-18T16:37:15.000Z</published>
    <updated>2021-09-11T09:33:58.644Z</updated>
    
    <content type="html"><![CDATA[<p>近期公司全面拥抱开源，在选择开源协议方面遇到了一些问题，查阅了很多资料，特此总结~~</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于很多刚踏入开源软件这个行业的小伙伴来说，在编码过程中难免会用到其他人的成果，如果你足够细心，很容易注意到即使是一小段代码，优秀的作者都在文件开头附上一段关于版权的声明，比如 <code>Licensed under the MIT license</code>。同时，一些博客也会标明”此文章采用 <code>CC BY 4.0 CN</code> 协议“。</p><p>如果我们拷贝了别人的代码或文章却没注意版权问题，在国外法律意识特别强的环境下（国内版权意识也在逐步加强），那么我们的作品会因触犯别人的权益而违法。即使是最开放的开源协议，最低要求也是保留原作者对代码的声明，所以<code>开源不等于免费，也不等于没有约束</code>。</p><p><strong>何为 LICENCE？</strong></p><blockquote><p>LICENCE 是软件的授权许可，详细说明了获得代码后拥有的权利，哪些操作是允许的，哪些操作是禁止的。软件的版权许可证可有很多方式，本文仅限于讨论开源软件协议 Open Source License。</p></blockquote><p>对于大多数人来说，没必要花大把时间去写许可协议，选择一种比较流行的开源协议就足够了，省时省力，更便于自己作品的传播，于人于己都有利。</p><p><strong>PS：</strong></p><blockquote><p>说句题外话，很多国外开发者在尊重他人劳动成果方面做得很好，如果A的作品是因为B的作品的启发而来，A甚至都没有使用B任何一句代码，但A会在他的作品里面指明是受到了B的启发：<code>Inspired by XXX link: http://www.xxxx.com</code>。</p></blockquote><h2 id="快速选择开源协议"><a href="#快速选择开源协议" class="headerlink" title="快速选择开源协议"></a>快速选择开源协议</h2><p>如果你不想了解太多，只是想要一个简直直接的答案，下面给出的建议或许适合你。本小节关于协议地址来自于 GitHub <a href="http://choosealicense.com/">choosealicence</a> 。</p><p><strong>简单宽松的协议：</strong></p><blockquote><p>如果你只想要一个简单点的协议不想太麻烦的话。</p><p><a href="http://choosealicense.com/licenses/mit">MIT协议</a>相对宽松，此协议允许别人以任何方式使用你的代码同时署名原作者，但原作者不承担代码使用后的风险，当然也没有技术支持的义务。</p></blockquote><p><strong>考虑有专利的情况：</strong></p><blockquote><p>如果你的作品中涉及到专利相关。</p><p><a href="http://choosealicense.com/licenses/apache/">Apache协议</a>也是个相对宽松的协议，与MIT类似，但它指明了作者对用户专利上的一些授权（我的理解是软件作品中含有专利，但它授权你可以免费使用）。</p></blockquote><p><strong>促进代码分享：</strong></p><blockquote><p>如果你在乎作品的传播和别人的修改，希望别人也以相同的协议分享出来。</p><p>GPL（<a href="http://choosealicense.com/licenses/gpl-v2">V2</a>或<a href="http://choosealicense.com/licenses/gpl-v3">V3</a>）协议要求代码分发者或者以此代码为基础开发出来的衍生作品需要以同样的协议来发布，也必须开源，因此，该协议具有”传染性“。</p></blockquote><p>乌克兰程序员<a href="http://pbagwl.com/post/5078147450/description-of-popular-software-licenses">Paul Bagwell</a>，画了一张分析图，说明应该怎么选择。只用两分钟，你就能搞清楚这六种开源协议之间的最大区别。<br><img src="paul-bagwell-licence.jpeg" alt="Paul Bagwell的LICENCE分析图"></p><p>国内大神阮一峰的汉化版本：<br><img src="ruan-yi-feng-licence.jpeg" alt="阮一峰的LICENCE分析图"></p><h2 id="主流开源许可协议（Open-Source-License）"><a href="#主流开源许可协议（Open-Source-License）" class="headerlink" title="主流开源许可协议（Open Source License）"></a>主流开源许可协议（Open Source License）</h2><p>世界上的开源许可协议（Open Source License）大概有<a href="https://www.gnu.org/licenses/license-list.html">上百种</a>，常用的开源软件协议大致有：</p><ul><li><a href="https://www.gnu.org/licenses/gpl-3.0.html">GPL</a></li><li><a href="https://www.gnu.org/licenses/lgpl-3.0.html">LGPL</a></li><li><a href="https://opensource.org/licenses/BSD-3-Clause">BSD</a></li><li><a href="https://opensource.org/licenses/mit-license.php">MIT</a></li><li><a href="https://opensource.org/licenses/MPL-2.0">Mozilla</a></li><li><a href="http://www.apache.org/licenses/LICENSE-2.0">Apache</a></li></ul><p>由宽松到严紧排序，常用的开源协议有：</p><ol><li>MIT</li><li>BSD</li><li>Apache</li><li>LGPL</li><li>GPL</li></ol><p>主要区别：</p><ul><li>MIT、BSD 开源协议都源自大学，体现了简单、开放和包容的特点。</li><li>MIT、BSD、Apache 三者都支持闭源的后续开发。</li><li>GPL、LGPL 传染性开源，编译的代码里用了这里的代码，都必须开源。</li></ul><h3 id="MIT"><a href="#MIT" class="headerlink" title="MIT"></a>MIT</h3><p>来源于大学，MIT 开源协议是史上最为简洁、慷慨的开源协议之一。作者只想保留版权，而无任何其他了限制。也就是说，你必须在你的发行版里包含原许可协议的声明，无论你是以二进制发布的还是以源代码发布的。</p><p><strong>特点：</strong></p><ul><li>用户可以拿你的代码做任何想做的事情。</li><li>用户在项目副本中要包含版权声明和许可声明。</li><li>你无需承担任何责任。</li></ul><p><strong>代表作品：</strong></p><ul><li><a href="https://github.com/jquery/jquery">jQuery</a></li><li><a href="https://github.com/rails/rails">Rails</a> 等。</li></ul><h3 id="BSD"><a href="#BSD" class="headerlink" title="BSD"></a>BSD</h3><ul><li><a href="https://opensource.org/licenses/BSD-2-Clause">BSD-2-Clause</a></li><li><a href="https://opensource.org/licenses/BSD-3-Clause">BSD-3-Clause</a></li></ul><p>BSD可证也来源于大学，与MIT差不多，也非常简单、慷慨。</p><p>BSD开源协议是一个给于使用者很大自由的协议。基本上使用者可以”为所欲为”,可以自由的使用、修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。前提是当你发布使用了BSD协议的代码，或者以BSD协议代码为基础开发自己的产品时，需要满足三个条件：</p><ol><li>如果再发布的产品中包含源代码，则在源代码中必须带有原代码中的BSD协议。</li><li>如果再发布的只是二进制类库/软件，则需要在类库/软件的文档和版权声明中包含原来代码中的BSD协议。</li><li>不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。</li></ol><p>BSD 开源协议鼓励代码共享，但需要尊重代码作者的著作权。BSD 开源协议允许使用者修改和重新发布代码，也允许使用或在BSD代码上开发商业软件发布、销售，是对商业集成很友好的协议。因此，很多公司在选用开源产品的时候都首选BSD协议。</p><h3 id="Apache-Licence"><a href="#Apache-Licence" class="headerlink" title="Apache Licence"></a>Apache Licence</h3><ul><li><a href="http://www.apache.org/licenses/LICENSE-2.0">Apache License, Version 2.0</a></li><li><a href="https://www.apache.org/licenses/LICENSE-1.1">Apache License, Version 1.1</a></li><li><a href="https://www.apache.org/licenses/LICENSE-1.0">Apache License, Version 1.0</a></li></ul><p>来自 Apache，类似 MIT 开源协议，但它重视专利权。</p><p>Apache Licence 是著名的非盈利开源组织 Apache 采用的协议。该协议和BSD类似，同样鼓励代码共享和尊重原作者的著作权，同样允许修改代码、再发布（作为开源或商业软件）。需要满足的条件也和BSD类似：</p><ol><li>需要为使用代码的用户提供一份 Apache Licence 。</li><li>如果你修改了代码，需要在被修改的文件中说明。</li><li>在延伸的代码中（修改和由源代码衍生的代码中）需要带有原来代码中的协议、商标、专利声明和其他原作者规定需要包含的说明。</li><li>如果再发布的产品中包含一个<code>Notice</code>文件，则在Notice文件中需要带有 Apache Licence 。你可以在<code>Notice</code>中增加自己的许可，但不可对 Apache Licence 构成更改。</li></ol><p>Apache Licence 也是对商业应用友好的许可，使用者也可以在需要的时候修改代码来满足需要并作为开源或商业产品发布/销售。</p><p><strong>代表作品：</strong></p><ul><li><a href="https://github.com/apache/echarts">echarts</a></li><li><a href="https://github.com/apache/superset">superset</a></li><li><a href="https://github.com/apache/dubbo">dubbo</a></li><li><a href="https://github.com/apache/spark">spark</a></li></ul><h3 id="LGPL"><a href="#LGPL" class="headerlink" title="LGPL"></a>LGPL</h3><p>LGPL（GNU LESSER GENERAL PUBLIC LICENSE）来自于自由软件联盟GNU，可以翻译为更宽松的GPL协议，也属于传染性开源协议。</p><p>LGPL是GPL的一个主要为类库使用设计的开源协议。和<code>GPL要求任何使用/修改/衍生之GPL类库的的软件必须采用GPL协议</code>不同，LGPL 允许商业软件通过类库引用(link)方式使用LGPL类库而不需要开源商业软件的代码。这使得采用LGPL协议的开源代码可以被商业软件作为类库引用并发布和销售。</p><p>但是如果修改LGPL协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用LGPL协议，因此，LGPL协议的开源代码很适合作为第三方类库被商业软件引用，但不适合希望以LGPL协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。</p><p>GPL/LGPL都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品。</p><h3 id="GPL"><a href="#GPL" class="headerlink" title="GPL"></a>GPL</h3><p>GPL（GNU GENERAL PUBLIC LICENSE）来源于自由软件联盟GNU，GPL/LGPL侧重于代码及衍生代码的开源与免费使用。</p><p>GPL协议的主要内容是只要在一个软件中使用（”使用”指类库引用，修改后的代码或者衍生代码）GPL 协议的产品，则该软件产品必须也采用GPL协议，既必须也是开源和免费。<strong>这就是所谓的”传染性”</strong>。</p><p>由于GPL严格要求使用了GPL类库的软件产品必须使用GPL协议，对于使用GPL协议的开源代码，商业软件或者对代码有保密要求的部门就不适合集成/采用作为类库和二次开发的基础。</p><p>我们很熟悉的Linux就是采用了GPL。GPL协议和BSD, Apache Licence等鼓励代码重用的许可很不一样。GPL的出发点是<code>代码的开源/免费使用/引用/修改</code>和<code>衍生代码的开源/免费使用</code>，但<code>不允许</code>修改后和衍生的代码做为<code>闭源</code>的商业软件发布和销售。</p><p>其它细节和BSD/Apache等协议类似。</p><p><strong>代表作品：</strong></p><ul><li><a href="https://github.com/torvalds/linux">Linux</a></li></ul><h2 id="更多开源协议对比"><a href="#更多开源协议对比" class="headerlink" title="更多开源协议对比"></a>更多开源协议对比</h2><p>下方表格中出现的用词的解释：</p><ul><li><strong>协议和版权信息</strong>(License and copyright notice)：在代码中保留作者提供的协议和版权信息。</li><li><strong>声明变更</strong>(State Changes)：在代码中声明对原来代码的重大修改及变更。</li><li><strong>公开源码</strong>(Disclose Source)：代码必需公开。</li><li><strong>库引用</strong>(Library usage)：该库可以用于商业软件中。</li><li><strong>责任承担</strong>(Hold Liable)：代码的作者承担代码使用后的风险及产生的后果。如果禁止，那么作者将不会承担责任，可以理解为免责条款。</li><li><strong>商标使用</strong>(Use Trademark)：可以使用作者的姓名，作品的Logo，或商标。</li><li><strong>附加协议</strong>(Sublicensing)：允许在软件分发传播过程中附加上原来没有的协议条款等。</li></ul><table><thead><tr><th>协议</th><th>描述</th><th>要求</th><th>允许</th><th>禁止</th></tr></thead><tbody><tr><td><a href="http://choosealicense.com/licenses/apache/">Apache</a></td><td>一个比较宽松且简明地指出了专利授权的协议。</td><td>1. <font color=#0000FF>协议和版权信息</font><br/>2. <font color=#0000FF>声明变更</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>专利授权</font><br/>5. <font color=#00EE00>私用</font><br/>6. <font color=#00EE00>附加协议</font></td><td>1. <font color=#FF3030>责任承担</font>（作者免责）<br/>2. <font color=#FF3030>商标使用</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/gpl-v2/">GPL</a></td><td>应用最广泛的开源协议，拥有较强的版权自由（copyleft）要求。<br/>衍生代码的分发需开源并且也要遵守此协议。<br/>此协议有许多变种，不同变种的要求略有不同。</td><td>1. <font color=#0000FF>公开源码</font><br/>2. <font color=#0000FF>协议和版权信息</font><br/>3. <font color=#0000FF>声明变更</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>专利授权</font><br/>5. <font color=#00EE00>私用</font></td><td>1. <font color=#FF3030>责任承担</font><br/>2. <font color=#FF3030>附加协议</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/mit/">MIT</a></td><td>此协议宽松简单。在适当标明来源及免责的情况下，<br/>它允许你对代码进行任何形式的使用。</td><td>1. <font color=#0000FF>协议和版权信息</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>私用</font><br/>5. <font color=#00EE00>附加协议</font></td><td>1. <font color=#FF3030>责任承担</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/artistic/">Artistic</a></td><td>Perl社区最钟爱此协议。<br/>要求更改后的软件不能影响原软件的使用。</td><td>1. <font color=#0000FF>协议和版权信息</font><br/>2. <font color=#0000FF>声明变更</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>私用</font><br/>5. <font color=#00EE00>附加协议</font></td><td>1. <font color=#FF3030>责任承担</font><br/>2. <font color=#FF3030>商标使用</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/bsd/">BSD</a></td><td>较为宽松的协议，有两个变种<a href="http://choosealicense.com/licenses/bsd"><strong>BSD 2-Clause</strong></a> 和<a href="http://choosealicense.com/licenses/bsd-3-clause"><strong>BSD 3-Clause</strong></a>，<br/>两者都与MIT协议只存在细微差异。</td><td>1. <font color=#0000FF>协议和版权信息</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>私用</font><br/>5. <font color=#00EE00>附加协议</font></td><td>1. <font color=#FF3030>责任承担</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/eclipse/">Eclipse</a></td><td>对商用非常友好的协议，可以用于软件的商业授权。<br/>包含对专利的优雅授权，也可以对相关代码应用商业协议。</td><td>1. <font color=#0000FF>公开源码</font><br/>2. <font color=#0000FF>协议和版权信息</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>专利授权</font><br/>5. <font color=#00EE00>私用</font><br/>6. <font color=#00EE00>附加协议</font></td><td>1. <font color=#FF3030>责任承担</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/lgpl-v2.1/">LGPL</a></td><td>主要用于一些代码库。<br/>衍生代码可以以此协议发布（也可以用其他协议），<br/>但与此协议相关的代码必需遵循此协议。</td><td>1. <font color=#0000FF>公开源码</font><br/>2. <font color=#0000FF>库引用</font><br/>3. <font color=#0000FF>协议和版权信息</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>专利授权</font><br/>5. <font color=#00EE00>私用</font><br/>6. <font color=#00EE00>附加协议</font></td><td>1. <font color=#FF3030>责任承担</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/mozilla/">Mozilla</a></td><td>Mozilla Public License(MPL 2.0)是由Mozilla基金创建维护的，<br/>旨在较为宽松的BSD协议和更加互惠的GPL协议中找一个折衷点。</td><td>1. <font color=#0000FF>公开源码</font><br/>2. <font color=#0000FF>协议和版权信息</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>专利授权</font><br/>5. <font color=#00EE00>私用</font><br/>6. <font color=#00EE00>附加协议</font></td><td>1. <font color=#FF3030>责任承担</font><br/>2. <font color=#FF3030>商标使用</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/no-license/">No license</a></td><td>作者保留所有权利，不允许他人分发，复制或者创造衍生物。<br/>当你将代码发表在一些网站上时需要遵守该网站的协议，<br/>此协议可能包含了一些对你劳动成果的授权许可。<br/>比如将代码发布到GitHub，那么就必须同意别人查看和fork。</td><td>1. <font color=#0000FF>协议和版权信息</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>私用</font></td><td>1. <font color=#FF3030>分发</font><br/>2. <font color=#FF3030>修改</font><br/>3. <font color=#FF3030>附加协议</font></td></tr><tr><td><a href="http://choosealicense.com/licenses/unlicense/">Public domain dedication</a></td><td>在许多国家，默认版权归作者自动拥有，<br/>所以<a href="http://unlicense.org/">Unlicense</a>协议提供了一种通用的模板。<br/>此协议表明作者放弃版权，将劳动成果无私贡献出来，<br/>会丧失作品全部权利，包括在MIT/X11中定义的无担保权利。</td><td>1. <font color=#0000FF>N/A</font></td><td>1. <font color=#00EE00>商用</font><br/>2. <font color=#00EE00>分发</font><br/>3. <font color=#00EE00>修改</font><br/>4. <font color=#00EE00>私用</font></td><td>1. <font color=#FF3030>责任承担</font></td></tr></tbody></table><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/github/choosealicense.com">https://github.com/github/choosealicense.com</a></li><li><a href="https://opensource.org/licenses">https://opensource.org/licenses</a></li><li><a href="https://www.cnblogs.com/Wayou/p/how_to_choose_a_license.html">https://www.cnblogs.com/Wayou/p/how_to_choose_a_license.html</a></li><li><a href="https://zhuanlan.zhihu.com/p/87855729">https://zhuanlan.zhihu.com/p/87855729</a></li></ul><hr><p>欢迎关注我的微信公众号【MySQL数据库技术】。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="MySQL数据库技术" align="left"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>开源中国（oschina）</td><td><a href="https://my.oschina.net/dbkernel">https://my.oschina.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;近期公司全面拥抱开源，在选择开源协议方面遇到了一些问题，查阅了很多资料，特此总结~~&lt;/p&gt;</summary>
    
    
    
    <category term="通用" scheme="http://dbkernel.github.io/categories/%E9%80%9A%E7%94%A8/"/>
    
    
    <category term="开源协议" scheme="http://dbkernel.github.io/tags/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE/"/>
    
    <category term="开源许可证" scheme="http://dbkernel.github.io/tags/%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81/"/>
    
    <category term="LICENCE" scheme="http://dbkernel.github.io/tags/LICENCE/"/>
    
    <category term="github" scheme="http://dbkernel.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>源码分析 | ClickHouse和他的朋友们（3）MySQL Protocol和Write调用栈</title>
    <link href="http://dbkernel.github.io/2020/06/08/clickhouse-and-friends-03-mysql-protocol-write-stack/"/>
    <id>http://dbkernel.github.io/2020/06/08/clickhouse-and-friends-03-mysql-protocol-write-stack/</id>
    <published>2020-06-08T11:57:10.000Z</published>
    <updated>2021-08-22T05:59:19.549Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><blockquote><p>《ClickHouse和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/06/08/clickhouse-and-friends-mysql-protocol-write-stack/">https://bohutang.me/2020/06/08/clickhouse-and-friends-mysql-protocol-write-stack/</a><br>以下为正文。</p></blockquote><p>上篇的<a href="https://dbkernel.github.io/2020/06/07/clickhouse-and-friends-02-mysql-protocol-read-stack/">MySQL Protocol和Read调用</a>里介绍了 ClickHouse 一条查询语句的调用栈，本文继续介绍写的调用栈，开整。</p><h2 id="Write请求"><a href="#Write请求" class="headerlink" title="Write请求"></a><strong>Write请求</strong></h2><ol><li><p>建表:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test(a UInt8, b UInt8, c UInt8) ENGINE<span class="operator">=</span>MergeTree() <span class="keyword">PARTITION</span> <span class="keyword">BY</span> (a, b) <span class="keyword">ORDER</span> <span class="keyword">BY</span> c;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>写入数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>), (<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="调用栈分析"><a href="#调用栈分析" class="headerlink" title="调用栈分析"></a><strong>调用栈分析</strong></h2><h3 id="1-获取存储引擎-OutputStream"><a href="#1-获取存储引擎-OutputStream" class="headerlink" title="1. 获取存储引擎 OutputStream"></a>1. 获取存储引擎 OutputStream</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DB::StorageMergeTree::<span class="built_in">write</span>(std::__1::shared_ptr&lt;DB::IAST&gt; <span class="keyword">const</span>&amp;, DB::Context <span class="keyword">const</span>&amp;) StorageMergeTree.cpp:<span class="number">174</span></span><br><span class="line">DB::PushingToViewsBlockOutputStream::<span class="built_in">PushingToViewsBlockOutputStream</span>(std::__1::shared_ptr&lt;DB::IStorage&gt; <span class="keyword">const</span>&amp;, DB::Context <span class="keyword">const</span>&amp;, std::__1::shared_ptr&lt;DB::IAST&gt; <span class="keyword">const</span>&amp;, <span class="keyword">bool</span>) PushingToViewsBlockOutputStream.cpp:<span class="number">110</span></span><br><span class="line">DB::InterpreterInsertQuery::<span class="built_in">execute</span>() InterpreterInsertQuery.cpp:<span class="number">229</span></span><br><span class="line">DB::<span class="built_in">executeQueryImpl</span>(<span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *, DB::Context &amp;, <span class="keyword">bool</span>, DB::QueryProcessingStage::Enum, <span class="keyword">bool</span>, DB::ReadBuffer *) executeQuery.cpp:<span class="number">364</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">696</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">311</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">141</span></span><br></pre></td></tr></table></figure><h3 id="2-从-SQL-组装-InputStream"><a href="#2-从-SQL-组装-InputStream" class="headerlink" title="2. 从 SQL 组装 InputStream"></a>2. 从 SQL 组装 InputStream</h3><p><code>(1,1,1), (2,2,2)</code> 如何组装成 inputstream 结构呢？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DB::InputStreamFromASTInsertQuery::<span class="built_in">InputStreamFromASTInsertQuery</span>(std::__1::shared_ptr&lt;DB::IAST&gt; <span class="keyword">const</span>&amp;, DB::ReadBuffer*,</span><br><span class="line">DB::InterpreterInsertQuery::<span class="built_in">execute</span>() InterpreterInsertQuery.cpp:<span class="number">300</span></span><br><span class="line">DB::<span class="built_in">executeQueryImpl</span>(<span class="keyword">char</span> <span class="keyword">const</span>*, <span class="keyword">char</span> <span class="keyword">const</span>*, DB::Context&amp;, <span class="keyword">bool</span>, DB::QueryProcessingStage::Enum, <span class="keyword">bool</span>, DB::ReadBuffer*) executeQuery.cpp:<span class="number">386</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">313</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">150</span></span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.in = std::make_shared&lt;InputStreamFromASTInsertQuery&gt;(query_ptr, <span class="literal">nullptr</span>, query_sample_block, context, <span class="literal">nullptr</span>);</span><br><span class="line">res.in = std::make_shared&lt;NullAndDoCopyBlockInputStream&gt;(res.in, out_streams.<span class="built_in">at</span>(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>通过 NullAndDoCopyBlockInputStream的 copyData 方法构造出 Block：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">DB::ValuesBlockInputFormat::<span class="built_in">readRow</span>(std::__1::vector&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt;, std::__1::allocator&lt;COW&lt;DB::IColumn&gt;::mutable_ptr&lt;DB::IColumn&gt; &gt; &gt;&amp;, <span class="keyword">unsigned</span> <span class="keyword">long</span>) ValuesBlockInputFormat.cpp:<span class="number">93</span></span><br><span class="line">DB::ValuesBlockInputFormat::<span class="built_in">generate</span>() ValuesBlockInputFormat.cpp:<span class="number">55</span></span><br><span class="line">DB::ISource::<span class="built_in">work</span>() ISource.cpp:<span class="number">48</span></span><br><span class="line">DB::InputStreamFromInputFormat::<span class="built_in">readImpl</span>() InputStreamFromInputFormat.h:<span class="number">48</span></span><br><span class="line">DB::IBlockInputStream::<span class="built_in">read</span>() IBlockInputStream.cpp:<span class="number">57</span></span><br><span class="line">DB::InputStreamFromASTInsertQuery::<span class="built_in">readImpl</span>() InputStreamFromASTInsertQuery.h:<span class="number">31</span></span><br><span class="line">DB::IBlockInputStream::<span class="built_in">read</span>() IBlockInputStream.cpp:<span class="number">57</span></span><br><span class="line"><span class="keyword">void</span> DB::copyDataImpl&lt;DB::<span class="built_in">copyData</span>(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::atomic&lt;<span class="keyword">bool</span>&gt;*)::$_0&amp;, <span class="built_in"><span class="keyword">void</span></span> (&amp;)(DB::Block <span class="keyword">const</span>&amp;)&gt;(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, DB::<span class="built_in">copyData</span>(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::atomic&lt;<span class="keyword">bool</span>&gt;*)::$_0&amp;, <span class="built_in"><span class="keyword">void</span></span> (&amp;)(DB::Block <span class="keyword">const</span>&amp;)) copyData.cpp:<span class="number">26</span></span><br><span class="line">DB::<span class="built_in">copyData</span>(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::atomic&lt;<span class="keyword">bool</span>&gt;*) copyData.cpp:<span class="number">62</span></span><br><span class="line">DB::NullAndDoCopyBlockInputStream::<span class="built_in">readImpl</span>() NullAndDoCopyBlockInputStream.h:<span class="number">47</span></span><br><span class="line">DB::IBlockInputStream::<span class="built_in">read</span>() IBlockInputStream.cpp:<span class="number">57</span></span><br><span class="line"><span class="keyword">void</span> DB::copyDataImpl&lt;std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;&gt;(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;) copyData.cpp:<span class="number">26</span></span><br><span class="line">DB::<span class="built_in">copyData</span>(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;) copyData.cpp:<span class="number">73</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">785</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">313</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">150</span></span><br></pre></td></tr></table></figure><h3 id="3-组装-OutputStream"><a href="#3-组装-OutputStream" class="headerlink" title="3. 组装 OutputStream"></a>3. 组装 OutputStream</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DB::InterpreterInsertQuery::<span class="built_in">execute</span>() InterpreterInsertQuery.cpp:<span class="number">107</span></span><br><span class="line">DB::<span class="built_in">executeQueryImpl</span>(<span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *, DB::Context &amp;, <span class="keyword">bool</span>, DB::QueryProcessingStage::Enum, <span class="keyword">bool</span>, DB::ReadBuffer *) executeQuery.cpp:<span class="number">364</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">696</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">311</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">141</span></span><br></pre></td></tr></table></figure><p>组装顺序:</p><ol><li>NullAndDoCopyBlockInputStream</li><li>CountingBlockOutputStream</li><li>AddingDefaultBlockOutputStream</li><li>SquashingBlockOutputStream</li><li>PushingToViewsBlockOutputStream</li><li>MergeTreeBlockOutputStream</li></ol><h3 id="4-写入OutputStream"><a href="#4-写入OutputStream" class="headerlink" title="4. 写入OutputStream"></a>4. 写入OutputStream</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">DB::MergeTreeBlockOutputStream::<span class="built_in">write</span>(DB::Block <span class="keyword">const</span>&amp;) MergeTreeBlockOutputStream.cpp:<span class="number">17</span></span><br><span class="line">DB::PushingToViewsBlockOutputStream::<span class="built_in">write</span>(DB::Block <span class="keyword">const</span>&amp;) PushingToViewsBlockOutputStream.cpp:<span class="number">145</span></span><br><span class="line">DB::SquashingBlockOutputStream::<span class="built_in">finalize</span>() SquashingBlockOutputStream.cpp:<span class="number">30</span></span><br><span class="line">DB::SquashingBlockOutputStream::<span class="built_in">writeSuffix</span>() SquashingBlockOutputStream.cpp:<span class="number">50</span></span><br><span class="line">DB::AddingDefaultBlockOutputStream::<span class="built_in">writeSuffix</span>() AddingDefaultBlockOutputStream.cpp:<span class="number">25</span></span><br><span class="line">DB::CountingBlockOutputStream::<span class="built_in">writeSuffix</span>() CountingBlockOutputStream.h:<span class="number">37</span></span><br><span class="line">DB::copyDataImpl&lt;DB::<span class="built_in">copyData</span>(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::atomic&lt;<span class="keyword">bool</span>&gt;*)::&lt;<span class="built_in">lambda</span>()&gt;&amp;, <span class="built_in"><span class="keyword">void</span></span> (&amp;)(<span class="keyword">const</span> DB::Block&amp;)&gt;(DB::IBlockInputStream &amp;, DB::IBlockOutputStream &amp;, &lt;<span class="built_in">lambda</span>()&gt; &amp;, <span class="built_in"><span class="keyword">void</span></span> (&amp;)(<span class="keyword">const</span> DB::Block &amp;)) copyData.cpp:<span class="number">52</span></span><br><span class="line">DB::<span class="built_in">copyData</span>(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::atomic&lt;<span class="keyword">bool</span>&gt;*) copyData.cpp:<span class="number">138</span></span><br><span class="line">DB::NullAndDoCopyBlockInputStream::<span class="built_in">readImpl</span>() NullAndDoCopyBlockInputStream.h:<span class="number">57</span></span><br><span class="line">DB::IBlockInputStream::<span class="built_in">read</span>() IBlockInputStream.cpp:<span class="number">60</span></span><br><span class="line"><span class="keyword">void</span> DB::copyDataImpl&lt;std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;&gt;(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;) copyData.cpp:<span class="number">29</span></span><br><span class="line">DB::<span class="built_in">copyData</span>(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;) copyData.cpp:<span class="number">154</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">748</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">311</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">141</span></span><br></pre></td></tr></table></figure><p>通过 copyData 方法，让数据在 OutputStream 间层层透传，一直到 MergeTreeBlockOutputStream。</p><h3 id="5-返回-Client"><a href="#5-返回-Client" class="headerlink" title="5. 返回 Client"></a>5. 返回 Client</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DB::MySQLOutputFormat::<span class="built_in">finalize</span>() MySQLOutputFormat.cpp:<span class="number">62</span></span><br><span class="line">DB::IOutputFormat::<span class="built_in">doWriteSuffix</span>() IOutputFormat.h:<span class="number">78</span></span><br><span class="line">DB::OutputStreamToOutputFormat::<span class="built_in">writeSuffix</span>() OutputStreamToOutputFormat.cpp:<span class="number">18</span></span><br><span class="line">DB::MaterializingBlockOutputStream::<span class="built_in">writeSuffix</span>() MaterializingBlockOutputStream.h:<span class="number">22</span></span><br><span class="line"><span class="keyword">void</span> DB::copyDataImpl&lt;std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;&gt;(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;) copyData.cpp:<span class="number">52</span></span><br><span class="line">DB::<span class="built_in">copyData</span>(DB::IBlockInputStream&amp;, DB::IBlockOutputStream&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">bool</span></span> ()&gt; <span class="keyword">const</span>&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (DB::Block <span class="keyword">const</span>&amp;)&gt; <span class="keyword">const</span>&amp;) copyData.cpp:<span class="number">154</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">748</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">311</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">141</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>), (<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>首先内核解析 SQL 语句生成 AST，根据 AST 获取 Interpreter：InterpreterInsertQuery。<br>其次 Interpreter 依次添加相应的 OutputStream。<br>然后从 InputStream 读取数据，写入到 OutputStream，stream 会层层渗透，一直写到底层的存储引擎。<br>最后写入到 Socket Output，返回结果。</p><p>ClickHouse 的 OutputStream 编排还是比较复杂，缺少类似 Pipeline 的调度和编排，但是由于模式比较固化，目前看还算清晰。</p><hr><p>欢迎关注我的微信公众号【MySQL数据库技术】。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="MySQL数据库技术" align="left"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>开源中国（oschina）</td><td><a href="https://my.oschina.net/dbkernel">https://my.oschina.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;blockquote&gt;
&lt;p&gt;《ClickHouse和他的朋友们》系列文章转载自圈内好友 &lt;a href=&quot;https://bohutang.me/&quot;&gt;BohuTANG&lt;/a&gt; 的博客，原文链接：&lt;br&gt;&lt;a href=&quot;htt</summary>
      
    
    
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/categories/ClickHouse/"/>
    
    
    <category term="ClickHouse和他的朋友们" scheme="http://dbkernel.github.io/tags/ClickHouse%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/tags/ClickHouse/"/>
    
    <category term="源码分析" scheme="http://dbkernel.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>源码分析 | ClickHouse和他的朋友们（2）MySQL Protocol和Read调用栈</title>
    <link href="http://dbkernel.github.io/2020/06/07/clickhouse-and-friends-02-mysql-protocol-read-stack/"/>
    <id>http://dbkernel.github.io/2020/06/07/clickhouse-and-friends-02-mysql-protocol-read-stack/</id>
    <published>2020-06-07T09:17:10.000Z</published>
    <updated>2021-08-22T06:00:12.009Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><blockquote><p>《ClickHouse和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/06/07/clickhouse-and-friends-mysql-protocol-read-stack/">https://bohutang.me/2020/06/07/clickhouse-and-friends-mysql-protocol-read-stack/</a><br>以下为正文。</p></blockquote><p>作为一个 OLAP 的 DBMS 来说，有2个端非常重要：</p><ul><li>用户如何方便的链进来，这是入口端<ul><li>ClickHouse 除了自己的 client 外，还提供了 MySQL/PG/GRPC/HTTP 等接入方式</li></ul></li><li>数据如何方便的挂上去，这是数据源端<ul><li>ClickHouse 除了自己的引擎外，还可以挂载 MySQL/Kafka 等外部数据源</li></ul></li></ul><p>这样内外互通，多条朋友多条路，以实现“数据”级的编排能力。</p><p>今天谈的是入口端的 MySQL 协议，也是本系列 ClickHouse 的第一个好朋友，用户可通过 MySQL 客户端或相关 Driver 直接链接到 ClickHouse，进行数据读写等操作。</p><p>本文通过 MySQL的 Query 请求，借用调用栈来了解下 ClickHouse 的数据读取全过程。</p><h2 id="如何实现？"><a href="#如何实现？" class="headerlink" title="如何实现？"></a><strong>如何实现？</strong></h2><p>入口文件在:<br><a href="https://github.com/ClickHouse/ClickHouse/blob/master/src/Server/MySQLHandler.cpp">MySQLHandler.cpp</a></p><h3 id="握手协议"><a href="#握手协议" class="headerlink" title="握手协议"></a><strong>握手协议</strong></h3><ol><li>MySQLClient 发送 Greeting 数据报文到 MySQLHandler</li><li>MySQLHandler 回复一个 Greeting-Response 报文</li><li>MySQLClient 发送认证报文</li><li>MySQLHandler 对认证报文进行鉴权，并返回鉴权结果</li></ol><p>MySQL Protocol 实现在: <a href="https://github.com/ClickHouse/ClickHouse/blob/master/src/Core/MySQLProtocol.h">Core/MySQLProtocol.h</a></p><blockquote><p>最近的代码中调整为了 <a href="https://github.com/ClickHouse/ClickHouse/blob/master/src/Core/MySQL/PacketsProtocolText.h">Core/MySQL/PacketsProtocolText.h</a></p></blockquote><h3 id="Query请求"><a href="#Query请求" class="headerlink" title="Query请求"></a><strong>Query请求</strong></h3><p>当认证通过后，就可以进行正常的数据交互了。</p><ol><li><p>当 MySQLClient 发送请求:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> system.numbers LIMIT <span class="number">5</span>;</span><br></pre></td></tr></table></figure></li><li><p>MySQLHandler 的调用栈：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-&gt;MySQLHandler::comQuery -&gt; executeQuery -&gt; pipeline-&gt;execute -&gt; MySQLOutputFormat::consume</span><br></pre></td></tr></table></figure></li><li><p>MySQLClient 接收到结果</p></li></ol><p>在步骤2里，executeQuery(executeQuery.cpp)非常重要。<br>它是所有前端 Server 和 ClickHouse 内核的接入口，第一个参数是 SQL 文本(‘select 1’)，第二个参数是结果集要发送到哪里去(socket net)。</p><h2 id="调用栈分析"><a href="#调用栈分析" class="headerlink" title="调用栈分析"></a><strong>调用栈分析</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM system.numbers LIMIT 5</span><br></pre></td></tr></table></figure><h3 id="1-获取数据源"><a href="#1-获取数据源" class="headerlink" title="1. 获取数据源"></a>1. 获取数据源</h3><p>StorageSystemNumbers 数据源：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DB::StorageSystemNumbers::<span class="built_in">read</span>(std::__1::vector&lt;std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; &gt; &gt; <span class="keyword">const</span>&amp;, std::__1::shared_ptr&lt;DB::StorageInMemoryMetadata <span class="keyword">const</span>&gt; <span class="keyword">const</span>&amp;, DB::SelectQueryInfo <span class="keyword">const</span>&amp;, DB::Context <span class="keyword">const</span>&amp;, DB::QueryProcessingStage::Enum, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span>) StorageSystemNumbers.cpp:<span class="number">135</span></span><br><span class="line">DB::ReadFromStorageStep::<span class="built_in">ReadFromStorageStep</span>(std::__1::shared_ptr&lt;DB::RWLockImpl::LockHolderImpl&gt;, std::__1::shared_ptr&lt;DB::StorageInMemoryMetadata <span class="keyword">const</span>&gt;&amp;, DB::SelectQueryOptions,</span><br><span class="line">DB::InterpreterSelectQuery::<span class="built_in">executeFetchColumns</span>(DB::QueryProcessingStage::Enum, DB::QueryPlan&amp;, std::__1::shared_ptr&lt;DB::PrewhereInfo&gt; <span class="keyword">const</span>&amp;, std::__1::vector&lt;std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; &gt; &gt; <span class="keyword">const</span>&amp;) memory:<span class="number">3028</span></span><br><span class="line">DB::InterpreterSelectQuery::<span class="built_in">executeFetchColumns</span>(DB::QueryProcessingStage::Enum, DB::QueryPlan&amp;, std::__1::shared_ptr&lt;DB::PrewhereInfo&gt; <span class="keyword">const</span>&amp;, std::__1::vector&lt;std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; &gt; &gt; <span class="keyword">const</span>&amp;) InterpreterSelectQuery.cpp:<span class="number">1361</span></span><br><span class="line">DB::InterpreterSelectQuery::<span class="built_in">executeImpl</span>(DB::QueryPlan&amp;, std::__1::shared_ptr&lt;DB::IBlockInputStream&gt; <span class="keyword">const</span>&amp;, std::__1::optional&lt;DB::Pipe&gt;) InterpreterSelectQuery.cpp:<span class="number">791</span></span><br><span class="line">DB::InterpreterSelectQuery::<span class="built_in">buildQueryPlan</span>(DB::QueryPlan&amp;) InterpreterSelectQuery.cpp:<span class="number">472</span></span><br><span class="line">DB::InterpreterSelectWithUnionQuery::<span class="built_in">buildQueryPlan</span>(DB::QueryPlan&amp;) InterpreterSelectWithUnionQuery.cpp:<span class="number">183</span></span><br><span class="line">DB::InterpreterSelectWithUnionQuery::<span class="built_in">execute</span>() InterpreterSelectWithUnionQuery.cpp:<span class="number">198</span></span><br><span class="line">DB::<span class="built_in">executeQueryImpl</span>(<span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *, DB::Context &amp;, <span class="keyword">bool</span>, DB::QueryProcessingStage::Enum, <span class="keyword">bool</span>, DB::ReadBuffer *) executeQuery.cpp:<span class="number">385</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;,</span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">307</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">141</span></span><br></pre></td></tr></table></figure><p>这里最主要的是 ReadFromStorageStep 函数，从不同 storage 里获取数据源 pipe:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pipes pipes = storage-&gt;<span class="built_in">read</span>(required_columns, metadata_snapshot, query_info, *context, processing_stage, max_block_size, max_streams);</span><br></pre></td></tr></table></figure><h3 id="2-Pipeline构造"><a href="#2-Pipeline构造" class="headerlink" title="2. Pipeline构造"></a>2. Pipeline构造</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DB::LimitTransform::<span class="built_in">LimitTransform</span>(DB::Block <span class="keyword">const</span>&amp;, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">bool</span>, <span class="keyword">bool</span>, std::__1::vector&lt;DB::SortColumnDescription, std::__1::allocator&lt;DB::SortColumnDescription&gt; &gt;) LimitTransform.cpp:<span class="number">21</span></span><br><span class="line">DB::LimitStep::<span class="built_in">transformPipeline</span>(DB::QueryPipeline&amp;) memory:<span class="number">2214</span></span><br><span class="line">DB::LimitStep::<span class="built_in">transformPipeline</span>(DB::QueryPipeline&amp;) memory:<span class="number">2299</span></span><br><span class="line">DB::LimitStep::<span class="built_in">transformPipeline</span>(DB::QueryPipeline&amp;) memory:<span class="number">3570</span></span><br><span class="line">DB::LimitStep::<span class="built_in">transformPipeline</span>(DB::QueryPipeline&amp;) memory:<span class="number">4400</span></span><br><span class="line">DB::LimitStep::<span class="built_in">transformPipeline</span>(DB::QueryPipeline&amp;) LimitStep.cpp:<span class="number">33</span></span><br><span class="line">DB::ITransformingStep::<span class="built_in">updatePipeline</span>(std::__1::vector&lt;std::__1::unique_ptr&lt;DB::QueryPipeline, std::__1::default_delete&lt;DB::QueryPipeline&gt; &gt;, std::__1::allocator&lt;std::__1::unique_ptr&lt;DB::QueryPipeline, std::__1::default_delete&lt;DB::QueryPipeline&gt; &gt; &gt; &gt;) ITransformingStep.cpp:<span class="number">21</span></span><br><span class="line">DB::QueryPlan::<span class="built_in">buildQueryPipeline</span>() QueryPlan.cpp:<span class="number">154</span></span><br><span class="line">DB::InterpreterSelectWithUnionQuery::<span class="built_in">execute</span>() InterpreterSelectWithUnionQuery.cpp:<span class="number">200</span></span><br><span class="line">DB::<span class="built_in">executeQueryImpl</span>(<span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *, DB::Context &amp;, <span class="keyword">bool</span>, DB::QueryProcessingStage::Enum, <span class="keyword">bool</span>, DB::ReadBuffer *) executeQuery.cpp:<span class="number">385</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">722</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">307</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">141</span></span><br></pre></td></tr></table></figure><h3 id="3-Pipeline执行"><a href="#3-Pipeline执行" class="headerlink" title="3. Pipeline执行"></a>3. Pipeline执行</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">DB::LimitTransform::<span class="built_in">prepare</span>(std::__1::vector&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::allocator&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::vector&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::allocator&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span>&gt; &gt; <span class="keyword">const</span>&amp;) LimitTransform.cpp:<span class="number">67</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">prepareProcessor</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, std::__1::unique_lock&lt;std::__1::mutex&gt;) PipelineExecutor.cpp:<span class="number">291</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">tryAddProcessorToStackIfUpdated</span>(DB::PipelineExecutor::Edge&amp;, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, <span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">264</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">prepareProcessor</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, std::__1::unique_lock&lt;std::__1::mutex&gt;) PipelineExecutor.cpp:<span class="number">373</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">tryAddProcessorToStackIfUpdated</span>(DB::PipelineExecutor::Edge&amp;, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, <span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">264</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">prepareProcessor</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, std::__1::unique_lock&lt;std::__1::mutex&gt;) PipelineExecutor.cpp:<span class="number">373</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">tryAddProcessorToStackIfUpdated</span>(DB::PipelineExecutor::Edge&amp;, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, <span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">264</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">prepareProcessor</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, std::__1::unique_lock&lt;std::__1::mutex&gt;) PipelineExecutor.cpp:<span class="number">373</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">tryAddProcessorToStackIfUpdated</span>(DB::PipelineExecutor::Edge&amp;, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, <span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">264</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">prepareProcessor</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, std::__1::unique_lock&lt;std::__1::mutex&gt;) PipelineExecutor.cpp:<span class="number">373</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">tryAddProcessorToStackIfUpdated</span>(DB::PipelineExecutor::Edge&amp;, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, <span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">264</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">prepareProcessor</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, std::__1::unique_lock&lt;std::__1::mutex&gt;) PipelineExecutor.cpp:<span class="number">373</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">initializeExecution</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">747</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">executeImpl</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">764</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">execute</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">479</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">833</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">307</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">141</span></span><br></pre></td></tr></table></figure><h3 id="4-Output执行发送"><a href="#4-Output执行发送" class="headerlink" title="4. Output执行发送"></a>4. Output执行发送</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DB::MySQLOutputFormat::<span class="built_in">consume</span>(DB::Chunk) MySQLOutputFormat.cpp:<span class="number">53</span></span><br><span class="line">DB::IOutputFormat::<span class="built_in">work</span>() IOutputFormat.cpp:<span class="number">62</span></span><br><span class="line">DB::<span class="built_in">executeJob</span>(DB::IProcessor *) PipelineExecutor.cpp:<span class="number">155</span></span><br><span class="line"><span class="built_in"><span class="keyword">operator</span></span>() PipelineExecutor.cpp:<span class="number">172</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">executeStepImpl</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, std::__1::atomic&lt;<span class="keyword">bool</span>&gt;*) PipelineExecutor.cpp:<span class="number">630</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">executeSingleThread</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">546</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">executeImpl</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">812</span></span><br><span class="line">DB::PipelineExecutor::<span class="built_in">execute</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>) PipelineExecutor.cpp:<span class="number">479</span></span><br><span class="line">DB::<span class="built_in">executeQuery</span>(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, <span class="keyword">bool</span>, DB::Context&amp;, std::__1::function&lt;<span class="built_in"><span class="keyword">void</span></span> (std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt; &gt; <span class="keyword">const</span>&amp;)&gt;) executeQuery.cpp:<span class="number">800</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">comQuery</span>(DB::ReadBuffer&amp;) MySQLHandler.cpp:<span class="number">311</span></span><br><span class="line">DB::MySQLHandler::<span class="built_in">run</span>() MySQLHandler.cpp:<span class="number">141</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>ClickHouse 的模块化比较清晰，像乐高积木一样可以组合拼装，当我们执行:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> system.numbers LIMIT <span class="number">5</span></span><br></pre></td></tr></table></figure><p>首先内核解析 SQL 语句生成 AST，然后根据 AST 获取数据源 Source，pipeline.Add(Source)。<br>其次根据 AST 信息生成 QueryPlan，根据 QueryPlan 再生成相应的 Transform，pipeline.Add(LimitTransform)。<br>然后添加 Output Sink 作为数据发送对象，pipeline.Add(OutputSink)。<br>执行 pipeline, 各个 Transformer 开始工作。</p><p>ClickHouse 的 Transformer 调度系统叫做 Processor，也是决定性能的重要模块，详情见 <a href="https://bohutang.me/2020/06/11/clickhouse-and-friends-processor/">Pipeline 处理器和调度器</a>。<br>ClickHouse 是一辆手动挡的豪华跑车，免费拥有，海啸们！</p><hr><p>欢迎关注我的微信公众号【MySQL数据库技术】。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="MySQL数据库技术" align="left"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>开源中国（oschina）</td><td><a href="https://my.oschina.net/dbkernel">https://my.oschina.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;blockquote&gt;
&lt;p&gt;《ClickHouse和他的朋友们》系列文章转载自圈内好友 &lt;a href=&quot;https://bohutang.me/&quot;&gt;BohuTANG&lt;/a&gt; 的博客，原文链接：&lt;br&gt;&lt;a href=&quot;htt</summary>
      
    
    
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/categories/ClickHouse/"/>
    
    
    <category term="ClickHouse和他的朋友们" scheme="http://dbkernel.github.io/tags/ClickHouse%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/tags/ClickHouse/"/>
    
    <category term="源码分析" scheme="http://dbkernel.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>源码分析 | ClickHouse和他的朋友们（1）编译、开发、测试</title>
    <link href="http://dbkernel.github.io/2020/06/05/clickhouse-and-friends-01-development/"/>
    <id>http://dbkernel.github.io/2020/06/05/clickhouse-and-friends-01-development/</id>
    <published>2020-06-05T11:37:10.000Z</published>
    <updated>2021-08-22T05:58:57.049Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><blockquote><p>《ClickHouse和他的朋友们》系列文章转载自圈内好友 <a href="https://bohutang.me/">BohuTANG</a> 的博客，原文链接：<br><a href="https://bohutang.me/2020/06/05/clickhouse-and-friends-development/">https://bohutang.me/2020/06/05/clickhouse-and-friends-development/</a><br>以下为正文。</p></blockquote><p>一次偶然的机会，和ClickHouse团队做了一次线下沟通，Alexey提到ClickHouse的设计哲学:</p><ol><li>The product must solve actual problem</li><li>And do it better than others</li></ol><p>用工程思维解决商业问题的典范啊！</p><p>对用户来说，他们关心的不是什么天花乱坠、上天入地的高科技，只是需要一个能很好解决自己问题的方案，这在开源社区是非常难得的，靠实力“野蛮式”生长。</p><p>于是，我对这个散发着伏特加味道的利器充满了好奇，并参与到ClickHouse的社区中一探究竟，第一感觉是开放、友好、战斗力强(AK47 vs CK16, ClickHouse 2016年开源)。</p><p>本文先从编译和测试入手，再到如何为社区贡献Patch，希望对那些想参与CK社区的同学有所帮助。</p><h2 id="如何本地编译和测试ClickHouse？"><a href="#如何本地编译和测试ClickHouse？" class="headerlink" title="如何本地编译和测试ClickHouse？"></a><strong>如何本地编译和测试ClickHouse？</strong></h2><h3 id="源码获取"><a href="#源码获取" class="headerlink" title="源码获取"></a><strong>源码获取</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --recursive https://github.com/ClickHouse/ClickHouse</span><br></pre></td></tr></table></figure><h3 id="编译准备"><a href="#编译准备" class="headerlink" title="编译准备"></a><strong>编译准备</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install build-essential</span><br><span class="line">sudo apt-get install software-properties-common</span><br><span class="line">sudo apt-add-repository ppa:ubuntu-toolchain-r/<span class="built_in">test</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install gcc-9 g++-9 git python ninja-build</span><br><span class="line">sudo snap install cmake</span><br></pre></td></tr></table></figure><h3 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a><strong>开始编译</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ClickHouse</span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"><span class="built_in">export</span> CC=gcc-9</span><br><span class="line"><span class="built_in">export</span> CXX=g++-9</span><br><span class="line">cmake ..</span><br><span class="line">ninja</span><br></pre></td></tr></table></figure><h3 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a><strong>测试方法</strong></h3><p>ClickHouse的测试在官方<a href="https://github.com/ClickHouse/ClickHouse/blob/master/docs/en/development/tests.md">development/tests</a>文档里有详细的介绍，这里列举3个常用的测试模式：</p><h4 id="1-Functional-Tests"><a href="#1-Functional-Tests" class="headerlink" title="1. Functional Tests"></a>1. Functional Tests</h4><p>功能测试，主要用于ClickHouse内部功能测试，方式：输入一个sql文件，输出一个result，类似MySQL里的mtr，<a href="https://github.com/ClickHouse/ClickHouse/tree/master/tests/queries">测试集合</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> tests</span><br><span class="line">./clickhouse-test -c <span class="string">&quot;../build/programs/clickhouse-client&quot;</span> 00001_select_1</span><br></pre></td></tr></table></figure><h4 id="2-Integration-Tests"><a href="#2-Integration-Tests" class="headerlink" title="2. Integration Tests"></a>2. Integration Tests</h4><p>集成测试，主要用于涉及第三方服务的测试，比如MySQL/Postgres/MongoDB等，以容器化方式编排调度(pytest)运行，<a href="https://github.com/ClickHouse/ClickHouse/tree/master/tests/integration">测试集合</a></p><p>由于涉及模块较多，集成测试环境的搭建有一定的难度，建议使用官方的docker镜像。比如要跑test_mysql_protocol下的集成测试集：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> tests/integration</span><br><span class="line">docker pull yandex/clickhouse-integration-tests-runner</span><br><span class="line">./runner --binary /your/ClickHouse/build/programs/clickhouse  --bridge-binary /your/ClickHouse/build/programs/clickhouse-odbc-bridge --configs-dir /your/ClickHouse/programs/server/ <span class="string">&#x27;test_mysql_protocol/test.py::test_java_client -ss -vv&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="3-Unit-Tests"><a href="#3-Unit-Tests" class="headerlink" title="3. Unit Tests"></a>3. Unit Tests</h4><p>单元测试，主要用于代码模块的测试，测试集在各个模块的tests目录，比如: <a href="https://github.com/ClickHouse/ClickHouse/tree/master/src/Core/tests">Core/tests</a></p><p>如果大家想了解某个模块是如何工作的，强烈建议去翻翻该模块的tests目录，比如想了解processor的工作机制，跟踪调试 <a href="https://github.com/ClickHouse/ClickHouse/blob/master/src/Processors/tests/processors_test.cpp">Processors/tests/</a> 即可。</p><h2 id="如何给ClickHouse社区提Patch？"><a href="#如何给ClickHouse社区提Patch？" class="headerlink" title="如何给ClickHouse社区提Patch？"></a><strong>如何给ClickHouse社区提Patch？</strong></h2><h4 id="1-fork"><a href="#1-fork" class="headerlink" title="1. fork"></a>1. fork</h4><p>首先在自己的github上fork一份ClickHouse代码，比如 <a href="https://github.com/BohuTANG/ClickHouse">https://github.com/BohuTANG/ClickHouse</a></p><h4 id="2-clone到本地"><a href="#2-clone到本地" class="headerlink" title="2. clone到本地"></a>2. clone到本地</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/BohuTANG/ClickHouse</span><br><span class="line">git checkout -B mysql_replica(branch名字)</span><br></pre></td></tr></table></figure><h4 id="3-创建新的分支"><a href="#3-创建新的分支" class="headerlink" title="3. 创建新的分支"></a>3. 创建新的分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -B mysql_replica(branch名字)</span><br></pre></td></tr></table></figure><h4 id="4-功能开发"><a href="#4-功能开发" class="headerlink" title="4. 功能开发"></a>4. 功能开发</h4><p>开发者可以提交一个Draft Pull Request到官方，github会显示这个Pull Request处于Draft状态，官方是无法Merge的</p><h4 id="5-can-be-testd标签"><a href="#5-can-be-testd标签" class="headerlink" title="5. can be testd标签"></a>5. can be testd标签</h4><p>等待Upstream打[can be tested]标签，一旦被标记CI狂魔们就强势开跑，跑一轮大概需要几十个小时。<br>协助开发者发现一些代码Style、编译以及测试等错误，这样开发者就可以在自己的分支不停的迭代、修正。<br><img src="github-ck-ci.jpeg" alt="img"></p><p>如果只是修改typo，这个标签Upstream通常不会添加。</p><h4 id="6-开发完毕"><a href="#6-开发完毕" class="headerlink" title="6. 开发完毕"></a>6. 开发完毕</h4><p>开发完成，测试OK，把Draft提升为正式Pull Request，等待Upstraem Review。</p><h4 id="7-Merge到Master"><a href="#7-Merge到Master" class="headerlink" title="7. Merge到Master"></a>7. Merge到Master</h4><p>如果Upstream通过，你的代码会被Merge到Master，恭喜你成为ClickHouse贡献者</p><h4 id="8-注意事项"><a href="#8-注意事项" class="headerlink" title="8. 注意事项"></a>8. 注意事项</h4><p>ClickHouse Upstream迭代非常快，一定要多关注master分支进度，尽量保持自己的分支代码与master同步。否则Upstream Docker更新，自己的test可能就过不了。</p><p>建议把<a href="https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/development">doc/development</a>读一遍。</p><hr><p>欢迎关注我的微信公众号【MySQL数据库技术】。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="MySQL数据库技术" align="left"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>开源中国（oschina）</td><td><a href="https://my.oschina.net/dbkernel">https://my.oschina.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;blockquote&gt;
&lt;p&gt;《ClickHouse和他的朋友们》系列文章转载自圈内好友 &lt;a href=&quot;https://bohutang.me/&quot;&gt;BohuTANG&lt;/a&gt; 的博客，原文链接：&lt;br&gt;&lt;a href=&quot;htt</summary>
      
    
    
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/categories/ClickHouse/"/>
    
    
    <category term="ClickHouse和他的朋友们" scheme="http://dbkernel.github.io/tags/ClickHouse%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    
    <category term="ClickHouse" scheme="http://dbkernel.github.io/tags/ClickHouse/"/>
    
    <category term="源码分析" scheme="http://dbkernel.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>特性介绍 | MySQL select count(*) 、count(1)、count(列) 详解（1）：概念及区别</title>
    <link href="http://dbkernel.github.io/2020/05/06/mysql-select-count-functions-01-concepts-and-differences/"/>
    <id>http://dbkernel.github.io/2020/05/06/mysql-select-count-functions-01-concepts-and-differences/</id>
    <published>2020-05-06T07:55:15.000Z</published>
    <updated>2021-09-12T02:52:49.801Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>从接触MySQL开始断断续续的看过一些文章，对<code>count()</code>操作众说纷纭，其中分歧点主要在于<code>count(1)</code>和<code>count(*)</code>哪个效率高，有说<code>count(1)</code>比<code>count(*)</code>快的（<code>这种说法更普遍</code>），有说二者一样快的。个人理解这两种行为可能适用于的是不同的版本，我只关心较新的MySQL版本是什么行为，详见下文。</p><h3 id="二、含义"><a href="#二、含义" class="headerlink" title="二、含义"></a>二、含义</h3><p>首先，先说明一下常见<code>count()</code>操作及含义：</p><blockquote><p><code>count(*)</code>：计算包括NULL值在内的行数，SQL92定义的标准统计行数的语法。</p><p><code>count(1)</code>：计算包括NULL值在内的行数，其中的1是恒真表达式。</p><p><code>count(列名)</code>：计算指定列的行数，但不包含NULL值。</p></blockquote><h3 id="三、具体区别"><a href="#三、具体区别" class="headerlink" title="三、具体区别"></a>三、具体区别</h3><p><a href="https://dev.mysql.com/doc/refman/5.7/en/group-by-functions.html#function_count">MySQL手册</a>中相关描述如下：</p><blockquote><p>For transactional storage engines such as InnoDB, storing an exact row count is problematic. Multiple transactions may be occurring at the same time, each of which may affect the count.</p><p>InnoDB does not keep an internal count of rows in a table because concurrent transactions might “see” different numbers of rows at the same time. Consequently, <code>SELECT COUNT(*)</code> statements only count rows visible to the current transaction.</p><p>Prior to <code>MySQL 5.7.18</code>, InnoDB processes <code>SELECT COUNT(*)</code> statements by scanning the clustered index. As of <code>MySQL 5.7.18</code>, InnoDB processes <code>SELECT COUNT(*)</code> statements by traversing the smallest available secondary index unless an index or optimizer hint directs the optimizer to use a different index. If a secondary index is not present, the clustered index is scanned.</p><p>Processing <code>SELECT COUNT(*)</code> statements takes some time if index records are not entirely in the buffer pool. For a faster count, create a counter table and let your application update it according to the inserts and deletes it does. However, this method may not scale well in situations where thousands of concurrent transactions are initiating updates to the same counter table. If an approximate row count is sufficient, use <code>SHOW TABLE STATUS</code>.</p><p>InnoDB handles <code>SELECT COUNT(*)</code> and <code>SELECT COUNT(1)</code> operations in the same way. There is no performance difference.</p><p>For <code>MyISAM</code> tables, <code>COUNT(*)</code> is optimized to return very quickly if the SELECT retrieves from one table, no other columns are retrieved, and there is no WHERE clause. For example:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span>mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><p>This optimization only applies to MyISAM tables, because an exact row count is stored for this storage engine and can be accessed very quickly.COUNT(1) is only subject to the same optimization if the first column is defined as NOT NULL.</p></blockquote><p><strong>官方这段描述要点如下：</strong></p><blockquote><ol><li>InnoDB是事务引擎，支持MVCC，并发事务可能同时“看到”不同的行数，所以，<strong>InnoDB不保留表中的行数</strong>，<code>SELECT COUNT(*)</code>语句只计算当前事务可见的行数。</li><li>在MySQL 5.7.18之前，InnoDB通过<strong>扫描聚集索引</strong>处理<code>SELECT COUNT(*)</code>语句。从MySQL 5.7.18开始，<code>InnoDB</code>通过<strong>遍历最小的可用二级索引</strong>来处理<code>SELECT COUNT(*)</code>语句，除非索引或优化器明确指示使用不同的索引。<strong>如果不存在二级索引，则扫描聚集索引</strong>。这样的设计单从 IO 的角度就节省了很多开销。</li><li><strong>InnoDB以同样的方式处理<code>SELECT COUNT(*)</code>和<code>SELECT COUNT(1)</code>操作，没有性能差异。</strong> 因此，建议使用符合SQL标准的<code>count(*)</code>。</li><li>对于<code>MyISAM</code>表，由于MyISAM引擎存储了精确的行数，因此，如果<code>SELECT COUNT(*)</code>语句不包含WHERE子句，则会很快返回。这个很好理解，如果带了where条件，就需要扫表了。</li><li>如果索引记录不完全在缓冲池中，则处理<code>SELECT(*)</code>语句需要一些时间。为了更快的计数，您可以创建一个计数器表，并让您的应用程序按插入和删除操作更新它。然而，这种方法在同一计数器表中启动成千上万个并发事务的情况下，可能无法很好地扩展。如果一个近似的行数足够，可以使用<code>SHOW TABLE STATUS</code>查询行数。</li></ol></blockquote><p>到这里我们明白了 <code>count(*)</code> 和 <code>count(1)</code> 本质上面其实是一样的，那么 <code>count(column)</code> 又是怎么回事呢？</p><blockquote><p><code>count(column)</code> 也是会遍历整张表，但是不同的是它会<strong>拿到 column 的值以后判断是否为空，然后再进行累加</strong>，那么如果<strong>针对主键需要解析内容</strong>，如果是<strong>二级索引需要再次根据主键获取内容，则要多一次 IO 操作</strong>，所以 <code>count(column)</code> 的性能肯定不如前两者，如果按照效率比较的话：*<em>count(</em>)=count(1)&gt;count(primary key)&gt;count(非主键column)**。</p></blockquote><h3 id="四、建议"><a href="#四、建议" class="headerlink" title="四、建议"></a>四、建议</h3><p>基于以上描述，如果要查询innodb存储引擎的表的总行数，有如下建议：</p><ol><li>若仅仅是想获取大概的行数，建议使用<code>show table status</code>或查询<code>information_schema.tables</code>：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use db6;</span><br><span class="line">Reading <span class="keyword">table</span> information <span class="keyword">for</span> completion <span class="keyword">of</span> <span class="keyword">table</span> <span class="keyword">and</span> <span class="keyword">column</span> names</span><br><span class="line">You can turn off this feature <span class="keyword">to</span> <span class="keyword">get</span> a quicker startup <span class="keyword">with</span> <span class="operator">-</span>A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_db6 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br><span class="line"><span class="operator">|</span> t1            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">table</span> status\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">           Name: t1</span><br><span class="line">         Engine: InnoDB</span><br><span class="line">        Version: <span class="number">10</span></span><br><span class="line">     Row_format: <span class="keyword">Dynamic</span></span><br><span class="line">           <span class="keyword">Rows</span>: <span class="number">2</span></span><br><span class="line"> Avg_row_length: <span class="number">8192</span></span><br><span class="line">    Data_length: <span class="number">16384</span></span><br><span class="line">Max_data_length: <span class="number">0</span></span><br><span class="line">   Index_length: <span class="number">0</span></span><br><span class="line">      Data_free: <span class="number">0</span></span><br><span class="line"> Auto_increment: <span class="keyword">NULL</span></span><br><span class="line">    Create_time: <span class="number">2020</span><span class="number">-04</span><span class="number">-21</span> <span class="number">12</span>:<span class="number">00</span>:<span class="number">44</span></span><br><span class="line">    Update_time: <span class="keyword">NULL</span></span><br><span class="line">     Check_time: <span class="keyword">NULL</span></span><br><span class="line">      <span class="keyword">Collation</span>: utf8mb4_general_ci</span><br><span class="line">       Checksum: <span class="keyword">NULL</span></span><br><span class="line"> Create_options:</span><br><span class="line">        Comment:</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_name <span class="operator">=</span> <span class="string">&#x27;t1&#x27;</span>\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">  TABLE_CATALOG: def</span><br><span class="line">   TABLE_SCHEMA: db6</span><br><span class="line">     TABLE_NAME: t1</span><br><span class="line">     TABLE_TYPE: BASE <span class="keyword">TABLE</span></span><br><span class="line">         ENGINE: InnoDB</span><br><span class="line">        VERSION: <span class="number">10</span></span><br><span class="line">     ROW_FORMAT: <span class="keyword">Dynamic</span></span><br><span class="line">     TABLE_ROWS: <span class="number">2</span></span><br><span class="line"> AVG_ROW_LENGTH: <span class="number">8192</span></span><br><span class="line">    DATA_LENGTH: <span class="number">16384</span></span><br><span class="line">MAX_DATA_LENGTH: <span class="number">0</span></span><br><span class="line">   INDEX_LENGTH: <span class="number">0</span></span><br><span class="line">      DATA_FREE: <span class="number">0</span></span><br><span class="line"> AUTO_INCREMENT: <span class="keyword">NULL</span></span><br><span class="line">    CREATE_TIME: <span class="number">2020</span><span class="number">-04</span><span class="number">-21</span> <span class="number">12</span>:<span class="number">00</span>:<span class="number">44</span></span><br><span class="line">    UPDATE_TIME: <span class="keyword">NULL</span></span><br><span class="line">     CHECK_TIME: <span class="keyword">NULL</span></span><br><span class="line">TABLE_COLLATION: utf8mb4_general_ci</span><br><span class="line">       CHECKSUM: <span class="keyword">NULL</span></span><br><span class="line"> CREATE_OPTIONS:</span><br><span class="line">  TABLE_COMMENT:</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li><li>反之，如果必须要获取准确的总行数，建议：<blockquote><ol><li>创建一个计数器表，并让您的应用程序按插入和删除操作更新它。</li><li>若业务插入和删除相对较少，也可以考虑缓存到 redis。</li></ol></blockquote></li></ol><p>篇幅有限，深入验证、源码分析将在下一篇文章中介绍。</p><hr><p>欢迎关注我的微信公众号【MySQL数据库技术】。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="MySQL数据库技术" align="left"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>开源中国（oschina）</td><td><a href="https://my.oschina.net/dbkernel">https://my.oschina.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h3&gt;&lt;p&gt;从接触MySQL开始断断续续的看过一些文章，对&lt;code&gt;count()&lt;/code&gt;操作众说纷纭，其中分歧点主要在于&lt;co</summary>
      
    
    
    
    <category term="MySQL" scheme="http://dbkernel.github.io/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://dbkernel.github.io/tags/MySQL/"/>
    
    <category term="Select" scheme="http://dbkernel.github.io/tags/Select/"/>
    
    <category term="Count" scheme="http://dbkernel.github.io/tags/Count/"/>
    
  </entry>
  
  <entry>
    <title>特性介绍 | MySQL-自增列详解（1）：自增列概念及使用</title>
    <link href="http://dbkernel.github.io/2019/12/09/mysql-auto_increment-details-01-concepts-and-usage/"/>
    <id>http://dbkernel.github.io/2019/12/09/mysql-auto_increment-details-01-concepts-and-usage/</id>
    <published>2019-12-09T11:37:10.000Z</published>
    <updated>2021-09-12T02:52:37.802Z</updated>
    
    <content type="html"><![CDATA[<p>一直想写一些关于自增列的文章，今天下班比较早，Let’s do this.</p><span id="more"></span><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h3><p>自增列，即 AUTO_INCREMENT，可用于为新的记录生成唯一标识。</p><p><strong>要求：</strong></p><ol><li>AUTO_INCREMENT 是数据列的一种属性，只适用于整数类型数据列。</li><li>AUTO_INCREMENT 数据列必须具备 NOT NULL 属性。</li></ol><h3 id="2-使用方法"><a href="#2-使用方法" class="headerlink" title="2. 使用方法"></a>2. 使用方法</h3><h4 id="2-1-创建含自增列的表"><a href="#2-1-创建含自增列的表" class="headerlink" title="2.1. 创建含自增列的表"></a>2.1. 创建含自增列的表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 不指定 AUTO_INCREMENT 的值，则从1开始</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> t1(a <span class="type">int</span> auto_increment <span class="keyword">primary</span> key,b <span class="type">int</span>);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 手动指定 AUTO_INCREMENT 的值</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> t2(a <span class="type">int</span> auto_increment <span class="keyword">primary</span> key,b <span class="type">int</span>) AUTO_INCREMENT<span class="operator">=</span><span class="number">100</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><h4 id="2-2-插入数据"><a href="#2-2-插入数据" class="headerlink" title="2.2. 插入数据"></a>2.2. 插入数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 不指定自增列</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t1(b) <span class="keyword">values</span>(<span class="number">1</span>),(<span class="number">2</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> a <span class="operator">|</span> b    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 指定自增列</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t1(a,b) <span class="keyword">values</span>(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="2-3-如何查看表的-AUTO-INCREMENT-涨到了多少？"><a href="#2-3-如何查看表的-AUTO-INCREMENT-涨到了多少？" class="headerlink" title="2.3. 如何查看表的 AUTO_INCREMENT 涨到了多少？"></a>2.3. 如何查看表的 AUTO_INCREMENT 涨到了多少？</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span> <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> t1    <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t1` (</span><br><span class="line">  `a` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `b` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`a`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="2-4-插入数据时能否有空洞？"><a href="#2-4-插入数据时能否有空洞？" class="headerlink" title="2.4. 插入数据时能否有空洞？"></a>2.4. 插入数据时能否有空洞？</h4><p>可以的，但要注意 <code>AUTO_INCREMENT 的值一定比自增列当前最大的记录值大</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创造空洞</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t1(a,b) <span class="keyword">values</span>(<span class="number">5</span>,<span class="number">5</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> a <span class="operator">|</span> b    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span> <span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span> <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> t1    <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t1` (</span><br><span class="line">  `a` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `b` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`a`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">6</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="2-5-能否插入重复记录"><a href="#2-5-能否插入重复记录" class="headerlink" title="2.5. 能否插入重复记录"></a>2.5. 能否插入重复记录</h4><p>既然自增列是唯一记录，那么肯定不能插入重复记录。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 尝试插入重复记录</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t1(a,b) <span class="keyword">values</span>(<span class="number">5</span>,<span class="number">5</span>);</span><br><span class="line">ERROR <span class="number">1062</span> (<span class="number">23000</span>): Duplicate entry <span class="string">&#x27;5&#x27;</span> <span class="keyword">for</span> key <span class="string">&#x27;PRIMARY&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="2-6-怎么修改-AUTO-INCREMENT-的值？"><a href="#2-6-怎么修改-AUTO-INCREMENT-的值？" class="headerlink" title="2.6. 怎么修改 AUTO_INCREMENT 的值？"></a>2.6. 怎么修改 AUTO_INCREMENT 的值？</h4><p><strong>注意</strong>：AUTO_INCREMENT 不能小于当前自增列记录的最大值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 尝试将 AUTO_INCREMENT 设为10</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> t1 AUTO_INCREMENT<span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span> <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> t1    <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t1` (</span><br><span class="line">  `a` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `b` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`a`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">10</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 尝试将 AUTO_INCREMENT 设为4</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> t1 AUTO_INCREMENT<span class="operator">=</span><span class="number">4</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 由于自增列最大记录值是5，那么 AUTO_INCREMENT 不能小于5，因此该值为6</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span> <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> t1    <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t1` (</span><br><span class="line">  `a` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `b` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`a`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">6</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-问题"><a href="#3-问题" class="headerlink" title="3. 问题"></a>3. 问题</h3><h4 id="3-1-自增列是否有上限？"><a href="#3-1-自增列是否有上限？" class="headerlink" title="3.1. 自增列是否有上限？"></a>3.1. 自增列是否有上限？</h4><p><strong>由上文可见，自增列会一直增加，那是否有上限呢？</strong></p><p>上文中表 t1 的自增列是 int 类型，由下表（MySQL 5.7）可见取值范围是 -2147483648 到 2147483647（ -2<sup>31</sup> ~ 2<sup>31</sup> - 1 ）。</p><table><thead><tr><th>Type</th><th>Storage (Bytes)</th><th>Minimum Value Signed</th><th>Minimum Value Unsigned</th><th>Maximum Value Signed</th><th>Maximum Value Unsigned</th></tr></thead><tbody><tr><td><code>TINYINT</code></td><td>1</td><td>-128</td><td>0</td><td>127</td><td>255</td></tr><tr><td><code>SMALLINT</code></td><td>2</td><td>-32768</td><td>0</td><td>32767</td><td>65535</td></tr><tr><td><code>MEDIUMINT</code></td><td>3</td><td>-8388608</td><td>0</td><td>8388607</td><td>16777215</td></tr><tr><td><code>INT</code></td><td>4</td><td>-2147483648</td><td>0</td><td>2147483647</td><td>4294967295</td></tr><tr><td><code>BIGINT</code></td><td>8</td><td>-2<sup>63</sup></td><td>0</td><td>2<sup>63</sup>-1</td><td>2<sup>64</sup>-1</td></tr></tbody></table><p>验证如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span> <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> t1    <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t1` (</span><br><span class="line">  `a` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `b` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`a`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2147483644</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t1(b) <span class="keyword">values</span>(<span class="number">0</span>),(<span class="number">0</span>),(<span class="number">0</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t1(b) <span class="keyword">values</span>(<span class="number">0</span>);</span><br><span class="line">ERROR <span class="number">1062</span> (<span class="number">23000</span>): Duplicate entry <span class="string">&#x27;2147483647&#x27;</span> <span class="keyword">for</span> key <span class="string">&#x27;PRIMARY&#x27;</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span> <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> t1    <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t1` (</span><br><span class="line">  `a` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `b` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`a`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2147483647</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>这里需要补充说明下 <code>int(11)</code> 中的数字的含义：</p><blockquote><p>MySQL中整数数据类型后面的(N)指定<strong>显示宽度</strong>。<br>显示宽度不影响查询出来的结果。<br>显示宽度限制了小数点的位置(只要实际数字不超过显示宽度，这种情况下，数字显示为原样)。<br>显示宽度也是一个有用的工具，可以让开发人员知道应该将值填充到哪个长度。</p></blockquote><h4 id="3-2-如何避免自增列超过最大值？"><a href="#3-2-如何避免自增列超过最大值？" class="headerlink" title="3.2. 如何避免自增列超过最大值？"></a>3.2. 如何避免自增列超过最大值？</h4><p>可以采用<code>无符号的 BIGINT 类型</code>（也可根据业务产生自增列的速度采用合适的类型），能极大提升自增列的范围。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> t2(a <span class="type">bigint</span> unsigned <span class="keyword">primary</span> key auto_increment,b <span class="type">int</span>);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> t2 auto_increment<span class="operator">=</span><span class="number">18446744073709551613</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> t2;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span> <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                                    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> t2    <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t2` (</span><br><span class="line">  `a` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `b` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`a`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">18446744073709551613</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t2(b) <span class="keyword">values</span>(<span class="number">0</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t2(b) <span class="keyword">values</span>(<span class="number">0</span>);</span><br><span class="line">ERROR <span class="number">1467</span> (HY000): Failed <span class="keyword">to</span> read auto<span class="operator">-</span>increment <span class="keyword">value</span> <span class="keyword">from</span> storage engine</span><br><span class="line">mysql<span class="operator">&gt;</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t2;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+------+</span></span><br><span class="line"><span class="operator">|</span> a                    <span class="operator">|</span> b    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">18446744073709551613</span> <span class="operator">|</span>    <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong><code>UNSIGNED BIGINT</code> 类型的范围究竟有多大呢？</strong></p><blockquote><p>假如每秒自增100万次，想要消耗完需要 <code>18446744073709551613/1000000/3600/24/365</code>=584942年。</p></blockquote><p><strong>有的朋友会问如果自增列不是采用BIGINT类型，那么达到最大值后该表就无法写入，此时该怎么办呢？</strong></p><blockquote><p>一般达到最大值后再次插入数据会报错<code>ERROR 1467 (HY000): Failed to read auto-increment value from storage engine</code>，可以通过alter table 将自增列的类型设为数值范围更大的类型（比如BIGINT）。</p></blockquote><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h3><ol><li>AUTO_INCREMENT 列必定唯一，且仅用于整型类型。</li><li>AUTO_INCREMENT 列会持续增长，不会因 delete 自增列最大的记录而变小。</li><li>当 AUTO_INCREMENT 列达到当前类型的最大值后将无法插入数据，会报错<code>ERROR 1467 (HY000): Failed to read auto-increment value from storage engine</code>，此时将自增列改为 BIGINT 类型可解决问题。</li><li>为了避免自增列达到最大值，可将其设为BIGINT类型。</li><li>使用 alter table 修改 AUTO_INCREMENT 列时，其值会取<code>自增列当前最大记录值+1</code>与<code>将要设置的值</code>的最大值。</li><li>在MySQL 5.7 中，将列设置成 AUTO_INCREMENT 之后，必须将其设置成主键/或者是主键的一部分，否则会报错<code>ERROR 1075 (42000): Incorrect table definition; there can be only one auto column and it must be defined as a key</code>。</li></ol><hr><p>欢迎关注我的微信公众号【MySQL数据库技术】。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="MySQL数据库技术" align="left"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>开源中国（oschina）</td><td><a href="https://my.oschina.net/dbkernel">https://my.oschina.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;一直想写一些关于自增列的文章，今天下班比较早，Let’s do this.&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL" scheme="http://dbkernel.github.io/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://dbkernel.github.io/tags/MySQL/"/>
    
    <category term="auto_increment" scheme="http://dbkernel.github.io/tags/auto-increment/"/>
    
  </entry>
  
  <entry>
    <title>特性介绍 | Linux操作系统启动流程</title>
    <link href="http://dbkernel.github.io/2018/09/16/process-for-starting-the-linux-os/"/>
    <id>http://dbkernel.github.io/2018/09/16/process-for-starting-the-linux-os/</id>
    <published>2018-09-16T13:35:02.000Z</published>
    <updated>2021-09-11T10:22:00.562Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="总启动流程"><a href="#总启动流程" class="headerlink" title="总启动流程"></a>总启动流程</h1><blockquote><p>这部分转自：<a href="https://www.cnblogs.com/liang-io/p/9651656.html">https://www.cnblogs.com/liang-io/p/9651656.html</a></p></blockquote><p>一般来说，所有的操作系统的启动流程基本就是：</p><p><img src="linux-start-process-0-overview.jpg" alt="总启动流程"></p><p>总的来说，linux系统启动流程可以简单总结为以下几步：</p><blockquote><ol><li>开机BIOS自检，加载硬盘。</li><li>读取MBR,进行MBR引导。</li><li>grub引导菜单(Boot Loader)。</li><li>加载内核kernel。</li><li>启动init进程，依据inittab文件设定运行级别</li><li>init进程，执行rc.sysinit文件。</li><li>启动内核模块，执行不同级别的脚本程序。</li><li>执行/etc/rc.d/rc.local</li><li>启动mingetty，进入系统登陆界面。</li></ol></blockquote><p>linux系统安装时，如果要想设置开启启动项，可以：</p><blockquote><p>开机到BIOS提醒界面，按键F11（Dell服务器的做法）进入BIOS设置BOOT MENU，继而设置启动项：硬盘HD启动，光盘CD/DVD启动，还是U盘USB启动。</p></blockquote><h1 id="详细流程"><a href="#详细流程" class="headerlink" title="详细流程"></a>详细流程</h1><p>下面就linux操作系统的启动过程做一详细解析记录。</p><h2 id="1-加载内核"><a href="#1-加载内核" class="headerlink" title="1. 加载内核"></a>1. 加载内核</h2><p>操作系统接管硬件以后，首先读入 /boot 目录下的内核文件。</p><p><img src="linux-start-process-1-load-kernel.jpg" alt="加载内核"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@bastion-IDC ~]# ll /boot/</span><br><span class="line">total 21668</span><br><span class="line">-rw-r--r--. 1 root root   105195 Nov 22  2013 config-2.6.32-431.el6.x86_64</span><br><span class="line">drwxr-xr-x. 3 root root     1024 Aug 22 16:31 efi</span><br><span class="line">drwxr-xr-x. 2 root root     1024 Aug 22 16:32 grub</span><br><span class="line">-rw-------. 1 root root 15217153 Aug 22 16:32 initramfs-2.6.32-431.el6.x86_64.img</span><br><span class="line">drwx------. 2 root root    12288 Aug 22 16:24 lost+found</span><br><span class="line">-rw-r--r--. 1 root root   193758 Nov 22  2013 symvers-2.6.32-431.el6.x86_64.gz</span><br><span class="line">-rw-r--r--. 1 root root  2518236 Nov 22  2013 System.map-2.6.32-431.el6.x86_64</span><br><span class="line">-rwxr-xr-x. 1 root root  4128368 Nov 22  2013 vmlinuz-2.6.32-431.el6.x86_64</span><br></pre></td></tr></table></figure><h2 id="2-启动初始化进程"><a href="#2-启动初始化进程" class="headerlink" title="2. 启动初始化进程"></a>2. 启动初始化进程</h2><p>内核文件加载以后，就开始运行第一个程序 /sbin/init，它的作用是初始化系统环境。</p><p><img src="linux-start-process-2-start-init.jpg" alt="启动初始化进程"></p><p>由于init是第一个运行的程序，它的进程编号（pid）就是1。其他所有进程都从它衍生，都是它的子进程。</p><h2 id="3-确定运行级别"><a href="#3-确定运行级别" class="headerlink" title="3. 确定运行级别"></a>3. 确定运行级别</h2><p>许多程序需要开机启动。它们在Windows叫做”服务”（service），在Linux就叫做”守护进程”（daemon）。</p><p>init进程的一大任务，就是去运行这些开机启动的程序。但是，不同的场合需要启动不同的程序，比如用作服务器时，需要启动Apache，用作桌面就不需要。Linux允许为不同的场合，分配不同的开机启动程序，这就叫做”运行级别”（runlevel）。也就是说，启动时根据”运行级别”，确定要运行哪些程序。</p><p><img src="linux-start-process-3-run-level.jpg" alt="确定运行级别"></p><p>Linux预置七种init运行级别（0-6）：</p><blockquote><p>0：关机模式    （相当于poweroff）</p><p>1：单用户模式</p><p>2：无网络支持的多用户模式</p><p>3：有网络支持的多用户模式（也就是文本模式，工作中最常用的模式）</p><p>4：保留，未使用</p><p>5：有网络支持的X-windows支持多用户模式（也就是桌面图形模式）</p><p>6: 重新引导系统，即重启（相当于reboot）</p></blockquote><p>init进程首先读取文件 <code>/etc/inittab</code>，它是运行级别的设置文件。<br>如果打开它，可以看到第一行是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@bastion-IDC ~]# cat /etc/inittab</span><br><span class="line">....</span><br><span class="line">id:3:initdefault:</span><br></pre></td></tr></table></figure><p>initdefault的值是3，表明系统启动时的运行级别为3。如果需要指定其他级别，可以手动修改这个值。</p><p><strong>那么，运行级别3有哪些程序呢，系统怎么知道每个级别应该加载哪些程序呢？</strong></p><p>答案是每个运行级别在/etc目录下面，都有一个对应的子目录，指定要加载的程序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/etc/rc0.d</span><br><span class="line">/etc/rc1.d</span><br><span class="line">/etc/rc2.d</span><br><span class="line">/etc/rc3.d</span><br><span class="line">/etc/rc4.d</span><br><span class="line">/etc/rc5.d</span><br><span class="line">/etc/rc6.d</span><br></pre></td></tr></table></figure><p>上面目录名中的”rc”，表示<code>run command（运行程序）</code>，最后的d表示<code>directory（目录）</code>。下面让我们看看 /etc/rc3.d 目录中到底指定了哪些程序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[root@bastion-IDC ~]# ll /etc/rc3.d/</span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx. 1 root root 19 Aug 22 16:30 K10saslauthd -&gt; ../init.d/saslauthd</span><br><span class="line">lrwxrwxrwx. 1 root root 18 Aug 22 16:47 K15svnserve -&gt; ../init.d/svnserve</span><br><span class="line">lrwxrwxrwx. 1 root root 15 Aug 23 16:21 K25squid -&gt; ../init.d/squid</span><br><span class="line">lrwxrwxrwx. 1 root root 19 Dec 23 13:14 K45memcached -&gt; ../init.d/memcached</span><br><span class="line">lrwxrwxrwx. 1 root root 20 Aug 22 16:30 K50netconsole -&gt; ../init.d/netconsole</span><br><span class="line">lrwxrwxrwx. 1 root root 13 Dec 21 17:45 K60nfs -&gt; ../init.d/nfs</span><br><span class="line">lrwxrwxrwx. 1 root root 20 Dec 21 17:45 K69rpcsvcgssd -&gt; ../init.d/rpcsvcgssd</span><br><span class="line">lrwxrwxrwx. 1 root root 17 Nov 24 14:45 K75ntpdate -&gt; ../init.d/ntpdate</span><br><span class="line">lrwxrwxrwx. 1 root root 20 Aug 22 16:31 K87multipathd -&gt; ../init.d/multipathd</span><br><span class="line">lrwxrwxrwx. 1 root root 21 Aug 22 16:30 K87restorecond -&gt; ../init.d/restorecond</span><br><span class="line">lrwxrwxrwx. 1 root root 15 Aug 22 16:30 K89rdisc -&gt; ../init.d/rdisc</span><br><span class="line">lrwxrwxrwx. 1 root root 22 Aug 22 16:31 S02lvm2-monitor -&gt; ../init.d/lvm2-monitor</span><br><span class="line">lrwxrwxrwx. 1 root root 16 Aug 22 16:31 S07iscsid -&gt; ../init.d/iscsid</span><br><span class="line">lrwxrwxrwx. 1 root root 19 Aug 22 16:30 S08ip6tables -&gt; ../init.d/ip6tables</span><br><span class="line">lrwxrwxrwx. 1 root root 18 Aug 22 16:30 S08iptables -&gt; ../init.d/iptables</span><br><span class="line">lrwxrwxrwx. 1 root root 17 Aug 22 16:30 S10network -&gt; ../init.d/network</span><br><span class="line">lrwxrwxrwx. 1 root root 16 Aug 22 16:31 S11auditd -&gt; ../init.d/auditd</span><br><span class="line">lrwxrwxrwx. 1 root root 17 Aug 22 16:30 S12rsyslog -&gt; ../init.d/rsyslog</span><br><span class="line">lrwxrwxrwx. 1 root root 15 Dec 21 17:45 S13iscsi -&gt; ../init.d/iscsi</span><br><span class="line">lrwxrwxrwx. 1 root root 17 Dec 21 17:45 S13rpcbind -&gt; ../init.d/rpcbind</span><br><span class="line">lrwxrwxrwx. 1 root root 17 Dec 21 17:45 S14nfslock -&gt; ../init.d/nfslock</span><br><span class="line">lrwxrwxrwx. 1 root root 19 Aug 22 16:31 S15mdmonitor -&gt; ../init.d/mdmonitor</span><br><span class="line">lrwxrwxrwx. 1 root root 17 Dec 21 17:45 S19rpcgssd -&gt; ../init.d/rpcgssd</span><br><span class="line">lrwxrwxrwx. 1 root root 26 Aug 22 16:31 S25blk-availability -&gt; ../init.d/blk-availability</span><br><span class="line">lrwxrwxrwx. 1 root root 15 Aug 22 16:30 S25netfs -&gt; ../init.d/netfs</span><br><span class="line">lrwxrwxrwx. 1 root root 19 Aug 22 16:30 S26udev-post -&gt; ../init.d/udev-post</span><br><span class="line">lrwxrwxrwx. 1 root root 18 Oct 25 11:49 S50onealert -&gt; ../init.d/onealert</span><br><span class="line">lrwxrwxrwx. 1 root root 14 Aug 22 16:31 S55sshd -&gt; ../init.d/sshd</span><br><span class="line">lrwxrwxrwx. 1 root root 16 Oct 26 09:47 S56xinetd -&gt; ../init.d/xinetd</span><br><span class="line">lrwxrwxrwx. 1 root root 17 Aug 22 16:30 S80postfix -&gt; ../init.d/postfix</span><br><span class="line">lrwxrwxrwx. 1 root root 15 Aug 22 16:30 S90crond -&gt; ../init.d/crond</span><br><span class="line">lrwxrwxrwx. 1 root root 11 Aug 22 16:30 S99local -&gt; ../rc.local</span><br></pre></td></tr></table></figure><p>可以看到：</p><blockquote><p><code>字母S表示Start</code>，也就是启动的意思（启动脚本的运行参数为start）。</p><p>如果这个位置是<code>字母K</code>，就代表<code>Kill（关闭）</code>，即<strong>如果从其他运行级别切换过来，需要关闭的程序（启动脚本的运行参数为stop）</strong>。</p><p>后面的两位数字表示<code>处理顺序</code>，<strong>数字越小越早处理</strong>，所以第一个启动的程序是motd，然后是rpcbing、nfs……数字相同时，则按照程序名的字母顺序启动，所以rsyslog会先于sudo启动。</p><p>这个目录里的所有文件（除了README），就是启动时要加载的程序。如果想增加或删除某些程序，不建议手动修改 /etc/rcN.d 目录，最好是用一些专门命令进行管理（参考这里和这里）。</p></blockquote><h2 id="4-加载开机启动程序"><a href="#4-加载开机启动程序" class="headerlink" title="4. 加载开机启动程序"></a>4. 加载开机启动程序</h2><p>前面提到，七种预设的”运行级别”各自有一个目录，存放需要开机启动的程序。不难想到，如果多个”运行级别”需要启动同一个程序，那么这个程序的启动脚本，就会在每一个目录里都有一个拷贝。这样会造成管理上的困扰：如果要修改启动脚本，岂不是每个目录都要改一遍？</p><p>Linux的解决办法，就是七个 <code>/etc/rcN.d</code> 目录里列出的程序，都设为链接文件，指向另外一个目录 <code>/etc/init.d</code>，真正的启动脚本都统一放在这个目录中。init进程逐一加载开机启动程序，其实就是运行这个目录里的启动脚本。</p><p><img src="linux-start-process-4-initd.jpg" alt="加载开机启动程序"></p><p>下面就是链接文件真正的指向：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@bastion-IDC ~]# ls -l /etc/rc3.d</span><br><span class="line">lrwxrwxrwx. 1 root root 10 Aug 22 16:30 /etc/rc3.d -&gt; rc.d/rc3.d</span><br></pre></td></tr></table></figure><p>这样做的另一个好处，就是如果你要手动关闭或重启某个进程，直接到目录 /etc/init.d 中寻找启动脚本即可。</p><p>比如，我要重启iptables服务器，就运行下面的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@bastion-IDC ~]# /etc/init.d/iptables restart</span><br></pre></td></tr></table></figure><p>/etc/init.d 这个目录名最后一个字母d，是directory的意思，表示这是一个目录，用来与程序 /etc/init 区分。</p><h2 id="5-用户登录"><a href="#5-用户登录" class="headerlink" title="5. 用户登录"></a>5. 用户登录</h2><p>开机启动程序加载完毕以后，就要让用户登录了。</p><p><img src="linux-start-process-5-user-login.jpg" alt="用户登录"></p><p>一般来说，用户的登录方式有三种：命令行登录、ssh登录、图形界面登录。这三种情况，都有自己的方式对用户进行认证。</p><blockquote><p>1）<strong>命令行登录</strong>：init进程调用getty程序（意为get teletype），让用户输入用户名和密码。输入完成后，再调用login程序，核对密码（Debian还会再多运行一个身份核对程序/etc/pam.d/login）。如果密码正确，就从文件 /etc/passwd 读取该用户指定的shell，然后启动这个shell。</p><p>2）<strong>ssh登录</strong>：这时系统调用sshd程序（Debian还会再运行/etc/pam.d/ssh ），取代getty和login，然后启动shell。</p><p>3）<strong>图形界面登录</strong>：init进程调用显示管理器，Gnome图形界面对应的显示管理器为gdm（GNOME Display Manager），然后用户输入用户名和密码。如果密码正确，就读取/etc/gdm3/Xsession，启动用户的会话。</p></blockquote><h2 id="6-进入-login-shell"><a href="#6-进入-login-shell" class="headerlink" title="6. 进入 login shell"></a>6. 进入 login shell</h2><p>所谓shell，简单说就是命令行界面，让用户可以直接与操作系统对话。用户登录时打开的shell，就叫做login shell。</p><p><img src="linux-start-process-6-login-shell.jpg" alt="进入 login shell"></p><p>Linux默认的shell是Bash，它会读入一系列的配置文件。上一步的三种情况，在这一步的处理，也存在差异。</p><ol><li><p><strong>命令行登录</strong>：首先读入 <code>/etc/profile</code>，这是对所有用户都有效的配置；然后依次寻找下面三个文件，这是针对当前用户的配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~/.bash_profile</span><br><span class="line">~/.bash_login</span><br><span class="line">~/.profile</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，<strong>这三个文件只要有一个存在，就不再读入后面的文件了</strong>。比如，要是 <code>~/.bash_profile</code> 存在，就不会再读入后面两个文件了。</p></blockquote></li><li><p><strong>ssh登录</strong>：与第一种情况完全相同。</p></li><li><p><strong>图形界面登录</strong>：只加载 <code>/etc/profile</code> 和 <code>~/.profile</code>。也就是说，<code>~/.bash_profile</code> 不管有没有，都不会运行。</p></li></ol><h2 id="7-打开-non-login-shell"><a href="#7-打开-non-login-shell" class="headerlink" title="7. 打开 non-login shell"></a>7. 打开 non-login shell</h2><p>老实说，上一步完成以后，Linux的启动过程就算结束了，用户已经可以看到命令行提示符或者图形界面了。但是，为了内容的完整，必须再介绍一下这一步。</p><p>用户进入操作系统以后，常常会再手动开启一个shell。这个shell就叫做 <code>non-login shell</code>，意思是它不同于登录时出现的那个shell，不读取<code>/etc/profile</code>和<code>.profile</code>等配置文件。</p><p><img src="linux-start-process-7-non-login-shell.jpg" alt="打开 non-login shell"></p><p>non-login shell的重要性，不仅在于它是用户最常接触的那个shell，还在于它会读入用户自己的bash配置文件 <code>~/.bashrc</code>。大多数时候，我们对于bash的定制，都是写在这个文件里面的。</p><p>你也许会问，<strong>要是不进入 non-login shell，岂不是.bashrc就不会运行了，因此bash 也就不能完成定制了？</strong></p><p>事实上，Debian已经考虑到这个问题了，请打开文件 <code>~/.profile</code>，可以看到下面的代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$BASH_VERSION</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">　　<span class="keyword">if</span> [ -f <span class="string">&quot;<span class="variable">$HOME</span>/.bashrc&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">　　　　. <span class="string">&quot;<span class="variable">$HOME</span>/.bashrc&quot;</span></span><br><span class="line">　　<span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>上面代码先判断变量 <code>$BASH_VERSION</code> 是否有值，然后判断主目录下是否存在 .bashrc 文件，如果存在就运行该文件。</p><p>第三行开头的那个点，是source命令的简写形式，表示运行某个文件，写成”source ~/.bashrc”也是可以的。</p><p>因此，只要运行<code>～/.profile</code>文件，<code>～/.bashrc</code>文件就会连带运行。但是上一节的第一种情况提到过，如果存在<code>～/.bash_profile</code>文件，那么有可能不会运行<code>～/.profile</code>文件。解决这个问题很简单，把下面代码写入<code>.bash_profile</code>就行了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -f ~/.profile ]; <span class="keyword">then</span></span><br><span class="line">　　. ~/.profile</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>这样一来，不管是哪种情况，<code>.bashrc</code>都会执行，用户的设置可以放心地都写入这个文件了。</p><p>Bash的设置之所以如此繁琐，是由于历史原因造成的。早期的时候，计算机运行速度很慢，载入配置文件需要很长时间，Bash的作者只好把配置文件分成了几个部分，阶段性载入。<strong>系统的通用设置放在 /etc/profile，用户个人的、需要被所有子进程继承的设置放在.profile，不需要被继承的设置放在.bashrc。</strong></p><p>顺便提一下，除了Linux以外， Mac OS X 使用的shell也是Bash。但是，它只加载.bash_profile，然后在.bash_profile里面调用.bashrc。而且，不管是ssh登录，还是在图形界面里启动shell窗口，都是如此。</p><h1 id="附：启动流程的思维导图"><a href="#附：启动流程的思维导图" class="headerlink" title="附：启动流程的思维导图"></a>附：启动流程的思维导图</h1><blockquote><p>图片转自：<a href="https://mm.edrawsoft.cn/template/12597">https://mm.edrawsoft.cn/template/12597</a></p></blockquote><p><img src="linux-start-process-mind-mapping.jpg" alt="Linux启动流程思维导图"></p><hr><p>欢迎关注我的微信公众号【MySQL数据库技术】。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="MySQL数据库技术" align="left"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>开源中国（oschina）</td><td><a href="https://my.oschina.net/dbkernel">https://my.oschina.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h1 id=&quot;总启动流程&quot;&gt;&lt;a href=&quot;#总启动流程&quot; class=&quot;headerlink&quot; title=&quot;总启动流程&quot;&gt;&lt;/a&gt;总启动流程&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这部分转自：&lt;a href=&quot;https</summary>
      
    
    
    
    <category term="Linux" scheme="http://dbkernel.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://dbkernel.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>实用工具 | Linux定时任务crontab命令详解</title>
    <link href="http://dbkernel.github.io/2016/11/23/description-of-the-crontab-command/"/>
    <id>http://dbkernel.github.io/2016/11/23/description-of-the-crontab-command/</id>
    <published>2016-11-23T02:24:45.000Z</published>
    <updated>2021-09-11T09:32:34.885Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Linux 下的任务调度分为两类：<strong>系统任务调度</strong>和<strong>用户任务调度</strong>。Linux 系统任务是由 <code>cron (crond)</code> 这个系统服务来控制的，这个系统服务是默认启动的。用户自己设置的计划任务则使用 <code>crontab</code> 命令。</p><h2 id="cron-配置文件"><a href="#cron-配置文件" class="headerlink" title="cron 配置文件"></a>cron 配置文件</h2><p>在 Ubuntu/Debian 中，配置文件路径为 <code>/etc/crontab</code>（CentOS也类似），其内容为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/crontab: system-wide crontab</span></span><br><span class="line"><span class="comment"># Unlike any other crontab you don&#x27;t have to run the `crontab&#x27;</span></span><br><span class="line"><span class="comment"># command to install the new version when you edit this file</span></span><br><span class="line"><span class="comment"># and files in /etc/cron.d. These files also have username fields,</span></span><br><span class="line"><span class="comment"># that none of the other crontabs do.</span></span><br><span class="line"></span><br><span class="line">SHELL=/bin/sh</span><br><span class="line">PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example of job definition:</span></span><br><span class="line"><span class="comment"># .---------------- minute (0 - 59)</span></span><br><span class="line"><span class="comment"># |  .------------- hour (0 - 23)</span></span><br><span class="line"><span class="comment"># |  |  .---------- day of month (1 - 31)</span></span><br><span class="line"><span class="comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="comment"># |  |  |  |  |</span></span><br><span class="line"><span class="comment"># *  *  *  *  * user-name command to be executed</span></span><br><span class="line">17 ** * *root    <span class="built_in">cd</span> / &amp;&amp; run-parts --report /etc/cron.hourly</span><br><span class="line">25 6* * *root<span class="built_in">test</span> -x /usr/sbin/anacron || ( <span class="built_in">cd</span> / &amp;&amp; run-parts --report /etc/cron.daily )</span><br><span class="line">47 6* * 7root<span class="built_in">test</span> -x /usr/sbin/anacron || ( <span class="built_in">cd</span> / &amp;&amp; run-parts --report /etc/cron.weekly )</span><br><span class="line">52 61 * *root<span class="built_in">test</span> -x /usr/sbin/anacron || ( <span class="built_in">cd</span> / &amp;&amp; run-parts --report /etc/cron.monthly )</span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li><code>SHELL</code> 环境变量用于指定系统要使用的shell，此处为<code>/bin/sh</code>。</li><li><code>PATH</code> 环境变量指定了系统执行命令的路径。</li><li>也可以添加<code>MAILTO</code>变量，如果指定，则表示 crond 的任务执行信息将通过电子邮件发送给指定的用户。</li><li>其他部分在后文详细讲述。</li></ul><p>用户定期要执行的工作，比如用户数据备份、定时邮件提醒等，都可以使用 crontab 工具来定制自己的计划任务。所有<code>非root用户</code>定义的 crontab 文件都被保存在 <code>/var/spool/cron</code> 目录中，其文件名与用户名一致。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /var/spool/cron/crontabs/admin</span><br></pre></td></tr></table></figure><p>除此之外，还有两个文件<code>/etc/cron.deny</code>和<code>/etc/cron.allow</code>，前者中可列出不允许哪些用户使用 crontab 命令，后者中可列出允许哪些用户使用 crontab 命令。</p><h2 id="crontab-文件含义"><a href="#crontab-文件含义" class="headerlink" title="crontab 文件含义"></a>crontab 文件含义</h2><p>用户所建立的crontab文件中，每一行都代表一项任务，每行的每个字段代表一项设置，它的格式共分为六个字段，前五段是时间设定段，第六段是要执行的命令段，格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minute hour day month week <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p>各字段含义如下：</p><ul><li>minute：表示分钟，可以是从0到59之间的任何整数。</li><li>hour：表示小时，可以是从0到23之间的任何整数。</li><li>day：表示日期，可以是从1到31之间的任何整数。</li><li>month：表示月份，可以是从1到12之间的任何整数。</li><li>week：表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日。</li><li>command：要执行的命令，可以是系统命令，也可以是自己编写的脚本文件。</li></ul><p>在以上各个字段中，还可以使用以下特殊字符：</p><ul><li><code>星号(*)</code>：代表所有可能的值，例如 month 字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。</li><li><code>逗号(,)</code>：可以用逗号隔开的值指定一个列表范围，例如：<code>1,2,5,7,8,9</code> 。</li><li><code>中杠(-)</code>：可以用整数之间的中杠表示一个整数范围，例如：<code>2-6</code> 表示<code>2,3,4,5,6</code> 。</li><li><code>正斜线(/)</code>：可以用正斜线指定时间的间隔频率，例如：<code>0-23/2</code>表示每两小时执行一次。同时正斜线可以和星号一起使用，例如：<code>*/10</code>，如果用在minute字段，表示<strong>每十分钟执行一次</strong>。</li></ul><h2 id="crontab命令详解"><a href="#crontab命令详解" class="headerlink" title="crontab命令详解"></a>crontab命令详解</h2><p><strong>命令格式：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">usage:crontab [-u user] file</span><br><span class="line">crontab [ -u user ] [ -i ] &#123; -e | -l | -r &#125;</span><br><span class="line">(default operation is replace, per 1003.2)</span><br><span class="line">-e(edit user<span class="string">&#x27;s crontab)</span></span><br><span class="line"><span class="string">-l(list user&#x27;</span>s crontab)</span><br><span class="line">-r(delete user<span class="string">&#x27;s crontab)</span></span><br><span class="line"><span class="string">-i(prompt before deleting user&#x27;</span>s crontab)</span><br></pre></td></tr></table></figure><ul><li>-u user：用于设定某个用户的crontab服务。</li><li>file: file 为命令文件名，表示将 file 作为 crontab 的任务列表文件并载入 crontab ；如果在命令行中没有指定这个文件，crontab 命令将接受标准输入（键盘）上键入的命令，并将它们载入crontab 。</li><li>-e：编辑某个用户的 crontab 文件内容，如不指定用户则表示当前用户。</li><li>-l：显示某个用户的 crontab 文件内容，如不指定用户则表示当前用户。</li><li>-r：从 /var/spool/cron 目录中删除某个用户的crontab文件，如不指定用户，则默认删除当前用户 crontab 文件。</li><li>-i：在删除用户的 crontab 文件时给确认提示。</li></ul><h2 id="crontab-注意事项"><a href="#crontab-注意事项" class="headerlink" title="crontab 注意事项"></a>crontab 注意事项</h2><ol><li>crontab有2种编辑方式：<strong>直接编辑/etc/crontab文件</strong>与<strong>crontab –e</strong>，其中<code>/etc/crontab</code>里的计划任务是<strong>系统的计划任务</strong>，而<strong>用户的计划任务</strong>需要通过<code>crontab –e</code>来编辑。</li><li>每次编辑完某个用户的 cron 设置后，cron 自动在 /var/spool/cron 下生成一个与此用户同名的文件，此用户的 cron 信息都记录在这个文件中，<code>这个文件是不可以直接编辑的，只可以用 crontab -e 来编辑</code>。</li><li>crontab 中的 command 尽量使用绝对路径，否则会经常因为路径错误导致任务无法执行。</li><li>新创建的 cron job 不会马上执行，至少要等2分钟才能执行，可重启 cron 来立即执行。</li><li><code>%</code> 在crontab文件中表示<code>换行</code>，因此假如脚本或命令含有<code>%</code>，需要使用<code>\%</code>来进行转义。</li><li><code>crontab -e</code>的默认编辑器是 nano ，如需使用 vim，可在<code>/etc/profile</code>或<code>~/.bashrc</code>中添加 <code>export EDITOR=vi</code> 来解决。</li></ol><h2 id="crontab-配置示例"><a href="#crontab-配置示例" class="headerlink" title="crontab 配置示例"></a>crontab 配置示例</h2><ul><li><p>每分钟执行1次 command（因cron默认每1分钟扫描一次，因此全为<code>*</code>即可）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * * <span class="built_in">command</span></span><br></pre></td></tr></table></figure></li><li><p>每小时的第3和第15分钟执行 command ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 * * * * <span class="built_in">command</span></span><br></pre></td></tr></table></figure></li><li><p>每天上午8-11点的第3和15分钟执行 command ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 8-11 * * * <span class="built_in">command</span></span><br></pre></td></tr></table></figure></li><li><p>每隔2天的上午8-11点的第3和15分钟执行 command ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 8-11 */2 * * <span class="built_in">command</span></span><br></pre></td></tr></table></figure></li><li><p>每个星期一的上午8点到11点的第3和第15分钟执行 command ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 8-11 * * 1 <span class="built_in">command</span></span><br></pre></td></tr></table></figure></li><li><p>每晚的21:30分重启 smb ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 21 * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure></li><li><p>每月1、10、22日的 4:45 重启 smb ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">45 4 1,10,22 * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure></li><li><p>每周六、周日的 1:10 重启 smb ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 1 * * 6,0 /etc/init.d/smb restart</span><br></pre></td></tr></table></figure></li><li><p>每天 18:00 至 23:00 之间每隔30分钟重启 smb ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0,30 18-23 * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure></li><li><p>每隔1小时重启 smb ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* */1 * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure></li><li><p>晚上23点到早上7点之间，每隔1小时重启 smb ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* 23-7/1 * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure></li><li><p>每月的4号与每周一到周三的11点重启 smb ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 11 4 * mon-wed /etc/init.d/smb restart</span><br></pre></td></tr></table></figure></li><li><p>每小时执行<code>/etc/cron.hourly</code>目录内的脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 1 * * * root run-parts /etc/cron.hourly</span><br></pre></td></tr></table></figure></li></ul><hr><p>欢迎关注我的微信公众号【MySQL数据库技术】。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="MySQL数据库技术" align="left"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>开源中国（oschina）</td><td><a href="https://my.oschina.net/dbkernel">https://my.oschina.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;


&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Linux 下的任务调度分为两类：&lt;strong&gt;系统任务调度&lt;/strong&gt;和&lt;st</summary>
      
    
    
    
    <category term="Linux" scheme="http://dbkernel.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://dbkernel.github.io/tags/Linux/"/>
    
    <category term="crontab" scheme="http://dbkernel.github.io/tags/crontab/"/>
    
  </entry>
  
  <entry>
    <title>特性分析 | GreenPlum 的并行查询优化策略详解</title>
    <link href="http://dbkernel.github.io/2016/11/21/greenplum-parallel-query-optimization-strategy/"/>
    <id>http://dbkernel.github.io/2016/11/21/greenplum-parallel-query-optimization-strategy/</id>
    <published>2016-11-21T01:43:07.000Z</published>
    <updated>2021-09-12T04:32:58.684Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p>GreenPlum 采用 Share Nothing 的架构，良好的发挥了廉价PC的作用。自此I/O不在是 DW(data warehouse) 的瓶颈，相反网络的压力会大很多。但是 GreenPlum 的查询优化策略能够避免尽量少的网络交换。对于初次接触 GreenPlum 的人来说，肯定耳目一新。</p><p><img src="greenplum-architecture.jpg" alt="GreenPlum 架构"></p><h1 id="查询优化器"><a href="#查询优化器" class="headerlink" title="查询优化器"></a>查询优化器</h1><p>GreenPlum 的 master 节点负责 SQL 解析和执行计划的生成，具体来说，查询优化器会将 SQL 解析成每个节点（segments）要执行的物理执行计划。</p><p>GreenPlum 采用的是基于成本的优化策略：如果有多条执行路径，会评估执行代价，找出代价最小、最有效率的一条。</p><p>不像传统的查询优化器，GreenPlum 的查询优化器必须全局的考虑整个集群，在每个候选的执行计划中考虑到节点间移动数据的开销。比如有 join，那么 join 是在各个节点分别进行的（每个节点只和自身数据做 join），所以它的查询很快。</p><p>查询计划包括了一些传统的操作，比如：扫描、Join、排序、聚合等等。</p><p><strong>GreenPlum 中有三种数据的移动操作：</strong></p><ul><li><code>Broadcast Motion (N:N)</code>：广播数据。每个节点向其他节点广播需要发送的数据。</li><li><code>Redistribute Motion (N:N)</code>：重新分布数据。利用 join 列数据的 hash 值不同，将筛选后的数据在其他 segment 重新分布。</li><li><code>Gather Motion (N:1)</code>：聚合汇总数据。每个节点将 join 后的数据发到一个单节点上，通常是发到主节点 master 。</li></ul><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> d.<span class="operator">*</span>,j.customer_id <span class="keyword">from</span> data d <span class="keyword">join</span>  jd1 j <span class="keyword">on</span> d.partner_id<span class="operator">=</span>j.partner_id <span class="keyword">where</span> j.gmt_modified<span class="operator">&gt;</span> <span class="built_in">current_date</span> <span class="number">-80</span>;</span><br><span class="line">                                       QUERY PLAN</span><br><span class="line"><span class="comment">----------------------------------------------------------------------------------------</span></span><br><span class="line"> Gather Motion <span class="number">88</span>:<span class="number">1</span>  (slice2)  (cost<span class="operator">=</span><span class="number">3.01</span>.<span class="number">.939</span><span class="number">.49</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">2717</span> width<span class="operator">=</span><span class="number">59</span>)</span><br><span class="line">   <span class="operator">-</span><span class="operator">&gt;</span>  Hash <span class="keyword">Join</span>  (cost<span class="operator">=</span><span class="number">3.01</span>.<span class="number">.939</span><span class="number">.49</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">2717</span> width<span class="operator">=</span><span class="number">59</span>)</span><br><span class="line">         Hash Cond: d.partner_id::text <span class="operator">=</span> j.partner_id::text</span><br><span class="line">         <span class="operator">-</span><span class="operator">&gt;</span>  Seq Scan <span class="keyword">on</span> data d  (cost<span class="operator">=</span><span class="number">0.00</span>.<span class="number">.260</span><span class="number">.74</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">20374</span> width<span class="operator">=</span><span class="number">50</span>)</span><br><span class="line">         <span class="operator">-</span><span class="operator">&gt;</span>  Hash  (cost<span class="operator">=</span><span class="number">1.91</span>.<span class="number">.1</span><span class="number">.91</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">88</span> width<span class="operator">=</span><span class="number">26</span>)</span><br><span class="line">               <span class="operator">-</span><span class="operator">&gt;</span>  Broadcast Motion <span class="number">88</span>:<span class="number">88</span>  (slice1)  (cost<span class="operator">=</span><span class="number">0.00</span>.<span class="number">.1</span><span class="number">.91</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">88</span> width<span class="operator">=</span><span class="number">26</span>)</span><br><span class="line">                     <span class="operator">-</span><span class="operator">&gt;</span>  Seq Scan <span class="keyword">on</span> jd1 j  (cost<span class="operator">=</span><span class="number">0.00</span>.<span class="number">.1</span><span class="number">.02</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">1</span> width<span class="operator">=</span><span class="number">26</span>)</span><br><span class="line">                           <span class="keyword">Filter</span>: gmt_modified <span class="operator">&gt;</span> (<span class="string">&#x27;now&#x27;</span>::text::<span class="type">date</span> <span class="operator">-</span> <span class="number">80</span>)</span><br></pre></td></tr></table></figure><p><strong>执行计划需要自下而上分析：</strong></p><ol><li>在各个节点扫描自己的 <code>jd1</code> 表数据，按照条件过滤生成数据（记为 <code>rs</code>）。</li><li>各节点将自己生成的 <code>rs</code> 依次发送到其他节点。（<code>Broadcast Motion (N:N)</code>）</li><li>每个节点上的 <code>data</code> 表的数据，和各自节点上收到的 <code>rs</code> 进行 join，这样能保证本机数据只和本机数据做 join 。</li><li>各节点将 join 后的结果发送给 master(<code>Gather Motion (N:1)</code>) 。</li></ol><p>由上面的执行过程可以看出， GreenPlum 将 rs 给每个含有 data 表数据的节点都发了一份。</p><p><strong>问：如果 <code>rs</code> 很大或者压根就没有过滤条件，会有什么问题？如何处理？</strong></p><p>比如本例中的表 <code>jd1</code> 和表<code>data</code>的数据行数如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">=</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> jd1;</span><br><span class="line"> count</span><br><span class="line"><span class="comment">-------</span></span><br><span class="line">    <span class="number">20</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">=</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> data;</span><br><span class="line"> count</span><br><span class="line"><span class="comment">--------</span></span><br><span class="line"> <span class="number">113367</span></span><br></pre></td></tr></table></figure><p>如果 <code>rs</code> 很大的话，广播数据时网络就会成为瓶颈。GreenPlum 的优化器很聪明，它是将<strong>小表</strong>广播到各个 segment 上，极大的降低网络开销。从这个例子能看出统计信息对于生成好的查询计划是何等重要。</p><h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><p>下面看一个复杂点的例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    c_custkey, c_name,</span><br><span class="line">    <span class="built_in">sum</span>(l_extendedprice <span class="operator">*</span> (<span class="number">1</span> <span class="operator">-</span> <span class="number">1</span>_discount)) <span class="keyword">as</span> revenue,</span><br><span class="line">    c_acctbal, n_name, c_address, c_phone, c_comment</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    customer, orders, lineitem, nation</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    c_custkey <span class="operator">=</span> o_custkey</span><br><span class="line"><span class="keyword">and</span> <span class="number">1</span>_orderkey <span class="operator">=</span> o_orderkey</span><br><span class="line"><span class="keyword">and</span> o_orderdate <span class="operator">&gt;=</span> <span class="type">date</span> <span class="string">&#x27;1994-08-01&#x27;</span></span><br><span class="line"><span class="keyword">and</span> o_orderdate <span class="operator">&lt;</span> <span class="type">date</span> <span class="string">&#x27;1994-08-0l&#x27;</span></span><br><span class="line">                  <span class="operator">+</span> <span class="type">interval</span> <span class="string">&#x27;3 month&#x27;</span></span><br><span class="line"><span class="keyword">and</span> l_returnflag <span class="operator">=</span> <span class="string">&#x27;R&#x27;</span></span><br><span class="line"><span class="keyword">and</span> c_nationkey <span class="operator">=</span> n_nationkey</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    c_custkey, c_name, c_acctbal,</span><br><span class="line">    c_phone, n_name, c_address, c_comment</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">    revenue <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><p>执行计划如下：</p><p><img src="greenplum-hashjoin-plan.jpeg" alt="GreenPlum HashJoin 执行计划"></p><ol><li>各个节点上同时扫描各自的 nation 表数据，将各 segment 上的 nation 数据向其他节点广播（<code>Broadcast Motion (N:N)</code>）。</li><li>各个节点上同时扫描各自 customer 数据，和收到的 nation 数据 join 生成<code>RS-CN</code> 。</li><li>各个 segment 同时扫描自己 orders 表数据，过滤数据生成 <code>RS-O</code> 。</li><li>各个 segment 同时扫描自己 lineitem 表数据，过滤生成 <code>RS-L</code> 。</li><li>各个 segment 同时将各自 <code>RS-O</code> 和 <code>RS-L</code> 进行 join，生成<code>RS-OL</code>。注意此过程不需要 <code>Redistribute Motion (N:N)</code> 重新分布数据，因为 orders 和 lineitem 的 distribute column 都是orderkey，这就保证了各自需要 join 的对象都是在各自的机器上，所以 n 个节点就开始并行 join 了。</li><li>各个节点将自己在步骤5生成的 <code>RS-OL</code> 按照 cust-key 在所有节点间重新分布数据（<code>Redistribute Motion (N:N)</code>，可以按照 hash 和 range 在节点间来重新分布数据，默认是 hash），这样每个节点都会有自己的 <code>RS-OL</code> 。</li><li>各个节点将自己在步骤2生成的 <code>RS-CN</code> 和自己节点上的 <code>RS-OL</code> 数据进行 join，又是本机只和本机的数据进行 join 。</li><li>聚合，排序，发往主节点 master 。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>Greenplum如何处理和优化一张大表和小表的join?</strong></p><blockquote><p>Greenplum是选择将小表广播数据，而不是将大表广播。</p></blockquote><p><strong>举例说明：</strong></p><p>表 A 有10亿条数据（<code>empno&lt;pk&gt;,deptno,ename</code>），表 B 有500条数据（<code>deptno&lt;pk&gt;,dname,loc</code>）</p><p>表 A 与表 B join on deptno</p><p>集群有11个节点：1个 master，10个 segment</p><p>按照正常的主键列 hash 分布，每个 segment 节点上只会有 1/10 的表 A 和 1/10 的表 B。</p><p>此时 GreenPlum 会<strong>让所有节点给其他节点发送各自所拥有的小表 B 的1/10的数据</strong>，这样就保证了10个节点上，每个节点都有一份完整的表 B 的数据。此时，每个节点上1/10的 A 只需要和自己节点上的 B 进行 join 就OK。所以 GreenPlum 并行处理能力惊人的原因就在这里。</p><p>最终所有节点会将 join 的结果都发给主节点 master。</p><p>由该例可见统计信息十分重要，GreenPlum 通过统计信息来确定将哪张表进行（<code>Broadcast Motion (N:N)</code>）。</p><p>另外，实际使用中还会出现<strong>列值倾斜</strong>的情况，比如 A 没有按照主键来 hash 分布，而是人为指定按照 deptno 的 hash 在各个节点上分布数据。若 A 中80%的数据都是sales（deptno=10）部门的，此时10个节点中，就会有一个节点上拥有了 10亿×80% 的数据，就算是将表 B 广播到其他节点 也无济于事，因为<strong>计算的压力都集中在一台机器</strong>了。所以，<strong>必须选择合适的列进行hash分布</strong>。</p><hr><p>欢迎关注我的微信公众号【MySQL数据库技术】。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="MySQL数据库技术" align="left"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>开源中国（oschina）</td><td><a href="https://my.oschina.net/dbkernel">https://my.oschina.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;


&lt;h1 id=&quot;架构&quot;&gt;&lt;a href=&quot;#架构&quot; class=&quot;headerlink&quot; title=&quot;架构&quot;&gt;&lt;/a&gt;架构&lt;/h1&gt;&lt;p&gt;GreenPlum 采用 Share Nothing 的架构，良好的发挥了廉价PC的作用</summary>
      
    
    
    
    <category term="GreenPlum" scheme="http://dbkernel.github.io/categories/GreenPlum/"/>
    
    
    <category term="PostgreSQL" scheme="http://dbkernel.github.io/tags/PostgreSQL/"/>
    
    <category term="GreenPlum" scheme="http://dbkernel.github.io/tags/GreenPlum/"/>
    
    <category term="并行查询" scheme="http://dbkernel.github.io/tags/%E5%B9%B6%E8%A1%8C%E6%9F%A5%E8%AF%A2/"/>
    
    <category term="优化器" scheme="http://dbkernel.github.io/tags/%E4%BC%98%E5%8C%96%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>源码分析 | 使用 gcov 和 lcov 测试 PostgreSQL 代码覆盖率</title>
    <link href="http://dbkernel.github.io/2016/03/30/test-postgresql-code-coverage-using-gcov-and-lcov/"/>
    <id>http://dbkernel.github.io/2016/03/30/test-postgresql-code-coverage-using-gcov-and-lcov/</id>
    <published>2016-03-30T07:34:34.000Z</published>
    <updated>2021-09-12T09:23:07.826Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>通常我们评判一个 test case 好坏的标准之一是代码的覆盖率，一个好的 test case 应该覆盖到所有的代码。</p><p>那么问题来了，我们<strong>怎么知道这个 test case 有没有覆盖到所有的代码呢？</strong></p><p>以 PostgreSQL 为例，我们看看如何检测 C 语言程序的代码覆盖率。</p><p>C 代码覆盖率测试，需要用到 gcc 的配套工具<code>gcov</code>，还有一个可视化工具<code>lcov</code>。</p><h1 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h1><p>首先需要安装依赖 gcov 和 lcov 。</p><p>gcov 在 gcc 包中已经包含了，lcov 是 ltp 的一个 gcov 扩展插件，用来产生HTML报告。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install lcov</span><br></pre></td></tr></table></figure><h1 id="2-编译、安装-PG"><a href="#2-编译、安装-PG" class="headerlink" title="2. 编译、安装 PG"></a>2. 编译、安装 PG</h1><h2 id="2-1-编译选项介绍"><a href="#2-1-编译选项介绍" class="headerlink" title="2.1. 编译选项介绍"></a>2.1. 编译选项介绍</h2><p>首先介绍一下 PostgreSQL 的编译选项 <code>--enable-coverage</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--enable-coverage       build with coverage testing instrumentation</span><br></pre></td></tr></table></figure><p>这个编译项对应gcc的两个参数：<code>-fprofile-arcs</code> 和 <code>-ftest-coverage</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># enable code coverage if --enable-coverage</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="string">&quot;<span class="variable">$enable_coverage</span>&quot;</span> = yes; <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">test</span> <span class="string">&quot;<span class="variable">$GCC</span>&quot;</span> = yes; <span class="keyword">then</span></span><br><span class="line">    CFLAGS=<span class="string">&quot;<span class="variable">$CFLAGS</span> -fprofile-arcs -ftest-coverage&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    as_fn_error $? <span class="string">&quot;--enable-coverage is supported only when using GCC&quot;</span> <span class="string">&quot;<span class="variable">$LINENO</span>&quot;</span> 5</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>通过<code>man gcc</code>查看这两个参数的含义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">-fprofile-arcs</span><br><span class="line">           Add code so that program flow arcs are instrumented.  During execution the program records how many times each branch and call is executed and how many times it is taken or returns.  When</span><br><span class="line">           the compiled program exits it saves this data to a file called auxname.gcda for each source file.  The data may be used for profile-directed optimizations (-fbranch-probabilities), or for</span><br><span class="line">           test coverage analysis (-ftest-coverage).  Each object file&#x27;s auxname is generated from the name of the output file, if explicitly specified and it is not the final executable, otherwise</span><br><span class="line">           it is the basename of the source file.  In both cases any suffix is removed (e.g. foo.gcda for input file dir/foo.c, or dir/foo.gcda for output file specified as -o dir/foo.o).</span><br><span class="line"></span><br><span class="line">--coverage</span><br><span class="line">           This option is used to compile and link code instrumented for coverage analysis.  The option is a synonym for -fprofile-arcs -ftest-coverage (when compiling) and -lgcov (when linking).</span><br><span class="line">           See the documentation for those options for more details.</span><br><span class="line"></span><br><span class="line">           *   Compile the source files with -fprofile-arcs plus optimization and code generation options.  For test coverage analysis, use the additional -ftest-coverage option.  You do not need to</span><br><span class="line">               profile every source file in a program.</span><br><span class="line"></span><br><span class="line">           *   Link your object files with -lgcov or -fprofile-arcs (the latter implies the former).</span><br><span class="line"></span><br><span class="line">           *   Run the program on a representative workload to generate the arc profile information.  This may be repeated any number of times.  You can run concurrent instances of your program, and</span><br><span class="line">               provided that the file system supports locking, the data files will be correctly updated.  Also &quot;fork&quot; calls are detected and correctly handled (double counting will not happen).</span><br><span class="line"></span><br><span class="line">           *   For profile-directed optimizations, compile the source files again with the same optimization and code generation options plus -fbranch-probabilities.</span><br><span class="line"></span><br><span class="line">           *   For test coverage analysis, use gcov to produce human readable information from the .gcno and .gcda files.  Refer to the gcov documentation for further information.</span><br><span class="line"></span><br><span class="line">           With -fprofile-arcs, for each function of your program GCC creates a program flow graph, then finds a spanning tree for the graph.  Only arcs that are not on the spanning tree have to be</span><br><span class="line">           instrumented: the compiler adds code to count the number of times that these arcs are executed.  When an arc is the only exit or only entrance to a block, the instrumentation code can be</span><br><span class="line">           added to the block; otherwise, a new basic block must be created to hold the instrumentation code.</span><br><span class="line"></span><br><span class="line">-ftest-coverage</span><br><span class="line">           Produce a notes file that the gcov code-coverage utility can use to show program coverage.  Each source file&#x27;s note file is called auxname.gcno.  Refer to the -fprofile-arcs option above</span><br><span class="line">           for a description of auxname and instructions on how to generate test coverage data.  Coverage data matches the source files more closely if you do not optimize.</span><br></pre></td></tr></table></figure><p><strong>-fprofile-arcs</strong>：</p><blockquote><p><code>-fprofile-arcs</code> 用于产生 .c 文件对应的 .gcda 文件，.gcda 文件可以被用于 profile 驱动的优化，或者结合 gcov 来做代码覆盖分析。</p><p>编译时尽量不要使用 -O 优化，这样代码覆盖数据 .gcda 才能尽可能和代码接近。</p><p>当代码被调用时，.gcda 文件中对应的计数器会被修改，记录代码被调用的次数。</p></blockquote><p><strong>-ftest-coverage</strong>：</p><blockquote><p><code>-ftest-coverage</code> 这个选项用于产生 .c 文件的 .gcno 文件。这个文件生成后不会被修改。结合 .gcda，可以分析测试代码覆盖率。</p></blockquote><h2 id="2-2-编译安装"><a href="#2-2-编译安装" class="headerlink" title="2.2. 编译安装"></a>2.2. 编译安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/opt/pgsql9.4.4 --with-pgport=1921 --with-perl --with-python --with-tcl --with-openssl --with-pam --with-ldap --with-libxml --with-libxslt --enable-thread-safety --enable-debug --enable-dtrace --enable-coverage</span><br><span class="line"></span><br><span class="line">gmake world &amp;&amp; gmake install-world</span><br></pre></td></tr></table></figure><p>安装好后，我们会发现在源码目录中多了一些.gcda和.gcno的文件，每个.c文件都会对应这两个文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">postgres@wslu-&gt; ll</span><br><span class="line">total 1.3M</span><br><span class="line">-rw-r--r-- 1 postgres postgres  22K Jun 10 03:29 gistbuildbuffers.c</span><br><span class="line">-rw------- 1 postgres postgres 1.6K Sep  7 14:42 gistbuildbuffers.gcda</span><br><span class="line">-rw-r--r-- 1 postgres postgres  15K Sep  7 14:38 gistbuildbuffers.gcno</span><br><span class="line">-rw-r--r-- 1 postgres postgres  70K Sep  7 14:38 gistbuildbuffers.o</span><br><span class="line">-rw-r--r-- 1 postgres postgres  37K Jun 10 03:29 gistbuild.c</span><br><span class="line">-rw------- 1 postgres postgres 2.2K Sep  7 14:42 gistbuild.gcda</span><br><span class="line">-rw-r--r-- 1 postgres postgres  20K Sep  7 14:38 gistbuild.gcno</span><br><span class="line">-rw-r--r-- 1 postgres postgres  92K Sep  7 14:38 gistbuild.o</span><br><span class="line">-rw-r--r-- 1 postgres postgres  43K Jun 10 03:29 gist.c</span><br><span class="line">-rw------- 1 postgres postgres 3.1K Sep  7 14:42 gist.gcda</span><br><span class="line">-rw-r--r-- 1 postgres postgres  29K Sep  7 14:38 gist.gcno</span><br><span class="line">-rw-r--r-- 1 postgres postgres  16K Jun 10 03:29 gistget.c</span><br><span class="line">-rw------- 1 postgres postgres 1.3K Sep  7 14:42 gistget.gcda</span><br><span class="line">-rw-r--r-- 1 postgres postgres  13K Sep  7 14:38 gistget.gcno</span><br><span class="line">-rw-r--r-- 1 postgres postgres  74K Sep  7 14:38 gistget.o</span><br><span class="line">-rw-r--r-- 1 postgres postgres 101K Sep  7 14:38 gist.o</span><br><span class="line">-rw-r--r-- 1 postgres postgres  39K Jun 10 03:29 gistproc.c</span><br><span class="line">-rw------- 1 postgres postgres 3.1K Sep  7 14:42 gistproc.gcda</span><br><span class="line">-rw-r--r-- 1 postgres postgres  31K Sep  7 14:38 gistproc.gcno</span><br><span class="line">-rw-r--r-- 1 postgres postgres  79K Sep  7 14:38 gistproc.o</span><br><span class="line">-rw-r--r-- 1 postgres postgres 9.1K Jun 10 03:29 gistscan.c</span><br><span class="line">-rw------- 1 postgres postgres  848 Sep  7 14:42 gistscan.gcda</span><br><span class="line">-rw-r--r-- 1 postgres postgres 6.7K Sep  7 14:38 gistscan.gcno</span><br><span class="line">-rw-r--r-- 1 postgres postgres  60K Sep  7 14:38 gistscan.o</span><br><span class="line">-rw-r--r-- 1 postgres postgres  24K Jun 10 03:29 gistsplit.c</span><br><span class="line">-rw------- 1 postgres postgres 1.5K Sep  7 14:42 gistsplit.gcda</span><br><span class="line">-rw-r--r-- 1 postgres postgres  15K Sep  7 14:38 gistsplit.gcno</span><br><span class="line">-rw-r--r-- 1 postgres postgres  68K Sep  7 14:38 gistsplit.o</span><br><span class="line">-rw-r--r-- 1 postgres postgres  21K Jun 10 03:29 gistutil.c</span><br><span class="line">-rw------- 1 postgres postgres 2.2K Sep  7 14:42 gistutil.gcda</span><br><span class="line">-rw-r--r-- 1 postgres postgres  20K Sep  7 14:38 gistutil.gcno</span><br><span class="line">-rw-r--r-- 1 postgres postgres  84K Sep  7 14:38 gistutil.o</span><br><span class="line">-rw-r--r-- 1 postgres postgres 7.1K Jun 10 03:29 gistvacuum.c</span><br><span class="line">-rw------- 1 postgres postgres  784 Sep  7 14:42 gistvacuum.gcda</span><br><span class="line">-rw-r--r-- 1 postgres postgres 7.3K Sep  7 14:38 gistvacuum.gcno</span><br><span class="line">-rw-r--r-- 1 postgres postgres  56K Sep  7 14:38 gistvacuum.o</span><br><span class="line">-rw-r--r-- 1 postgres postgres  14K Jun 10 03:29 gistxlog.c</span><br><span class="line">-rw------- 1 postgres postgres 1.2K Sep  7 14:42 gistxlog.gcda</span><br><span class="line">-rw-r--r-- 1 postgres postgres  12K Sep  7 14:38 gistxlog.gcno</span><br><span class="line">-rw-r--r-- 1 postgres postgres  50K Sep  7 14:38 gistxlog.o</span><br><span class="line">-rw-r--r-- 1 postgres postgres  538 Jun 10 03:29 Makefile</span><br><span class="line">-rw-r--r-- 1 postgres postgres  357 Sep  7 14:38 objfiles.txt</span><br><span class="line">-rw-r--r-- 1 postgres postgres  20K Jun 10 03:29 README</span><br><span class="line"></span><br><span class="line">postgres@wslu-&gt; <span class="built_in">pwd</span></span><br><span class="line">/opt/soft_bak/postgresql-9.4.4/src/backend/access/gist</span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><p>源码文件目录的权限需要改为数据库启动用户的权限，否则无法修改 .gcda 的值，也就无法获取代码被调用的次数了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@wslu-&gt; chown -R postgres:postgres /opt/soft_bak/postgresql-9.4.4</span><br></pre></td></tr></table></figure><p>接下来我们看看文件的变化，以 dbsize.c 中的两个获取 pg_database_size 的 C 函数为例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">postgres@wslu-&gt; ls -la|grep dbsize</span><br><span class="line">-rw-r--r--  1 postgres postgres  19342 Jun 10 03:29 dbsize.c</span><br><span class="line">-rw-------  1 postgres postgres   2664 Sep  7 15:01 dbsize.gcda</span><br><span class="line">-rw-r--r--  1 postgres postgres  23272 Sep  7 14:38 dbsize.gcno</span><br><span class="line">-rw-r--r--  1 postgres postgres  89624 Sep  7 14:38 dbsize.o</span><br></pre></td></tr></table></figure><p>调用一次：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">postgres@wslu-&gt; psql</span><br><span class="line">psql (9.4.4)</span><br><span class="line">Type <span class="string">&quot;help&quot;</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line">postgres=<span class="comment"># select pg_database_size(oid) from pg_database;</span></span><br><span class="line"> pg_database_size</span><br><span class="line">------------------</span><br><span class="line">          6898180</span><br><span class="line">          6889988</span><br><span class="line">         24742560</span><br><span class="line">          6898180</span><br><span class="line">          6898180</span><br><span class="line">          6898180</span><br><span class="line">(6 rows)</span><br><span class="line">postgres=<span class="comment"># \q</span></span><br></pre></td></tr></table></figure><p>再次查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">postgres@wslu-&gt; ls -la|grep dbsize</span><br><span class="line">-rw-r--r--  1 postgres postgres  19342 Jun 10 03:29 dbsize.c</span><br><span class="line">-rw-------  1 postgres postgres   2664 Sep  7 15:12 dbsize.gcda</span><br><span class="line">-rw-r--r--  1 postgres postgres  23272 Sep  7 14:38 dbsize.gcno</span><br><span class="line">-rw-r--r--  1 postgres postgres  89624 Sep  7 14:38 dbsize.o</span><br></pre></td></tr></table></figure><p>dbsize.gcda 文件的修改时间发送了变化，说明刚才我们调用pg_database_size(oid) 时，调用了 dbsize.c 中的代码。对应的行计数器会发生变化。</p><h1 id="3-生成-HTML-报告"><a href="#3-生成-HTML-报告" class="headerlink" title="3. 生成 HTML 报告"></a>3. 生成 HTML 报告</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir html</span><br><span class="line">$ <span class="built_in">cd</span> html</span><br><span class="line"></span><br><span class="line">$ lcov --directory /opt/soft_bak/postgresql-9.4.4 --capture --output-file ./app.info</span><br><span class="line"><span class="comment"># 如果你不需要所有的代码，修改以上目录即可，譬如只看 contrib 下面的代码覆盖率。</span></span><br><span class="line"></span><br><span class="line">$ genhtml ./app.info</span><br><span class="line">postgres@wslu-&gt; ll</span><br><span class="line">total 3.7M</span><br><span class="line">drwxrwxr-x 12 postgres postgres 4.0K Sep  7 15:02 access</span><br><span class="line">-rw-rw-r--  1 postgres postgres  141 Sep  7 15:02 amber.png</span><br><span class="line">-rw-rw-r--  1 postgres postgres 3.4M Sep  7 15:02 app.info</span><br><span class="line">drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 bootstrap</span><br><span class="line">drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 catalog</span><br><span class="line">drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 commands</span><br><span class="line">-rw-rw-r--  1 postgres postgres  141 Sep  7 15:02 emerald.png</span><br><span class="line">drwxrwxr-x  2 postgres postgres  12K Sep  7 15:02 executor</span><br><span class="line">drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 foreign</span><br><span class="line">-rw-rw-r--  1 postgres postgres 9.7K Sep  7 15:02 gcov.css</span><br><span class="line">-rw-rw-r--  1 postgres postgres  167 Sep  7 15:02 glass.png</span><br><span class="line">-rw-rw-r--  1 postgres postgres  57K Sep  7 15:02 index.html</span><br><span class="line">-rw-rw-r--  1 postgres postgres  57K Sep  7 15:02 index-sort-f.html</span><br><span class="line">-rw-rw-r--  1 postgres postgres  57K Sep  7 15:02 index-sort-l.html</span><br><span class="line">drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 lib</span><br><span class="line">drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 libpq</span><br><span class="line">drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 main</span><br><span class="line">drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 nodes</span><br><span class="line">drwxrwxr-x  3 postgres postgres 4.0K Sep  7 15:02 opt</span><br><span class="line">drwxrwxr-x  7 postgres postgres 4.0K Sep  7 15:02 optimizer</span><br><span class="line">drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 parser</span><br><span class="line">drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 port</span><br><span class="line">drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 postmaster</span><br><span class="line">drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 regex</span><br><span class="line">drwxrwxr-x  3 postgres postgres 4.0K Sep  7 15:02 replication</span><br><span class="line">drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 rewrite</span><br><span class="line">-rw-rw-r--  1 postgres postgres  141 Sep  7 15:02 ruby.png</span><br><span class="line">drwxrwxr-x  3 postgres postgres 4.0K Sep  7 15:02 snowball</span><br><span class="line">-rw-rw-r--  1 postgres postgres  141 Sep  7 15:02 snow.png</span><br><span class="line">drwxrwxr-x 10 postgres postgres 4.0K Sep  7 15:02 storage</span><br><span class="line">drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 tcop</span><br><span class="line">drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 tsearch</span><br><span class="line">-rw-rw-r--  1 postgres postgres  117 Sep  7 15:02 updown.png</span><br><span class="line">drwxrwxr-x  3 postgres postgres 4.0K Sep  7 15:02 usr</span><br><span class="line">drwxrwxr-x 14 postgres postgres 4.0K Sep  7 15:02 utils</span><br></pre></td></tr></table></figure><h1 id="4-查看报告"><a href="#4-查看报告" class="headerlink" title="4. 查看报告"></a>4. 查看报告</h1><p>浏览器中打开 <code>index.html</code> 即可查看。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>PostgreSQL 其实已经在 Makefile 提供了生成代码覆盖 HTML 的 target 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@wslu postgresql-9.4.4]<span class="comment"># make coverage-html</span></span><br></pre></td></tr></table></figure><p>产生的html目录如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@wslu postgresql-9.4.4]<span class="comment"># cd coverage</span></span><br><span class="line">[root@wslu coverage]<span class="comment"># ll</span></span><br><span class="line">total 224</span><br><span class="line">-rw-r--r--  1 root root   141 Sep  7 19:17 amber.png</span><br><span class="line">-rw-r--r--  1 root root   141 Sep  7 19:17 emerald.png</span><br><span class="line">-rw-r--r--  1 root root  9893 Sep  7 19:17 gcov.css</span><br><span class="line">-rw-r--r--  1 root root   167 Sep  7 19:17 glass.png</span><br><span class="line">-rw-r--r--  1 root root 58737 Sep  7 19:18 index.html</span><br><span class="line">-rw-r--r--  1 root root 58730 Sep  7 19:18 index-sort-f.html</span><br><span class="line">-rw-r--r--  1 root root 58730 Sep  7 19:18 index-sort-l.html</span><br><span class="line">-rw-r--r--  1 root root   141 Sep  7 19:17 ruby.png</span><br><span class="line">-rw-r--r--  1 root root   141 Sep  7 19:17 snow.png</span><br><span class="line">drwxr-xr-x 11 root root  4096 Sep  7 19:18 src</span><br><span class="line">-rw-r--r--  1 root root   117 Sep  7 19:17 updown.png</span><br><span class="line">drwxr-xr-x  3 root root  4096 Sep  7 19:18 usr</span><br></pre></td></tr></table></figure><p>每次对代码改动后，执行完 <code>make check</code> 或其他回归测试手段后，就可以执行 <code>make coverage-html</code> 了。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="http://magustest.com/blog/whiteboxtesting/using-gcov-lcov/">Magus Test Archive</a></li><li><a href="http://ltp.sourceforge.net/coverage/lcov.php">lcov</a></li><li><a href="http://ltp.sourceforge.net/coverage/lcov/readme.php">lcov readme</a></li><li><a href="https://github.com/linux-test-project/ltp">GitHub - linux-test-project/ltp: Linux Test Project http://linux-test-project.github.io/</a></li><li><a href="https://gcc.gnu.org/onlinedocs/gcc/Gcov.html">Gcov (Using the GNU Compiler Collection (GCC))</a></li><li><a href="https://wiki.postgresql.org/wiki/CodeCoverage">CodeCoverage - PostgreSQL wiki</a></li><li><a href="http://www.postgresql.org/docs/devel/static/regress-coverage.html">PostgreSQL: Documentation: devel: 33.5. Test Coverage Examination</a></li></ol><hr><p>欢迎关注我的微信公众号【MySQL数据库技术】。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="MySQL数据库技术" align="left"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>开源中国（oschina）</td><td><a href="https://my.oschina.net/dbkernel">https://my.oschina.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;


&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;通常我们评判一个 test case 好坏的标准之一是代码的覆盖率，一个好的 test </summary>
      
    
    
    
    <category term="PostgreSQL" scheme="http://dbkernel.github.io/categories/PostgreSQL/"/>
    
    
    <category term="PostgreSQL" scheme="http://dbkernel.github.io/tags/PostgreSQL/"/>
    
    <category term="gcov" scheme="http://dbkernel.github.io/tags/gcov/"/>
    
    <category term="lcov" scheme="http://dbkernel.github.io/tags/lcov/"/>
    
    <category term="测试" scheme="http://dbkernel.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>特性分析 | GreenPlum Primary/Mirror 同步机制</title>
    <link href="http://dbkernel.github.io/2016/01/21/greenplum-primary-mirror-sync-mechanism/"/>
    <id>http://dbkernel.github.io/2016/01/21/greenplum-primary-mirror-sync-mechanism/</id>
    <published>2016-01-21T12:02:26.000Z</published>
    <updated>2021-09-12T06:41:31.352Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>PostgreSQL 主备同步机制是通过流复制实现，其原理见 <a href="http://mysql.taobao.org/monthly/2015/10/04/">PG主备流复制机制</a>。</p><p>Greenplum 是基于 PostgreSQL 开发的，它的主备也是通过流复制实现，但是 <strong>Segment 节点中的 Primary 和 Mirror 之间的数据同步是基于文件级别的同步实现的</strong>。</p><p><code>为什么Primary和Mirror不能再使用流复制实现呢？</code></p><blockquote><p>主要有两个原因:</p><ol><li><code>Append Only</code> 表不写 WAL 日志，所以 Append Only 表的数据就不能通过 XLOG 发送到 Mirror 再 Apply 。</li><li><code>pg_control</code>等文件也是不写 WAL 日志，也只能通过文件方式同步到 Mirror 。</li></ol></blockquote><h2 id="GreenPlum-总体结构"><a href="#GreenPlum-总体结构" class="headerlink" title="GreenPlum 总体结构"></a>GreenPlum 总体结构</h2><p>Greenplum 的架构采用了 MPP 无共享体系。在 MPP 系统中，每个数据节点有自己的CPU、磁盘和内存(Share nothing)，每个节点内的 CPU 不能访问另一个节点的内存。节点之间的信息交互是通过节点互联网络实现的，这个过程一般称为<strong>数据重分配</strong>(Data Redistribution)。</p><p>Master 负责协调整个集群 ，一个数据节点可以配置多个节点实例(Segment Instances)，节点实例并行处理查询(SQL)。</p><p><img src="greenplum-architecture-overview.jpg" alt="GreenPlum 总体架构"></p><h2 id="Primary和Mirror同步机制"><a href="#Primary和Mirror同步机制" class="headerlink" title="Primary和Mirror同步机制"></a>Primary和Mirror同步机制</h2><p>Primary 和 Mirror 同步的内容主要有两部分，即<strong>文件</strong>和<strong>数据</strong>。之所以 Primary 和 Mirror 要同步文件，是 Primary 和 Mirror 之间可以自动 failover，只有两者保持同步才能相互替代。如果只把数据同步过去，<code>pg_control、pg_clog、pg_subtrans</code> 没有同步，那么从 Primary 切换到 Mirror 会出现问题。</p><p>Master 和 slave 却不用担心这些问题，Append Only 表的数据只会存在 Segment，所以 <strong>WAL 日志足够保持 Master 和 slave 同步</strong>(只要是流复制，pg_control、pg_clog、pg_subtrans 这些文件Slave会自动更新，无需从 Master 同步)。</p><h3 id="1-数据同步"><a href="#1-数据同步" class="headerlink" title="1. 数据同步"></a>1. 数据同步</h3><p>当 Master 向 Primary 下发执行计划后，Primary 开始执行，如果是 DML 操作，那么 Primary 会产生 XLOG 及更新 page。会在 <code>SlruPhysicalWritePage</code> 函数中(写数据页)产生<code>FileRepOperationOpen、FileRepOperationWrite、FileRepOperationFlush、FileRepOperationClose</code>等指令消息(消息中包含具体要更新的文件page及内容)，通过 <code>primary sender</code> 进程向 Mirror 发送 Message，然后 Mirror 的 <code>mirror consumer</code> 等进程解析消息，执行变更。XLOG 通过<code>XLogWrite</code>函数(写XLOG)执行同样的操作，把 XLOG 更新同步过去。</p><h3 id="2-文件同步"><a href="#2-文件同步" class="headerlink" title="2. 文件同步"></a>2. 文件同步</h3><p>Primary 会有个 <code>recovery</code> 进程，这个进程会循环把 Primary 的  <code>pg_control、pg_clog、pg_subtrans</code> 等文件覆盖到 Mirror。同时检查 XLOG 是否一致，如果不一致以 Primary 为主，对 Mirror 进行覆盖。除了把 Primary 部分文件同步到 Mirror 之外，<code>recovery</code> 进程还会将 Mirror 上面的临时文件删掉。</p><p><img src="greenplum-primary-mirror-sync.jpg" alt="GreenPlum 主从同步机制"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Primary 和 Mirror 同步数据的时候，Primary 对于每一次写 page 都会通过消息发送到 Mirror，如果 Primary 大量的更新 page，那么 Primary 和 Mirror 同步将有可能成为瓶颈。</p><blockquote><p>本文转自：<a href="http://mysql.taobao.org/monthly/2016/01/02/">http://mysql.taobao.org/monthly/2016/01/02/</a></p></blockquote><hr><p>欢迎关注我的微信公众号【MySQL数据库技术】。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="MySQL数据库技术" align="left"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>开源中国（oschina）</td><td><a href="https://my.oschina.net/dbkernel">https://my.oschina.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;


&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;PostgreSQL 主备同步机制是通过流复制实现，其原理见 &lt;a href=&quot;http</summary>
      
    
    
    
    <category term="GreenPlum" scheme="http://dbkernel.github.io/categories/GreenPlum/"/>
    
    
    <category term="PostgreSQL" scheme="http://dbkernel.github.io/tags/PostgreSQL/"/>
    
    <category term="GreenPlum" scheme="http://dbkernel.github.io/tags/GreenPlum/"/>
    
    <category term="主从同步" scheme="http://dbkernel.github.io/tags/%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>实用工具 | PostgreSQL数据库压力测试工具pgbench使用示例</title>
    <link href="http://dbkernel.github.io/2015/12/23/example-of-postgresql-pgbench/"/>
    <id>http://dbkernel.github.io/2015/12/23/example-of-postgresql-pgbench/</id>
    <published>2015-12-23T13:04:17.000Z</published>
    <updated>2021-09-11T15:40:45.853Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>PG数据库提供了一款轻量级的压力测试工具叫 <code>pgbench</code>，其实就是一个编译好后的扩展性的可执行文件。</p><p><strong>测试环境：</strong></p><blockquote><p>CentOS 5.7 in VMWare 8.0</p><p>PG：9.1.2</p></blockquote><p><strong>数据库参数：</strong></p><blockquote><p>max_connection=100</p><p>其他默认</p><p><strong>注意：</strong> 本文只为说明 <code>pgbench</code> 的使用方法，因此，并未对数据库参数调优。</p></blockquote><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>进入源码安装包，编译、安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> postgresql-9.1.2/contrib/pgbench/</span><br><span class="line">make all</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>安装完毕以后可以在 bin 文件夹下看到新生成的 pgbench 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ll <span class="variable">$PGHOME</span>/bin/pgbench</span><br><span class="line">-rwxr-xr-x. 1 postgres postgres 50203 Jul  8 20:28 pgbench</span><br></pre></td></tr></table></figure><h1 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[postgres@localhost  bin]$ pgbench --<span class="built_in">help</span></span><br><span class="line">pgbench is a benchmarking tool <span class="keyword">for</span> PostgreSQL.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  pgbench [OPTIONS]... [DBNAME]</span><br><span class="line"></span><br><span class="line">Initialization options:</span><br><span class="line">  -i           invokes initialization mode</span><br><span class="line">  -F NUM       fill factor</span><br><span class="line">  -s NUM       scaling factor</span><br><span class="line"></span><br><span class="line">Benchmarking options:</span><br><span class="line">  -c NUM       number of concurrent database clients (default: 1)</span><br><span class="line">  -C           establish new connection <span class="keyword">for</span> each transaction</span><br><span class="line">  -D VARNAME=VALUE</span><br><span class="line">               define variable <span class="keyword">for</span> use by custom script</span><br><span class="line">  -f FILENAME  <span class="built_in">read</span> transaction script from FILENAME</span><br><span class="line">  -j NUM       number of threads (default: 1)</span><br><span class="line">  -l           write transaction <span class="built_in">times</span> to <span class="built_in">log</span> file</span><br><span class="line">  -M &#123;simple|extended|prepared&#125;</span><br><span class="line">               protocol <span class="keyword">for</span> submitting queries to server (default: simple)</span><br><span class="line">  -n           <span class="keyword">do</span> not run VACUUM before tests</span><br><span class="line">  -N           <span class="keyword">do</span> not update tables <span class="string">&quot;pgbench_tellers&quot;</span> and <span class="string">&quot;pgbench_branches&quot;</span></span><br><span class="line">  -r           report average latency per <span class="built_in">command</span></span><br><span class="line">  -s NUM       report this scale factor <span class="keyword">in</span> output</span><br><span class="line">  -S           perform SELECT-only transactions</span><br><span class="line">  -t NUM       number of transactions each client runs (default: 10)</span><br><span class="line">  -T NUM       duration of benchmark <span class="built_in">test</span> <span class="keyword">in</span> seconds</span><br><span class="line">  -v           vacuum all four standard tables before tests</span><br><span class="line"></span><br><span class="line">Common options:</span><br><span class="line">  -d           <span class="built_in">print</span> debugging output</span><br><span class="line">  -h HOSTNAME  database server host or socket directory</span><br><span class="line">  -p PORT      database server port number</span><br><span class="line">  -U USERNAME  connect as specified database user</span><br><span class="line">  --<span class="built_in">help</span>       show this <span class="built_in">help</span>, <span class="keyword">then</span> <span class="built_in">exit</span></span><br><span class="line">  --version    output version information, <span class="keyword">then</span> <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>部分参数中文含义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">-c, --client=NUM</span><br><span class="line">数据库客户端数量, 可以理解为数据库会话数量(postgres进程数), 默认为1</span><br><span class="line"></span><br><span class="line">-C, --connect</span><br><span class="line">每个事务创建一个连接,由于PG使用进程模型, 可以测试频繁Kill/Create进程的性能表现</span><br><span class="line"></span><br><span class="line">-j, --jobs=NUM</span><br><span class="line">pgbench的工作线程数</span><br><span class="line"></span><br><span class="line">-T, --time=NUM</span><br><span class="line">以秒为单位的压测时长</span><br><span class="line"></span><br><span class="line">-v, --vacuum-all</span><br><span class="line">每次测试前执行vacuum命令, 避免&quot;垃圾&quot;空间的影响</span><br><span class="line"></span><br><span class="line">-M, --protocol=simple|extended|prepared</span><br><span class="line">提交查询命令到服务器使用的协议, simple是默认选项, prepared是类似绑定</span><br><span class="line"></span><br><span class="line">-r, --report-latencies</span><br><span class="line">报告每条命令(SQL语句)的平均延时</span><br><span class="line"></span><br><span class="line">-S, --select-only</span><br><span class="line">只执行查询语句</span><br></pre></td></tr></table></figure><h1 id="初始化测试数据"><a href="#初始化测试数据" class="headerlink" title="初始化测试数据"></a>初始化测试数据</h1><p>初始化数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[postgres@localhost  ~]$ pgbench -i pgbench</span><br><span class="line">creating tables...</span><br><span class="line">10000 tuples <span class="keyword">done</span>.</span><br><span class="line">20000 tuples <span class="keyword">done</span>.</span><br><span class="line">30000 tuples <span class="keyword">done</span>.</span><br><span class="line">40000 tuples <span class="keyword">done</span>.</span><br><span class="line">50000 tuples <span class="keyword">done</span>.</span><br><span class="line">60000 tuples <span class="keyword">done</span>.</span><br><span class="line">70000 tuples <span class="keyword">done</span>.</span><br><span class="line">80000 tuples <span class="keyword">done</span>.</span><br><span class="line">90000 tuples <span class="keyword">done</span>.</span><br><span class="line">100000 tuples <span class="keyword">done</span>.</span><br><span class="line"><span class="built_in">set</span> primary key...</span><br><span class="line">NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index <span class="string">&quot;pgbench_branches_pkey&quot;</span> <span class="keyword">for</span> table <span class="string">&quot;pgbench_branches&quot;</span></span><br><span class="line">NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index <span class="string">&quot;pgbench_tellers_pkey&quot;</span> <span class="keyword">for</span> table <span class="string">&quot;pgbench_tellers&quot;</span></span><br><span class="line">NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index <span class="string">&quot;pgbench_accounts_pkey&quot;</span> <span class="keyword">for</span> table <span class="string">&quot;pgbench_accounts&quot;</span></span><br><span class="line">vacuum...done.</span><br></pre></td></tr></table></figure><p>查看表数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[postgres<span class="variable">@localhost</span>  <span class="operator">~</span>]$ psql <span class="operator">-</span>d pgbench</span><br><span class="line">psql (<span class="number">9.1</span><span class="number">.2</span>)</span><br><span class="line">Type &quot;help&quot; <span class="keyword">for</span> help.</span><br><span class="line"></span><br><span class="line">pgbench<span class="operator">=</span># <span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> pgbench_accounts;</span><br><span class="line"> count</span><br><span class="line"><span class="comment">--------</span></span><br><span class="line"> <span class="number">100000</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br><span class="line"></span><br><span class="line">pgbench<span class="operator">=</span># <span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> pgbench_branches;</span><br><span class="line"> count</span><br><span class="line"><span class="comment">-------</span></span><br><span class="line">     <span class="number">1</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br><span class="line"></span><br><span class="line">pgbench<span class="operator">=</span># <span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> pgbench_history;</span><br><span class="line"> count</span><br><span class="line"><span class="comment">-------</span></span><br><span class="line">     <span class="number">0</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br><span class="line"></span><br><span class="line">pgbench<span class="operator">=</span># <span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> pgbench_tellers;</span><br><span class="line"> count</span><br><span class="line"><span class="comment">-------</span></span><br><span class="line">    <span class="number">10</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br></pre></td></tr></table></figure><p>查看表结构：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">pgbench<span class="operator">=</span># \d<span class="operator">+</span> pgbench_accounts</span><br><span class="line">                <span class="keyword">Table</span> &quot;public.pgbench_accounts&quot;</span><br><span class="line">  <span class="keyword">Column</span>  <span class="operator">|</span>     Type      <span class="operator">|</span> Modifiers <span class="operator">|</span> Storage  <span class="operator">|</span> Description</span><br><span class="line"><span class="comment">----------+---------------+-----------+----------+-------------</span></span><br><span class="line"> aid      <span class="operator">|</span> <span class="type">integer</span>       <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>  <span class="operator">|</span> plain    <span class="operator">|</span></span><br><span class="line"> bid      <span class="operator">|</span> <span class="type">integer</span>       <span class="operator">|</span>           <span class="operator">|</span> plain    <span class="operator">|</span></span><br><span class="line"> abalance <span class="operator">|</span> <span class="type">integer</span>       <span class="operator">|</span>           <span class="operator">|</span> plain    <span class="operator">|</span></span><br><span class="line"> filler   <span class="operator">|</span> <span class="type">character</span>(<span class="number">84</span>) <span class="operator">|</span>           <span class="operator">|</span> extended <span class="operator">|</span></span><br><span class="line">Indexes:</span><br><span class="line">    &quot;pgbench_accounts_pkey&quot; <span class="keyword">PRIMARY</span> KEY, btree (aid)</span><br><span class="line">Has OIDs: <span class="keyword">no</span></span><br><span class="line">Options: fillfactor<span class="operator">=</span><span class="number">100</span></span><br><span class="line"></span><br><span class="line">pgbench<span class="operator">=</span># \d<span class="operator">+</span> pgbench_branches</span><br><span class="line">                <span class="keyword">Table</span> &quot;public.pgbench_branches&quot;</span><br><span class="line">  <span class="keyword">Column</span>  <span class="operator">|</span>     Type      <span class="operator">|</span> Modifiers <span class="operator">|</span> Storage  <span class="operator">|</span> Description</span><br><span class="line"><span class="comment">----------+---------------+-----------+----------+-------------</span></span><br><span class="line"> bid      <span class="operator">|</span> <span class="type">integer</span>       <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>  <span class="operator">|</span> plain    <span class="operator">|</span></span><br><span class="line"> bbalance <span class="operator">|</span> <span class="type">integer</span>       <span class="operator">|</span>           <span class="operator">|</span> plain    <span class="operator">|</span></span><br><span class="line"> filler   <span class="operator">|</span> <span class="type">character</span>(<span class="number">88</span>) <span class="operator">|</span>           <span class="operator">|</span> extended <span class="operator">|</span></span><br><span class="line">Indexes:</span><br><span class="line">    &quot;pgbench_branches_pkey&quot; <span class="keyword">PRIMARY</span> KEY, btree (bid)</span><br><span class="line">Has OIDs: <span class="keyword">no</span></span><br><span class="line">Options: fillfactor<span class="operator">=</span><span class="number">100</span></span><br><span class="line"></span><br><span class="line">pgbench<span class="operator">=</span># \d<span class="operator">+</span> pgbench_history</span><br><span class="line">                      <span class="keyword">Table</span> &quot;public.pgbench_history&quot;</span><br><span class="line"> <span class="keyword">Column</span> <span class="operator">|</span>            Type             <span class="operator">|</span> Modifiers <span class="operator">|</span> Storage  <span class="operator">|</span> Description</span><br><span class="line"><span class="comment">--------+-----------------------------+-----------+----------+-------------</span></span><br><span class="line"> tid    <span class="operator">|</span> <span class="type">integer</span>                     <span class="operator">|</span>           <span class="operator">|</span> plain    <span class="operator">|</span></span><br><span class="line"> bid    <span class="operator">|</span> <span class="type">integer</span>                     <span class="operator">|</span>           <span class="operator">|</span> plain    <span class="operator">|</span></span><br><span class="line"> aid    <span class="operator">|</span> <span class="type">integer</span>                     <span class="operator">|</span>           <span class="operator">|</span> plain    <span class="operator">|</span></span><br><span class="line"> delta  <span class="operator">|</span> <span class="type">integer</span>                     <span class="operator">|</span>           <span class="operator">|</span> plain    <span class="operator">|</span></span><br><span class="line"> mtime  <span class="operator">|</span> <span class="type">timestamp</span> <span class="keyword">without</span> <span class="type">time</span> zone <span class="operator">|</span>           <span class="operator">|</span> plain    <span class="operator">|</span></span><br><span class="line"> filler <span class="operator">|</span> <span class="type">character</span>(<span class="number">22</span>)               <span class="operator">|</span>           <span class="operator">|</span> extended <span class="operator">|</span></span><br><span class="line">Has OIDs: <span class="keyword">no</span></span><br><span class="line"></span><br><span class="line">pgbench<span class="operator">=</span># \d<span class="operator">+</span> pgbench_tellers</span><br><span class="line">                <span class="keyword">Table</span> &quot;public.pgbench_tellers&quot;</span><br><span class="line">  <span class="keyword">Column</span>  <span class="operator">|</span>     Type      <span class="operator">|</span> Modifiers <span class="operator">|</span> Storage  <span class="operator">|</span> Description</span><br><span class="line"><span class="comment">----------+---------------+-----------+----------+-------------</span></span><br><span class="line"> tid      <span class="operator">|</span> <span class="type">integer</span>       <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>  <span class="operator">|</span> plain    <span class="operator">|</span></span><br><span class="line"> bid      <span class="operator">|</span> <span class="type">integer</span>       <span class="operator">|</span>           <span class="operator">|</span> plain    <span class="operator">|</span></span><br><span class="line"> tbalance <span class="operator">|</span> <span class="type">integer</span>       <span class="operator">|</span>           <span class="operator">|</span> plain    <span class="operator">|</span></span><br><span class="line"> filler   <span class="operator">|</span> <span class="type">character</span>(<span class="number">84</span>) <span class="operator">|</span>           <span class="operator">|</span> extended <span class="operator">|</span></span><br><span class="line">Indexes:</span><br><span class="line">    &quot;pgbench_tellers_pkey&quot; <span class="keyword">PRIMARY</span> KEY, btree (tid)</span><br><span class="line">Has OIDs: <span class="keyword">no</span></span><br><span class="line">Options: fillfactor<span class="operator">=</span><span class="number">100</span></span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><ol><li>这里使用的是默认的参数值，<code>-s</code>参数时可指定测试数据的数据量，<code>-f</code>可以指定测试的脚本，这里用的是默认脚本。</li><li>不要在生产的库上做，新建一个测试库（当生产上有同名的测试表时将被重置）。</li></ol><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="1个session"><a href="#1个session" class="headerlink" title="1个session"></a>1个session</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[postgres@localhost  ~]$ nohup pgbench -c 1 -T 20 -r pgbench &gt; file.out  2&gt;&amp;1</span><br><span class="line">[postgres@localhost  ~]$ more file.out</span><br><span class="line">nohup: ignoring input</span><br><span class="line">starting vacuum...end.</span><br><span class="line">transaction <span class="built_in">type</span>: TPC-B (sort of)</span><br><span class="line">scaling factor: 1</span><br><span class="line">query mode: simple</span><br><span class="line">number of clients: 1</span><br><span class="line">number of threads: 1</span><br><span class="line">duration: 20 s</span><br><span class="line">number of transactions actually processed: 12496                                                                                     tps = 624.747958 (including connections establishing)                                                                                tps = 625.375564 (excluding connections establishing)</span><br><span class="line">statement latencies <span class="keyword">in</span> milliseconds:</span><br><span class="line">        0.005299        \<span class="built_in">set</span> nbranches 1 * :scale</span><br><span class="line">        0.000619        \<span class="built_in">set</span> ntellers 10 * :scale</span><br><span class="line">        0.000492        \<span class="built_in">set</span> naccounts 100000 * :scale</span><br><span class="line">        0.000700        \setrandom aid 1 :naccounts</span><br><span class="line">        0.000400        \setrandom bid 1 :nbranches</span><br><span class="line">        0.000453        \setrandom tid 1 :ntellers</span><br><span class="line">        0.000430        \setrandom delta -5000 5000</span><br><span class="line">        0.050707        BEGIN;</span><br><span class="line">        0.200909        UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;</span><br><span class="line">        0.098718        SELECT abalance FROM pgbench_accounts WHERE aid = :aid;</span><br><span class="line">        0.111621        UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;</span><br><span class="line">        0.107297        UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;</span><br><span class="line">        0.095156        INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);</span><br><span class="line">        0.919101        END;</span><br></pre></td></tr></table></figure><h2 id="2-50个session"><a href="#2-50个session" class="headerlink" title="2. 50个session"></a>2. 50个session</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[postgres@localhost  ~]<span class="variable">$nohup</span> pgbench -c 50 -T 20 -r pgbench &gt; file.out  2&gt;&amp;1</span><br><span class="line">[postgres@localhost  ~]$ more file.out</span><br><span class="line">nohup: ignoring input</span><br><span class="line">starting vacuum...end.</span><br><span class="line">transaction <span class="built_in">type</span>: TPC-B (sort of)</span><br><span class="line">scaling factor: 1</span><br><span class="line">query mode: simple</span><br><span class="line">number of clients: 50</span><br><span class="line">number of threads: 1</span><br><span class="line">duration: 20 s</span><br><span class="line">number of transactions actually processed: 7504                                                                                      tps = 370.510431 (including connections establishing)                                                                               tps = 377.964565 (excluding connections establishing)</span><br><span class="line">statement latencies <span class="keyword">in</span> milliseconds:</span><br><span class="line">        0.004291        \<span class="built_in">set</span> nbranches 1 * :scale</span><br><span class="line">        0.000769        \<span class="built_in">set</span> ntellers 10 * :scale</span><br><span class="line">        0.000955        \<span class="built_in">set</span> naccounts 100000 * :scale</span><br><span class="line">        0.000865        \setrandom aid 1 :naccounts</span><br><span class="line">        0.000513        \setrandom bid 1 :nbranches</span><br><span class="line">        0.000580        \setrandom tid 1 :ntellers</span><br><span class="line">        0.000522        \setrandom delta -5000 5000</span><br><span class="line">        0.604671        BEGIN;</span><br><span class="line">        1.480723        UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;</span><br><span class="line">        0.401148        SELECT abalance FROM pgbench_accounts WHERE aid = :aid;</span><br><span class="line">        104.713566      UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;</span><br><span class="line">        21.562787       UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;</span><br><span class="line">        0.412209        INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);</span><br><span class="line">        2.243497        END;</span><br></pre></td></tr></table></figure><h2 id="3-100个session"><a href="#3-100个session" class="headerlink" title="3. 100个session"></a>3. 100个session</h2><p>超过100个会报错，因为数据库当前设置最大 session 是100。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[postgres@localhost  ~]$ nohup pgbench -c 100 -T 20 -r pgbench&gt; file.out  2&gt;&amp;1</span><br><span class="line">[postgres@localhost  ~]$ more file.out</span><br><span class="line">nohup: ignoring input</span><br><span class="line">starting vacuum...end.</span><br><span class="line">transaction <span class="built_in">type</span>: TPC-B (sort of)</span><br><span class="line">scaling factor: 1</span><br><span class="line">query mode: simple</span><br><span class="line">number of clients: 100</span><br><span class="line">number of threads: 1</span><br><span class="line">duration: 20 s</span><br><span class="line">number of transactions actually processed: 6032                                                                                      tps = 292.556692 (including connections establishing)                                                                                tps = 305.595090 (excluding connections establishing)</span><br><span class="line">statement latencies <span class="keyword">in</span> milliseconds:</span><br><span class="line">        0.004508        \<span class="built_in">set</span> nbranches 1 * :scale</span><br><span class="line">        0.000787        \<span class="built_in">set</span> ntellers 10 * :scale</span><br><span class="line">        0.000879        \<span class="built_in">set</span> naccounts 100000 * :scale</span><br><span class="line">        0.001620        \setrandom aid 1 :naccounts</span><br><span class="line">        0.000485        \setrandom bid 1 :nbranches</span><br><span class="line">        0.000561        \setrandom tid 1 :ntellers</span><br><span class="line">        0.000656        \setrandom delta -5000 5000</span><br><span class="line">        3.660809        BEGIN;</span><br><span class="line">        4.198062        UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;</span><br><span class="line">        1.727076        SELECT abalance FROM pgbench_accounts WHERE aid = :aid;</span><br><span class="line">        281.955832      UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;</span><br><span class="line">        27.054125       UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;</span><br><span class="line">        0.524155        INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);</span><br><span class="line">        2.710619        END;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.postgresql.org/docs/9.1/static/pgbench.html">http://www.postgresql.org/docs/9.1/static/pgbench.html</a></p><hr><p>欢迎关注我的微信公众号【MySQL数据库技术】。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="MySQL数据库技术" align="left"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>开源中国（oschina）</td><td><a href="https://my.oschina.net/dbkernel">https://my.oschina.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;PG数据库提供了一款轻量级的压力测试工具叫 &lt;code&gt;pgbench&lt;/code&gt;，其实</summary>
      
    
    
    
    <category term="PostgreSQL" scheme="http://dbkernel.github.io/categories/PostgreSQL/"/>
    
    
    <category term="PostgreSQL" scheme="http://dbkernel.github.io/tags/PostgreSQL/"/>
    
    <category term="pgbench" scheme="http://dbkernel.github.io/tags/pgbench/"/>
    
  </entry>
  
  <entry>
    <title>特性分析 | PostgreSQL Primary/Standby 主备流复制机制</title>
    <link href="http://dbkernel.github.io/2015/11/21/postgresql-primary-standby-streaming-replication/"/>
    <id>http://dbkernel.github.io/2015/11/21/postgresql-primary-standby-streaming-replication/</id>
    <published>2015-11-21T12:02:26.000Z</published>
    <updated>2021-09-12T06:44:48.372Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>PostgreSQL 在 9.0 之后引入了主备流复制机制，通过流复制，备库不断的从主库同步相应的数据，并在备库 apply 每个 <code>WAL record</code>，这里的流复制每次传输单位是 WAL 日志的 record 。而 PostgreSQL 9.0 之前提供的方法是主库写完一个 WAL 日志文件后，才把 WAL 日志文件传送到备库，这样的方式导致主备延迟特别大。同时，PostgreSQL 9.0 之后提供了 <code>Hot Standby</code>，备库在应用 <code>WAL record</code> 的同时也能够提供只读服务，大大提升了用户体验。</p><h2 id="主备总体结构"><a href="#主备总体结构" class="headerlink" title="主备总体结构"></a>主备总体结构</h2><p>PostgreSQL 主备流复制的核心部分由 <code>walsender</code>，<code>walreceiver</code> 和 <code>startup</code> 三个进程组成。</p><p><strong>walsender 进程是用来发送 WAL 日志记录的</strong>，执行顺序如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PostgresMain</span>()-&gt;<span class="built_in">exec_replication_command</span>()-&gt;<span class="built_in">StartReplication</span>()-&gt;<span class="built_in">WalSndLoop</span>()-&gt;<span class="built_in">XLogSendPhysical</span>()</span><br></pre></td></tr></table></figure><p><strong>walreceiver 进程是用来接收 WAL 日志记录的</strong>，执行顺序如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sigusr1_handler</span>()-&gt;<span class="built_in">StartWalReceiver</span>()-&gt;<span class="built_in">AuxiliaryProcessMain</span>()-&gt;<span class="built_in">WalReceiverMain</span>()-&gt;<span class="built_in">walrcv_receive</span>()</span><br></pre></td></tr></table></figure><p><strong>startup 进程是用来 apply 日志的</strong>，执行顺序如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PostmasterMain</span>()-&gt;<span class="built_in">StartupDataBase</span>()-&gt;<span class="built_in">AuxiliaryProcessMain</span>()-&gt;<span class="built_in">StartupProcessMain</span>()-&gt;<span class="built_in">StartupXLOG</span>()</span><br></pre></td></tr></table></figure><p><img src="postgresql-primary-standby-architecture.jpg" alt="PostgreSQL 主备总体框架"></p><h2 id="walsender-和-walreceiver-进程流复制过程"><a href="#walsender-和-walreceiver-进程流复制过程" class="headerlink" title="walsender 和 walreceiver 进程流复制过程"></a>walsender 和 walreceiver 进程流复制过程</h2><p><strong>walsender 和 walreceiver 交互主要分为以下几个步骤：</strong></p><ol><li>walreceiver 启动后通过 <code>recovery.conf</code> 文件中的 <code>primary_conninfo</code> 参数信息连向主库，主库通过连接参数 <code>replication=true</code> 启动 walsender 进程；</li><li>walreceiver 执行 <code>identify_system</code> 命令，获取主库 <code>systemid/timeline/xlogpos</code> 等信息，执行 <code>TIMELINE_HISTORY</code> 命令拉取 history 文件；</li><li>执行 <code>wal_startstreaming</code> 开始启动流复制，通过 <code>walrcv_receive</code> 获取 WAL 日志，期间也会回应主库发过来的心跳信息(接收位点、flush 位点、apply 位点)，向主库发送 feedback 信息(最老的事务 id)，避免 vacuum 删掉备库正在使用的记录；</li><li>执行 <code>walrcv_endstreaming</code> 结束流复制，等待 startup 进程更新 <code>receiveStart</code> 和 <code>receiveStartTLI</code>，一旦更新，进入步骤2。</li></ol><p><img src="postgresql-stream-replication-process.jpg" alt="PostgreSQL 流复制过程"></p><h2 id="walreceiver和startup进程"><a href="#walreceiver和startup进程" class="headerlink" title="walreceiver和startup进程"></a>walreceiver和startup进程</h2><p>startup 进程进入 standby 模式和 apply 日志主要过程：</p><ol><li><p>读取 <code>pg_control</code> 文件，找到 redo 位点；读取 <code>recovery.conf</code>，如果配置 <code>standby_mode=on</code> 则进入 standby 模式。</p></li><li><p>如果是 Hot Standby 需要初始化 clog、subtrans、事务环境等。初始化 redo 资源管理器，比如 <code>Heap、Heap2、Database、XLOG</code> 等。</p></li><li><p>读取 WAL record，如果 record 不存在需要调用 <code>XLogPageRead-&gt;WaitForWALToBecomeAvailable-&gt;RequestXLogStreaming</code> 唤醒 <code>walreceiver从walsender</code> 获取 WAL record。</p></li><li><p>对读取的 WAL record 进行 redo，通过 <code>record-&gt;xl_rmid</code> 信息，调用相应的 redo 资源管理器进行 redo 操作。比如 <code>heap_redo</code> 的 <code>XLOG_HEAP_INSERT</code> 操作，就是通过 record 的信息在 buffer page 中增加一个 record：</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">MemSet</span>((<span class="keyword">char</span> *) htup, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(HeapTupleHeaderData));</span><br><span class="line"> <span class="comment">/* PG73FORMAT: get bitmap [+ padding] [+ oid] + data */</span></span><br><span class="line"> <span class="built_in">memcpy</span>((<span class="keyword">char</span> *) htup + <span class="built_in">offsetof</span>(HeapTupleHeaderData, t_bits),</span><br><span class="line">    (<span class="keyword">char</span> *) xlrec + SizeOfHeapInsert + SizeOfHeapHeader,</span><br><span class="line">    newlen);</span><br><span class="line"> newlen += <span class="built_in">offsetof</span>(HeapTupleHeaderData, t_bits);</span><br><span class="line"> htup-&gt;t_infomask2 = xlhdr.t_infomask2;</span><br><span class="line"> htup-&gt;t_infomask = xlhdr.t_infomask;</span><br><span class="line"> htup-&gt;t_hoff = xlhdr.t_hoff;</span><br><span class="line"> <span class="built_in">HeapTupleHeaderSetXmin</span>(htup, record-&gt;xl_xid);</span><br><span class="line"> <span class="built_in">HeapTupleHeaderSetCmin</span>(htup, FirstCommandId);</span><br><span class="line"> htup-&gt;t_ctid = xlrec-&gt;target.tid;</span><br><span class="line"></span><br><span class="line"> offnum = <span class="built_in">PageAddItem</span>(page, (Item) htup, newlen, offnum, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line"> <span class="keyword">if</span> (offnum == InvalidOffsetNumber)</span><br><span class="line"> <span class="built_in">elog</span>(PANIC, <span class="string">&quot;heap_insert_redo: failed to add tuple&quot;</span>);</span><br><span class="line"></span><br><span class="line"> freespace = <span class="built_in">PageGetHeapFreeSpace</span>(page);<span class="comment">/* needed to update FSM below */</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">PageSetLSN</span>(page, lsn);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (xlrec-&gt;flags &amp; XLOG_HEAP_ALL_VISIBLE_CLEARED)</span><br><span class="line"> <span class="built_in">PageClearAllVisible</span>(page);</span><br><span class="line"></span><br><span class="line"> <span class="built_in">MarkBufferDirty</span>(buffer);</span><br></pre></td></tr></table></figure><p>还有部分 redo 操作(vacuum 产生的 record)需要检查在 Hot Standby模式下的查询冲突，比如某些 tuples 需要 remove，而存在正在执行的query 可能读到这些 tuples，这样就会破坏事务隔离级别。通过函数 <code>ResolveRecoveryConflictWithSnapshot</code> 检测冲突，如果发生冲突，那么就把这个 query 所在的进程 kill 掉。</p><ol start="5"><li><p>检查一致性，如果一致了，Hot Standby 模式可以接受用户只读查询；更新共享内存中 <code>XLogCtlData</code> 的 apply 位点和时间线；如果恢复到时间点，时间线或者事务id需要检查是否恢复到当前目标；</p></li><li><p>回到步骤3，读取next WAL record 。</p></li></ol><p><img src="postgresql-standby-mode-and-apply-log.jpg" alt="PostgreSQL standby 模式和 apply 日志过程"></p><blockquote><p>本文转自：<a href="http://mysql.taobao.org/monthly/2015/10/04/">http://mysql.taobao.org/monthly/2015/10/04/</a></p></blockquote><hr><p>欢迎关注我的微信公众号【MySQL数据库技术】。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="MySQL数据库技术" align="left"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>开源中国（oschina）</td><td><a href="https://my.oschina.net/dbkernel">https://my.oschina.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;


&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;PostgreSQL 在 9.0 之后引入了主备流复制机制，通过流复制，备库不断的从主库</summary>
      
    
    
    
    <category term="PostgreSQL" scheme="http://dbkernel.github.io/categories/PostgreSQL/"/>
    
    
    <category term="PostgreSQL" scheme="http://dbkernel.github.io/tags/PostgreSQL/"/>
    
    <category term="主从同步" scheme="http://dbkernel.github.io/tags/%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>应用案例 | PostgreSQL libpq 网络库接口操作数据库示例</title>
    <link href="http://dbkernel.github.io/2015/11/12/example-of-postgresql-libpq/"/>
    <id>http://dbkernel.github.io/2015/11/12/example-of-postgresql-libpq/</id>
    <published>2015-11-12T01:23:46.000Z</published>
    <updated>2021-09-11T09:33:15.812Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文成文较早，测试程序验证的是 PostgreSQL 9.3 版本的 libpq，理论上，对其他版本也应该适用。</p><p>关于 libpq 各个函数接口的说明，参考：<a href="http://www.postgres.cn/docs/9.3/libpq.html">http://www.postgres.cn/docs/9.3/libpq.html</a></p><h1 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * testlibpq.c</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      Test the C version of libpq, the PostgreSQL frontend library.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libpq-fe.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span></span></span><br><span class="line"><span class="function"><span class="title">exit_nicely</span><span class="params">(PGconn *conn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">PQfinish</span>(conn);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *conninfo;</span><br><span class="line">    PGconn     *conn;</span><br><span class="line">    PGresult   *res;</span><br><span class="line">    <span class="keyword">int</span>         nFields;</span><br><span class="line">    <span class="keyword">int</span>         i,</span><br><span class="line">                j;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * If the user supplies a parameter on the command line, use it as the</span></span><br><span class="line"><span class="comment">     * conninfo string; otherwise default to setting dbname=postgres and using</span></span><br><span class="line"><span class="comment">     * environment variables or defaults for all other connection parameters.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (argc &gt; <span class="number">1</span>)</span><br><span class="line">        conninfo = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        conninfo = <span class="string">&quot;dbname = postgres&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Make a connection to the database */</span></span><br><span class="line">    conn = <span class="built_in">PQconnectdb</span>(conninfo);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check to see that the backend connection was successfully made */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">PQstatus</span>(conn) != CONNECTION_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Connection to database failed: %s&quot;</span>,</span><br><span class="line">                <span class="built_in">PQerrorMessage</span>(conn));</span><br><span class="line">        <span class="built_in">exit_nicely</span>(conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Our test case here involves using a cursor, for which we must be inside</span></span><br><span class="line"><span class="comment">     * a transaction block.  We could do the whole thing with a single</span></span><br><span class="line"><span class="comment">     * PQexec() of &quot;select * from pg_database&quot;, but that&#x27;s too trivial to make</span></span><br><span class="line"><span class="comment">     * a good example.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Start a transaction block */</span></span><br><span class="line">    res = <span class="built_in">PQexec</span>(conn, <span class="string">&quot;BEGIN&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">PQresultStatus</span>(res) != PGRES_COMMAND_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;BEGIN command failed: %s&quot;</span>, <span class="built_in">PQerrorMessage</span>(conn));</span><br><span class="line">        <span class="built_in">PQclear</span>(res);</span><br><span class="line">        <span class="built_in">exit_nicely</span>(conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Should PQclear PGresult whenever it is no longer needed to avoid memory</span></span><br><span class="line"><span class="comment">     * leaks</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">PQclear</span>(res);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Fetch rows from pg_database, the system catalog of databases</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    res = <span class="built_in">PQexec</span>(conn, <span class="string">&quot;DECLARE myportal CURSOR FOR select * from pg_database&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">PQresultStatus</span>(res) != PGRES_COMMAND_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;DECLARE CURSOR failed: %s&quot;</span>, <span class="built_in">PQerrorMessage</span>(conn));</span><br><span class="line">        <span class="built_in">PQclear</span>(res);</span><br><span class="line">        <span class="built_in">exit_nicely</span>(conn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">PQclear</span>(res);</span><br><span class="line"></span><br><span class="line">    res = <span class="built_in">PQexec</span>(conn, <span class="string">&quot;FETCH ALL in myportal&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">PQresultStatus</span>(res) != PGRES_TUPLES_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;FETCH ALL failed: %s&quot;</span>, <span class="built_in">PQerrorMessage</span>(conn));</span><br><span class="line">        <span class="built_in">PQclear</span>(res);</span><br><span class="line">        <span class="built_in">exit_nicely</span>(conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* first, print out the attribute names */</span></span><br><span class="line">    nFields = <span class="built_in">PQnfields</span>(res);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nFields; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%-15s&quot;</span>, <span class="built_in">PQfname</span>(res, i));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* next, print out the rows */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">PQntuples</span>(res); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; nFields; j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%-15s&quot;</span>, <span class="built_in">PQgetvalue</span>(res, i, j));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PQclear</span>(res);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* close the portal ... we don&#x27;t bother to check for errors ... */</span></span><br><span class="line">    res = <span class="built_in">PQexec</span>(conn, <span class="string">&quot;CLOSE myportal&quot;</span>);</span><br><span class="line">    <span class="built_in">PQclear</span>(res);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* end the transaction */</span></span><br><span class="line">    res = <span class="built_in">PQexec</span>(conn, <span class="string">&quot;END&quot;</span>);</span><br><span class="line">    <span class="built_in">PQclear</span>(res);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* close the connection to the database and cleanup */</span></span><br><span class="line">    <span class="built_in">PQfinish</span>(conn);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * testlibpq2.c</span></span><br><span class="line"><span class="comment"> *      Test of the asynchronous notification interface</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Start this program, then from psql in another window do</span></span><br><span class="line"><span class="comment"> *   NOTIFY TBL2;</span></span><br><span class="line"><span class="comment"> * Repeat four times to get this program to exit.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Or, if you want to get fancy, try this:</span></span><br><span class="line"><span class="comment"> * populate a database with the following commands</span></span><br><span class="line"><span class="comment"> * (provided in src/test/examples/testlibpq2.sql):</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   CREATE TABLE TBL1 (i int4);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   CREATE TABLE TBL2 (i int4);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   CREATE RULE r1 AS ON INSERT TO TBL1 DO</span></span><br><span class="line"><span class="comment"> *     (INSERT INTO TBL2 VALUES (new.i); NOTIFY TBL2);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * and do this four times:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   INSERT INTO TBL1 VALUES (10);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libpq-fe.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span></span></span><br><span class="line"><span class="function"><span class="title">exit_nicely</span><span class="params">(PGconn *conn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">PQfinish</span>(conn);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *conninfo;</span><br><span class="line">    PGconn     *conn;</span><br><span class="line">    PGresult   *res;</span><br><span class="line">    PGnotify   *notify;</span><br><span class="line">    <span class="keyword">int</span>         nnotifies;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * If the user supplies a parameter on the command line, use it as the</span></span><br><span class="line"><span class="comment">     * conninfo string; otherwise default to setting dbname=postgres and using</span></span><br><span class="line"><span class="comment">     * environment variables or defaults for all other connection parameters.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (argc &gt; <span class="number">1</span>)</span><br><span class="line">        conninfo = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        conninfo = <span class="string">&quot;dbname = postgres&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Make a connection to the database */</span></span><br><span class="line">    conn = <span class="built_in">PQconnectdb</span>(conninfo);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check to see that the backend connection was successfully made */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">PQstatus</span>(conn) != CONNECTION_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Connection to database failed: %s&quot;</span>,</span><br><span class="line">                <span class="built_in">PQerrorMessage</span>(conn));</span><br><span class="line">        <span class="built_in">exit_nicely</span>(conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Issue LISTEN command to enable notifications from the rule&#x27;s NOTIFY.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    res = <span class="built_in">PQexec</span>(conn, <span class="string">&quot;LISTEN TBL2&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">PQresultStatus</span>(res) != PGRES_COMMAND_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;LISTEN command failed: %s&quot;</span>, <span class="built_in">PQerrorMessage</span>(conn));</span><br><span class="line">        <span class="built_in">PQclear</span>(res);</span><br><span class="line">        <span class="built_in">exit_nicely</span>(conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * should PQclear PGresult whenever it is no longer needed to avoid memory</span></span><br><span class="line"><span class="comment">     * leaks</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">PQclear</span>(res);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Quit after four notifies are received. */</span></span><br><span class="line">    nnotifies = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (nnotifies &lt; <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Sleep until something happens on the connection.  We use select(2)</span></span><br><span class="line"><span class="comment">         * to wait for input, but you could also use poll() or similar</span></span><br><span class="line"><span class="comment">         * facilities.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span>         sock;</span><br><span class="line">        fd_set      input_mask;</span><br><span class="line"></span><br><span class="line">        sock = <span class="built_in">PQsocket</span>(conn);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sock &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;              <span class="comment">/* shouldn&#x27;t happen */</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">FD_ZERO</span>(&amp;input_mask);</span><br><span class="line">        <span class="built_in">FD_SET</span>(sock, &amp;input_mask);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">select</span>(sock + <span class="number">1</span>, &amp;input_mask, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;select() failed: %s\n&quot;</span>, <span class="built_in">strerror</span>(errno));</span><br><span class="line">            <span class="built_in">exit_nicely</span>(conn);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Now check for input */</span></span><br><span class="line">        <span class="built_in">PQconsumeInput</span>(conn);</span><br><span class="line">        <span class="keyword">while</span> ((notify = <span class="built_in">PQnotifies</span>(conn)) != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(stderr,</span><br><span class="line">                    <span class="string">&quot;ASYNC NOTIFY of &#x27;%s&#x27; received from backend PID %d\n&quot;</span>,</span><br><span class="line">                    notify-&gt;relname, notify-&gt;be_pid);</span><br><span class="line">            <span class="built_in">PQfreemem</span>(notify);</span><br><span class="line">            nnotifies++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Done.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* close the connection to the database and cleanup */</span></span><br><span class="line">    <span class="built_in">PQfinish</span>(conn);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * testlibpq3.c</span></span><br><span class="line"><span class="comment"> *      Test out-of-line parameters and binary I/O.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Before running this, populate a database with the following commands</span></span><br><span class="line"><span class="comment"> * (provided in src/test/examples/testlibpq3.sql):</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * CREATE TABLE test1 (i int4, t text, b bytea);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * INSERT INTO test1 values (1, &#x27;joe&#x27;&#x27;s place&#x27;, &#x27;\\000\\001\\002\\003\\004&#x27;);</span></span><br><span class="line"><span class="comment"> * INSERT INTO test1 values (2, &#x27;ho there&#x27;, &#x27;\\004\\003\\002\\001\\000&#x27;);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The expected output is:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * tuple 0: got</span></span><br><span class="line"><span class="comment"> *  i = (4 bytes) 1</span></span><br><span class="line"><span class="comment"> *  t = (11 bytes) &#x27;joe&#x27;s place&#x27;</span></span><br><span class="line"><span class="comment"> *  b = (5 bytes) \000\001\002\003\004</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * tuple 0: got</span></span><br><span class="line"><span class="comment"> *  i = (4 bytes) 2</span></span><br><span class="line"><span class="comment"> *  t = (8 bytes) &#x27;ho there&#x27;</span></span><br><span class="line"><span class="comment"> *  b = (5 bytes) \004\003\002\001\000</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libpq-fe.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* for ntohl/htonl */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span></span></span><br><span class="line"><span class="function"><span class="title">exit_nicely</span><span class="params">(PGconn *conn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">PQfinish</span>(conn);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This function prints a query result that is a binary-format fetch from</span></span><br><span class="line"><span class="comment"> * a table defined as in the comment above.  We split it out because the</span></span><br><span class="line"><span class="comment"> * main() function uses it twice.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span></span></span><br><span class="line"><span class="function"><span class="title">show_binary_results</span><span class="params">(PGresult *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>         i,</span><br><span class="line">                j;</span><br><span class="line">    <span class="keyword">int</span>         i_fnum,</span><br><span class="line">                t_fnum,</span><br><span class="line">                b_fnum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Use PQfnumber to avoid assumptions about field order in result */</span></span><br><span class="line">    i_fnum = <span class="built_in">PQfnumber</span>(res, <span class="string">&quot;i&quot;</span>);</span><br><span class="line">    t_fnum = <span class="built_in">PQfnumber</span>(res, <span class="string">&quot;t&quot;</span>);</span><br><span class="line">    b_fnum = <span class="built_in">PQfnumber</span>(res, <span class="string">&quot;b&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">PQntuples</span>(res); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span>       *iptr;</span><br><span class="line">        <span class="keyword">char</span>       *tptr;</span><br><span class="line">        <span class="keyword">char</span>       *bptr;</span><br><span class="line">        <span class="keyword">int</span>         blen;</span><br><span class="line">        <span class="keyword">int</span>         ival;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Get the field values (we ignore possibility they are null!) */</span></span><br><span class="line">        iptr = <span class="built_in">PQgetvalue</span>(res, i, i_fnum);</span><br><span class="line">        tptr = <span class="built_in">PQgetvalue</span>(res, i, t_fnum);</span><br><span class="line">        bptr = <span class="built_in">PQgetvalue</span>(res, i, b_fnum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * The binary representation of INT4 is in network byte order, which</span></span><br><span class="line"><span class="comment">         * we&#x27;d better coerce to the local byte order.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ival = <span class="built_in">ntohl</span>(*((<span class="keyword">uint32_t</span> *) iptr));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * The binary representation of TEXT is, well, text, and since libpq</span></span><br><span class="line"><span class="comment">         * was nice enough to append a zero byte to it, it&#x27;ll work just fine</span></span><br><span class="line"><span class="comment">         * as a C string.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * The binary representation of BYTEA is a bunch of bytes, which could</span></span><br><span class="line"><span class="comment">         * include embedded nulls so we have to pay attention to field length.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        blen = <span class="built_in">PQgetlength</span>(res, i, b_fnum);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;tuple %d: got\n&quot;</span>, i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; i = (%d bytes) %d\n&quot;</span>,</span><br><span class="line">               <span class="built_in">PQgetlength</span>(res, i, i_fnum), ival);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; t = (%d bytes) &#x27;%s&#x27;\n&quot;</span>,</span><br><span class="line">               <span class="built_in">PQgetlength</span>(res, i, t_fnum), tptr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; b = (%d bytes) &quot;</span>, blen);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; blen; j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\\%03o&quot;</span>, bptr[j]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *conninfo;</span><br><span class="line">    PGconn     *conn;</span><br><span class="line">    PGresult   *res;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *paramValues[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span>         paramLengths[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span>         paramFormats[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">uint32_t</span>    binaryIntVal;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * If the user supplies a parameter on the command line, use it as the</span></span><br><span class="line"><span class="comment">     * conninfo string; otherwise default to setting dbname=postgres and using</span></span><br><span class="line"><span class="comment">     * environment variables or defaults for all other connection parameters.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (argc &gt; <span class="number">1</span>)</span><br><span class="line">        conninfo = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        conninfo = <span class="string">&quot;dbname = postgres&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Make a connection to the database */</span></span><br><span class="line">    conn = <span class="built_in">PQconnectdb</span>(conninfo);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check to see that the backend connection was successfully made */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">PQstatus</span>(conn) != CONNECTION_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Connection to database failed: %s&quot;</span>,</span><br><span class="line">                <span class="built_in">PQerrorMessage</span>(conn));</span><br><span class="line">        <span class="built_in">exit_nicely</span>(conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * The point of this program is to illustrate use of PQexecParams() with</span></span><br><span class="line"><span class="comment">     * out-of-line parameters, as well as binary transmission of data.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * This first example transmits the parameters as text, but receives the</span></span><br><span class="line"><span class="comment">     * results in binary format.  By using out-of-line parameters we can</span></span><br><span class="line"><span class="comment">     * avoid a lot of tedious mucking about with quoting and escaping, even</span></span><br><span class="line"><span class="comment">     * though the data is text.  Notice how we don&#x27;t have to do anything</span></span><br><span class="line"><span class="comment">     * special with the quote mark in the parameter value.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Here is our out-of-line parameter value */</span></span><br><span class="line">    paramValues[<span class="number">0</span>] = <span class="string">&quot;joe&#x27;s place&quot;</span>;</span><br><span class="line"></span><br><span class="line">    res = <span class="built_in">PQexecParams</span>(conn,</span><br><span class="line">                       <span class="string">&quot;SELECT * FROM test1 WHERE t = $1&quot;</span>,</span><br><span class="line">                       <span class="number">1</span>,       <span class="comment">/* one param */</span></span><br><span class="line">                       <span class="literal">NULL</span>,    <span class="comment">/* let the backend deduce param type */</span></span><br><span class="line">                       paramValues,</span><br><span class="line">                       <span class="literal">NULL</span>,    <span class="comment">/* don&#x27;t need param lengths since text */</span></span><br><span class="line">                       <span class="literal">NULL</span>,    <span class="comment">/* default to all text params */</span></span><br><span class="line">                       <span class="number">1</span>);      <span class="comment">/* ask for binary results */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">PQresultStatus</span>(res) != PGRES_TUPLES_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;SELECT failed: %s&quot;</span>, <span class="built_in">PQerrorMessage</span>(conn));</span><br><span class="line">        <span class="built_in">PQclear</span>(res);</span><br><span class="line">        <span class="built_in">exit_nicely</span>(conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">show_binary_results</span>(res);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PQclear</span>(res);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * In this second example we transmit an integer parameter in binary</span></span><br><span class="line"><span class="comment">     * form, and again retrieve the results in binary form.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Although we tell PQexecParams we are letting the backend deduce</span></span><br><span class="line"><span class="comment">     * parameter type, we really force the decision by casting the parameter</span></span><br><span class="line"><span class="comment">     * symbol in the query text.  This is a good safety measure when sending</span></span><br><span class="line"><span class="comment">     * binary parameters.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Convert integer value &quot;2&quot; to network byte order */</span></span><br><span class="line">    binaryIntVal = <span class="built_in">htonl</span>((<span class="keyword">uint32_t</span>) <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Set up parameter arrays for PQexecParams */</span></span><br><span class="line">    paramValues[<span class="number">0</span>] = (<span class="keyword">char</span> *) &amp;binaryIntVal;</span><br><span class="line">    paramLengths[<span class="number">0</span>] = <span class="built_in"><span class="keyword">sizeof</span></span>(binaryIntVal);</span><br><span class="line">    paramFormats[<span class="number">0</span>] = <span class="number">1</span>;        <span class="comment">/* binary */</span></span><br><span class="line"></span><br><span class="line">    res = <span class="built_in">PQexecParams</span>(conn,</span><br><span class="line">                       <span class="string">&quot;SELECT * FROM test1 WHERE i = $1::int4&quot;</span>,</span><br><span class="line">                       <span class="number">1</span>,       <span class="comment">/* one param */</span></span><br><span class="line">                       <span class="literal">NULL</span>,    <span class="comment">/* let the backend deduce param type */</span></span><br><span class="line">                       paramValues,</span><br><span class="line">                       paramLengths,</span><br><span class="line">                       paramFormats,</span><br><span class="line">                       <span class="number">1</span>);      <span class="comment">/* ask for binary results */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">PQresultStatus</span>(res) != PGRES_TUPLES_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;SELECT failed: %s&quot;</span>, <span class="built_in">PQerrorMessage</span>(conn));</span><br><span class="line">        <span class="built_in">PQclear</span>(res);</span><br><span class="line">        <span class="built_in">exit_nicely</span>(conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">show_binary_results</span>(res);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PQclear</span>(res);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* close the connection to the database and cleanup */</span></span><br><span class="line">    <span class="built_in">PQfinish</span>(conn);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>欢迎关注我的微信公众号【MySQL数据库技术】。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="MySQL数据库技术" align="left"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>开源中国（oschina）</td><td><a href="https://my.oschina.net/dbkernel">https://my.oschina.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;


&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文成文较早，测试程序验证的是 PostgreSQL 9.3 版本的 libpq，理论上</summary>
      
    
    
    
    <category term="PostgreSQL" scheme="http://dbkernel.github.io/categories/PostgreSQL/"/>
    
    
    <category term="C语言" scheme="http://dbkernel.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="PostgreSQL" scheme="http://dbkernel.github.io/tags/PostgreSQL/"/>
    
    <category term="libpq" scheme="http://dbkernel.github.io/tags/libpq/"/>
    
  </entry>
  
  <entry>
    <title>特性介绍 | PostgreSQL 的依赖约束详解 - 系统表 pg_depend &amp; pg_constraint</title>
    <link href="http://dbkernel.github.io/2015/11/04/postgresql-dependency-constraint-details/"/>
    <id>http://dbkernel.github.io/2015/11/04/postgresql-dependency-constraint-details/</id>
    <published>2015-11-04T07:28:08.000Z</published>
    <updated>2021-09-11T09:29:26.900Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文成文较早，依赖的是 PostgreSQL 9.3 版本，后续内核版本可能不兼容，但核心原理是相通的，可做参考。</p><h1 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h1><h2 id="pg-depend"><a href="#pg-depend" class="headerlink" title="pg_depend"></a>pg_depend</h2><p>pg_depend 是 postgres 的一张系统表，用来记录数据库对象之间的依赖关系，除了常见的主外键，还有其他一些内部依赖关系，可以通过这个系统表呈现出来。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">postgres<span class="operator">=</span># \d<span class="operator">+</span> pg_depend</span><br><span class="line">                       <span class="keyword">Table</span> &quot;pg_catalog.pg_depend&quot;</span><br><span class="line">   <span class="keyword">Column</span>    <span class="operator">|</span>  Type   <span class="operator">|</span> Modifiers <span class="operator">|</span> Storage <span class="operator">|</span> Stats target <span class="operator">|</span> Description</span><br><span class="line"><span class="comment">-------------+---------+-----------+---------+--------------+-------------</span></span><br><span class="line"> classid     <span class="operator">|</span> oid     <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>  <span class="operator">|</span> plain   <span class="operator">|</span>              <span class="operator">|</span> 系统OID</span><br><span class="line"> objid       <span class="operator">|</span> oid     <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>  <span class="operator">|</span> plain   <span class="operator">|</span>              <span class="operator">|</span> 对象OID</span><br><span class="line"> objsubid    <span class="operator">|</span> <span class="type">integer</span> <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>  <span class="operator">|</span> plain   <span class="operator">|</span>              <span class="operator">|</span></span><br><span class="line"> refclassid  <span class="operator">|</span> oid     <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>  <span class="operator">|</span> plain   <span class="operator">|</span>              <span class="operator">|</span> 引用系统OID</span><br><span class="line"> refobjid    <span class="operator">|</span> oid     <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>  <span class="operator">|</span> plain   <span class="operator">|</span>              <span class="operator">|</span> 引用对象ID</span><br><span class="line"> refobjsubid <span class="operator">|</span> <span class="type">integer</span> <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>  <span class="operator">|</span> plain   <span class="operator">|</span>              <span class="operator">|</span></span><br><span class="line"> deptype     <span class="operator">|</span> &quot;char&quot;  <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>  <span class="operator">|</span> plain   <span class="operator">|</span>              <span class="operator">|</span> pg_depend类型</span><br><span class="line">Indexes:</span><br><span class="line">    &quot;pg_depend_depender_index&quot; btree (classid, objid, objsubid)</span><br><span class="line">    &quot;pg_depend_reference_index&quot; btree (refclassid, refobjid, refobjsubid)</span><br><span class="line">Has OIDs: <span class="keyword">no</span></span><br></pre></td></tr></table></figure><blockquote><p>OID 是 Object Identifier 的缩写，是对象 ID 的意思，因为是无符号的4字节类型，表示范围不够大，所以一般不用做主键使用，仅用在系统内部，比如系统表等应用。可以与一些整型数字进行转换。与之相关的系统参数是 <code>default_with_oids</code> ，默认是 off 。</p></blockquote><p><code>pg_depend.deptype</code> 字段自 9.1 版本之后多了一个 extension 的类型，目前类型有：</p><blockquote><p><code>DEPENDENCY_NORMAL (n)</code> ：普通的依赖对象，如表与schema的关系。<br><code>DEPENDENCY_AUTO (a)</code> ：自动的依赖对象，如主键约束。<br><code>DEPENDENCY_INTERNAL (i)</code> ：内部的依赖对象，通常是对象本身。<br><code>DEPENDENCY_EXTENSION (e)</code> ：9.1新增的的扩展依赖。<br><code>DEPENDENCY_PIN (p)</code> ：系统内置的依赖。</p></blockquote><h2 id="pg-constraint"><a href="#pg-constraint" class="headerlink" title="pg_constraint"></a>pg_constraint</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">postgres<span class="operator">=</span># \d pg_constraint</span><br><span class="line">     <span class="keyword">Table</span> &quot;pg_catalog.pg_constraint&quot;</span><br><span class="line">    <span class="keyword">Column</span>     <span class="operator">|</span>     Type     <span class="operator">|</span> Modifiers</span><br><span class="line"><span class="comment">---------------+--------------+-----------</span></span><br><span class="line"> conname       <span class="operator">|</span> name         <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>        <span class="comment">-- 约束名</span></span><br><span class="line"> connamespace  <span class="operator">|</span> oid          <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>        <span class="comment">-- 约束所在命名空间的OID</span></span><br><span class="line"> contype       <span class="operator">|</span> &quot;char&quot;       <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>        <span class="comment">-- 约束类型</span></span><br><span class="line"> condeferrable <span class="operator">|</span> <span class="type">boolean</span>      <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>        <span class="comment">-- 约束是否可以推迟</span></span><br><span class="line"> condeferred   <span class="operator">|</span> <span class="type">boolean</span>      <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>        <span class="comment">-- 缺省情况下，约束是否可以推迟</span></span><br><span class="line"> convalidated  <span class="operator">|</span> <span class="type">boolean</span>      <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>        <span class="comment">-- 约束是否经过验证</span></span><br><span class="line"> conrelid      <span class="operator">|</span> oid          <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>        <span class="comment">-- 约束所在的表的OID</span></span><br><span class="line"> contypid      <span class="operator">|</span> oid          <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>        <span class="comment">-- 约束所在的域的OID</span></span><br><span class="line"> conindid      <span class="operator">|</span> oid          <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>        <span class="comment">-- 如果是唯一、主键、外键或排除约束，则为支持这个约束的索引；否则为0</span></span><br><span class="line"> confrelid     <span class="operator">|</span> oid          <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>        <span class="comment">-- 如果是外键，则为参考的表；否则为 0</span></span><br><span class="line"> confupdtype   <span class="operator">|</span> &quot;char&quot;       <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>        <span class="comment">-- 外键更新操作代码</span></span><br><span class="line"> confdeltype   <span class="operator">|</span> &quot;char&quot;       <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>        <span class="comment">-- 外键删除操作代码</span></span><br><span class="line"> confmatchtype <span class="operator">|</span> &quot;char&quot;       <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>        <span class="comment">-- 外键匹配类型</span></span><br><span class="line"> conislocal    <span class="operator">|</span> <span class="type">boolean</span>      <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line"> coninhcount   <span class="operator">|</span> <span class="type">integer</span>      <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span>        <span class="comment">-- 约束直接继承祖先的数量</span></span><br><span class="line"> connoinherit  <span class="operator">|</span> <span class="type">boolean</span>      <span class="operator">|</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line"> conkey        <span class="operator">|</span> <span class="type">smallint</span>[]   <span class="operator">|</span>         <span class="comment">-- 如果是表约束（包含外键，但是不包含约束触发器），则是约束字段的列表</span></span><br><span class="line"> confkey       <span class="operator">|</span> <span class="type">smallint</span>[]   <span class="operator">|</span>         <span class="comment">-- 如果是一个外键，是参考的字段的列表</span></span><br><span class="line"> conpfeqop     <span class="operator">|</span> oid[]        <span class="operator">|</span>         <span class="comment">-- 如果是一个外键，是PK = FK比较的相等操作符的列表</span></span><br><span class="line"> conppeqop     <span class="operator">|</span> oid[]        <span class="operator">|</span>        <span class="comment">-- 如果是一个外键，是PK = PK比较的相等操作符的列表</span></span><br><span class="line"> conffeqop     <span class="operator">|</span> oid[]        <span class="operator">|</span>         <span class="comment">-- 如果是一个外键，是FK = FK比较的相等操作符的列表</span></span><br><span class="line"> conexclop     <span class="operator">|</span> oid[]        <span class="operator">|</span>         <span class="comment">-- 如果是一个排除约束，是每个字段排除操作符的列表</span></span><br><span class="line"> conbin        <span class="operator">|</span> pg_node_tree <span class="operator">|</span>         <span class="comment">-- 如果是一个检查约束，那就是其表达式的内部形式</span></span><br><span class="line"> consrc        <span class="operator">|</span> text         <span class="operator">|</span>         <span class="comment">-- 如果是检查约束，则是表达式的人类可读形式</span></span><br><span class="line">Indexes:</span><br><span class="line">    &quot;pg_constraint_oid_index&quot; <span class="keyword">UNIQUE</span>, btree (oid)</span><br><span class="line">    &quot;pg_constraint_conname_nsp_index&quot; btree (conname, connamespace)</span><br><span class="line">    &quot;pg_constraint_conrelid_index&quot; btree (conrelid)</span><br><span class="line">    &quot;pg_constraint_contypid_index&quot; btree (contypid)</span><br></pre></td></tr></table></figure><h1 id="查询依赖关系的-SQL"><a href="#查询依赖关系的-SQL" class="headerlink" title="查询依赖关系的 SQL"></a>查询依赖关系的 SQL</h1><p>如下 SQL 可以列出系统和用户对象的各种依赖关系：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> classid::regclass <span class="keyword">AS</span> &quot;depender object class&quot;,</span><br><span class="line">    <span class="keyword">CASE</span> classid</span><br><span class="line">        <span class="keyword">WHEN</span> <span class="string">&#x27;pg_class&#x27;</span>::regclass <span class="keyword">THEN</span> objid::regclass::text</span><br><span class="line">        <span class="keyword">WHEN</span> <span class="string">&#x27;pg_type&#x27;</span>::regclass <span class="keyword">THEN</span> objid::regtype::text</span><br><span class="line">        <span class="keyword">WHEN</span> <span class="string">&#x27;pg_proc&#x27;</span>::regclass <span class="keyword">THEN</span> objid::regprocedure::text</span><br><span class="line">        <span class="keyword">ELSE</span> objid::text</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">AS</span> &quot;depender object identity&quot;,</span><br><span class="line">    objsubid,</span><br><span class="line">    refclassid::regclass <span class="keyword">AS</span> &quot;referenced object class&quot;,</span><br><span class="line">    <span class="keyword">CASE</span> refclassid</span><br><span class="line">        <span class="keyword">WHEN</span> <span class="string">&#x27;pg_class&#x27;</span>::regclass <span class="keyword">THEN</span> refobjid::regclass::text</span><br><span class="line">        <span class="keyword">WHEN</span> <span class="string">&#x27;pg_type&#x27;</span>::regclass <span class="keyword">THEN</span> refobjid::regtype::text</span><br><span class="line">        <span class="keyword">WHEN</span> <span class="string">&#x27;pg_proc&#x27;</span>::regclass <span class="keyword">THEN</span> refobjid::regprocedure::text</span><br><span class="line">        <span class="keyword">ELSE</span> refobjid::text</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">AS</span> &quot;referenced object identity&quot;,</span><br><span class="line">    refobjsubid,</span><br><span class="line">    <span class="keyword">CASE</span> deptype</span><br><span class="line">        <span class="keyword">WHEN</span> <span class="string">&#x27;p&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;pinned&#x27;</span></span><br><span class="line">        <span class="keyword">WHEN</span> <span class="string">&#x27;i&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;internal&#x27;</span></span><br><span class="line">        <span class="keyword">WHEN</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;automatic&#x27;</span></span><br><span class="line">        <span class="keyword">WHEN</span> <span class="string">&#x27;n&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;normal&#x27;</span></span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">AS</span> &quot;dependency type&quot;</span><br><span class="line"><span class="keyword">FROM</span> pg_catalog.pg_depend <span class="keyword">WHERE</span> (objid <span class="operator">&gt;=</span> <span class="number">16384</span> <span class="keyword">OR</span> refobjid <span class="operator">&gt;=</span> <span class="number">16384</span>);</span><br></pre></td></tr></table></figure><blockquote><p>我通常喜欢在 where 后面加个条件 <code>and deptype &lt;&gt;&#39;i&#39;</code> ，以排除 internal 依赖。</p></blockquote><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p><strong>创建一张表：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">postgres<span class="operator">=</span># <span class="keyword">create</span> <span class="keyword">table</span> tbl_parent(id <span class="type">int</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span></span><br></pre></td></tr></table></figure><p><strong>执行查询依赖关系的 SQL：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">postgres<span class="operator">=</span># 执行上面的<span class="keyword">SQL</span>;</span><br><span class="line"> depender object class <span class="operator">|</span> depender object <span class="keyword">identity</span> <span class="operator">|</span> objsubid <span class="operator">|</span> referenced object class <span class="operator">|</span> referenced object <span class="keyword">identity</span> <span class="operator">|</span> refobjsubid <span class="operator">|</span> dependency type</span><br><span class="line"><span class="comment">-----------------------+--------------------------+----------+-------------------------+------------- pg_class              | tbl_parent               |        0 | pg_namespace            | 2200                       |           0 | normal</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br></pre></td></tr></table></figure><blockquote><p>看起来只是建了个表，没有约束，实际上该表是建立在 schema 下面的，因此只依赖于 schema 。</p></blockquote><p>添加主键约束：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">postgres<span class="operator">=</span># <span class="keyword">alter</span> <span class="keyword">table</span> tbl_parent <span class="keyword">add</span> <span class="keyword">primary</span> key(id);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span></span><br><span class="line"> depender object class <span class="operator">|</span> depender object <span class="keyword">identity</span> <span class="operator">|</span> objsubid <span class="operator">|</span> referenced object class <span class="operator">|</span> referenced object <span class="keyword">identity</span> <span class="operator">|</span> refobjsubid <span class="operator">|</span> dependency type</span><br><span class="line"><span class="comment">-----------------------+--------------------------+----------+-------------------------+------- pg_class              | tbl_parent               |        0 | pg_namespace            | 2200                       |           0 | normal</span></span><br><span class="line"> pg_constraint         <span class="operator">|</span> <span class="number">16469</span>                    <span class="operator">|</span>        <span class="number">0</span> <span class="operator">|</span> pg_class                <span class="operator">|</span> tbl_parent                 <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span> automatic</span><br><span class="line">(<span class="number">2</span> <span class="keyword">rows</span>)</span><br></pre></td></tr></table></figure><blockquote><p>约束类型变为了<code>automatic</code>，表明这个主键约束是依赖于表上的，是自动模式，详细信息可以在系统表 <code>pg_constrant</code> 里面查询。</p></blockquote><p>正常情况下用户删除有依赖关系的对象时，会提示需要先删除依赖的对象。但是如果通过系统表删除有依赖关系的对象时，若操作有误，就会导致异常。例如：下面的操作就会导致报错<code>cache lookup failed for constraint</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">postgres<span class="operator">=</span># <span class="keyword">select</span> oid,conname,connamespace,contype <span class="keyword">from</span> pg_constraint <span class="keyword">where</span> conname <span class="keyword">like</span> <span class="string">&#x27;tbl_parent%&#x27;</span>;</span><br><span class="line">  oid  <span class="operator">|</span>     conname     <span class="operator">|</span> connamespace <span class="operator">|</span> contype</span><br><span class="line"><span class="comment">-------+-----------------+--------------+---------</span></span><br><span class="line"> <span class="number">16469</span> <span class="operator">|</span> tbl_parent_pkey <span class="operator">|</span>         <span class="number">2200</span> <span class="operator">|</span> p</span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br><span class="line"></span><br><span class="line">postgres<span class="operator">=</span># <span class="keyword">delete</span> <span class="keyword">from</span> pg_constraint <span class="keyword">where</span> conname <span class="keyword">like</span> <span class="string">&#x27;tbl_parent%&#x27;</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="number">1</span></span><br><span class="line">postgres<span class="operator">=</span># <span class="keyword">select</span> oid,conname,connamespace,contype <span class="keyword">from</span> pg_constraint <span class="keyword">where</span> conname <span class="keyword">like</span> <span class="string">&#x27;tbl_parent%&#x27;</span>;</span><br><span class="line"> oid <span class="operator">|</span> conname <span class="operator">|</span> connamespace <span class="operator">|</span> contype</span><br><span class="line"><span class="comment">-----+---------+--------------+---------</span></span><br><span class="line">(<span class="number">0</span> <span class="keyword">rows</span>)</span><br><span class="line"></span><br><span class="line">postgres<span class="operator">=</span># <span class="keyword">drop</span> <span class="keyword">table</span> tbl_parent;</span><br><span class="line">ERROR:  cache lookup failed <span class="keyword">for</span> <span class="keyword">constraint</span> <span class="number">16469</span>   <span class="comment">--16496是约束的OID</span></span><br><span class="line">postgres<span class="operator">=</span>#</span><br></pre></td></tr></table></figure><p>之所以出现该报错，是因为手动把约束对象删除了，但在 pg_depend 里却仍然存在依赖关系，因此，删除该表时，由于找不到最里层的依赖对象而报错。</p><hr><p>欢迎关注我的微信公众号【MySQL数据库技术】。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="MySQL数据库技术" align="left"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>开源中国（oschina）</td><td><a href="https://my.oschina.net/dbkernel">https://my.oschina.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;


&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文成文较早，依赖的是 PostgreSQL 9.3 版本，后续内核版本可能不兼容，但核</summary>
      
    
    
    
    <category term="PostgreSQL" scheme="http://dbkernel.github.io/categories/PostgreSQL/"/>
    
    
    <category term="PostgreSQL" scheme="http://dbkernel.github.io/tags/PostgreSQL/"/>
    
    <category term="pg_depend" scheme="http://dbkernel.github.io/tags/pg-depend/"/>
    
    <category term="pg_constraint" scheme="http://dbkernel.github.io/tags/pg-constraint/"/>
    
  </entry>
  
  <entry>
    <title>程序人生 | C语言编译器对内存空间的分配原则</title>
    <link href="http://dbkernel.github.io/2015/05/04/c-compiler-memory-allocation-principles/"/>
    <id>http://dbkernel.github.io/2015/05/04/c-compiler-memory-allocation-principles/</id>
    <published>2015-05-04T06:50:16.000Z</published>
    <updated>2021-09-11T09:31:44.414Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>一个由 C/C++ 编译的程序占用的内存分为以下几个部分：</p><ol><li><strong>栈区（stack）</strong>：由编译器自动分配、释放，存放函数的参数值、局部变量的值等，其操作方式类似于数据结构中的栈。一般大家常说的堆栈和栈是一样的，就是栈(stack)，而说 堆 时才是堆 heap 。 </li><li><strong>堆区（heap）</strong>：一般由程序员分配释放，若程序员不释放，程序结束时由OS回收。注意<code>它与数据结构中的堆是两回事，分配方式倒是类似于链表</code>。</li><li><strong>全局区（静态区，static）</strong>：全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。程序结束后由系统释放。</li><li><strong>文字常量区</strong>：常量字符串就是放在这里的。程序结束后由系统释放。</li><li><strong>程序代码区</strong>：存放函数体的二进制代码。</li></ol><p>举例来说：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>; <span class="comment">// 全局初始化区</span></span><br><span class="line"><span class="keyword">char</span> *p1; <span class="comment">// 全局未初始化区</span></span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> b; <span class="comment">// 栈</span></span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">&quot;abc&quot;</span>; <span class="comment">// 栈</span></span><br><span class="line"><span class="keyword">char</span> *p2; <span class="comment">// 栈</span></span><br><span class="line"><span class="keyword">char</span> *p3 = <span class="string">&quot;123456&quot;</span>; <span class="comment">// 123456\0 在常量区，p3在栈上。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> c =<span class="number">0</span>； <span class="comment">// 全局（静态）初始化区</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分配的 10 个和 20 个字节的区域就在堆区。</span></span><br><span class="line">p1 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">10</span>);</span><br><span class="line">p2 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(p1, <span class="string">&quot;123456&quot;</span>); <span class="comment">// 123456\0 放在常量区，编译器可能会将它与p3所指向的&quot;123456&quot;优化成同一个位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在函数体中定义的变量通常是在栈上，用malloc, calloc, realloc等分配内存的函数分配得到的就是在堆上。</p><p>在所有函数体外定义的是全局量，加了static修饰符后不管在哪里都存放在全局区（静态区），在所有函数体外定义的static变量表示在该文件中有效，不能extern到别的文件使用，在函数体内定义的static表示只在该函数体内有效。</p><p>函数中的”123456”这样的字符串存放在常量区。 </p><p>还有就是函数调用时会在栈上有一系列的保留现场及传递参数的操作。 </p><h1 id="关于堆和栈"><a href="#关于堆和栈" class="headerlink" title="关于堆和栈"></a>关于堆和栈</h1><h2 id="1-内存分配方面"><a href="#1-内存分配方面" class="headerlink" title="1. 内存分配方面"></a>1. 内存分配方面</h2><p><strong>堆：</strong> 一般由程序员分配释放，若程序员不释放，程序结束时可能由OS回收。它与数据结构中的堆是两回事，分配方式是类似于链表。可能用到的关键字如下：new、malloc、delete、free等等。</p><p><strong>栈：</strong> 由编译器(Compiler)自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。当一个函数调用完返回后它会释放该函数中所有的栈空间。</p><h2 id="2-申请方式"><a href="#2-申请方式" class="headerlink" title="2. 申请方式"></a>2. 申请方式</h2><p><strong>栈（stack）：</strong></p><p>由系统自动分配。例如，声明在函数中一个局部变量 <code>int b;</code>，系统自动在栈中为b开辟空间。</p><p><strong>堆（heap）：</strong></p><p>需要程序员自己申请，并指明大小。</p><p>在C中 malloc 函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p1 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>在C++中用 new 运算符：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p2 = (<span class="keyword">char</span> *)<span class="keyword">new</span> <span class="built_in"><span class="keyword">char</span></span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>但注意 p1、p2 本身是在栈中的。</p><h2 id="3-申请后系统的响应"><a href="#3-申请后系统的响应" class="headerlink" title="3. 申请后系统的响应"></a>3. 申请后系统的响应</h2><p><strong>栈：</strong> 只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示<code>栈溢出</code>。</p><p><strong>堆：</strong> 首先应该知道操作系统有一个记录空闲内存地址的链表，当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序。对于大多数系统，<strong>会在这块内存空间中的首地址处记录本次分配的大小</strong>，这样代码中的 delete 语句才能正确的释放本内存空间。另外，由于找到的堆结点的大小不一定正好等于申请的大小，<strong>系统会自动的将多余的那部分重新放入空闲链表中</strong>。</p><h2 id="4-申请大小的限制"><a href="#4-申请大小的限制" class="headerlink" title="4. 申请大小的限制"></a>4. 申请大小的限制</h2><p><strong>栈：</strong></p><ul><li>在 Windows 下，栈是向低地址扩展的数据结构，是一块连续的内存的区域。这句话的意思是<strong>栈顶的地址</strong>和<strong>栈的最大容量</strong>是系统预先规定好的，在 Windows 下，栈的大小一般是2M，如果申请的空间超过栈的剩余空间时，将提示 overflow。因此，能从栈获得的空间较小。</li><li>栈不够用的情况一般是程序中分配了大量数组和递归函数层次太深。</li><li>当一个函数调用完返回后它会释放该函数中所有的栈空间。</li></ul><p><strong>堆：</strong></p><ul><li>堆是向高地址扩展的数据结构，是不连续的内存区域。这是由于系统是用链表来存储的空闲内存地址的，自然是不连续的，而链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的虚拟内存。由此可见，堆获得的空间比较灵活，也比较大。</li></ul><h2 id="5-申请效率的比较"><a href="#5-申请效率的比较" class="headerlink" title="5. 申请效率的比较"></a>5. 申请效率的比较</h2><p><strong>栈</strong>由系统自动分配，速度较快。但程序员是无法控制的。</p><p><strong>堆</strong>是由malloc分配的内存，一般速度比较慢，而且<strong>容易产生内存碎片</strong>，不过用起来最方便。</p><h2 id="6-堆和栈中的存储内容"><a href="#6-堆和栈中的存储内容" class="headerlink" title="6. 堆和栈中的存储内容"></a>6. 堆和栈中的存储内容</h2><p><strong>栈：</strong></p><ul><li>在函数调用时，第一个进栈的是主函数后的下一条指令（函数调用语句的下一条可执行语句）的地址，然后是函数的各个参数（在大多数的C编译器中，参数是由右往左入栈的），然后是函数中的局部变量。注意静态变量是不入栈的。</li><li>当本次函数调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的地址，也就是主函数中的下一条指令，程序由该点继续运行。</li></ul><p><strong>堆：</strong></p><ul><li>一般是在堆的头部用一个字节存放堆的大小。堆中的具体内容有程序员安排。</li></ul><h2 id="7-存取效率方面"><a href="#7-存取效率方面" class="headerlink" title="7. 存取效率方面"></a>7. 存取效率方面</h2><p><strong>堆：</strong> <code>char *s1 = &quot;Hellow Word&quot;；</code>是在<strong>编译时</strong>就确定的；</p><p><strong>栈：</strong><code>char s1[] = &quot;Hellow Word&quot;；</code>是在<strong>运行时</strong>赋值的；<strong>用数组比用指针速度要快一些，因为指针在底层汇编中需要用<code>edx寄存器</code>中转一下，而数组在栈上直接读取。</strong></p><p><strong>在栈上存取数据比通过指针在堆上存取数据快些。</strong></p><hr><p>欢迎关注我的微信公众号【MySQL数据库技术】。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="MySQL数据库技术" align="left"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>开源中国（oschina）</td><td><a href="https://my.oschina.net/dbkernel">https://my.oschina.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;



&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;一个由 C/C++ 编译的程序占用的内存分为以下几个部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="C语言" scheme="http://dbkernel.github.io/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C语言" scheme="http://dbkernel.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="gcc" scheme="http://dbkernel.github.io/tags/gcc/"/>
    
    <category term="编译器" scheme="http://dbkernel.github.io/tags/%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    
    <category term="内存分配" scheme="http://dbkernel.github.io/tags/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>程序人生 | unix 网络编程之 getaddrinfo 函数详解及使用举例</title>
    <link href="http://dbkernel.github.io/2015/01/03/unix-getaddrinfo-function-detailed-usage/"/>
    <id>http://dbkernel.github.io/2015/01/03/unix-getaddrinfo-function-detailed-usage/</id>
    <published>2015-01-03T13:04:36.000Z</published>
    <updated>2021-09-11T12:33:06.134Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>IPv4 中使用 <code>gethostbyname()</code> 函数完成<strong>主机名到地址解析</strong>，这个函数仅仅支持 IPv4 ，且不允许调用者指定所需地址类型的任何信息，返回的结构只包含了用于存储 IPv4 地址的空间。</p><p>IPv6中引入了<code>getaddrinfo()</code>的新API，它是协议无关的，既可用于 IPv4 也可用于IPv6 。</p><p><code>getaddrinfo</code>函数能够处理<strong>名字到地址</strong>以及<strong>服务到端口</strong>这两种转换，返回的是一个<code>addrinfo</code>的结构（列表）指针而不是一个地址清单。这些<code>addrinfo</code>结构随后可由socket函数直接使用。</p><p><code>getaddrinfo</code>函数把协议相关性安全隐藏在这个库函数内部。应用程序只要处理由getaddrinfo函数填写的套接口地址结构。该函数在 POSIX规范中定义了。</p><h1 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h1><p><strong>包含头文件：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>函数原型：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getaddrinfo</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *hostname, <span class="keyword">const</span> <span class="keyword">char</span> *service, <span class="keyword">const</span> struct addrinfo *hints, struct addrinfo **result )</span></span>;</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><code>hostname</code>: 一个主机名或者地址串(IPv4 的点分十进制串或者 IPv6 的 16 进制串)。</li><li><code>service</code>：服务名可以是十进制的端口号，也可以是已定义的服务名称，如 ftp、http 等。</li><li><code>hints</code>：可以是一个空指针，也可以是一个指向某个 addrinfo 结构体的指针，调用者在这个结构中填入关于期望返回的信息类型的暗示。</li><li><code>result</code>：本函数通过 result 指针参数返回一个指向 addrinfo 结构体链表的指针。</li></ul><p><strong>返回值：</strong></p><p>0：成功；非0：出错。</p><h1 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h1><p>在<code>getaddrinfo</code>函数之前通常需要对以下6个参数进行以下设置：<code>nodename、servname、hints的ai_flags、ai_family、ai_socktype、ai_protocol</code>。</p><p>在6项参数中，对函数影响最大的是<code>nodename，sername</code>和<code>hints.ai_flag</code>，而<code>ai_family</code>只是有地址为v4地址或v6地址的区别。<code>ai_protocol</code>一般为0不作改动。</p><p><strong>getaddrinfo在实际使用中的几种常用参数设置：</strong></p><p>一般情况下，client/server编程中，server端调用<code>bind</code>（如果面向连接的还需要<code>listen</code>）；client则无需调用<code>bind</code>函数，解析地址后直接<code>connect</code>（面向连接）或直接发送数据（无连接）。因此，比较常见的情况有：</p><ol><li>通常服务器端在调用<code>getaddrinfo</code>之前，<code>ai_flags</code>设置<code>AI_PASSIVE</code>，用于<code>bind</code>；主机名<code>nodename</code>通常会设置为NULL，返回通配地址<code>[::]</code>。</li><li>客户端调用<code>getaddrinfo</code>时，<code>ai_flags</code>一般不设置<code>AI_PASSIVE</code>，但是主机名<code>nodename</code>和服务名<code>servname</code>（更愿意称之为端口）则应该不为空。</li><li>当然，即使不设置<code>AI_PASSIVE</code>，取出的地址也并非不可以被bind，很多程序中<code>ai_flags</code>直接设置为0，即3个标志位都不设置，这种情况下只要hostname和servname设置的没有问题就可以正确bind。</li></ol><p>上述情况只是简单的client/server中的使用，但实际在使用getaddrinfo和查阅国外开源代码的时候，曾遇到一些将servname（即端口）设为NULL的情况（当然，此时nodename必不为NULL，否则调用getaddrinfo会报错）。</p><h1 id="使用须知"><a href="#使用须知" class="headerlink" title="使用须知"></a>使用须知</h1><p>1）如果本函数返回成功，那么由result参数指向的变量已被填入一个指针，它指向的是由其中的<code>ai_next</code>成员串联起来的<code>addrinfo</code>结构链表。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span></span></span><br><span class="line"><span class="class">&#123;</span> 　　　　　　　</span><br><span class="line"><span class="keyword">int</span> ai_flags;</span><br><span class="line"><span class="keyword">int</span> ai_family;</span><br><span class="line"><span class="keyword">int</span> ai_socktype;</span><br><span class="line"><span class="keyword">int</span> ai_protocol;</span><br><span class="line"><span class="keyword">size_t</span> ai_addrlen;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> *<span class="title">ai_addr</span>;</span> <span class="comment">/* 我认为这个成员是这个函数最大的便利。 */</span></span><br><span class="line"><span class="keyword">char</span> *ai_canonname;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span> *<span class="title">ai_next</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中，sockaddr结构体为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在linux环境下，结构体<span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span>在/<span class="title">usr</span>/<span class="title">include</span>/<span class="title">linux</span>/<span class="title">socket</span>.<span class="title">h</span>中定义，具体如下：</span></span><br><span class="line"><span class="class"><span class="title">typedef</span> <span class="title">unsigned</span> <span class="title">short</span> <span class="title">sa_family_t</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> &#123;</span></span><br><span class="line">        <span class="keyword">sa_family_t</span>     sa_family;    <span class="comment">/* address family, AF_xxx       */</span></span><br><span class="line">        <span class="keyword">char</span>            sa_data[<span class="number">14</span>];    <span class="comment">/* 14 bytes of protocol address */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而且，<code>sockaddr</code>一般要转换为<code>sockaddr_in</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">　　<span class="keyword">short</span> <span class="keyword">int</span> sin_family;</span><br><span class="line">　　<span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> sin_port;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">sin_addr</span>;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> sin_zero[<span class="number">8</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）可以导致返回多个addrinfo结构的情形有以下2个：</p><blockquote><ol><li>如果与hostname参数关联的地址有多个，那么适用于所请求地址簇的每个地址都返回一个对应的结构。</li><li>如果service参数指定的服务支持多个套接口类型，那么每个套接口类型都可能返回一个对应的结构，具体取决于hints结构的ai_socktype成员。</li></ol></blockquote><p>举例来说：如果指定的服务既支持TCP也支持UDP，那么调用者可以把<code>hints</code>结构中的<code>ai_socktype</code>成员设置成<code>SOCK_DGRAM</code>，使得返回的仅仅是适用于数据报套接口的信息。</p><p>3）我们必须先分配一个hints结构，把它清零后填写需要的字段，再调用getaddrinfo，然后遍历一个链表逐个尝试每个返回地址。</p><p>4）<strong>getaddrinfo解决了把主机名和服务名转换成套接口地址结构的问题</strong>。</p><p>5）如果getaddrinfo出错，那么返回一个非0的错误值。输出出错信息，不要用perror，而应该用<code>gai_strerror</code>，该函数原型为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">gai_strerror</span><span class="params">( <span class="keyword">int</span> error )</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>该函数以<code>getaddrinfo</code>返回的非0错误值的名字和含义为他的唯一参数，返回一个指向对应的出错信息串的指针。</p></blockquote><p>6）<strong>由getaddrinfo返回的所有存储空间都是动态获取的，这些存储空间必须通过调用<code>freeaddrinfo</code>返回给系统</strong>，该函数原型为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">freeaddrinfo</span><span class="params">( struct addrinfo *ai )</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p><code>ai</code>参数应指向由<code>getaddrinfo</code>返回的第一个addrinfo结构。</p></blockquote><p>这个链表中的所有结构以及它们指向的任何动态存储空间都被释放掉。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="1-根据主机名获取IP地址"><a href="#1-根据主机名获取IP地址" class="headerlink" title="1. 根据主机名获取IP地址"></a>1. 根据主机名获取IP地址</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Usag: ./a.out hostname|ip\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span> <span class="title">hints</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span> *<span class="title">res</span>, *<span class="title">cur</span>;</span></span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> *<span class="title">addr</span>;</span></span><br><span class="line">    <span class="keyword">char</span> ipbuf[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(&amp;hints, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(struct addrinfo));</span><br><span class="line">    hints.ai_family = AF_INET; <span class="comment">/* Allow IPv4 */</span></span><br><span class="line">    hints.ai_flags = AI_PASSIVE; <span class="comment">/* For wildcard IP address */</span></span><br><span class="line">    hints.ai_protocol = <span class="number">0</span>; <span class="comment">/* Any protocol */</span></span><br><span class="line">    hints.ai_socktype = SOCK_DGRAM;</span><br><span class="line">ret = <span class="built_in">getaddrinfo</span>(argv[<span class="number">1</span>], <span class="literal">NULL</span>,&amp;hints,&amp;res);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(stderr, <span class="string">&quot;%s\n&quot;</span>, <span class="built_in">gai_strerror</span>(ret));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (cur = res; cur != <span class="literal">NULL</span>; cur = cur-&gt;ai_next) &#123;</span><br><span class="line">        addr = (struct sockaddr_in *)cur-&gt;ai_addr;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ip: %s\n&quot;</span>, <span class="built_in">inet_ntop</span>(AF_INET, &amp;addr-&gt;sin_addr, ipbuf, <span class="number">16</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;port: %d\n&quot;</span>, <span class="built_in">inet_ntop</span>(AF_INET, &amp;addr-&gt;sin_port, (<span class="keyword">void</span> *)&amp;port, <span class="number">2</span>));</span><br><span class="line"><span class="comment">//printf(&quot;port: %d\n&quot;, ntohs(addr-&gt;sin_port));</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">freeaddrinfo</span>(res);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-根据主机名和端口号获取地址信息"><a href="#2-根据主机名和端口号获取地址信息" class="headerlink" title="2. 根据主机名和端口号获取地址信息"></a>2. 根据主机名和端口号获取地址信息</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span> *<span class="title">ailist</span>, *<span class="title">aip</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span> <span class="title">hint</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> *<span class="title">sinp</span>;</span></span><br><span class="line"><span class="keyword">char</span> *hostname = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> buf[INET_ADDRSTRLEN];</span><br><span class="line"><span class="keyword">char</span> *server = <span class="string">&quot;6543&quot;</span>; <span class="comment">/* 这是服务端口号 */</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *addr;</span><br><span class="line"><span class="keyword">int</span> ilRc;</span><br><span class="line">hint.ai_family = AF_UNSPEC; <span class="comment">/* hint 的限定设置 */</span></span><br><span class="line">hint.ai_socktype = <span class="number">0</span>; <span class="comment">/* 这里可是设置 socket type . 比如 SOCK——DGRAM */</span></span><br><span class="line">hint.ai_flags = AI_PASSIVE; <span class="comment">/* flags 的标志很多 。常用的有AI_CANONNAME; */</span></span><br><span class="line">hint.ai_protocol = <span class="number">0</span>; <span class="comment">/* 设置协议 一般为0，默认 */</span></span><br><span class="line">hint.ai_addrlen = <span class="number">0</span>; <span class="comment">/* 下面不可以设置，为0，或者为NULL */</span></span><br><span class="line">hint.ai_canonname = <span class="literal">NULL</span>;</span><br><span class="line">hint.ai_addr = <span class="literal">NULL</span>;</span><br><span class="line">hint.ai_next = <span class="literal">NULL</span>;</span><br><span class="line">ilRc = <span class="built_in">getaddrinfo</span>(hostname, server, &amp;hint, &amp;ailist);</span><br><span class="line"><span class="keyword">if</span> (ilRc &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str_error = %s\n&quot;</span>, <span class="built_in">gai_strerror</span>(errno));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 显示获取的信息 */</span></span><br><span class="line"><span class="keyword">for</span> (aip = ailist; aip != <span class="literal">NULL</span>; aip = aip-&gt;ai_next)</span><br><span class="line">&#123;</span><br><span class="line">sinp = (struct sockaddr_in *)aip-&gt;ai_addr;</span><br><span class="line">addr = <span class="built_in">inet_ntop</span>(AF_INET, &amp;sinp-&gt;sin_addr, buf, INET_ADDRSTRLEN);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; addr = %s, port = %d\n&quot;</span>, addr?addr:<span class="string">&quot;unknow &quot;</span>, <span class="built_in">ntohs</span>(sinp-&gt;sin_port));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-由内核分配随机端口（再也不担心端口被占了）"><a href="#3-由内核分配随机端口（再也不担心端口被占了）" class="headerlink" title="3. 由内核分配随机端口（再也不担心端口被占了）"></a>3. 由内核分配随机端口（再也不担心端口被占了）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_CONN_COUNT 10</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">define</span> INVALID_SOCKET (~0)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> motionListenPort = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> motion_sock = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>err;</span><br><span class="line"><span class="keyword">int</span>maxconn;</span><br><span class="line"><span class="keyword">char</span> familyDesc[<span class="number">32</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_storage</span> <span class="title">motion_sock_addr</span>;</span></span><br><span class="line"><span class="keyword">socklen_t</span> alen;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span> *<span class="title">addrs</span> =</span> <span class="literal">NULL</span>, *addr, hints;</span><br><span class="line"><span class="keyword">int</span> ret;</span><br><span class="line"><span class="keyword">int</span> tries = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(&amp;hints, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(struct addrinfo));</span><br><span class="line">    hints.ai_family = AF_INET; <span class="comment">/* Allow IPv4 */</span></span><br><span class="line">    hints.ai_flags = AI_PASSIVE; <span class="comment">/* For wildcard IP address */</span></span><br><span class="line">    hints.ai_protocol = <span class="number">0</span>; <span class="comment">/* Any protocol */</span></span><br><span class="line">    hints.ai_socktype = SOCK_STREAM;</span><br><span class="line">ret = <span class="built_in">getaddrinfo</span>(<span class="literal">NULL</span>, <span class="string">&quot;0&quot;</span>, &amp;hints, &amp;addrs);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(stderr, <span class="string">&quot;%s\n&quot;</span>, <span class="built_in">gai_strerror</span>(ret));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (addr = addrs; addr != <span class="literal">NULL</span>; addr = addr-&gt;ai_next) &#123;</span><br><span class="line"><span class="comment">/* Create the socket. */</span></span><br><span class="line"><span class="keyword">if</span> ((motion_sock = <span class="built_in">socket</span>(addr-&gt;ai_family, SOCK_STREAM, <span class="number">0</span>)) == INVALID_SOCKET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Error:could not create socket for the motion\n&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Bind it to a kernel assigned port on localhost and get the assigned port via getsockname(). */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">bind</span>(motion_sock, addr-&gt;ai_addr, addr-&gt;ai_addrlen) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Error: could not bind socket for the motion\n&quot;</span>);</span><br><span class="line"><span class="built_in">close</span>(motion_sock);</span><br><span class="line">motion_sock = INVALID_SOCKET;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alen = <span class="built_in"><span class="keyword">sizeof</span></span>(motion_sock_addr);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">getsockname</span>(motion_sock, (struct sockaddr *) &amp;(motion_sock_addr), &amp;alen) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(stderr, <span class="string">&quot;could not get address of socket for the motion\n&quot;</span>);</span><br><span class="line"><span class="built_in">close</span>(motion_sock);</span><br><span class="line">motion_sock = INVALID_SOCKET;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Resolve the motion listen port. */</span></span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span>(motion_sock_addr.ss_family)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> AF_INET:</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> *<span class="title">motion_addr</span> =</span> (struct sockaddr_in *) &amp;motion_sock_addr;</span><br><span class="line">motionListenPort = <span class="built_in">ntohs</span>(motion_addr-&gt;sin_port);</span><br><span class="line"><span class="built_in">strcpy</span>(familyDesc, <span class="string">&quot;IPv4&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(stdout, <span class="string">&quot;motionListenPort=%d, familyDesc = %s\n&quot;</span>, motionListenPort, familyDesc);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> AF_INET6:</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in6</span> *<span class="title">motion_addr</span> =</span> (struct sockaddr_in6 *) &amp;motion_sock_addr;</span><br><span class="line">motionListenPort = <span class="built_in">ntohs</span>(motion_addr-&gt;sin6_port);</span><br><span class="line"><span class="built_in">strcpy</span>(familyDesc, <span class="string">&quot;IPv6&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(stdout, <span class="string">&quot;motionListenPort=%d, familyDesc = %s\n&quot;</span>, motionListenPort, familyDesc);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Error:unrecognized address family \&quot;%d\&quot; for the motion\n&quot;</span>, motion_sock_addr.ss_family);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 监听 */</span></span><br><span class="line">maxconn = MAX_CONN_COUNT;</span><br><span class="line">err = <span class="built_in">listen</span>(motion_sock, maxconn);</span><br><span class="line"><span class="keyword">if</span> (err &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(stderr, <span class="string">&quot;could not listen on socket for the motion\n&quot;</span>);</span><br><span class="line"><span class="built_in">close</span>(motion_sock);</span><br><span class="line">motion_sock = INVALID_SOCKET;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (motion_sock == INVALID_SOCKET)</span><br><span class="line"><span class="keyword">goto</span> listen_failed;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* XXXXXXsocket通信过程 */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">freeaddrinfo</span>(addrs);</span><br><span class="line"><span class="built_in">close</span>(motion_sock);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">listen_failed:</span><br><span class="line"><span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Error: failed to listen for the motion\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (addrs)</span><br><span class="line"><span class="built_in">freeaddrinfo</span>(addrs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (motion_sock != INVALID_SOCKET)</span><br><span class="line"><span class="built_in">close</span>(motion_sock);</span><br><span class="line">motion_sock = INVALID_SOCKET;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-使用ioctl获取指定网卡IP地址"><a href="#4-使用ioctl获取指定网卡IP地址" class="headerlink" title="4. 使用ioctl获取指定网卡IP地址"></a>4. 使用ioctl获取指定网卡IP地址</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ETH_NAME<span class="meta-string">&quot;eth0&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sock;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">sin</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ifreq</span> <span class="title">ifr</span>;</span></span><br><span class="line">sock = <span class="built_in">socket</span>(AF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (sock == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;socket&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">strncpy</span>(ifr.ifr_name, ETH_NAME, IFNAMSIZ);</span><br><span class="line">ifr.ifr_name[IFNAMSIZ - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">ioctl</span>(sock, SIOCGIFADDR, &amp;ifr) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;ioctl&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(&amp;sin, &amp;ifr.ifr_addr, <span class="built_in"><span class="keyword">sizeof</span></span>(sin));</span><br><span class="line"><span class="built_in">fprintf</span>(stdout, <span class="string">&quot;eth0: %s\n&quot;</span>, <span class="built_in">inet_ntoa</span>(sin.sin_addr));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-使用ping指令，根据hostname获取ip地址"><a href="#5-使用ping指令，根据hostname获取ip地址" class="headerlink" title="5. 使用ping指令，根据hostname获取ip地址"></a>5. 使用ping指令，根据hostname获取ip地址</h2><p>本例未用 getaddrinfo，而是采用shell指令方法（不推荐）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;net/if.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;net/if_arp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用ping指令，根据hostname获取ip地址</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getIpAddrByHostname</span><span class="params">(<span class="keyword">char</span> *hostname, <span class="keyword">char</span>* ip_addr, <span class="keyword">size_t</span> ip_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> command[<span class="number">256</span>];</span><br><span class="line">FILE *f;</span><br><span class="line"><span class="keyword">char</span> *ip_pos;</span><br><span class="line"></span><br><span class="line"><span class="built_in">snprintf</span>(command, <span class="number">256</span>, <span class="string">&quot;ping -c1 %s | head -n 1 | sed &#x27;s/^[^(]*(\\([^)]*\\).*$/\\1/&#x27;&quot;</span>, hostname);</span><br><span class="line"><span class="built_in">fprintf</span>(stdout, <span class="string">&quot;%s\n&quot;</span>, command);</span><br><span class="line"><span class="keyword">if</span> ((f = <span class="built_in">popen</span>(command, <span class="string">&quot;r&quot;</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(stderr, <span class="string">&quot;could not open the command, \&quot;%s\&quot;, %s\n&quot;</span>, command, <span class="built_in">strerror</span>(errno));</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fgets</span>(ip_addr, ip_size, f);</span><br><span class="line"><span class="built_in">fclose</span>(f);</span><br><span class="line"></span><br><span class="line">ip_pos = ip_addr;</span><br><span class="line"><span class="keyword">for</span> (;*ip_pos &amp;&amp; *ip_pos!= <span class="string">&#x27;\n&#x27;</span>; ip_pos++);</span><br><span class="line">*ip_pos = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> addr[<span class="number">64</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">getIpAddrByHostname</span>(<span class="string">&quot;localhost&quot;</span>, addr, INET_ADDRSTRLEN);</span><br><span class="line"><span class="built_in">fprintf</span>(stdout, <span class="string">&quot;localhost: %s\n&quot;</span>, addr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>欢迎关注我的微信公众号【MySQL数据库技术】。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="MySQL数据库技术" align="left"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>开源中国（oschina）</td><td><a href="https://my.oschina.net/dbkernel">https://my.oschina.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;


&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;IPv4 中使用 &lt;code&gt;gethostbyname()&lt;/code&gt; 函数完成&lt;s</summary>
      
    
    
    
    <category term="C语言" scheme="http://dbkernel.github.io/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="APUE" scheme="http://dbkernel.github.io/tags/APUE/"/>
    
    <category term="C语言" scheme="http://dbkernel.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="网络编程" scheme="http://dbkernel.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>程序人生 | Linux Daemon程序设计示例</title>
    <link href="http://dbkernel.github.io/2014/08/08/example-of-linux-daemon-program-design/"/>
    <id>http://dbkernel.github.io/2014/08/08/example-of-linux-daemon-program-design/</id>
    <published>2014-08-08T09:55:32.000Z</published>
    <updated>2021-09-11T09:33:03.403Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>daemon 程序，又称为守护进程，通常在系统后台长时间运行，由于没有控制终端而无法与前台交互。daemon程序一般作为系统服务使用，Linux系统中运行着很多这样的守护进程，如 iptables，nfs，ypbind，dhcpd 等。</p><h1 id="daemon-程序设计步骤"><a href="#daemon-程序设计步骤" class="headerlink" title="daemon 程序设计步骤"></a>daemon 程序设计步骤</h1><ol><li>程序运行后调用fork，并让父进程退出。子进程获得一个新的进程ID，但继承了父进程的进程组ID。</li><li>调用setsid创建一个新的session，使自己成为新session和新进程组的leader，并使进程没有控制终端(tty)。</li><li>设置文件创建mask为0，避免创建文件时权限的影响。</li><li>关闭不需要的打开文件描述符。因为 daemon 程序在后台执行，不需要于终端交互，通常就关闭STDIN、STDOUT和STDERR。其它根据实际情况处理。</li><li>daemon 无法输出信息，可以使用SYSLOG或自己的日志系统进行日志处理。（可选）</li><li>编写管理 daemon 的SHELL脚本，使用service对 daemon 进行管理和监控。（可选）</li></ol><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="daemon-程序源码"><a href="#daemon-程序源码" class="headerlink" title="daemon 程序源码"></a>daemon 程序源码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里使用自己的日志系统，当然也可以使用SYSLOG。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGBUFSZ 256     <span class="comment">/*log buffer size*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGFILE  <span class="meta-string">&quot;/var/log/wsiod.log&quot;</span>  <span class="comment">/*log filename*/</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wsio_logit</span><span class="params">(<span class="keyword">char</span> * func, <span class="keyword">char</span> *msg, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        <span class="keyword">char</span> prtbuf[LOGBUFSZ];</span><br><span class="line">        <span class="keyword">int</span> save_errno;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">tm</span>;</span></span><br><span class="line">        <span class="keyword">time_t</span> current_time;</span><br><span class="line">        <span class="keyword">int</span> fd_log;</span><br><span class="line"></span><br><span class="line">        save_errno = errno;</span><br><span class="line">        <span class="built_in">va_start</span> (args, msg);</span><br><span class="line">        (<span class="keyword">void</span>) <span class="built_in">time</span> (¤t_time);            <span class="comment">/* Get current time */</span></span><br><span class="line">        tm = <span class="built_in">localtime</span> (¤t_time);</span><br><span class="line">        <span class="built_in">sprintf</span> (prtbuf, <span class="string">&quot;%02d/%02d %02d:%02d:%02d %s &quot;</span>, tm-&gt;tm_mon+<span class="number">1</span>,</span><br><span class="line">                    tm-&gt;tm_mday, tm-&gt;tm_hour, tm-&gt;tm_min, tm-&gt;tm_sec, func);</span><br><span class="line">        <span class="built_in">vsprintf</span> (prtbuf+<span class="built_in">strlen</span>(prtbuf), msg, args);</span><br><span class="line">        <span class="built_in">va_end</span> (args);</span><br><span class="line">        fd_log = <span class="built_in">open</span> (LOGFILE, O_WRONLY | O_CREAT | O_APPEND, <span class="number">0664</span>);</span><br><span class="line">        <span class="built_in">write</span> (fd_log, prtbuf, <span class="built_in">strlen</span>(prtbuf));</span><br><span class="line">        <span class="built_in">close</span> (fd_log);</span><br><span class="line">        errno = save_errno;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">init_daemon</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">pid_t</span> pid;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* parent exits , child continues */</span></span><br><span class="line">  <span class="keyword">if</span>((pid = fork()) &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(pid != <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setsid</span>(); <span class="comment">/* become session leader */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;= <span class="number">2</span>;++i) <span class="comment">/* close STDOUT, STDIN, STDERR, */</span></span><br><span class="line">    <span class="built_in">close</span>(i);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">umask</span>(<span class="number">0</span>); <span class="comment">/* clear file mode creation mask */</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sig_term</span><span class="params">(<span class="keyword">int</span> signo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(signo == SIGTERM)  <span class="comment">/* catched signal sent by kill(1) command */</span></span><br><span class="line">  &#123;</span><br><span class="line">     <span class="built_in">wsio_logit</span>(<span class="string">&quot;&quot;</span>, <span class="string">&quot;wsiod stopped/n&quot;</span>);</span><br><span class="line">     <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">　&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* main program of daemon */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">init_daemon</span>() == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;can&#x27;t fork self/n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">wsio_logit</span>(<span class="string">&quot;&quot;</span>, <span class="string">&quot;wsiod started/n&quot;</span>);</span><br><span class="line">  <span class="built_in">signal</span>(SIGTERM, sig_term); <span class="comment">/* arrange to catch the signal */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// Do what you want here</span></span><br><span class="line">    … …</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="daemon-程序管理脚本"><a href="#daemon-程序管理脚本" class="headerlink" title="daemon 程序管理脚本"></a>daemon 程序管理脚本</h2><p>daemon 程序可以使用 service 工具进行管理，包括启动、停止、查看状态等，但前题是需要编写一个如下的简单SHELL脚本，比如 <code>/etc/init.d/wsiod</code> ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># wsiod         This shell script takes care of starting and stopping wsiod.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># chkconfig: 35 65 35</span></span><br><span class="line"><span class="comment"># description: wsiod is web servce I/O server, which is used to access files on remote hosts.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Source function library.</span></span><br><span class="line">. /etc/rc.d/init.d/<span class="built_in">functions</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Source networking configuration.</span></span><br><span class="line">. /etc/sysconfig/network</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check that networking is up.</span></span><br><span class="line">[ <span class="variable">$&#123;NETWORKING&#125;</span> = <span class="string">&quot;no&quot;</span> ] &amp;&amp; <span class="built_in">exit</span> 0</span><br><span class="line"></span><br><span class="line">RETVAL=0</span><br><span class="line">prog=<span class="string">&quot;wsiod&quot;</span></span><br><span class="line">WSIOARGS=<span class="string">&quot;-h <span class="variable">$HOSTNAME</span> -p 80 -t STANDALONE -k -c -d&quot;</span></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">        <span class="comment"># Start daemons.</span></span><br><span class="line">        <span class="built_in">echo</span> -n $<span class="string">&quot;Starting <span class="variable">$prog</span>: &quot;</span></span><br><span class="line">        daemon /usr/<span class="built_in">local</span>/bin/wsiod <span class="variable">$&#123;WSIOARGS&#125;</span></span><br><span class="line">        RETVAL=$?</span><br><span class="line">        <span class="built_in">echo</span></span><br><span class="line">        [ <span class="variable">$RETVAL</span> -eq 0 ] &amp;&amp; touch /var/lock/subsys/wsiod</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$RETVAL</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">        <span class="comment"># Stop daemons.</span></span><br><span class="line">        <span class="built_in">echo</span> -n $<span class="string">&quot;Shutting down <span class="variable">$prog</span>: &quot;</span></span><br><span class="line">        killproc wsiod</span><br><span class="line">        RETVAL=$?</span><br><span class="line">        <span class="built_in">echo</span></span><br><span class="line">        [ <span class="variable">$RETVAL</span> -eq 0 ] &amp;&amp; rm -f /var/lock/subsys/wsiod</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$RETVAL</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># See how we were called.</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">  start)</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">  stop)</span><br><span class="line">        stop</span><br><span class="line">        ;;</span><br><span class="line">  restart|reload)</span><br><span class="line">        stop</span><br><span class="line">        start</span><br><span class="line">        RETVAL=$?</span><br><span class="line">        ;;</span><br><span class="line">  status)</span><br><span class="line">        status wsiod</span><br><span class="line">        RETVAL=$?</span><br><span class="line">        ;;</span><br><span class="line">  *)</span><br><span class="line">        <span class="built_in">echo</span> $<span class="string">&quot;Usage: <span class="variable">$0</span> &#123;start|stop|restart|status&#125;&quot;</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> <span class="variable">$RETVAL</span></span><br></pre></td></tr></table></figure><h2 id="daemon-程序指令"><a href="#daemon-程序指令" class="headerlink" title="daemon 程序指令"></a>daemon 程序指令</h2><p>由上述脚本可知，该 daemon 程序支持的指令有 start|stop|restart|reload|status ，以启动 daemon 程序为例，指令为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/wsiod start</span><br></pre></td></tr></table></figure><hr><p>欢迎关注我的微信公众号【MySQL数据库技术】。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="MySQL数据库技术" align="left"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>开源中国（oschina）</td><td><a href="https://my.oschina.net/dbkernel">https://my.oschina.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;


&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;daemon 程序，又称为守护进程，通常在系统后台长时间运行，由于没有控制终端而无法与前</summary>
      
    
    
    
    <category term="Linux" scheme="http://dbkernel.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://dbkernel.github.io/tags/Linux/"/>
    
    <category term="C语言" scheme="http://dbkernel.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="shell" scheme="http://dbkernel.github.io/tags/shell/"/>
    
    <category term="daemon" scheme="http://dbkernel.github.io/tags/daemon/"/>
    
  </entry>
  
  <entry>
    <title>系统运维 | Ubuntu下安装配置samba服务的详细过程</title>
    <link href="http://dbkernel.github.io/2014/08/05/how-to-install-configure-samba-service-in-ubuntu/"/>
    <id>http://dbkernel.github.io/2014/08/05/how-to-install-configure-samba-service-in-ubuntu/</id>
    <published>2014-08-05T02:14:48.000Z</published>
    <updated>2021-09-11T09:34:50.031Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-Samba作用"><a href="#1-Samba作用" class="headerlink" title="1. Samba作用"></a>1. Samba作用</h1><p>Samba的主要任务就是实现Linux系统和Windows系统之间的资源共享。我们现在是要在Linux下配置Samba，让Windows的用户可以访问你的PC。</p><p>当然，也可用于VMWare虚拟机与宿主机之间的资源共享。</p><h1 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h1><p>我是在ubuntu上实现的，所以我只需在配置好ubuntu的更新源之后，在终端中使用一下两句命令，就可以安装Samba的软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install smaba</span><br><span class="line">sudo apt-get install smbfs</span><br></pre></td></tr></table></figure><h1 id="3-Samba服务的构成"><a href="#3-Samba服务的构成" class="headerlink" title="3. Samba服务的构成"></a>3. Samba服务的构成</h1><p>Samba的核心是两个守护进程<code>smbd</code>和<code>nmbd</code> 。它们的配置信息都保存在<code>/etc/samba/smb.conf</code>里面。</p><p>其中<code>smbd</code>处理Samba软件与Linux协商，<code>nmbd</code>使其他主机能浏览Linux服务器。</p><h1 id="4-Samba配置文件"><a href="#4-Samba配置文件" class="headerlink" title="4. Samba配置文件"></a>4. Samba配置文件</h1><p>配置文件为<code>/etc/samba/smb.conf</code>，如果担心改了之后有问题，可以先备份一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/samba/smb.conf /etc/samba/smb_conf_backup</span><br></pre></td></tr></table></figure><p><strong>一个完整的Samba配置文件包含两部分：</strong></p><ul><li><p>Samba Global Settings 全局参数设置</p><blockquote><p>该部分由<code>[global]段</code>来完成配置，主要是设置整体的规则。其中参数<code>workgroup</code>比较特殊，用于提供<code>NT域名或者工作组名</code>，需要根据实际情况修改：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workgroup=mygroup</span><br></pre></td></tr></table></figure></li><li><p>Share Definitions 共享定义</p><blockquote><p>有很多段，都用<code>[]标志</code>开始的，需要根据实际情况修改。</p></blockquote></li></ul><p><strong>语法说明：</strong></p><ul><li>每个部分有消息头和参数构成，消息头用<code>[]</code>表示，如<code>[global]</code>就是一个消息头。</li><li>参数的结构形式是<code>parameter=value</code>。</li><li>注释用 <code>#</code> 表示，这个和shell脚本有点像。</li><li>有一些配置前面有 <code>;</code> ，这个表示这一行的配置可以更改，如需修改，则要去掉<code>;</code>，配置才可能生效。</li></ul><h1 id="5-示例"><a href="#5-示例" class="headerlink" title="5. 示例"></a>5. 示例</h1><h2 id="5-1-设置共享目录"><a href="#5-1-设置共享目录" class="headerlink" title="5.1. 设置共享目录"></a>5.1. 设置共享目录</h2><p>假定共享目录为<code>/home/share/samba</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /home/share/samba</span><br><span class="line">sudo chmod 777 /home/share/samba</span><br></pre></td></tr></table></figure><h2 id="5-2-修改配置文件"><a href="#5-2-修改配置文件" class="headerlink" title="5.2. 修改配置文件"></a>5.2. 修改配置文件</h2><p>修改 global 段：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line">    <span class="attr">workgroup</span> = WORKGROUP</span><br><span class="line">    display <span class="attr">charset</span> = UTF-<span class="number">8</span></span><br><span class="line">    unix <span class="attr">charset</span> = UTF-<span class="number">8</span></span><br><span class="line">    dos <span class="attr">charset</span> = cp936</span><br></pre></td></tr></table></figure><p>添加Share段：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Share]</span></span><br><span class="line">    <span class="attr">comment</span> = Shared Folder with username and password</span><br><span class="line">    <span class="attr">path</span> = /home/share/samba</span><br><span class="line">    <span class="attr">public</span> = <span class="literal">yes</span></span><br><span class="line">    <span class="attr">writable</span> = <span class="literal">no</span></span><br><span class="line">    valid <span class="attr">users</span> = user</span><br><span class="line">    create <span class="attr">mask</span> = <span class="number">0300</span></span><br><span class="line">    directory <span class="attr">mask</span> = <span class="number">0300</span></span><br><span class="line">    force <span class="attr">user</span> = nobody</span><br><span class="line">    force <span class="attr">group</span> = nogroup</span><br><span class="line">    <span class="attr">available</span> = <span class="literal">yes</span></span><br><span class="line">    <span class="attr">browseable</span> = <span class="literal">yes</span></span><br></pre></td></tr></table></figure><p>搜索到 security 配置项，修改为：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security</span> = user</span><br><span class="line">username <span class="attr">map</span> = /etc/samba/smbusers</span><br></pre></td></tr></table></figure><p>保存并关闭配置文件。</p><h2 id="5-3-添加Samba用户"><a href="#5-3-添加Samba用户" class="headerlink" title="5.3. 添加Samba用户"></a>5.3. 添加Samba用户</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd user <span class="comment">#增加了一个叫做user的用户</span></span><br><span class="line">sudo smbpasswd user <span class="comment">#修改user的对samba服务的密码，系统会提示输入密码</span></span><br></pre></td></tr></table></figure><h2 id="5-4-重启服务"><a href="#5-4-重启服务" class="headerlink" title="5.4. 重启服务"></a>5.4. 重启服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/samba restart</span><br></pre></td></tr></table></figure><h2 id="5-5-使用"><a href="#5-5-使用" class="headerlink" title="5.5. 使用"></a>5.5. 使用</h2><ul><li><p>在windows系统下使用</p><ul><li>方法一：在IE地址栏中输入：<code>\\你的IP</code>，然后回车，可能要求你输入用户名和密码（第5.3小节设定的）。</li><li>方法二：在<code>网上邻居</code>中新建<code>邻居</code>，在路径中输入: <code>\\你的IP\Share</code>，然后点击下一步完成（可能会要求输入用户名和密码）。</li></ul></li><li><p>在Linux下访问：在终端中挂载文件系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -t smbfs -o username=user,password=123456 //218.*.*.*/Share /mnt</span><br></pre></td></tr></table></figure><blockquote><p>其中，<code>-t参数</code>指示了文件系统的类型，<code>username</code>是用户名，<code>password</code>是密码，<code>218.*.*.*</code>是你的IP，<code>Share</code>是在配置文件中已经指明的段名，<code>/mnt</code>是要挂载到的文件夹。</p></blockquote></li></ul><hr><p>欢迎关注我的微信公众号【MySQL数据库技术】。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="MySQL数据库技术" align="left"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>开源中国（oschina）</td><td><a href="https://my.oschina.net/dbkernel">https://my.oschina.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;



&lt;h1 id=&quot;1-Samba作用&quot;&gt;&lt;a href=&quot;#1-Samba作用&quot; class=&quot;headerlink&quot; title=&quot;1. Samba作用&quot;&gt;&lt;/a&gt;1. Samba作用&lt;/h1&gt;&lt;p&gt;Samba的主要任务就是实</summary>
      
    
    
    
    <category term="Linux" scheme="http://dbkernel.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://dbkernel.github.io/tags/Linux/"/>
    
    <category term="系统运维" scheme="http://dbkernel.github.io/tags/%E7%B3%BB%E7%BB%9F%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>程序人生 | 我的《C陷阱与缺陷》读书笔记</title>
    <link href="http://dbkernel.github.io/2014/08/04/c-traps-and-pitfalls-reading-notes/"/>
    <id>http://dbkernel.github.io/2014/08/04/c-traps-and-pitfalls-reading-notes/</id>
    <published>2014-08-04T09:56:55.000Z</published>
    <updated>2021-09-11T09:32:19.233Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="第一章-词法“陷阱”"><a href="#第一章-词法“陷阱”" class="headerlink" title="第一章 词法“陷阱”"></a>第一章 词法“陷阱”</h1><h2 id="1-不同于"><a href="#1-不同于" class="headerlink" title="1. =不同于=="></a>1. =不同于==</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(x = y)</span><br><span class="line">         <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>实际上是将y赋给x，再检查x是否为0。</p><p>如果真的是这样预期，那么应该改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>((x = y) != <span class="number">0</span>)</span><br><span class="line">         <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h2 id="2-amp-和-不同于-amp-amp-和"><a href="#2-amp-和-不同于-amp-amp-和" class="headerlink" title="2. &amp;和| 不同于 &amp;&amp; 和 ||"></a>2. &amp;和| 不同于 &amp;&amp; 和 ||</h2><h2 id="3-词法分析中的“贪心法”"><a href="#3-词法分析中的“贪心法”" class="headerlink" title="3. 词法分析中的“贪心法”"></a>3. 词法分析中的“贪心法”</h2><p>编译器将程序分解成符号的方法是：从左到有一个一个字符的读入，如果该字符可能组成一个符号，那么再读入下一个字符，判断已经读入的两个字符组成的字符床是否可能是一个符号的组成部分；如果可能，继续读入下一个字符，重复上述判断，直到读入的字符组成的字符串已不再可能组成一个有意义的符号。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y = x<span class="comment">/*p; 会被解析为：/* 注释符号</span></span><br></pre></td></tr></table></figure><h2 id="4-整型常量"><a href="#4-整型常量" class="headerlink" title="4. 整型常量"></a>4. 整型常量</h2><p>010(八进制数) 不同于 10（十进制）。</p><h2 id="5-字符与字符串"><a href="#5-字符与字符串" class="headerlink" title="5. 字符与字符串"></a>5. 字符与字符串</h2><p>首先是单引号与双引号的区别：</p><ul><li>用单引号括起来的一个字符表示一个整数（ASCII码），而双引号括起来表示一个指针。</li></ul><h1 id="第二章-语法“陷阱”"><a href="#第二章-语法“陷阱”" class="headerlink" title="第二章 语法“陷阱”"></a>第二章 语法“陷阱”</h1><h2 id="1-理解函数声明"><a href="#1-理解函数声明" class="headerlink" title="1. 理解函数声明"></a>1. 理解函数声明</h2><p>弄懂<code>(*(void(*)())0)();</code>  //首地址为0的函数。</p><p><code>float (*h)()</code>: h是一个指向返回值为浮点型的函数的指针</p><p>所以，<code>(float (*)())</code> 表示一个“指向返回值为浮点型的函数的指针”的类型转换符。</p><p><code>fp()</code>: 是<code>(*fp)( )</code>的简写。</p><p><code>*fp()</code>: 是 <code>*( (*fp) ( ) )</code>的简写。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">( *<span class="number">0</span> )( );</span><br></pre></td></tr></table></figure><p>虽然上式编译器不认，但可以把0转换为指向“返回值为void的”函数的指针，所以0可变为： <code>( void(*) ( ) ) 0</code> ，代入<code>(*0)()</code>，得到：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(*( <span class="built_in"><span class="keyword">void</span></span>(*) ( ) ) <span class="number">0</span>) ( )</span><br></pre></td></tr></table></figure><p>该式子用等价于：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span>  <span class="params">( *func )</span> <span class="params">( )</span></span>;</span><br><span class="line">( *( func ) <span class="number">0</span> ) ( );</span><br></pre></td></tr></table></figure><p>类似的，signal.h中对signal函数的声明：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*<span class="keyword">sighandler_t</span>)</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">sighandler_t</span> <span class="title">signal</span><span class="params">(<span class="keyword">int</span> signum, <span class="keyword">sighandler_t</span> handler)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="2-运算符优先级的问题"><a href="#2-运算符优先级的问题" class="headerlink" title="2. 运算符优先级的问题"></a>2. 运算符优先级的问题</h2><table><thead><tr><th>优先级</th><th>运算符</th><th>名称或含义</th><th>使用形式</th><th>结合方向</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>[]</td><td>数组下标</td><td>数组名[常量表达式]</td><td>左到右</td><td></td></tr><tr><td>1</td><td>()</td><td>圆括号</td><td>(表达式) 函数名(形参表)</td><td>左到右</td><td></td></tr><tr><td>1</td><td>.</td><td>成员选择（对象）</td><td>对象.成员名</td><td>左到右</td><td></td></tr><tr><td>1</td><td>-&gt;</td><td>成员选择（指针）</td><td>对象指针-&gt;成员名</td><td>左到右</td><td></td></tr><tr><td>2</td><td>-</td><td>负号运算符</td><td>-表达式</td><td>右到左</td><td>单目运算符</td></tr><tr><td>2</td><td>(类型)</td><td>强制类型转换</td><td>(数据类型)表达式</td><td>右到左</td><td></td></tr><tr><td>2</td><td>++</td><td>自增运算符</td><td>++变量名 变量名++</td><td>右到左</td><td>单目运算符</td></tr><tr><td>2</td><td>–</td><td>自减运算符</td><td>–变量名 变量名–</td><td>右到左</td><td>单目运算符</td></tr><tr><td>2</td><td>*</td><td>取值运算符</td><td>*指针变量</td><td>右到左</td><td>单目运算符</td></tr><tr><td>2</td><td>&amp;</td><td>取地址运算符</td><td>&amp;变量名</td><td>右到左</td><td>单目运算符</td></tr><tr><td>2</td><td>!</td><td>逻辑非运算符</td><td>!表达式</td><td>右到左</td><td>单目运算符</td></tr><tr><td>2</td><td>~</td><td>按位取反运算符</td><td>~表达式</td><td>右到左</td><td>单目运算符</td></tr><tr><td>2</td><td>sizeof</td><td>长度运算符</td><td>sizeof(表达式)</td><td>右到左</td><td></td></tr><tr><td>3</td><td>/</td><td>除</td><td>表达式 / 表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>3</td><td>*</td><td>乘</td><td>表达式*表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>3</td><td>%</td><td>余数（取模）</td><td>整型表达式%整型表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>4</td><td>+</td><td>加</td><td>表达式+表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>4</td><td>-</td><td>减</td><td>表达式-表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>5</td><td>&lt;&lt;</td><td>左移</td><td>变量&lt;&lt;表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>5</td><td>&gt;&gt;</td><td>右移</td><td>变量&gt;&gt;表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>6</td><td>&gt;</td><td>大于</td><td>表达式&gt;表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>6</td><td>&gt;=</td><td>大于等于</td><td>表达式&gt;=表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>6</td><td>&lt;</td><td>小于</td><td>表达式&lt;表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>6</td><td>&lt;=</td><td>小于等于</td><td>表达式&lt;=表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>7</td><td>==</td><td>等于</td><td>表达式==表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>7</td><td>!=</td><td>不等于</td><td>表达式!= 表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>8</td><td>&amp;</td><td>按位与</td><td>表达式&amp;表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>9</td><td>^</td><td>按位异或</td><td>表达式^表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>10</td><td>|</td><td>按位或</td><td>表达式|表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>11</td><td>&amp;&amp;</td><td>逻辑与</td><td>表达式&amp;&amp;表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>12</td><td>||</td><td>逻辑或</td><td>表达式||表达式</td><td>左到右</td><td>双目运算符</td></tr><tr><td>13</td><td>?:</td><td>条件运算符</td><td>表达式1? 表达式2: 表达式3</td><td>右到左</td><td>三目运算符</td></tr><tr><td>14</td><td>=</td><td>赋值运算符</td><td>变量=表达式</td><td>右到左</td><td></td></tr><tr><td>14</td><td>/=</td><td>除后赋值</td><td>变量/=表达式</td><td>右到左</td><td></td></tr><tr><td>14</td><td>*=</td><td>乘后赋值</td><td>变量*=表达式</td><td>右到左</td><td></td></tr><tr><td>14</td><td>%=</td><td>取模后赋值</td><td>变量%=表达式</td><td>右到左</td><td></td></tr><tr><td>14</td><td>+=</td><td>加后赋值</td><td>变量+=表达式</td><td>右到左</td><td></td></tr><tr><td>14</td><td>-=</td><td>减后赋值</td><td>变量-=表达式</td><td>右到左</td><td></td></tr><tr><td>14</td><td>&lt;&lt;=</td><td>左移后赋值</td><td>变量&lt;&lt;=表达式</td><td>右到左</td><td></td></tr><tr><td>14</td><td>&gt;&gt;=</td><td>右移后赋值</td><td>变量&gt;&gt;=表达式</td><td>右到左</td><td></td></tr><tr><td>14</td><td>&amp;=</td><td>按位与后赋值</td><td>变量&amp;=表达式</td><td>右到左</td><td></td></tr><tr><td>14</td><td>^=</td><td>按位异或后赋值</td><td>变量^=表达式</td><td>右到左</td><td></td></tr><tr><td>14</td><td>|=</td><td>按位或后赋值</td><td>变量|=表达式</td><td>右到左</td><td></td></tr><tr><td>15</td><td>,</td><td>逗号运算符</td><td>表达式,表达式,…</td><td>左到右</td><td></td></tr></tbody></table><h2 id="3-其他"><a href="#3-其他" class="headerlink" title="3. 其他"></a>3. 其他</h2><p>主要是别多写分号，switch别忘了break，别写空else分支。</p><h1 id="第三章-语义“陷阱”"><a href="#第三章-语义“陷阱”" class="headerlink" title="第三章 语义“陷阱”"></a>第三章 语义“陷阱”</h1><h2 id="1-指针与数组"><a href="#1-指针与数组" class="headerlink" title="1. 指针与数组"></a>1. 指针与数组</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Int p[<span class="number">4</span>];</span><br><span class="line">    Double x;</span><br><span class="line">&#125;b[<span class="number">17</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> calendar[<span class="number">12</span>][<span class="number">31</span>];</span><br><span class="line"><span class="built_in"><span class="keyword">int</span></span> (*p)[<span class="number">31</span>];</span><br><span class="line"><span class="built_in"><span class="keyword">sizeof</span></span>(calendar):<span class="number">12</span>*<span class="number">31</span>=<span class="number">372</span></span><br><span class="line"></span><br><span class="line">calendar[<span class="number">0</span>] <span class="comment">// 指向该一维数组，对应*p</span></span><br><span class="line">calendar[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">......</span><br><span class="line">calendar[<span class="number">0</span>][<span class="number">30</span>]</span><br><span class="line">calendar[<span class="number">1</span>] <span class="comment">// 指向该一维数组，对应*(p+1)</span></span><br><span class="line">calendar[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">......</span><br><span class="line">calendar[<span class="number">1</span>][<span class="number">30</span>]</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">calendar[<span class="number">11</span>] <span class="comment">// 指向该一维数组，对应*(p+11)</span></span><br><span class="line">calendar[<span class="number">11</span>][<span class="number">0</span>]</span><br><span class="line">......</span><br><span class="line">calendar[<span class="number">11</span>][<span class="number">30</span>]</span><br></pre></td></tr></table></figure><h2 id="2-内存分配"><a href="#2-内存分配" class="headerlink" title="2. 内存分配"></a>2. 内存分配</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">free</span>(r);</span><br></pre></td></tr></table></figure><p>用malloc显式分配的空间，不会再退出本函数后自动释放掉，而是会等程序员显式释放后才消失。</p><p>注意检查，malloc分配的内存可能失败。</p><p>C语言中会自动地将作为函数参数的数组声明转换为对应的指针声明，如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strlen</span><span class="params">(<span class="keyword">char</span> s[ ])</span></span>&#123; &#125;等价于<span class="function"><span class="keyword">int</span> <span class="title">strlen</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123; &#125;</span><br><span class="line">但在其他情形下不会自动转换，也就是说不等价，如：</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span> hello[ ];和<span class="keyword">extern</span> <span class="keyword">char</span> *hello;完全不同。</span><br></pre></td></tr></table></figure><p><strong>边界计算</strong><br>自己实现一个memcpy函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">memcpy</span><span class="params">(<span class="keyword">char</span> *dest, <span class="keyword">const</span> <span class="keyword">char</span> *source, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>( --k &gt;= <span class="number">0</span> )</span><br><span class="line">        *dest++ = *source++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点是：操作时一定要知道操作数据的长度。</p><p><strong>整数溢出</strong></p><ul><li>两个有符号整数相加会发生溢出。</li><li>两个无符号整数相加不会发生溢出。</li><li>一个有符号和一个无符号整数相加，因为有符号被自动转换成无符号，所以也不会溢出。</li></ul><h1 id="第四章-连接"><a href="#第四章-连接" class="headerlink" title="第四章 连接"></a>第四章 连接</h1><p>编译器一般每次只处理一个文件。编译器的责任是把C源程序翻译成对连接器有意义的形式。</p><p>许多系统中的连接器是独立于C语言实现的，因此如果链接时候错误原因是与C语言相关的，连接器无法判断错误原因。但连接器能够理解机器语言和内存布局。</p><p>典型的连接器把由汇编器或编译器生成的若干个目标模块，整合成一个被称为载入模块或可执行文件的实体。</p><p>连接器通常把目标模块看成是由一组外部对象组成的。每个外部对象代表着机器内存中的某个部分，并通过一个外部名称来识别。因此，程序中的每个函数和每个外部变量，如果没有被声明为static，就都是一个外部对象。static的不会与其它源程序文件中的同名函数或同名变量发生冲突。对于非satatic的函数或变量的名称冲突的解决办法将在后面讨论。</p><p><strong>除了外部对象外，目标模块中还可能包括了对其他模块中的外部对象的引用，当连接器读入一个目标模块时，它必须解析出这些引用，并作出标记说明这些外部对象不再是未定义的。</strong></p><p>连接器的输入是一组目标模块文件和库文件。输出是一个载入模块。</p><p><strong>避免外部变量的函数的冲突和不一致等问题的办法：</strong></p><blockquote><p><code>每个外部对象只在一个头文件里声明，需要用到该外部对象的所有模块都应该包括这个头文件。</code></p><p><code>定义该外部对象的模块也应该包括这个头文件。</code></p></blockquote><h1 id="第五章-库函数"><a href="#第五章-库函数" class="headerlink" title="第五章 库函数"></a>第五章 库函数</h1><p>没什么好说的，就是apue的一些函数而已。</p><h1 id="第六章-预处理器"><a href="#第六章-预处理器" class="headerlink" title="第六章 预处理器"></a>第六章 预处理器</h1><p>宏定义：主要是理解<strong>宏不是函数，而是直接替换</strong>。</p><ol><li>不能忽视宏定义中的空格：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> f (x) ( (x)-1 )：因为f后面多了一个空格，所以f(x)代表(x) ( (x)-1 )</span></span><br></pre></td></tr></table></figure></li><li>宏并不是函数，所以注意那些括号：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> abs(x) ( ( (x) &gt;= 0)?(x):-(x) )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a,b) ( (a)&gt;(b)?(a):(b) )</span></span><br></pre></td></tr></table></figure></li><li>宏并不是语句：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> assert(e) <span class="meta-keyword">if</span> (!e) assert_error(__FILE__, __LINE__)</span></span><br></pre></td></tr></table></figure></li><li>宏不是类型定义</li></ol><ul><li>错误用法：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int_8_ int*</span></span><br><span class="line">        int_8 a,b; <span class="comment">//则a是指针，b是int型</span></span><br></pre></td></tr></table></figure></li><li>正确用法：应该用typedef<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> * int_8_;</span><br></pre></td></tr></table></figure></li></ul><h1 id="第七章-可移植性缺陷"><a href="#第七章-可移植性缺陷" class="headerlink" title="第七章 可移植性缺陷"></a>第七章 可移植性缺陷</h1><p>主要是：</p><ol><li>应对C语言标准的变更；</li><li>标识符名称的限制；</li><li>整数的大小；</li><li>字符是有符号整数还是无符号整数；</li><li>移位运算符；<ol><li>在向右移位时，空出的位是由0填充还是1，还是由符号位的副本填充？如果被移位对象是无符号数，那么由0填充；如果是有符号数，那么是0或符号位的副本。</li><li>移位操作的位数允许的取值范围是什么？如果被移位对象的长度是n位，那么移位计数必须大于或等于0，而严格小于n。</li></ol></li><li>移植性需考虑的地方：<ol><li>机器的字符表不同。</li><li>有的机器是one’s complement，有的机器是two’s complement的。基于2的补码的计算机，所允许表示的附属取值范围要大于正数取值范围，所以有时取负值的运算会导致溢出。</li><li>各机器对取模运算的定义不同。</li></ol></li></ol><h1 id="第八章-惯用与答案"><a href="#第八章-惯用与答案" class="headerlink" title="第八章 惯用与答案"></a>第八章 惯用与答案</h1><p>将惯用的<code>c == &#39;\t&#39;</code>写作<code>&#39;\t&#39; == c</code>。</p><p>一旦写错成=号，编译器就能检查出来。</p><hr><p>欢迎关注我的微信公众号【MySQL数据库技术】。</p><img src="https://dbkernel-1306518848.cos.ap-beijing.myqcloud.com/wechat/my-wechat-official-account.png" width="400" height="400" alt="MySQL数据库技术" align="left"/><table><thead><tr><th>标题</th><th>网址</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://dbkernel.github.io/">https://dbkernel.github.io</a></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/people/dbkernel/posts">https://www.zhihu.com/people/dbkernel/posts</a></td></tr><tr><td>思否（SegmentFault）</td><td><a href="https://segmentfault.com/u/dbkernel">https://segmentfault.com/u/dbkernel</a></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/user/5e9d3ed251882538083fed1f/posts">https://juejin.im/user/5e9d3ed251882538083fed1f/posts</a></td></tr><tr><td>开源中国（oschina）</td><td><a href="https://my.oschina.net/dbkernel">https://my.oschina.net/dbkernel</a></td></tr><tr><td>博客园（cnblogs）</td><td><a href="https://www.cnblogs.com/dbkernel">https://www.cnblogs.com/dbkernel</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;



&lt;h1 id=&quot;第一章-词法“陷阱”&quot;&gt;&lt;a href=&quot;#第一章-词法“陷阱”&quot; class=&quot;headerlink&quot; title=&quot;第一章 词法“陷阱”&quot;&gt;&lt;/a&gt;第一章 词法“陷阱”&lt;/h1&gt;&lt;h2 id=&quot;1-不同于&quot;</summary>
      
    
    
    
    <category term="C语言" scheme="http://dbkernel.github.io/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C语言" scheme="http://dbkernel.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
</feed>
